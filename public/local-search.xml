<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>澳门玩具踩点-搬</title>
    <link href="/2021/12/31/%E9%9A%8F%E7%AC%94/%E6%BE%B3%E9%97%A8%E7%8E%A9%E5%85%B7%E8%B8%A9%E7%82%B9-%E6%90%AC/"/>
    <url>/2021/12/31/%E9%9A%8F%E7%AC%94/%E6%BE%B3%E9%97%A8%E7%8E%A9%E5%85%B7%E8%B8%A9%E7%82%B9-%E6%90%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h1><p>因为有去澳门玩的打算，恰好看到 <strong><a href="https://weibo.com/u/1918541453?refer_flag=0000015010_&from=feed&loc=nickname">小白哥乌拉诺斯</a></strong> 的澳门玩具店踩点记录，特此搬运记录一下。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>澳门玩具店主要集中在两个区域，第一个是贾伯乐提督街附近，第二就是大三巴牌坊附近。<br>如图一所示，贾伯乐提督街从叶挺故居开始，有新龙玩具，玩具城，海贼王道，恒利，东京都，一雄，咏濠等店，其中玩具城是比较大的，新龙的中古品比较多，一雄有漫画书，边上还新开了家一雄扭蛋。沿着提督街跟着导航吃吃逛逛两公里左右，就能到大三巴牌坊，牌坊的扶梯下面就有澳门最值得逛的玩具店，玩具王国，这家店从我十多年前去就有了，而且一度是我比较下来乐高最便宜的店，店的招牌最近也换了新的，可以看到还是玩具总动员的风格。在牌坊附近还有KZ，wetoys等几家店，详见图十。这些店用GoogleMap都可以找到，澳门玩具新品价格和淘宝闲鱼相比互有高低，但是到货快，另外中古商品价格有些还不错，大家去澳门的时候可以去看看，另外微信支付宝都可以用，有些店是实时汇率，MOP目前汇率是0.795，有的店会加一点手续费（玩具王国100澳币收1元支付宝手续费）。</p><p><img src="https://img.shuaxindiary.cn/1640951911971.png"></p><p><img src="https://img.shuaxindiary.cn/1640951960285.png"></p><p><img src="https://img.shuaxindiary.cn/1640952000458.png"></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iterm2-配置</title>
    <link href="/2021/12/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/iterm2-%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/12/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/iterm2-%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="记录iterm2配置"><a href="#记录iterm2配置" class="headerlink" title="记录iterm2配置"></a>记录iterm2配置</h1><p>记录一下自己常用的 <strong>iterm</strong> 终端的配置，效果图如下，主要分为两部分：针对外观和功能扩展</p><p><img src="https://img.shuaxindiary.cn/iterm%E9%85%8D%E7%BD%AE.png" alt="preview"></p><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><ul><li>设置路径：iterm -&gt; preference -&gt; Appperence</li><li>Theme：minimal</li><li>status bar localtion：bottom</li></ul><h4 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h4><ul><li>下载地址：<a href="https://draculatheme.com/iterm">https://draculatheme.com/iterm</a></li><li>设置：Preferences -&gt; Profiles -&gt; Color -&gt; Color Presets-Import</li></ul><h4 id="状态栏展示"><a href="#状态栏展示" class="headerlink" title="状态栏展示"></a>状态栏展示</h4><ul><li>设置路径：iterm -&gt; preference -&gt; profile -&gt; session</li><li>勾上status bar enabled</li><li>点击旁边的 configure status bar</li><li>根据自己需要选择</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h4><ul><li>下载安装文件：<a href="https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh</a></li><li>建议访问copy内容到本地文件然后 sh运行直接安装</li></ul><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>oh-my-zsh 的插件和主题都有单独的目录：</p><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入</span><br>cd $ZSH_CUSTOM<br><br><span class="hljs-meta">#</span><span class="bash"> 当前目录 下会有一个theme和plugin分别存放oh-my-zsh的主题和插件</span><br>ls<br><span class="hljs-meta">#</span><span class="bash"> theme plugins</span><br><br></code></pre></div></td></tr></table></figure><p>下载插件到plugin目录后，编辑 .zshrc 文件，找到plugin，里面填自己下的插件，然后 source 一下 .zshrc 即可</p><h5 id="输入建议"><a href="#输入建议" class="headerlink" title="输入建议"></a>输入建议</h5><ul><li>插件地址：<a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a></li></ul><h5 id="git扩展"><a href="#git扩展" class="headerlink" title="git扩展"></a>git扩展</h5><ul><li>插件地址：<a href="https://github.com/tj/git-extras">https://github.com/tj/git-extras</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>zsh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于前端下载</title>
    <link href="/2021/03/02/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD/"/>
    <url>/2021/03/02/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h1><p>记录如何在前端来下载文件的几种解决方案</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>关于前端下载文件，有两种方案：</p><ul><li>1.不发请求：使用a标签设置 <code>download</code> 后去访问下载url，浏览器会自动开始下载</li><li>2.发请求，然后拿到blob数据，创建一个blob的url，通过a去访问该url，设置 <code>download</code> 下载</li></ul><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><p>以下示范的后端代码</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">router.get(<span class="hljs-string">&#x27;/dolFile&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> ops = &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;image/png&#x27;</span><br>  &#125;<br>  res<br>    .status(<span class="hljs-number">200</span>)<br>    .sendFile(path.join(__dirname, <span class="hljs-string">&#x27;p-1.jpg&#x27;</span>))<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="不发送请求"><a href="#不发送请求" class="headerlink" title="不发送请求"></a>不发送请求</h3><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>下载<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-comment">// 获取下载按钮</span></span><br><span class="javascript">  <span class="hljs-keyword">const</span> dolBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#btn&quot;</span>)</span><br><span class="javascript">  <span class="hljs-comment">// 下载函数</span></span><br><span class="javascript">  <span class="hljs-keyword">const</span> dolFile = <span class="hljs-function">(<span class="hljs-params">url</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 创建a标签</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-comment">// 为a标签设置请求地址和下载属性</span></span><br><span class="javascript">    a.setAttribute(<span class="hljs-string">&#x27;href&#x27;</span>, url)</span><br><span class="javascript">    <span class="hljs-comment">// 该参数提供一个值 为该文件保存的默认名</span></span><br><span class="javascript">    a.setAttribute(<span class="hljs-string">&#x27;download&#x27;</span>, <span class="hljs-string">&#x27;图片&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-comment">// 添加到页面</span></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.body.appendChild(a)</span><br><span class="javascript">    <span class="hljs-comment">// 点击该a标签进行下载</span></span><br>    a.click()<br><span class="javascript">    <span class="hljs-comment">// 最后要卸载该dom</span></span><br>    a.remove()<br>  &#125;<br><span class="javascript">  dolBtn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    dolFile(<span class="hljs-string">&#x27;http://localhost:3000/api/dolFile&#x27;</span>)</span><br>  &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>下载<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-comment">// 获取下载按钮</span></span><br><span class="javascript">  <span class="hljs-keyword">const</span> dolBtn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#btn&quot;</span>)</span><br><span class="javascript">  <span class="hljs-comment">// 下载函数</span></span><br><span class="javascript">  <span class="hljs-keyword">const</span> dolFile = <span class="hljs-function">(<span class="hljs-params">url</span>) =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">&#x27;http://localhost:3000/api/dolFile&#x27;</span>)</span><br><span class="javascript">        .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 直接返回一个blob即可</span></span><br><span class="javascript">          <span class="hljs-keyword">return</span> res.blob()</span><br>        &#125;)<br><span class="javascript">      <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);</span><br><span class="javascript">      <span class="hljs-comment">//文件的名称为时间戳加文件名后缀</span></span><br><span class="javascript">      a.download = <span class="hljs-string">`<span class="hljs-subst">$&#123;+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()&#125;</span>.jpg`</span>;</span><br><span class="javascript">      <span class="hljs-comment">// 创建一个blob链接 理解成类似base64那样的</span></span><br>      a.href = URL.createObjectURL(data);<br><span class="javascript">      <span class="hljs-built_in">document</span>.body.appendChild(a);</span><br>      a.click();<br><span class="javascript">      <span class="hljs-built_in">document</span>.body.removeChild(a);</span><br>  &#125;<br><span class="javascript">  dolBtn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    dolFile(<span class="hljs-string">&#x27;http://localhost:3000/api/dolFile&#x27;</span>)</span><br>  &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h3 id="关于Blob"><a href="#关于Blob" class="headerlink" title="关于Blob"></a>关于Blob</h3><ul><li>是web提供的一个对象，表示一个不可变、原始数据的类文件对象。数据按二进制或文本读存</li><li>一般包含2个属性：<code>size</code> ：文件大小， <code>type</code>：文件类型</li><li>使用场景：大文件分割上传、上述场景一样作为一个url去下载文件</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob">MDN-Blob</a></li><li><a href="https://xie.infoq.cn/article/9974df9a229e5c28679c77773">一文学会Blob</a></li></ul><h3 id="URL对象"><a href="#URL对象" class="headerlink" title="URL对象"></a>URL对象</h3><ul><li>用于解析，构造，规范化和编码</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL">URL</a></li></ul><h3 id="关于fetch"><a href="#关于fetch" class="headerlink" title="关于fetch"></a>关于fetch</h3><ul><li>因为一直习惯了 <code>axios</code> 不太理解为什么fetch，一直需要第一个then，接着这个时候打印了第一个then的callback的对象看了下，如下：<br><img src="https://img.shuaxindiary.cn/fetch_res.png" alt="fetch_res"><br>这个对象其实包含了本次请求响应的各种信息，响应头、url、状态等等；然后默认提供了很多对数据的处理形式，比如：json、text、blob、formData等。有点自带拦截器一样的感觉，默认做了一层封装。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端下载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ios-date构造函数</title>
    <link href="/2021/02/11/%E6%97%A5%E5%B8%B8/ios-date%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <url>/2021/02/11/%E6%97%A5%E5%B8%B8/ios-date%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>在apple的js环境中，Date函数的一个坑</p><blockquote><p><strong>V8</strong></p><ul><li>以下两种格式都可以</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> one=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2020-1-1&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(one) <span class="hljs-comment">// Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)</span><br><span class="hljs-keyword">let</span> two=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2020/1/1&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(d) <span class="hljs-comment">// Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)</span><br></code></pre></div></td></tr></table></figure><blockquote><p><strong>Apple</strong></p><ul><li>只能使用 xxxx/xx/xx这样的格式传递</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> one=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2020-1-1&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(d) <span class="hljs-comment">// Invalid value</span><br><span class="hljs-keyword">let</span> two=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2020/1/1&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(d) <span class="hljs-comment">// Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次跨平台开发</title>
    <link href="/2021/02/10/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    <url>/2021/02/10/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>封面图作者：<a href="https://weibo.com/u/5522543961">镜子222333</a></p></blockquote><p>很早就听过<code>electron</code>和<code>reactnaive</code>，可以让前端的同学来使用他们熟悉的web前端技术栈来分别开发pc客户端和移动客户端；再后来小程序火了起来后，也有不少团队开始做起了多端共用一套代码这样的理想化框架，比如滴滴的<code>chameleon</code>和京东的<code>Taro</code>，但是对于这些新’玩具’一直是停留在知道层面，并没有接触，趁着大四最后的一个假期， 想着接触一下；然后发现了一款叫<code>scriptable</code>的ios/macos上的的app；可以用js来实现对该应用在ios桌面组件的自定义；有点类似小程序那样，微信封装一些底层设备的操作暴露给上层，然后由我们来利用这些api来做二次开发，所以最近以这个为头，尝试了第一次的’跨端’开发，并记录一下第一次尝试。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul><li>首先需要一台升级到<code>ios14</code>的<code>ios||macos||ipados</code>的设备</li><li>在设备上下载<code>scriptable</code></li><li>打开软件即可开始书写自己的脚本啦</li></ul><h1 id="关于scriptable"><a href="#关于scriptable" class="headerlink" title="关于scriptable"></a>关于<a href="https://scriptable.app/">scriptable</a></h1><ul><li><a href="https://docs.scriptable.app/">文档</a></li></ul><blockquote><p><strong>软件说明</strong></p><ul><li>这个软件做的事就是封装了ios的底层一些api</li><li>然后我们用软件提供的api来定制该软件创建的组件所显示的内容</li><li>需要注意的是使用的是apple自己的js引擎，但支持ES6</li><li>其次因为只是内嵌了js引擎，所有没有浏览器的那些api</li></ul></blockquote><blockquote><p><strong>开发</strong></p><ul><li>打开app，点击右上角加号创建一个新脚本</li><li>在创建的脚本文件中，直接开始书写即可</li></ul></blockquote><blockquote><p><strong>查看效果</strong></p><ul><li>在桌面添加该软件的小组件</li><li>编辑该小组件，在script中选择我们的脚本</li><li>回到桌面就可以查看效果了</li></ul></blockquote><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><ul><li>写一个Hello World<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个小组件</span><br><span class="hljs-keyword">let</span> w=<span class="hljs-keyword">new</span> ListWidget()<br><span class="hljs-comment">// 设置组件背景颜色</span><br>w.backgroundColor=<span class="hljs-keyword">new</span> Color(<span class="hljs-string">&quot;#fff&quot;</span>)<br><span class="hljs-comment">// 添加组件内显示的文本</span><br><span class="hljs-keyword">let</span> textNode=w.addText(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><span class="hljs-comment">// 在组件内部居中显示文本</span><br>textNode.centerAlignText()<br><span class="hljs-comment">// 设置文本的颜色</span><br>textNode.textColor=<span class="hljs-keyword">new</span> Color(<span class="hljs-string">&quot;#000&quot;</span>)<br><span class="hljs-comment">// 渲染组件</span><br>Script.setWidget(w)<br><span class="hljs-comment">// 通知系统脚本执行完成</span><br>Script.complete()<br></code></pre></div></td></tr></table></figure></li><li><img src="https://img.shuaxindiary.cn/QQ%E5%9B%BE%E7%89%8720210210104734.jpg"></li></ul><h1 id="关于pc开发小组件"><a href="#关于pc开发小组件" class="headerlink" title="关于pc开发小组件"></a>关于pc开发小组件</h1><ul><li>软件本身的编辑环境和调试其实蛮方便，但是因为手机和pad的打字输入体验不行，所以如果没有mac的话，想在电脑开发就需要借助一些其他手段</li><li>安利一个社区的方案：<a href="https://github.com/im3x/Scriptables">im3x-dev</a></li><li>因为文档内部代码封装的api写的不是非常友好，写一点开发中的食用指南</li></ul><h2 id="食用指南"><a href="#食用指南" class="headerlink" title="食用指南"></a><strong>食用指南</strong></h2><ul><li>开发文件：<code>「源码」小组件示例.js</code>内部是一个Widget类，只需要在他提供的class内部编写对应的逻辑函数即可</li><li>文件默认本身会包含几个函数，以及提供一些函数，可以做一些操作</li><li><ul><li>constructor：初始化组件的一些基本信息，以及注册脚本在软件和用户交互的一些设置</li></ul></li><li><ul><li>render：判断组件大小渲染不同的组件</li></ul></li><li><ul><li>renderSmall：小尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据</li></ul></li><li><ul><li>renderMedium：中尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据</li></ul></li><li><ul><li>renderLarge：大尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据</li></ul></li><li><ul><li>getData：请求数据的函数</li></ul></li><li>定一些自己的函数：写在class里面，然后在其他地方通过<code>this.xxx</code>调用即可</li><li>注册一些让用户点击的然后进行一些交互的事件：<code>this.registerAction(&#39;显示文本&#39;,对应操作的函数)</code></li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ul><li>开发过程中有遇到一个小坑：</li><li><ul><li>在apple的js环境中，<code>new Date()</code>时，如果要传入日期，其格式必须为<code>xxxx/xx/xx</code>，而不是V8那样的<code>xxxx-xx-xx</code></li></ul></li><li>附上一个自己写的计算天数的脚本<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Variables used by Scriptable.</span><br><span class="hljs-comment">// These must be at the very top of the file. Do not edit.</span><br><span class="hljs-comment">// icon-color: orange; icon-glyph: comments;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// iOS 桌面组件脚本 @「小件件」</span><br><span class="hljs-comment">// 开发说明：请从 Widget 类开始编写，注释请勿修改</span><br><span class="hljs-comment">// https://x.im3x.cn</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">// 添加require，是为了vscode中可以正确引入包，以获得自动补全等功能</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">require</span> === <span class="hljs-string">&#x27;undefined&#x27;</span>) <span class="hljs-built_in">require</span> = importModule<br><br><br><span class="hljs-keyword">const</span> &#123; Base &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./「小件件」开发环境&quot;</span>)<br><span class="hljs-comment">// const &#123; DmYY: Base &#125; = require(&quot;./DmYY.js&quot;)</span><br><br><br><br><span class="hljs-comment">// @组件代码开始</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Widget</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 传递给组件的参数，可以是桌面 Parameter 数据，也可以是外部如 URLScheme 等传递的数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> </span>arg 自定义参数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">constructor</span>(arg) &#123;<br>    <span class="hljs-built_in">super</span>(arg)<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;示例小组件&#x27;</span><br>    <span class="hljs-built_in">this</span>.desc = <span class="hljs-string">&#x27;「小件件」—— 原创精美实用小组件&#x27;</span><br>    <span class="hljs-comment">// 注册操作菜单</span><br>    <span class="hljs-keyword">if</span> (config.runsInApp) &#123;<br>      <span class="hljs-built_in">this</span>.registerAction(<span class="hljs-string">&quot;设置文本&quot;</span>, <span class="hljs-built_in">this</span>.actionSetText)<br>      <span class="hljs-built_in">this</span>.registerAction(<span class="hljs-string">&quot;设置时间&quot;</span>, <span class="hljs-built_in">this</span>.actionSetDate)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 设置文本</span><br>  <span class="hljs-keyword">async</span> actionSetText() &#123;<br>    <span class="hljs-keyword">let</span> getText = <span class="hljs-keyword">new</span> Alert()<br>    getText.title = <span class="hljs-string">&quot;设置组件显示文本&quot;</span><br>    getText.message = <span class="hljs-string">&quot;请输入组件要显示的文本内容&quot;</span><br>    getText.addTextField(<span class="hljs-string">&quot;输入显示文本&quot;</span>, <span class="hljs-built_in">this</span>.settings[<span class="hljs-string">&#x27;text&#x27;</span>])<br>    <span class="hljs-comment">// 增加按钮</span><br>    getText.addAction(<span class="hljs-string">&quot;确定&quot;</span>)<br>    getText.addCancelAction(<span class="hljs-string">&quot;取消&quot;</span>)<br>    <span class="hljs-keyword">await</span> getText.presentAlert()<br>    <span class="hljs-keyword">let</span> inputText = <span class="hljs-keyword">await</span> getText.textFieldValue(<span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">this</span>.settings[<span class="hljs-string">&#x27;text&#x27;</span>] = inputText<br>    <span class="hljs-comment">// 保存设置</span><br>    <span class="hljs-built_in">this</span>.saveSettings()<br>  &#125;<br>  <span class="hljs-comment">// 设置时间</span><br>  <span class="hljs-keyword">async</span> actionSetDate() &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;设置时间&quot;</span>)<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">let</span> dp = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> DatePicker()<br>      <span class="hljs-keyword">let</span> selectDate = <span class="hljs-keyword">await</span> dp.pickDate()<br>      <span class="hljs-comment">// ios只能解析 xxxx/xx/xx格式的日期</span><br>      <span class="hljs-keyword">let</span> day = <span class="hljs-string">`<span class="hljs-subst">$&#123;selectDate.getFullYear()&#125;</span>/<span class="hljs-subst">$&#123;selectDate.getMonth() + <span class="hljs-number">1</span>&#125;</span>/<span class="hljs-subst">$&#123;selectDate.getDate()&#125;</span>`</span><br>      <span class="hljs-built_in">this</span>.settings[<span class="hljs-string">&#x27;day&#x27;</span>] = day<br>      <span class="hljs-built_in">this</span>.saveSettings()<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;请选择时间&quot;</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 渲染函数，函数名固定</span><br><span class="hljs-comment">   * 可以根据 this.widgetFamily 来判断小组件尺寸，以返回不同大小的内容</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> render() &#123;<br>    <span class="hljs-comment">// 请求接口</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.getData()<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">this</span>.widgetFamily) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;large&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.renderLarge(data)<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;medium&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.renderMedium(data)<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.renderSmall(data)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 渲染背景颜色</span><br>  renderBackColor(w) &#123;<br>    <span class="hljs-keyword">const</span> gradient = <span class="hljs-keyword">new</span> LinearGradient();<br>    gradient.locations = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];<br>    gradient.colors = [<span class="hljs-keyword">new</span> Color(<span class="hljs-string">&quot;#eec3ee&quot;</span>, <span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> Color(<span class="hljs-string">&quot;#b2c0ed&quot;</span>, <span class="hljs-number">1</span>)];<br>    w.backgroundGradient = gradient;<br>  &#125;<br>  <span class="hljs-comment">// 渲染字体</span><br>  renderFontStyle(t, fontSize, fontColor, position) &#123;<br>    <span class="hljs-keyword">switch</span> (position) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;center&#x27;</span>:<br>        t.centerAlignText()<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;right&#x27;</span>:<br>        t.rightAlignText()<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;left&#x27;</span>:<br>        t.leftAlignText()<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    t.font = Font.lightSystemFont(fontSize)<br>    t.textColor = <span class="hljs-keyword">new</span> Color(fontColor, <span class="hljs-number">1</span>)<br>  &#125;<br>  genTime() &#123;<br>    <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">//1. js获取当前时间</span><br>    <span class="hljs-keyword">var</span> min = date.getMinutes(); <span class="hljs-comment">//2. 获取当前分钟</span><br>    date.setMinutes(min + <span class="hljs-number">1</span>); <span class="hljs-comment">//3. 设置当前时间+10分钟：把当前分钟数+10后的值重新设置为date对象的分钟数</span><br>    <span class="hljs-keyword">var</span> y = date.getFullYear();<br>    <span class="hljs-keyword">var</span> m = (date.getMonth() + <span class="hljs-number">1</span>) &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&quot;0&quot;</span> + (date.getMonth() + <span class="hljs-number">1</span>)) : (date.getMonth() + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">var</span> d = date.getDate() &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&quot;0&quot;</span> + date.getDate()) : date.getDate();<br>    <span class="hljs-keyword">var</span> h = date.getHours() &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + date.getHours()) : date.getHours()<br>    <span class="hljs-keyword">var</span> f = date.getMinutes() &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + date.getMinutes()) : date.getMinutes()<br>    <span class="hljs-keyword">var</span> s = date.getSeconds() &lt; <span class="hljs-number">10</span> ? (<span class="hljs-string">&#x27;0&#x27;</span> + date.getseconds()) : date.getSeconds()<br>    <span class="hljs-keyword">var</span> formatdate = y + <span class="hljs-string">&#x27;/&#x27;</span> + m + <span class="hljs-string">&#x27;/&#x27;</span> + d + <span class="hljs-string">&quot; &quot;</span> + h + <span class="hljs-string">&quot;:&quot;</span> + f + <span class="hljs-string">&quot;:&quot;</span> + s;<br>    <span class="hljs-built_in">console</span>.log(formatdate) <span class="hljs-comment">// 获取10分钟后的时间，格式为yyyy-mm-dd h:f:s</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(formatdate))<br>    <span class="hljs-keyword">return</span> formatdate<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 渲染小尺寸组件</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> renderSmall(data) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;刷新&quot;</span>)<br>    <span class="hljs-keyword">let</span> w = <span class="hljs-keyword">new</span> ListWidget()<br>    w.refreshAfterDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-built_in">this</span>.genTime())<br>    <span class="hljs-keyword">let</span> headerT = w.addText(<span class="hljs-built_in">this</span>.settings[<span class="hljs-string">&#x27;text&#x27;</span>] ? <span class="hljs-built_in">this</span>.settings[<span class="hljs-string">&#x27;text&#x27;</span>] : <span class="hljs-string">&quot;默认文本&quot;</span>)<br>    <span class="hljs-built_in">this</span>.renderFontStyle(headerT, <span class="hljs-number">15</span>, <span class="hljs-string">&quot;#fff&quot;</span>, <span class="hljs-string">&#x27;center&#x27;</span>)<br>    <span class="hljs-keyword">let</span> start = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.settings[<span class="hljs-string">&#x27;day&#x27;</span>]<br>    <span class="hljs-keyword">let</span> day = start ? <span class="hljs-built_in">Math</span>.ceil((<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() - <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(start)) / (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>)) : <span class="hljs-number">1</span><br>    <span class="hljs-keyword">const</span> t = w.addText(day.toString())<br>    t.centerAlignText()<br>    <span class="hljs-built_in">this</span>.renderFontStyle(t, <span class="hljs-number">60</span>, <span class="hljs-string">&#x27;#fff&#x27;</span>, <span class="hljs-string">&#x27;center&#x27;</span>)<br>    <span class="hljs-keyword">let</span> today = w.addDate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())<br>    <span class="hljs-built_in">this</span>.renderFontStyle(today, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;#fff&#x27;</span>, <span class="hljs-string">&#x27;center&#x27;</span>)<br>    <span class="hljs-built_in">this</span>.renderBackColor(w)<br>    <span class="hljs-keyword">return</span> w<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 渲染中尺寸组件</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> renderMedium(data, num = <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-keyword">let</span> w = <span class="hljs-keyword">new</span> ListWidget()<br>    <span class="hljs-keyword">let</span> text = w.addText(<span class="hljs-built_in">this</span>.settings[<span class="hljs-string">&#x27;text&#x27;</span>] ? <span class="hljs-built_in">this</span>.settings[<span class="hljs-string">&#x27;text&#x27;</span>] : <span class="hljs-string">&quot;默认文本&quot;</span>)<br>    <span class="hljs-built_in">this</span>.renderFontStyle(text, <span class="hljs-number">36</span>, <span class="hljs-string">&quot;#fff&quot;</span>, <span class="hljs-string">&#x27;center&#x27;</span>)<br>    <span class="hljs-keyword">let</span> day = <span class="hljs-built_in">Math</span>.ceil(<span class="hljs-built_in">parseInt</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() - <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-built_in">this</span>.settings[<span class="hljs-string">&#x27;day&#x27;</span>])) / (<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>))<br>    <span class="hljs-comment">// 创建中部布局</span><br>    <span class="hljs-keyword">let</span> footerT = w.addText(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">String</span>(day) === <span class="hljs-string">&#x27;NaN&#x27;</span> || day &lt;= <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;请设置今天之前的时间&quot;</span> : day&#125;</span>`</span>)<br>    footerT.centerAlignText()<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">String</span>(day) === <span class="hljs-string">&#x27;NaN&#x27;</span> || day &lt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">this</span>.renderFontStyle(footerT, <span class="hljs-number">27</span>, <span class="hljs-string">&quot;#fff&quot;</span>, <span class="hljs-string">&#x27;center&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.renderFontStyle(footerT, <span class="hljs-number">40</span>, <span class="hljs-string">&quot;#fff&quot;</span>, <span class="hljs-string">&#x27;center&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">let</span> today = w.addDate(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())<br>    <span class="hljs-built_in">this</span>.renderFontStyle(today, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;#fff&#x27;</span>, <span class="hljs-string">&#x27;center&#x27;</span>)<br>    <span class="hljs-built_in">this</span>.renderBackColor(w)<br>    <span class="hljs-comment">// w.addSpacer(2)</span><br>    <span class="hljs-keyword">return</span> w<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 渲染大尺寸组件</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> renderLarge(data) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.renderMedium(data, <span class="hljs-number">10</span>)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 获取数据函数，函数名可不固定</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> getData() &#123;<br>    <span class="hljs-keyword">const</span> api = <span class="hljs-string">&#x27;https://x.im3x.cn/v1/test-api.json&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.httpGet(api, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 自定义注册点击事件，用 actionUrl 生成一个触发链接，点击后会执行下方对应的 action</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> </span>url 打开的链接</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">async</span> actionOpenUrl(url) &#123;<br>    Safari.openInApp(url, <span class="hljs-literal">false</span>)<br>  &#125;<br><br>&#125;<br><span class="hljs-comment">// @组件代码结束</span><br><br><span class="hljs-keyword">const</span> &#123; Testing &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./「小件件」开发环境&quot;</span>)<br><span class="hljs-keyword">await</span> Testing(Widget)<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
      <tag>跨平台</tag>
      
      <tag>scriptable</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>textarea中复制光标所在行文本</title>
    <link href="/2021/01/06/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/textarea%E4%B8%AD%E5%A4%8D%E5%88%B6%E5%85%89%E6%A0%87%E6%89%80%E5%9C%A8%E8%A1%8C%E6%96%87%E6%9C%AC/"/>
    <url>/2021/01/06/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/textarea%E4%B8%AD%E5%A4%8D%E5%88%B6%E5%85%89%E6%A0%87%E6%89%80%E5%9C%A8%E8%A1%8C%E6%96%87%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。</p><h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><p><a href="https://blog.shuaxindiary.cn/2020/12/27/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/textarea%E6%A0%87%E7%AD%BEtab%E9%94%AE%E6%97%A0%E6%95%88/">textarea中tab健失效问题</a></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>常见的编辑器中有个功能，是ctrl+c的时候，自动复制/剪切光标所在行的文本。</p><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><ol><li>获取光标在文本中的位置</li><li>同时向前向后查找该位置最近的两处的回车换行符位置</li><li>然后截取这两个换行符之间的文本即可</li></ol><ul><li><ul><li>获取位置需要判断一下是不是最后一行，以最后是否有换行符判断即可</li></ul></li><li><ul><li>有，就正常截取，无就按文本最后位置截取即可</li></ul></li><li><ul><li>需要注意监听组合键</li></ul></li></ul><ol start="4"><li>将截取的字符串复制到系统的剪切板区域即可</li></ol><h2 id="获取光标位置"><a href="#获取光标位置" class="headerlink" title="获取光标位置"></a>获取光标位置</h2><ul><li>在textarea会有两种移动光标的操作：鼠标、键盘</li><li>监听这两个事件，然后通过触发事件的对象引用event的selectionStart、selectionEnd获取</li><li>键盘事件的时候需要注意，每次按键后光标移动了，但是获取到的上次按的位置，需要减一</li></ul><h2 id="获取光标位置代码"><a href="#获取光标位置代码" class="headerlink" title="获取光标位置代码"></a>获取光标位置代码</h2><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editor&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  editor.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 光标起始位置</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> start = e.target.selectionStart</span><br><span class="javascript">    <span class="hljs-comment">// 光标结束位置</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> end = e.target.selectionEnd</span><br><span class="javascript">    <span class="hljs-comment">// 获取鼠标选中的文本</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> text=<span class="hljs-built_in">window</span>.getSelection().toString()</span><br>  &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="复制文本"><a href="#复制文本" class="headerlink" title="复制文本"></a>复制文本</h2><ul><li>获取到文本，如上述</li><li>复制到剪切区，有2中方式，如下：</li><li><ul><li>document对象的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand">execCommand</a>，是一个函数，参数为对应要操作的指令字符串，如copy；通过他获取input中的选中的文本即可</li></ul></li><li><ul><li>Clipboard API的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard">Clipboard</a>，因为第一个操作标准已经放弃，不建议使用；可以使用该操作代替，但是兼容性需要考虑;其次该api必须在用户交互中使用，即不能再页面加载后自动复制粘贴</li></ul></li><li><ul><li>第三方库：<a href="https://github.com/zenorocha/clipboard.js">clipboardJs</a></li></ul></li></ul><h2 id="复制文本代码"><a href="#复制文本代码" class="headerlink" title="复制文本代码"></a>复制文本代码</h2><blockquote><p>execCommand</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span>copy<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> copy = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#copy&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#text&#x27;</span>)</span><br><span class="javascript">    copy.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&#x27;copy&#x27;</span>)) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;不支持改命令&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-comment">// 选中文本</span></span><br>      text.select()<br><span class="javascript">      <span class="hljs-comment">// 执行复制 返回一个Boolean</span></span><br><span class="javascript">      <span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&#x27;copy&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;复制成功&#x27;</span>)</span><br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>Clipboard</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span>copy<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> copy = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#copy&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">const</span> text = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#text&#x27;</span>)</span><br><span class="javascript">    copy.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br>      navigator.clipboard.writeText(text.value)<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="复制光标所在行代码"><a href="#复制光标所在行代码" class="headerlink" title="复制光标所在行代码"></a>复制光标所在行代码</h1><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editor&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> editor = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#editor&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-comment">// 复制文本 创建input来选中内容</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">copyText</span>(<span class="hljs-params">text</span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-keyword">const</span> input = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.body.appendChild(input);</span><br><span class="javascript">      input.setAttribute(<span class="hljs-string">&#x27;value&#x27;</span>, text);</span><br><span class="javascript">      input.setAttribute(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;copy&#x27;</span>);</span><br>      input.select();<br><span class="javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&#x27;copy&#x27;</span>)) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&#x27;copy&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;复制成功&#x27;</span>);</span><br>      &#125;<br><span class="javascript">      <span class="hljs-built_in">document</span>.body.removeChild(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#copy&#x27;</span>))</span><br>    &#125;<br><span class="javascript">    editor.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">      <span class="hljs-comment">// 是否是ctrl</span></span><br><span class="javascript">      <span class="hljs-keyword">let</span> isCtrl = e.ctrlKey</span><br><span class="javascript">      <span class="hljs-keyword">let</span> code = e.keyCode</span><br>      if (isCtrl &amp;&amp; code === 67) &#123;<br><span class="javascript">        <span class="hljs-comment">// 记录光标位置</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> start = e.target.selectionStart - <span class="hljs-number">1</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> end = e.target.selectionEnd - <span class="hljs-number">1</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> text = editor.value</span><br><span class="javascript">        <span class="hljs-comment">// 记录行首、尾</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> left = <span class="hljs-number">-1</span>,</span><br>          right = -1<br><span class="javascript">        <span class="hljs-comment">// 找到第一个换行</span></span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start; i &gt;= <span class="hljs-number">0</span>; i--) &#123;</span><br><span class="javascript">          <span class="hljs-comment">// 0时说明为第一行</span></span><br><span class="javascript">          <span class="hljs-keyword">if</span> (text[i] === <span class="hljs-string">&#x27;\n&#x27;</span> || i === <span class="hljs-number">0</span>) &#123;</span><br>            left = i<br><span class="javascript">            <span class="hljs-keyword">break</span></span><br>          &#125;<br>        &#125;<br><span class="javascript">        <span class="hljs-comment">// 找到第二个换行</span></span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = end; i &lt; text.length; i++) &#123;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (text[i] === <span class="hljs-string">&#x27;\n&#x27;</span> || i === text.length - <span class="hljs-number">1</span>) &#123;</span><br>            right = i<br><span class="javascript">            <span class="hljs-keyword">break</span></span><br>          &#125;<br>        &#125;<br><span class="javascript">        <span class="hljs-comment">// 这里主要是判断第一行、最后一行来处理换行符</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> selected = text.substring(left === <span class="hljs-number">0</span> ? left : left + <span class="hljs-number">1</span>, right === text.length - <span class="hljs-number">1</span> ? right + <span class="hljs-number">1</span> : right)</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&#x27;copy&#x27;</span>)) &#123;</span><br>          copyText(selected)<br>        &#125;<br>      &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京</title>
    <link href="/2021/01/02/%E9%9A%8F%E7%AC%94/%E5%8C%97%E4%BA%AC%E6%B8%B8%E7%8E%A9%E6%8C%87%E5%8D%97/"/>
    <url>/2021/01/02/%E9%9A%8F%E7%AC%94/%E5%8C%97%E4%BA%AC%E6%B8%B8%E7%8E%A9%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<blockquote><p>封面图作者：<a href="https://www.zcool.com.cn/work/ZNDk4NTY4MTI=.html">AJIU_</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新年的第一天，想从记录点不一样的开始，来帝都三个月了，零零散散和女票一起也打卡了不少北京的景点；人尽皆知的、不为人知的都有；所以想着以北京开始，之后也记录一些出去旅游的“游记”，也算是除过照片之外的另一种记录回忆的方式。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="天安门-故宫"><a href="#天安门-故宫" class="headerlink" title="天安门/故宫"></a>天安门/故宫</h3><p>这两个可以安排在同一天，因为去故宫，选择从天安门那边进去就好，天安门附近有地铁站可直达；天安门不要门票，故宫门票微信公众号可预约；宫里有两个单独收费的馆：<strong>珍宝馆</strong>和<strong>钟表阁</strong>，还是很推荐的。<br><img src="https://img.shuaxindiary.cn/IMG_4443.JPG" alt="天安门"></p><h3 id="香山"><a href="#香山" class="headerlink" title="香山"></a>香山</h3><p>说实话，我觉得挺普通的山，可能我是西北的孩子对爬山已经见怪不怪了；香山的旺季是在秋季，枫叶会红，官图也很好看，但是时间要选好，不然一定会失望；去的话有地铁直达，虽然远一点但是也算方便，时间充裕在秋天来北京的话，可以适当考虑。下图是我那天去见到的唯一一棵比较红的好看的树。门票在微信公众号预约<br><img src="https://img.shuaxindiary.cn/IMG_4623.JPG"></p><h3 id="中央美术学院美术馆"><a href="#中央美术学院美术馆" class="headerlink" title="中央美术学院美术馆"></a>中央美术学院美术馆</h3><p>这种地方，比较见仁见智了，我是很享受各种色彩组合在一起对视觉的那种冲击，所以有时间且条件允许都会挑几个美术馆去看看。不过这回去虽然没看到什么水彩（很喜欢水彩和油画），但是看到了不少马赛克主题的作品，主要就是各种材质、形状的碎石组成一幅画，还是很壮观。门票现场买，也是通过猫眼这种扫码买。<br><img src="https://img.shuaxindiary.cn/IMG_4707.JPG"></p><h3 id="798"><a href="#798" class="headerlink" title="798"></a>798</h3><p>提到艺术中心+各种相关展览，总是能看到798的名字；最巧的是，住的小区就在它对面；然后女票提议去看一个电影手稿的展览，就进去转了转；整体艺术氛围很浓厚，吧？（我也不懂）；但是有很多涂鸦非常壮观，很喜欢。下图是里面的一个玩具馆，酸了，叹息之墙；电影手稿展的哈利波特手稿；很喜欢的涂鸦墙。不收门票，里面单独展览会有单独收取门票的。<br><img src="https://img.shuaxindiary.cn/IMG_4562.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_4837.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_4842.JPG"></p><h3 id="博物馆"><a href="#博物馆" class="headerlink" title="博物馆"></a>博物馆</h3><p>北京有非常多的博物馆，很多都值得一去，门票都可以在各个馆的公众号进行预约。其实以前觉得博物馆非常无聊，或许是长大了不少，自己的知识积累比起以前稍微好了一点，很多东西不是很懂但也听过，再加上有个一起同行的人，可以一边聊天一边转，还是非常有意思的；最主要的还是帝都的博物馆都还是很有牌面hhh，以下顺序是按个人觉得非常值得一去的顺序做排名</p><p><strong>首都博物馆</strong><br>这个博物馆在木樨地地铁站附近，有5层，占地面积还是非常大的；一层是大厅，负一楼是北京一些建筑的简单模型和科普还有些周边店；二楼是一些历史文物和关于宗教的一些佛像展览；三楼没开；四楼是北京传统习俗文化展览。不让拍摄，就没拍图了。</p><p><strong>中国人民革命军事博物馆</strong><br>和首都博物馆就差一站，该馆在军事博物馆站出来就是，因为2个都很大，所以时间充裕，可以单独拿出一天来看看；如其名，主要就是围绕军事、中国革命时期的一些背景和题材的一些展览；军事迷可以来，有很多相关的展览。负一楼还有坦克、一些军用机车的展！<br><img src="https://img.shuaxindiary.cn/IMG_5187.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_5186.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_5191.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_5192.JPG"></p><p><strong>国家博物馆</strong><br>这个博物馆在天安门对面，也非常大，很有牌面，一楼主要是一些雕塑+油画，还有一个展厅是中国从古到今的一些发展记录的展览；二三楼是一些瓷器相关的展览；负一层是一些石器时代的展览。<br><img src="https://img.shuaxindiary.cn/IMG_5086.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_5194.JPG"></p><p><strong>其他</strong><br>剩下的就是一些比较小，但也很有意思的博物馆，因为实在太多就只发给一下去过的图和博物馆名称：中国钱币博物馆、中国邮政邮票博物馆、中国铁道博物馆<br><img src="https://img.shuaxindiary.cn/IMG_4963.JPG"><br><img src="https://img.shuaxindiary.cn/186E692204D762C0AAA29D4450C8793F.png"><br><img src="https://img.shuaxindiary.cn/IMG_4967.JPG"></p><h3 id="公园"><a href="#公园" class="headerlink" title="公园"></a>公园</h3><p>以圆明园和颐和园为首，北京也有很多这种户外的公园一类的地方；这类觉得更适合时间充足，去散散步这样；去过的：颐和园、圆明园、天坛、后海、北海、玉渊潭、景山。印象较深的，景山可以一览故宫全貌，冬天下过雪后上去看应该会很棒；北海公园的湖水很清，而且有很多喵喵出没；颐和园有很多不怕人的松鼠；后海有小吃街。这些公园都有一个特点，都有湖，有很多冬天结冰后都可以滑冰。<br><img src="https://img.shuaxindiary.cn/IMG_4910.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_4969.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_4971.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_4970.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_5084.JPG"></p><h3 id="中国美术馆"><a href="#中国美术馆" class="headerlink" title="中国美术馆"></a>中国美术馆</h3><p>主要以画、书法、印章、雕塑为主。<br><img src="https://img.shuaxindiary.cn/IMG_5020.JPG"><br><img src="https://img.shuaxindiary.cn/IMG_5021.JPG"></p><h3 id="书店"><a href="#书店" class="headerlink" title="书店"></a>书店</h3><p>大学的时候，因为时间很充足，每次去一个新地方，都会提前做一下功课，找一找当地有什么书店，然后去探一下店；现在因为实习时间的缘故，来了北京只去了一家书店，其实还有一方面原因就是觉得现在的书店都很大同小异，只是在装修上做文章，渐渐的失去了兴趣；这次去的这一家店也只是因为之前被安利，特地来拔草一下。多抓鱼：二手书店。<br><img src="https://img.shuaxindiary.cn/IMG_4430.JPG"></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><!-- 之前呢因为觉得现在国内所有的地方都在全力发展经济，每个地方越来越繁荣，不可避免的就是同质化越来越严重，哪怕是三、四线小城市也都俨然一副国际化都市的感觉，越是这样就越没有出去的动力；因为去哪里都只是换了一个地方在商场里徘徊。所以一直能吸引我移动一下懒惰的身体出去玩的理由，一直都只有2个；一个是那个地方确实有着其他地方不曾有的*独占*的特色（景点、小吃、文化等等），虽然去之前可能也不知道是否真的如自己所想的那样有趣，但是抱着探索世界的好奇心，也不管旁人是否推荐，自己都还是会毅然决然前往"探索"一番，这个过程在之后回想起来无论是否愉快，但都非常满足；另一个就是单纯的去找朋友一起小聚一下，只有这种时候才会忽略其他，单纯的沉浸在和好友相聚的氛围中。所以出去的次数相对来说非常少，但是 --><p>今年就是在学校的最后一学期了，彻底毕业投入工作中后，可以自由支配的出去玩的时间只会越来越少，希望可以在工作之外还是尽量的多的出去看看，保持对世界的好奇心，哪怕没有任何计划，只是单纯的出去放松也是好的。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅游</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020总结</title>
    <link href="/2020/12/31/%E9%9A%8F%E7%AC%94/2020%E6%80%BB%E7%BB%93/"/>
    <url>/2020/12/31/%E9%9A%8F%E7%AC%94/2020%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>封面图作者：<a href="https://weibo.com/n/%E5%BE%85%E7%A7%8B%E6%97%A5%E7%B9%81%E6%98%9F%E6%BB%A1%E5%A4%A9">待秋日繁星满天</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>与其说是年终总结，不如说是下半年的总结。今年5月份，春招期间有写对春招期间面试的总结顺带的对上半年做了简单的回顾，最后也有写了对下半年的一些期望和补足的计划，转眼就已经到了2020的最后一天。半年里待过了2座城市，也在2个不同规模的团队经历了两段实习；也参加了秋招，遇到了喜欢的女孩子，杂七杂八一堆琐碎的事情，感觉也有不少东西可以梳理一下。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="对于上半年总结的不足计划"><a href="#对于上半年总结的不足计划" class="headerlink" title="对于上半年总结的不足计划"></a>对于上半年总结的不足计划</h2><p>春招的时候让自己发现了自己的基础十分不扎实，不仅仅是计算机基础，还有对前端技术栈的基础知识，完全停留在了语言、框架的api调用，没有去深究其中原因和底层的原理是怎样；<br>春招之后到现在，一直有在提醒自己，当遇到问题的时候多去了解一下出现的原因，以及探索更多的解决方案并对比其中的优劣选择最适合当前场景的，这个过程中不仅可以复习到基础的知识，也会在对比各种方案时带来更多的思考和扩大知识面；除过这方面，也有看了几本js相关的书籍，来补足：《你不知道的javascript》、《JavaScript权威指南》这是在前端技术上的补足。<br>计算机基础方面的知识，也越来越觉得十分重要，数据结构基本算法能力和网络操作系统、编译原理相关的知识的不扎实甚至是没有，让自己在很多方面都会很束手束脚，不过这是个长期的内功修炼，这段时间也算是意识到了问题的存在，之后也需要慢慢持续的投入来学习，这下半年主要是整理了相关需要自己接下来投入学习的方面，再就是阅读了网络相关的几本书籍，《图解HTTP》、《HTTP权威指南》。</p><h2 id="关于实习"><a href="#关于实习" class="headerlink" title="关于实习"></a>关于实习</h2><p>今年先后在杭州和北京2地的2家公司进行了实习，不同的团队规模，不同的工作方式，也是让自己很有收获。算上去年寒假的实习，一共是有三段实习经验。三家公司也是从小公司-&gt;小独角兽-&gt;大公司都有待过，三段给我的感受都大不相同。<br>第一段实习，是接触前端不久后去的，第一次参与了线上项目的开发，虽然都是在写HTML&amp;&amp;CSS这些静态页面，但是大量的编写，让我对前端三件套中有了更熟悉的掌握，对于ui图的还原几乎可以独立完成。<br>第二段实习去了一家安全公司，团队也是有了一定的规模，在这里算是正式的接触了如何去和其他成员协作开发，以及怎么更规范的开发；还有一点就是，快速学习能力吧，来这里之前完全没接触过react以及相关生态，一周的时间过了一遍文档和公司在使用的相关生态的文档，之后就顺利的融入了开发，虽然中间还有不熟练带来的一些坑，但是整体还是比较顺利。<br>第三段实习是来了之前很向往的一个团队，在这里技术上主要还是在阅读之前项目代码的效率上提升了很多，以前没有这么大面积的读过别人的代码，来了这里要维护和迭代很多老项目，保证不影响之前逻辑基础上二次开发或者维护就需要很快速的过一遍之前的逻辑，然后开始思考怎么开发新需求；其次最大的收货应该是沟通上，之前都是leader告诉我应该开发什么，给定期限做完即可。来了这里，自己开始独立参与排期，讨论需求的可行性，给出具体排期时间，以及开发过程中实时的和QA、PD、后端进行沟通，这是之前实习所不曾有的经历。</p><h2 id="关于技术上"><a href="#关于技术上" class="headerlink" title="关于技术上"></a>关于技术上</h2><p>今年主要集中在下半年，学习了TS+React+Vue3，也有尝试使用express写一些后端服务，也初步涉猎了一下服务器部署相关：Linux基本操作和Nginx。<br>最近在写毕设，主要是用React做一个集图床客户端+md在线编辑器+todo的一个任务平台。下半年的话，想专注在Node上面，多了解和使用Node做一些有趣的尝试，初步想法是把之前gulp封装的cli，进行一下优化，让实用性提起来，然后使用node封装一下，做成类似Vue-cli那样。</p><h2 id="关于最近在做的"><a href="#关于最近在做的" class="headerlink" title="关于最近在做的"></a>关于最近在做的</h2><p>因为一直在实习，导致时间只有晚上，有一段时间还在复习面试和学校考试的事，所以写自己代码的时间比较有限，但还是写了一部分，首先毕设的前端基本架构已经搭建完毕，然后自己写的在线MD编辑器，在用Vue3在写，也写了一部分；剩下的只能明年写了。然后有clone（自己写）了一下，之前google的一个前端工程师用grid布局来实现常见布局的一个demo站点，不过也是写了一部分，写完在放链接吧。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最近冬天，疫情又开始反反复复，不知道是因为什么，随着年龄越来越大，反而更在乎健康情况，反正新的一年还是希望大家都平平安安，快快乐乐！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo接评论系统记录</title>
    <link href="/2020/12/27/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/12/27/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>之前因为建站是为了当笔记本，就没有搞些花里胡哨的社交属性的功能；后来无意间看到过一个老哥在挂载该博客的仓库留言过，后来一想，还是加一个吧，方便实时看到一些可能不太会有的留言。。</p><a id="more"></a><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><ul><li><a href="https://github.com/gitalk/gitalk">gitalk</a></li><li><a href="https://github.com/xCss/Valine">Valine</a></li><li><a href="https://github.com/lizheming/waline">waline</a></li><li><a href="https://livere.com/">来必力</a></li></ul><hr><ul><li>以上都是觉得很不错的选择的评论系统，因为是静态博客，都需要借助其他平台来存数据；gitalk是使用仓库的issue来存储，Valine是通过<a href="https://www.leancloud.cn/">Leancloud</a>，<a href="https://waline.js.org/">Waline</a>支持的就更多了；<a href="https://livere.com/">来必力</a>用的应该是自己的服务器存储；</li><li>最后选了gitalk，主要考虑到留言的数量不会很多，其次博客也是挂载github，不想在接入一个平台来搞相关的(目前)，用issue，因为github是每天都会上去的，会很直观的可以看到，所以还是方便</li></ul><h1 id="接入"><a href="#接入" class="headerlink" title="接入"></a>接入</h1><blockquote><p>具体使用很简单，文档都有描述，这里记录一下Hexo中Next主题里如何使用</p><ul><li>找到Next下负责渲染文章的模板文件：themes-&gt;layout-&gt;_macro-&gt;post.swig</li></ul></blockquote><blockquote><ul><li>中间嵌入放评论的容器代码就好</li></ul></blockquote><h1 id="关于初始化评论失败"><a href="#关于初始化评论失败" class="headerlink" title="关于初始化评论失败"></a>关于初始化评论失败</h1><p>原因是gitalk是借助github的接口来存取仓库issues的数据的，然后每个文章对应仓库的一个issues，但是这个长度不能超过50个字符，不然就会导致初始化失败并返回，422错误，这是github的限制；官方是使用location.pathname来作为id的</p><blockquote><ul><li><strong>解决</strong></li></ul></blockquote><blockquote><ul><li>思路就是把id缩短，通过md5转义下就好</li><li>直接在模板引擎引入对应md5的cdn就好</li></ul></blockquote><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>因为是通过github的接口在配置的仓库创建对应的issue来保存每篇文章的评论，这就涉及到谁创建的问题，gitalk也提供了对应的配置选项，这就带来了，每篇文章需要该仓库权限拥有者去初始化该文章对应的issue这一操作，这就很繁琐，计划写个小服务来解决一下这个问题</p><blockquote><p><em>目前思路</em></p><ul><li>使用node，在github ci部署后，在跑一下node服务</li><li>服务主要就是去自动请求一下github的接口，自动初始化一下新文章的评论区</li><li>写好在抛出来…</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>踩坑</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>textarea标签tab键无效</title>
    <link href="/2020/12/27/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/textarea%E6%A0%87%E7%AD%BEtab%E9%94%AE%E6%97%A0%E6%95%88/"/>
    <url>/2020/12/27/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/textarea%E6%A0%87%E7%AD%BEtab%E9%94%AE%E6%97%A0%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><ul><li>浏览器中使用tab键会自动将光标在当前页面的各个控件上进行切换</li></ul><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><ul><li>在textarea上监听keydown事件</li><li>监听每次的按键，是tab键时(code=9)，阻止默认事件</li><li>然后书写添加对应的空格逻辑即可</li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;editor&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 阻止textarea默认事件</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> preventTab = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 获取到textarea</span></span><br><span class="javascript">      <span class="hljs-keyword">let</span> dom = e.target;</span><br>      if (e.keyCode == 9) &#123;<br><span class="javascript">        <span class="hljs-comment">//   阻止默认事件</span></span><br>        e.preventDefault();<br><span class="javascript">        <span class="hljs-comment">// 几个空格</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> indent = <span class="hljs-string">&quot;    &quot;</span>;</span><br><span class="javascript">        <span class="hljs-comment">// 获取光标选中or光标所处字符串中的起始和截止位置</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> start = dom.selectionStart;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> end = dom.selectionEnd;</span><br><span class="javascript">        <span class="hljs-comment">// 获取光标选中的内容</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> selected = <span class="hljs-built_in">window</span>.getSelection().toString();</span><br><span class="javascript">        selected = indent + selected.replace(<span class="hljs-regexp">/\n/g</span>, <span class="hljs-string">&quot;\n&quot;</span> + indent);</span><br>        dom.value =<br>          dom.value.substring(0, start) + selected + dom.value.substring(end);<br>        dom.setSelectionRange(start + indent.length, start + selected.length);<br>      &#125;<br>    &#125;;<br><span class="javascript">    <span class="hljs-keyword">let</span> editor=<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#editor&#x27;</span>)</span><br><span class="javascript">    editor.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;</span><br>        preventTab(e)<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作漂流</title>
    <link href="/2020/11/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%B7%A5%E4%BD%9C%E6%BC%82%E6%B5%81/"/>
    <url>/2020/11/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%B7%A5%E4%BD%9C%E6%BC%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="新坑"><a href="#新坑" class="headerlink" title="新坑"></a>新坑</h1><p>学校的事情几乎就剩下走流程等待着毕业拿证了，工作的事情也在实习的公司顺利拿到了转正的机会；工作的环境也慢慢开始适应，因为工作性质导致的每天还是会有零散的一些时间可以支配，于是开始准备重新规律的拾起读书的习惯，顺带的简单的记录一些读书笔记</p><a id="more"></a><h1 id="关于本书"><a href="#关于本书" class="headerlink" title="关于本书"></a>关于本书</h1><ul><li>书名：《工作漂流》</li><li>出版社：上海译文出版社</li><li>作者：稻泉连</li><li>译者：窦心浩-谭婉心</li></ul><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><ul><li>反正都要去工作，不如找份喜欢的工作，让满足基本生活的前提下，赋予一点其他的含义，自己也充实一点</li><li>学习本身没有什么意义，有意义的是让你开始学习的那件事，以及这个过程中带给你的收货</li></ul><h1 id="一些摘录"><a href="#一些摘录" class="headerlink" title="一些摘录"></a>一些摘录</h1><table><thead><tr><th><img src="https://img.shuaxindiary.cn/book_note1.jpg_20201129115117.jpg"></th><th><img src="https://img.shuaxindiary.cn/book_note2.jpg_20201129115109.jpg"></th></tr></thead><tbody><tr><td><img src="https://img.shuaxindiary.cn/book_note3.jpg_20201129115121.jpg"></td><td><img src="https://img.shuaxindiary.cn/book_note4.jpg_20201129115124.jpg"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>日本文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可视化图表踩坑记录</title>
    <link href="/2020/11/19/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E8%A1%A8%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/11/19/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E8%A1%A8%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>这周开发了一个粉丝数据可视化的模块，第一次这么“深度”的使用了下市面比较知名的2个可视化库，记录下一些坑和收货</p><a id="more"></a><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><ul><li>Vue中使用echarts map不渲染</li><li>Highcharts 17错误</li><li>Highcharts挂载dom，v-if无效</li></ul><h1 id="收货"><a href="#收货" class="headerlink" title="收货"></a>收货</h1><ul><li>封装echarts中国地图组件</li><li>封装highcharts气泡图组件</li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>两者使用语法差不多，很多配置项名称也类似，即使一样概念也很相似</li><li>基本概念参考<a href="https://echarts.apache.org/zh/tutorial.html#ECharts%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%A6%82%E8%A7%88">echarts说明</a></li></ul><h3 id="关于两者区别"><a href="#关于两者区别" class="headerlink" title="关于两者区别"></a>关于两者区别</h3><ul><li>两个库使用语法都差不多，字面量对象配置语法，查对应手册即可:<a href="https://echarts.apache.org/zh/option.html#title">echarts</a>  <a href="https://api.highcharts.com.cn/highcharts">highcharts</a></li><li>两者的区别：echarts底层是canvas；highcharts是SVG</li><li>关于canvas和svg的区别：</li><li><ul><li>svg是xml描述图形，内容都是一个个dom节点，可以通过js操作节点；且输出图像为矢量图，放大缩小不会失真</li></ul></li><li><ul><li>canvas是绘制的一块画布，绘制能力强，但是输出的是类似图像的格式，会失真</li></ul></li></ul><h3 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h3><blockquote><p><strong>echarts</strong></p></blockquote><ul><li>在vue中使用，绘制地图，不报错，也不显示地图</li><li>一些配置显示地图后，各个省份颜色不会根据设置的颜色状态变化</li><li>解决：</li><li><ul><li>在Vue中需要通过geo配置项来告诉echarts渲染地图</li></ul></li><li><ul><li>geo渲染的地图，如果要和visualMap设置的数据对应，需要在series中通过geoIndex来设置共享同一个geo组件</li></ul></li><li>名词解释：</li><li><ul><li><a href="https://echarts.apache.org/zh/option.html#geo">geo</a>：地理系坐标组件</li></ul></li><li><ul><li><a href="https://echarts.apache.org/zh/option.html#visualMap">visualMap</a>：视觉映射组件，即控制地图哪些地方应该是什么颜色的控制组件</li></ul></li><li><ul><li><a href="https://echarts.apache.org/zh/option.html#series">series</a>：系列表配置，配置图表类型的</li></ul></li><li><ul><li><a href="https://echarts.apache.org/zh/option.html#series-map.geoIndex">series-map. geoIndex</a>：让map和其他类型图表和geo共享一个geo组件</li></ul></li></ul><blockquote><p><strong>highcharts</strong></p></blockquote><ul><li>17错误：即默认的库不包含要引入的类型，需要额外引入highcharts-more</li><li>是个函数，然后将引入的Highcharts作为参数传递给highcharts-more这个函数即可</li><li>对于更多的类型，则需要单独导入对应图标类型文件，使用方法类似</li><li>具体哪些需要导入可以查看官方文档实例的编辑器，左边有用到的文件 <img src="https://img.shuaxindiary.cn/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201119213002.png"></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Highcharts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;highcharts/highstock&#x27;</span>;<br><span class="hljs-keyword">import</span> HighchartsMore <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;highcharts/highcharts-more&#x27;</span>;<br>HighchartsMore(Highcharts);<br></code></pre></div></td></tr></table></figure><blockquote><p><strong>Highcharts挂载dom，v-if无效</strong></p></blockquote><ul><li>和echarts在挂载dom下插入canvas</li><li>Highcharts会将挂载dom替换成生成的svg</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Echarts</tag>
      
      <tag>V-Charts</tag>
      
      <tag>Highcharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>像Vue一样使用react路由</title>
    <link href="/2020/11/14/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%83%8FVue%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8react%E8%B7%AF%E7%94%B1/"/>
    <url>/2020/11/14/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%83%8FVue%E4%B8%80%E6%A0%B7%E4%BD%BF%E7%94%A8react%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>习惯了vue里面通过配置文件一样来使用路由，react路由跳转和vue一样都是通过对应的跳转组件进行跳转，没啥区别，但是响应url页面的时候，需要使用很多内置的组件来进行书写，有点繁琐，所以记录一下简单的封装一下常用的RouterView组件，来达到像vue一样简单使用</p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>将复杂的这部分抽离成一个组件，然后传递需要让路由显示的路由对象就好</li><li>作为刚入坑react的萌新，需要注意 Link和Switch 要对应在同一个Router下</li><li>用到的React路由组件：详情见<a href="https://reactrouter.com/web/guides/quick-start">文档</a></li><li><ul><li>BrowserRouter：浏览器里使用的路由</li></ul></li><li><ul><li>Link：跳转</li></ul></li><li><ul><li>Switch：切换显示的组件</li></ul></li><li><ul><li>Route：控制url对应的组件</li></ul></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="https://codesandbox.io/s/broken-shadow-8hx9o?file=/src/index.js:96-109">代码</a></h1><ul><li>使用codesandbox在线ide</li><li>这里需要注意，每个jsx文件都需要单独引入一下React，不然会报错<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// RouterView.jsx</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Route, Switch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">const</span> RouterView = <span class="hljs-function">(<span class="hljs-params">&#123; routes &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;Switch&gt;<br>      &#123;routes.map(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          &lt;Route<br>            key=&#123;i&#125;<br>            path=&#123;item.path&#125;<br>            <span class="hljs-comment">// 这里传递的为当前路由的子路由</span><br>            component=&#123;<span class="hljs-function">() =&gt;</span> item.component(item.routes)&#125;<br>          /&gt;<br>        );<br>      &#125;)&#125;<br>    &lt;/Switch&gt;<br>  );<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> RouterView;<br><br></code></pre></div></td></tr></table></figure></li></ul><h1 id="react路由的基本使用"><a href="#react路由的基本使用" class="headerlink" title="react路由的基本使用"></a>react路由的基本使用</h1><ul><li>接受参数：useParams<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 路由</span><br><span class="hljs-keyword">const</span> routes=[<br>  &#123;<br>    path: <span class="hljs-string">&quot;/home/:id&quot;</span>,<br>    exact: <span class="hljs-literal">true</span>,<br>    label: <span class="hljs-string">&quot;首页&quot;</span>,<br>    component: Home<br>  &#125;<br>]<br><span class="hljs-comment">// 组件</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(useParams());<span class="hljs-comment">//&#123;id:xxx&#125;</span><br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li>将路由对象信息注入当前组件props：withRouter <a href="https://blog.shuaxinjs.cn/2020/11/11/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/antd-menu%E7%BB%84%E4%BB%B6/">使用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>antd menu组件</title>
    <link href="/2020/11/11/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/antd-menu%E7%BB%84%E4%BB%B6/"/>
    <url>/2020/11/11/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/antd-menu%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="antd-menu组件"><a href="#antd-menu组件" class="headerlink" title="antd menu组件"></a>antd menu组件</h1><p>继续记录antd+react使用</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>1.每次刷新浏览器后，menu应该继续选中当前url对应的menuitem<br>2.限制只能打开一个menugroup</p><a id="more"></a><h2 id="代码-amp-思路"><a href="#代码-amp-思路" class="headerlink" title="代码&amp;思路"></a>代码&amp;思路</h2><p>每次刷新浏览器后，menu应该继续选中当前url对应的menuitem</p><ul><li>场景1思路：利用react路由的withRouter包裹当前组件，然后组件内部通过props就可以得到当前路由对象location；location的pathname就是当前的url，然后将该值赋给defaultSelectedKeys即可</li><li>场景2思路：menu组件打开的menu是通过openKeys控制，每次点击要打开的menu的时候，去将openkeys绑定的数组重置为当前点击的菜单的key即可<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Nav组件</span><br><span class="hljs-keyword">import</span> &#123;  withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">const</span> Nav=<span class="hljs-function">(<span class="hljs-params">&#123;location&#125;</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> [keys, setKeys] = useState([<span class="hljs-string">&#x27;sub1&#x27;</span>])<br>    <span class="hljs-keyword">const</span> saveKeys = <span class="hljs-function">(<span class="hljs-params">&#123; key &#125;</span>) =&gt;</span> &#123;<br>    setKeys(<span class="hljs-function">() =&gt;</span> [key])<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>    &lt;Menu<br>      onClick=&#123;handleClick&#125;<br>      defaultSelectedKeys=&#123;[location.pathname]&#125;<br>      openKeys=&#123;keys&#125;<br>      mode=<span class="hljs-string">&quot;inline&quot;</span><br>      style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-string">&quot;100 %&quot;</span>, <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;100%&quot;</span> &#125;&#125;<br>    &gt;<br>      &lt;SubMenu<br>        onTitleClick=&#123;saveKeys&#125;<br>        key=<span class="hljs-string">&quot;sub0&quot;</span><br>        title=&#123;<br>          &lt;span&gt;<br>            &lt;CopyOutlined /&gt;<br>            &lt;span&gt;概览&lt;/span&gt;<br>          &lt;/span&gt;<br>        &#125;<br>      &gt;<br>        &lt;Menu.Item key=<span class="hljs-string">&quot;/&quot;</span>&gt;<br>          &lt;Link to=<span class="hljs-string">&quot;/&quot;</span>&gt;首页&lt;/Link&gt;<br>        &lt;/Menu.Item&gt;<br>      &lt;/SubMenu&gt;<br>      &lt;SubMenu<br>        onTitleClick=&#123;saveKeys&#125;<br>        key=<span class="hljs-string">&quot;sub0&quot;</span><br>        title=&#123;<br>          &lt;span&gt;<br>            &lt;CopyOutlined /&gt;<br>            &lt;span&gt;概览&lt;/span&gt;<br>          &lt;/span&gt;<br>        &#125;<br>      &gt;<br>        &lt;Menu.Item key=<span class="hljs-string">&quot;/about&quot;</span>&gt;<br>          &lt;Link to=<span class="hljs-string">&quot;/about&quot;</span>&gt;关于&lt;/Link&gt;<br>        &lt;/Menu.Item&gt;<br>      &lt;/SubMenu&gt;<br>    &lt;/Menu&gt;<br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withRouter(Nav)<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在react中获取Dom</title>
    <link href="/2020/11/11/%E6%97%A5%E5%B8%B8/%E5%9C%A8react%E4%B8%AD%E8%8E%B7%E5%8F%96Dom/"/>
    <url>/2020/11/11/%E6%97%A5%E5%B8%B8/%E5%9C%A8react%E4%B8%AD%E8%8E%B7%E5%8F%96Dom/</url>
    
    <content type="html"><![CDATA[<h1 id="在react中获取Dom节点"><a href="#在react中获取Dom节点" class="headerlink" title="在react中获取Dom节点"></a>在react中获取Dom节点</h1><p>用到的api：</p><ul><li>ref</li><li>createRef</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// demo组件</span><br><span class="hljs-keyword">import</span> &#123;createRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">const</span> Demo=<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> Dom_P=createRef(<span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">const</span> getDom=<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(Dom_P)<span class="hljs-comment">//&#123;current:p&#125;</span><br>        <span class="hljs-built_in">console</span>.log(Dom_P.current)<span class="hljs-comment">// &lt;p&gt;This is P&lt;/p&gt;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;p ref=&#123;Dom_P&#125;&gt;This is P&lt;/p&gt;<br>            &lt;button onClick=&#123;getDom&#125;&gt;Get P&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Demo<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于hexo打包路径问题</title>
    <link href="/2020/11/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8Ehexo%E6%89%93%E5%8C%85%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/11/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8Ehexo%E6%89%93%E5%8C%85%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>hexo打包部署到gh-pages后，路径资源404问题</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li>在hexo的配置文件（_config.yml）中，找到 URL配置选项</li><li>在url中填写ghpages默认url（一般为 你的githubanme.github.io）</li><li>root写当前目录名</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>在zxy仓库部署项目，</p><figure class="highlight yml"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">url:</span> <span class="hljs-string">https://你设置的自定义域名（或者ghpage默认路径）</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/zxy/</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优雅的扩展React官方cli配置</title>
    <link href="/2020/11/06/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E4%BC%98%E9%9B%85%E7%9A%84%E6%89%A9%E5%B1%95React%E5%AE%98%E6%96%B9cli%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/11/06/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E4%BC%98%E9%9B%85%E7%9A%84%E6%89%A9%E5%B1%95React%E5%AE%98%E6%96%B9cli%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>FB官方的cli也和vue-cli3.x开始一样，隐藏了webpack配置文件，但是官方没有提供类似vue.config.js这种配置入口，如果想扩展只能eject，所以记录一下来自社区的解决方案，通过<a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a>和<a href="https://github.com/arackaf/customize-cra">customize-cra</a>不用eject也可以一定程度扩展cli配置</p><a id="more"></a><h1 id="react-app-rewired"><a href="#react-app-rewired" class="headerlink" title="react-app-rewired"></a>react-app-rewired</h1><p>通过配置<em>config-overrides.js</em>文件，来重写cli原本的配置文件</p><h1 id="customize-cra"><a href="#customize-cra" class="headerlink" title="customize-cra"></a>customize-cra</h1><p>提供了一些便捷的配置方案，例如less、babel相关等</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul><li>yarn || npm 安装 react-app-rewired customize-cra</li><li>根目录创建<strong>config-overrides.js</strong>文件</li><li>修改package.json启动脚本命令，如下  <figure class="highlight json"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;react-app-rewired start&quot;</span>,<br>        <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;react-app-rewired build&quot;</span>,<br>        <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;react-app-rewired test&quot;</span>,<br>        <span class="hljs-attr">&quot;eject&quot;</span>: <span class="hljs-string">&quot;react-app-rewired eject&quot;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>支持less  <figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;!-- 当前文件：config-overrides.js --&gt;<br>&lt;!-- 引入重写方法和添加lessloader的方法 --&gt;<br><span class="hljs-keyword">const</span> &#123; override, addLessLoader &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;customize-cra&#x27;</span>)<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    webpack: override(<br>        &lt;!-- 可以传递一个配置对象作为参数 --&gt;<br>        addLessLoader()<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h1 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h1><ul><li>查看addLessLoader的源码，可以看到内部返回了一个函数，函数的参数是一个对象，即cli原本webpack配置的对象，然后在其基础上做我们想做的扩展，在返回该对象即可；下图为config对象<img src="https://img.shuaxindiary.cn/webpack.config.png"></li><li>实战，添加一个支持解析md文件内容的loader，这里使用raw-loader来读取md文件原始内容，然后在具体的文件内部做其他操作</li><li><ul><li>安装raw-loader</li></ul></li><li><ul><li>获取原始配置下rules <img src="https://img.shuaxindiary.cn/webpack.config2.png"></li></ul></li><li><ul><li>第一个参数是对解析器（parser）的<a href="https://webpack.js.org/configuration/module/#ruleparser">配置</a>，图中为关闭require.entrue；第二个是对rules解析的<a href="https://webpack.js.org/configuration/module/#ruleoneof">配置</a>， 配置当一类文件match某一个loader，处理完毕后就退出<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;!-- 当前文件：config-overrides.js --&gt;<br><span class="hljs-keyword">const</span> addMdLoader=<span class="hljs-function">()=&gt;</span><span class="hljs-function"><span class="hljs-params">config</span>=&gt;</span>&#123;<br>    &lt;!-- 获取rules数组 --&gt;<br>    <span class="hljs-keyword">let</span> rules=config.module.rules[<span class="hljs-number">1</span>].oneOf<br>    rules.unshift(&#123;<br>        test: <span class="hljs-regexp">/\.txt$/i</span>,<br>        use: <span class="hljs-string">&#x27;raw-loader&#x27;</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> config<br>&#125;<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    webpack: override(<br>        addMdLoader(),<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇笔记所有的尝试来自最初对md文件解析的整个需求，所以总结一下react or vue中怎么获取md文件内容</p><ul><li>直接引入对应的md文件，然后fetch去取</li><li>通过配置raw-loader，然后直接获取引入的md文件即可拿到内容</li><li>通过社区的markdown-loader，然后直接引入即可那得到渲染成HTML后的内容</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网格布局</title>
    <link href="/2020/11/01/css/%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <url>/2020/11/01/css/%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>最近看<a href="https://www.zhangxinxu.com/">张鑫旭</a>前辈的博客，感觉又找回最开始学习HTML&amp;CSS时候的感觉，好玩有趣；然后就想起了一直听过但没写过的网格布局，记录一下。</p><a id="more"></a><h1 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout">网格布局</a></h1><ul><li>和弹性盒子（flex）一样官方提供的方便布局的新属性 display:grid</li><li>如名字一样，开启该属性后会将目标dom设置成由一个一个单元格组成的一个布局容器</li></ul><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>容器：开启了grid的dom；内部由数个单元格组成</li><li>行：单元格水平排列</li><li>列：单元格纵向排列</li><li>网格线：容器下的每个项目都分布在每个单元格中，开发这模式可以看到该线<img src="http://img.shuaxindiary.cn/grid-line.png"></li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><ul><li>效果：<img src="http://img.shuaxindiary.cn/grid-demo1.png"></li><li>说明：特殊的布局<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-id">#app</span> &#123;</span><br>        width: 500px;<br>        height: 500px;<br>        margin: 0 auto;<br><span class="css">        <span class="hljs-comment">/* 开启网格布其 */</span></span><br>        display: grid;<br><span class="css">        <span class="hljs-comment">/* 定义单元格名称以及在容器中的分布 */</span></span><br>        grid-template-areas: &#x27;a a b&#x27;&#x27;a a c&#x27;&#x27;d e c&#x27;;<br>    &#125;<br><span class="css">    <span class="hljs-selector-id">#app</span>&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="css">        <span class="hljs-comment">/* 定义当前单元格在容器中的分布区域 */</span></span><br>        grid-area: a;<br>    &#125;<br><br><span class="css">    <span class="hljs-selector-id">#app</span>&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child(2)</span> &#123;</span><br>        grid-area: b;<br>    &#125;<br><br><span class="css">    <span class="hljs-selector-id">#app</span>&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child(3)</span> &#123;</span><br>        grid-area: c;<br>    &#125;<br><br><span class="css">    <span class="hljs-selector-id">#app</span>&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child(4)</span> &#123;</span><br>        grid-area: d;<br>    &#125;<br><br><span class="css">    <span class="hljs-selector-id">#app</span>&gt;<span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child(5)</span> &#123;</span><br>        grid-area: e;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: lightblue;&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: lightcoral;&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: lightgoldenrodyellow;&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: lightgrey;&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: lightsalmon;&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h3><ul><li>效果：<img src="http://img.shuaxindiary.cn/grid-demo2.png"></li><li>说明：一个九宫格，里面每个单元格之间的间距都是一样的<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-id">#app</span> &#123;</span><br>        width: 420px;<br>        height: 420px;<br>        padding: 20px;<br>        margin: 0 auto;<br><span class="css">        <span class="hljs-comment">/* 开启grid */</span></span><br>        display: grid;<br><span class="css">        <span class="hljs-comment">/* 设置有几行 每一行的宽度 */</span></span><br><span class="css">        <span class="hljs-comment">/* repeat是提供的一个方便书写的函数 第一个参数为设置几行（列）第二个参数为具体的值 */</span></span><br>        grid-template-rows: repeat(3, 140px);<br><span class="css">        <span class="hljs-comment">/* 同理 列 */</span></span><br>        grid-template-columns: repeat(3, 140px);<br><span class="css">        <span class="hljs-comment">/* 设置单元格内的元素排列方式 和flex类似 */</span></span><br>        align-items: center;<br>        border: 1px solid lightsalmon;<br>    &#125;<br><br><span class="css">    <span class="hljs-selector-id">#app</span>&gt;<span class="hljs-selector-tag">div</span> &#123;</span><br>        width: 100px;<br>        height: 100px;<br>        margin: 0 auto;<br>        background-color: lightsalmon;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS&amp;HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>父子组件生命周期函数</title>
    <link href="/2020/10/29/vue/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
    <url>/2020/10/29/vue/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>最近一次写Vue的时候，因为父子组件都有声明周期函数，在操作顺序上出现了一些之前没有想到的问题，特此记录一下</p><h1 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h1><ul><li>beforeCreate、created、beforeMount、mounted</li><li>beforeUpdate、updated、beforeDestroy、destroyed</li><li>activated、deactivated<a id="more"></a><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> One=&#123;</span><br><span class="javascript">        <span class="hljs-comment">// ....</span></span><br>        beforeCreate() &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;子组件的beforeCreate&quot;</span>)</span><br>        &#125;,<br>        created() &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;子组件的created&quot;</span>)</span><br>        &#125;,<br>        beforeMount() &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;子组件beforemount&quot;</span>)</span><br>        &#125;,<br>        mounted() &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;子组件mounted&quot;</span>)</span><br>        &#125;<br><span class="javascript">        <span class="hljs-comment">// ....</span></span><br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-comment">// ...</span></span><br>        components:&#123;<br>            One<br>        &#125;,<br>        beforeCreate() &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;父组件的beforeCreate&quot;</span>)</span><br>        &#125;,<br>        created() &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;父组件的created&quot;</span>)</span><br>        &#125;,<br>        beforeMount() &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;父组件beforemount&quot;</span>)</span><br>        &#125;,<br>        mounted() &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;父组件mounted&quot;</span>)</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-comment">// ...</span></span><br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>上面的运行结果为:</li><li><img src="http://img.shuaxindiary.cn/lifecycle.png"></li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul><li>因为Vue是从根组件（Vue实例）开始执行的，然后依次去读取目标dom下的模板字符串开始进行解析和生成vdom，然后在这个过程中开始执行一些生命钩子函数，依次从beforeCreate-&gt;created-&gt;beforeMount，这里就开始准备生成vdom了</li><li>子组件是含括在父组件内部的，开始生成vdom时，每个组件都是一个实例，都会经历一圈生命周期函数，然后完成该组件的vdom后，才算整个vue的vdom完毕，所以父组件的mounted阶段才会在最后才执行</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于毕业生图像采集</title>
    <link href="/2020/10/13/%E9%9A%8F%E7%AC%94/%E5%85%B3%E4%BA%8E%E6%AF%95%E4%B8%9A%E7%94%9F%E5%9B%BE%E5%83%8F%E9%87%87%E9%9B%86/"/>
    <url>/2020/10/13/%E9%9A%8F%E7%AC%94/%E5%85%B3%E4%BA%8E%E6%AF%95%E4%B8%9A%E7%94%9F%E5%9B%BE%E5%83%8F%E9%87%87%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><ul><li>毕业生图像采集：毕业要用在毕业证+学位证+学信网的照片的拍摄工作</li><li>拍摄时间：一般在大四，学校会组织集体参加拍摄</li><li>重要性：这东西会影响拿证时间，所以请重视</li><li>记录一下没有参加集体拍摄的，个人怎么补拍<a id="more"></a></li></ul><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>补拍方式有两种：<strong>网上上传</strong> 和 <strong>线下拍摄</strong></p><p><strong>网上上传</strong></p><ul><li>登陆 <a href="http://www.xinhuacu.com/#/login">大学生图像采集网</a>，注册登录上传符合要求的照片</li><li>照片要求再上传的时候会有说明</li><li>通过审核后，会帮你传到学信网，然后将上传的照片洗好连同电子存档（一个u盘里）一起发给你或者你填写的地址</li><li>缴费60元</li></ul><p><strong>线下拍摄</strong></p><ul><li>在<a href="http://www.xinhuacu.com/#/home/collectionCenter">大学生图像采集网-采集中心</a>查找你所在地的新华社联系方式和地点</li><li>按照要求时间去拍摄即可，因为是蓝底照片建议穿深色系衣服</li><li>需要携带证件：身份证+学生证+你学校的代号（网上有类似软件，采集中心也有，可以查询）</li><li>缴费60元（有的会有后期ps等服务会不止60，根据需要考虑）</li><li>有的地方支持现场即拍即取，有的不可以，登记的时候会有说明</li></ul><h1 id="额外说明"><a href="#额外说明" class="headerlink" title="额外说明"></a>额外说明</h1><ul><li>那个采集中心没有北京的地点，网上也是说哪里的都有，这里因为我在北京拍的，额外说明</li><li>地址：宣武门H口右边-环球财经中心一楼-中国图片社</li><li>地图可以搜：中国图片社全国高校毕业生像信息采集中心，那栋楼长下面这个样子</li><li><img src="http://img.shuaxindiary.cn/IMG_4496.JPG"></li></ul><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>希望大家都可以顺利毕业（包括我自己）</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间分片</title>
    <link href="/2020/09/19/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E6%97%B6%E9%97%B4%E5%88%86%E7%89%87/"/>
    <url>/2020/09/19/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E6%97%B6%E9%97%B4%E5%88%86%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>昨天（2020-9-19）看2019vueconf的时候，尤大在分享vue3的特点的时候，提到了vue和react在底层针对模板编译和jsx优化的一些不同的时候提到了一个词，时间分片；然后就做了一点功课，写个笔记。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote><p><strong>解决了什么？</strong></p><ul><li>js会阻塞ui的渲染，所以当一个操作耗时非常长时，就会造成页面内容显示滞后，带来很不好的用户体验</li><li>通过将操作划分为一个个小的阶段，来执行</li></ul></blockquote><blockquote><p><strong>怎么做的？</strong></p><ul><li>利用异步的一些api</li><li>settimeout</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback">requestIdleCallback</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame">requestAnimationFrame</a></li></ul></blockquote><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>实例描述：通过js插入10000个li到ul中</p><h3 id="使用最普通的循环插入"><a href="#使用最普通的循环插入" class="headerlink" title="使用最普通的循环插入"></a>使用最普通的循环插入</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-meta">    &#x27;use strict&#x27;</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.list&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">let</span> total = <span class="hljs-number">100000</span></span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; total; ++i) &#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> item = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>)</span><br><span class="javascript">        item.innerText = <span class="hljs-string">`我是<span class="hljs-subst">$&#123;i&#125;</span>`</span></span><br>        list.appendChild(item)<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://img.shuaxindiary.cn/shijianfenpian-3.png"></p><h3 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-meta">    &#x27;use strict&#x27;</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.list&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">let</span> total = <span class="hljs-number">100000</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> render = <span class="hljs-function">(<span class="hljs-params">start, end</span>) =&gt;</span> &#123;</span><br>        if (end &lt; total) &#123;<br><span class="javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">                <span class="hljs-keyword">let</span> frag = <span class="hljs-built_in">document</span>.createDocumentFragment()</span><br><span class="javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start; i &lt; end; ++i) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">let</span> item = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>)</span><br><span class="javascript">                    item.innerText = <span class="hljs-string">`我是<span class="hljs-subst">$&#123;i&#125;</span>`</span></span><br>                    frag.appendChild(item)<br>                &#125;<br>                list.appendChild(frag)<br>                render(end + 1, end + 20)<br>            &#125;, 10)<br>        &#125;<br>    &#125;<br>    render(0, 20)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://img.shuaxindiary.cn/shijianfenpian-1.png"></p><h2 id="使用requestAnimationFrame"><a href="#使用requestAnimationFrame" class="headerlink" title="使用requestAnimationFrame"></a>使用requestAnimationFrame</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-meta">    &#x27;use strict&#x27;</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.list&#x27;</span>)</span><br><span class="javascript">    <span class="hljs-keyword">let</span> total = <span class="hljs-number">100000</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> size = <span class="hljs-number">20</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> render = <span class="hljs-function">(<span class="hljs-params">total, index</span>) =&gt;</span> &#123;</span><br>        if (total &lt;= 0) &#123;<br><span class="javascript">            <span class="hljs-keyword">return</span></span><br>        &#125;<br><span class="javascript">        <span class="hljs-keyword">let</span> curPage = <span class="hljs-built_in">Math</span>.min(total, size)</span><br><span class="javascript">        <span class="hljs-built_in">window</span>.requestAnimationFrame(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> fragment = <span class="hljs-built_in">document</span>.createDocumentFragment()</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; curPage; ++i) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">let</span> item = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>)</span><br><span class="javascript">                item.innerText = <span class="hljs-string">`我是<span class="hljs-subst">$&#123;index + i&#125;</span>`</span></span><br>                fragment.appendChild(item)<br>            &#125;<br>            list.appendChild(fragment)<br>            render(total - curPage, index + curPage)<br>        &#125;)<br>    &#125;<br>    render(total, index)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://img.shuaxindiary.cn/shijianfenpian-2.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>时间分片就是讲耗时的长任务，划分为一个个耗时很短的小任务；将处理结果一点点返回给用户</li><li>主要的手段就是利用js的event loop机制，通过异步的一些操作来处理切分任务</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><blockquote><p><strong>关于requestAnimationFrame和setInterval处理动画的区别</strong></p><ul><li>帧率和循环的事件交由浏览器控制，可以更好的控制的帧率</li><li>性能流畅度更优秀</li><li>新api，兼容性会有些问题</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件著作权申请</title>
    <link href="/2020/08/31/%E9%9A%8F%E7%AC%94/%E8%BD%AF%E4%BB%B6%E8%91%97%E4%BD%9C%E6%9D%83%E7%94%B3%E8%AF%B7/"/>
    <url>/2020/08/31/%E9%9A%8F%E7%AC%94/%E8%BD%AF%E4%BB%B6%E8%91%97%E4%BD%9C%E6%9D%83%E7%94%B3%E8%AF%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>关于申请这个证书的原因是因为学校说申请后就可以不用写毕业论文和参加毕业答辩，然后恰巧当时答辩写了一套前后端都有的带管理系统的webapp；索性就查了查相关信息，就去申请了，刚才（2020-8-31：10:30）看到已经制证发证完成只需要等待快递送到就行；所以来记录一下相关流程。</p><a id="more"></a><h3 id="个人情况概述"><a href="#个人情况概述" class="headerlink" title="个人情况概述"></a>个人情况概述</h3><ul><li><p>首先贴一下我当时申请时候参考的教程链接：<a href="https://zhuanlan.zhihu.com/p/72729628">链接</a></p></li><li><p>因为帖子内容很久远了，后来他们对系统进行了升级，所以只记录一些和帖子不一样的地方</p></li><li><p>关于软件著作权，指的是对申请的软件的内容（具体代码等）保护；需要区分和专利的区别，专利是对软件构思（可以理解成功能）的保护</p></li><li><p>申请时间是从7-10申请到8-27状态显示制证发证</p></li><li><p><img src="http://img.shuaxindiary.cn/zhuzuoquan.png"></p></li></ul><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p><strong>改版后选择板块不太一样，其他流程需要的材料都是一致的</strong></p><ul><li>去官网注册账号：<a href="https://register.ccopyright.com.cn/registration.html#/registerSoft">官网</a></li><li>登陆后，如果没在软件登记页，点击头部的软件登记按钮，如下图（实名认证完成后也是回到该页）</li><li><img src="http://img.shuaxindiary.cn/zhuzuoquan2.png"></li><li>到该页后选择下图选项，第一次登陆，会提示你去实名认证，选择个人就好；审核需要3个工作日。</li><li><img src="http://img.shuaxindiary.cn/zhuzuoquan3.png"></li><li>剩下的就和链接的差不多；按着操作即可</li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>antd表格组件扩展行</title>
    <link href="/2020/08/28/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/antd%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6%E6%89%A9%E5%B1%95%E8%A1%8C/"/>
    <url>/2020/08/28/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/antd%E8%A1%A8%E6%A0%BC%E7%BB%84%E4%BB%B6%E6%89%A9%E5%B1%95%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><ul><li>最近入职的团队主要技术栈是react，组件库是antd；因为之前写react少，antd也没用过，所以导致上手第一时间还有蛮多不习惯的；然后就有些小坑，记录一下。</li></ul><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><ul><li>需求是表格展示数据需要将一些数据隐藏起来，然后通过点击指定的按钮展开/收起一个面板，来显示这些数据</li><li>官方有提供这个功能，但是没有提供接口让你可以指定需要展开的按钮，然后查了一圈也没查到，就好好看了看文档，研究了下可以通过几个api来实现这个需求</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><blockquote><p>需要的api</p></blockquote><ul><li>expandable：展开功能配置</li><li>expandIcon：定义展开图标</li><li>expandedRowKeys：控制展开的行</li></ul><blockquote><p>思路说明</p></blockquote><ul><li>当table组件配置了expandable后，表格会自动在第一列添加个按钮（是个图标），然后通过这个按钮来控制面板的展开收起</li><li>1.通过定义展开图标来隐藏图标，这样就没有点击的目标了，等于取消了该开关</li><li>2.设置expandedRowKeys，通过表格每一行的key来控制打开或隐藏那一行面板</li><li>3.expandedRowKeys是一个数组，元素为字符串，就是每一行的key，当这个数组有某一行的key，这一行的面板就会被打开，没有反之；利用该特性，在我们需要指定的按钮上绑定一个事件，来动态的添加对应行的key到该数组即可</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plain"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs React">import React, &#123; useState &#125; from &#39;react&#39;<br>import &#123; Table, Button &#125; from &#39;antd&#39;<br>import &#39;.&#x2F;main.css&#39;<br><br>const Main &#x3D; () &#x3D;&gt; &#123;<br>    const [openKeys, setOpenKeys] &#x3D; useState([])<br>    const handleOpenRow &#x3D; (id) &#x3D;&gt; &#123;<br>        let index &#x3D; openKeys.indexOf(id)<br>        if (index &#x3D;&#x3D;&#x3D; -1) &#123;<br>            setOpenKeys(() &#x3D;&gt; &#123;<br>                return [...openKeys, id]<br>            &#125;)<br>        &#125; else &#123;<br>            const arr &#x3D; openKeys<br>            arr.splice(index, 1)<br>            setOpenKeys(() &#x3D;&gt; &#123;<br>                return [...arr]<br>            &#125;)<br>        &#125;<br><br>    &#125;<br>    const columns &#x3D; [<br>        &#123;<br>            title: &#39;ID&#39;,<br>            align: &#39;center&#39;,<br>            dataIndex: &#39;key&#39;,<br>        &#125;,<br>        &#123;<br>            title: &#39;姓名&#39;,<br>            align: &#39;center&#39;,<br>            dataIndex: &#39;name&#39;,<br>        &#125;, &#123;<br>            title: &quot;操作&quot;,<br>            align: &#39;center&#39;,<br>            render: (row) &#x3D;&gt; &#123;<br>                return (<br>                    &lt;Button type&#x3D;&quot;link&quot; onClick&#x3D;&#123;() &#x3D;&gt; handleOpenRow(row.key)&#125;&gt;<br>                        &#123;<br>                            openKeys.indexOf(row.key) &#x3D;&#x3D;&#x3D; -1 ? &#39;展开&#39; : &#39;收起&#39;<br>                        &#125;<br>                    &lt;&#x2F;Button&gt;<br>                )<br>            &#125;<br>        &#125;<br>    ]<br>    const tableData &#x3D; [&#123;<br>        key: &#39;1&#39;,<br>        name: &quot;one&quot;,<br>        sex: &quot;man&quot;<br>    &#125;,<br>    &#123;<br>        key: &#39;2&#39;,<br>        name: &#39;two&#39;,<br>        sex: &quot;man&quot;<br>    &#125;]<br>    return (<br>         &lt;div className&#x3D;&quot;container&quot;&gt;<br>            &lt;Table columns&#x3D;&#123;columns&#125; dataSource&#x3D;&#123;tableData&#125;<br>                &#x2F;&#x2F; 开启扩展行<br>                expandable&#x3D;&#123;&#123;<br>                    &#x2F;&#x2F; 定义扩展行内容<br>                    expandedRowRender: record &#x3D;&gt; &#123;<br>                        return &lt;p&gt;sex：&#123;record.sex&#125;&lt;&#x2F;p&gt;<br>                    &#125;,<br>                    &#x2F;&#x2F; 自定义按钮图标<br>                    expandIcon: _ &#x3D;&gt; &#39;&#39;,<br>                    &#x2F;&#x2F; 定义哪些行开启<br>                    expandedRowKeys: openKeys<br>                &#125;&#125;<br>            &#x2F;&gt;<br>        &lt;&#x2F;div&gt;<br>    )<br>&#125;<br>export default Main<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建图床服务器</title>
    <link href="/2020/06/14/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2020/06/14/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="关于图床"><a href="#关于图床" class="headerlink" title="关于图床"></a>关于图床</h1><ul><li>引用百度的介绍，就是专门用来存放图片，同时允许你把图片对外连接的网上空间。</li><li>搭建的原因就是这些第三方提供图床服务的厂商，一般都可以做图片加速等，而且还提供一定存储空间，可以减轻自己服务的存储空间等，还有个目的，相当做个备份。</li><li>特此记录一下，顺便测试一下搭建后的效果。</li></ul><a id="more"></a><h1 id="关于图床的选择"><a href="#关于图床的选择" class="headerlink" title="关于图床的选择"></a>关于图床的选择</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/35270383">盘点国内免费好用的图床</a></li><li>选择了七牛</li></ul><h1 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h1><ul><li>注册七牛账号，登陆，进入主界面后点击对象存储，创建空间</li><li>点击创建的空间设置，进入域名管理界面，绑定自己的已经备案的域名（这里创建后会给一个测试域名，只能测试用，30天后会自动收回），下图为设置界面，输入自己域名，然后根据需要做对应设置<img src="http://img.shuaxindiary.cn/imgserver.png"></li><li>设置完成后，去自己域名的对应注册商，添加CNAME记录 <a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name">官方介绍</a>，官方说的很清楚</li><li>至此搭建完成</li></ul><h1 id="本地上传"><a href="#本地上传" class="headerlink" title="本地上传"></a>本地上传</h1><ul><li>使用<a href="https://github.com/Molunerfinn/PicGo">PicGo</a></li><li>下载完毕后，进入对应的图床服务器设置界面，进行配置，<img src="https://img.shuaxindiary.cn/imgserver2.png"></li><li>配置概述：前两个在秘钥管理中查看，存储空间名为对应图床的空间名，访问网址为上文添加的域名，存储区域这里我的不是文字选项，需要自己输入编号，这里七牛对应的几个地区编号为[{z0:华东},{z1:华北},{z2:华南},{z3:北美}]，后面2个可有可无</li><li>至此配置完成，然后就可以在上传去上传测试了，如下图 <img src="https://img.shuaxindiary.cn/imgserver3.png"></li><li>上传完成后，会以下面链接格式的选项的格式自动复制链接</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git笔记2</title>
    <link href="/2020/05/29/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/git%E7%AC%94%E8%AE%B02/"/>
    <url>/2020/05/29/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/git%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在之前使用git管理代码的时候，会经常出现commit后，才发现有的地方有注释没加或者注释错别字等等问题，导致需要重新修改在add在commit，然后就会出现log中很多很没意义的commit，记录一下当出现这种情况，怎么消除之前的commit，让log看起来更清晰明了</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>对这种一般有两种方法，一种是操作HEAD回到指定的commit，然后修改内容在commit即可；另外就是合并多个commit</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>git管理的目录中，有这么几个概念：</p><ul><li>工作目录：workspace—为我们平时编辑文件的区域</li><li>缓存区：index—git add到的区域</li><li>本地仓库：local repository—git commit的区域</li><li>远程仓库：remote repository—git push的区域</li><li>HEAD：指针，默认始终指向我们最新的commit</li></ul><h3 id="回滚commit"><a href="#回滚commit" class="headerlink" title="回滚commit"></a>回滚commit</h3><blockquote><p>相关概念</p></blockquote><ul><li>用到git reset命令</li><li>这个命令有三个参数:- - &lt;soft|hard|mixed&gt;</li><li>用法 git reset – &lt;参数&gt; [指定commit编号]</li></ul><blockquote><p>参数的含义</p></blockquote><ul><li>soft：不改变工作区的内容，之前commit的内容会回退在缓存区</li><li>mixed：不加参数时的默认为该参数，之前的commit内容不回退到缓存，需要再次add</li><li>hard：会影响工作区，让回退前的commit的代码全部删除</li></ul><blockquote><p>soft演示</p></blockquote><ul><li>现在有个目录的分支是这样 <img src="/img/git/git.png" alt="图1"></li><li>情况是这样，在addcon这个commit后，发现没有添加注释，于是添加了注释，再一次进行了commit并注释为add注释；这一次commit就没有什么实质作用，现在干掉这次commit</li><li>步骤：使用reset，通过指定commit的id来改变HEAD指向到init：git reset –soft 234ee9da </li><li>现在分支情况是 <img src="/img/git/git2.png" alt="图2"></li><li>暂存区：<img src="/img/git/git3.png" alt="图3"> 显示尚未commit</li><li>最后在commit一次，在查看分支情况：<img src="/img/git/git4.png" alt="图4"> 这样就将前两次应该一次完成提交的commit改成了一次</li><li>总结：如果仅仅想回滚commit，重新commit，可以使用soft</li></ul><blockquote><p>mixed</p></blockquote><ul><li>情况和上述一样,现在分支情况:<img src="/img/git/git5.png" alt="图5"> </li><li>现在回退到完成注释和功能的commit，然后干掉addcon2和添加注释两次commit   git reset –soft d62192e2  </li><li>查看现在分支状况和缓存区 <img src="/img/git/git6.png" alt="图6">  <img src="/img/git/git7.png" alt="图7"> </li><li>和soft的区别仅仅是mixed的时候缓存区中没有内容，需要手动add修改内容后在进行commit，但是相同的是都没有修改工作区的内容</li><li>总结：回滚版本并需要修改一下代码，重新commit，可以使用mixed</li></ul><blockquote><p>hard</p></blockquote><ul><li>现在的分支情况： <img src="/img/git/git8.png" alt="图8"> </li><li>背景：现在init之后的commit的内容都作废，需要重新开始，并且要清楚commit记录，可以使用hard</li><li><img src="/img/git/git9.png" alt="图9"> <img src="/img/git/git10.png" alt="图10"> </li><li>总结：hard适用于回滚commit时，且回滚到的指定commit之后的commit都不需要，会清空缓存区和工作区中不需要的commit的内容</li></ul><h3 id="合并commit"><a href="#合并commit" class="headerlink" title="合并commit"></a>合并commit</h3><p>使用git rebase来合并需要合并的多个commit</p><blockquote><p>演示</p></blockquote><ul><li>现在分支情况 <img src="/img/git/git11.png" alt="图11"> </li><li>现在要把*<strong>完成功能1*** *</strong>完成功能2*** <strong><em>完成所有功能</em></strong>合并成一次commit</li><li>先把HEAD指向调到需要合并的多个commit的第一个commit:git rebase -i HEAD~3</li><li>说明：HEAD的数字1为最新的commit</li><li>这时会出现一个vim编辑器打开的文件 <img src="/img/git/git12.png" alt="图12"> </li><li>头三行为要合并的分支，以第一行为例：<strong>pick</strong>是一个命令，<strong>1e1f6cb</strong>为该commit的编号，<strong>完成功能1</strong>为该commit的注释</li><li>合并commit就是通过改变不同的命令来实现，看到下面的注释有提示命令有pick、reword、edit、squash、fixup、exec、break、drop、label、reset</li><li>修改第二三行的pick为squash，该命令为使用commit，与之前的commit合并</li><li>修改保存退出后，会继续显示一个vim编辑器打开的文件，这里可以更改commit的注释 <img src="/img/git/git13.png" alt="图13"></li><li>上面的为合并的commit的注释，自行选择是否可以修改；下面为被合并的commit的注释信息 </li><li>操作完后，现在分支情况 <img src="/img/git/git14.png" alt="图14"></li></ul><h1 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h1><p>之前对于分支合并，一直使用的merge，无意间一次看到rebase也可以用来合并分支，于是试验了一下两者的区别；记录一下</p><blockquote><p>merge</p></blockquote><ul><li>指定一个分支，合并到当前所在分支；下例合并dev到master</li><li>git merge dev</li><li>现有的分支情况如下：<img src="/img/git/git15.png" alt="图15"></li><li>使用merge后 <img src="/img/git/git16.png" alt="图16"></li><li>对比发现，两者合并后在master分支多了一个commit</li></ul><blockquote><p>rebase</p></blockquote><ul><li>合并当前分支到执行分支；下例rebase 分支dev到master</li><li>git rebase &lt;指定branch&gt;</li><li>现有的分支情况如下：<img src="/img/git/git15.png" alt="图15"></li><li>使用rebase后 <img src="/img/git/git17.png" alt="图17"></li><li>没有新的commit出现，而是把dev最新的commit和master最新的commit进行了合并</li></ul><blockquote><p>总结</p></blockquote><ul><li>对于需要严格保留每次commit记录的时候使用merge</li><li>对于只是在另一个分支进行了一些额外的开发测试，最后确认无误，且该功能本来就是要在某分支进行的，就可以直接使用rebase；比如自己在一个分支开发某一个模块，然后对于其中的一些地方不想影响其他代码，就可以单独开一个新分支进行开发测试，开发完成没问题后，不需要保留记录，直接rebase即可</li></ul><h1 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h1><p>记录一下这个学习过程中了解到的一些其他的操作</p><blockquote><p>修改commit注释</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git commit - -amend<br></code></pre></div></td></tr></table></figure><blockquote><p>撤销缓存区的文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 方式1</span><br>git reset<br><span class="hljs-comment"># 方式2 </span><br>git rm --cached &lt;filename&gt;<br></code></pre></div></td></tr></table></figure><blockquote><p>从缓存和工作目录中同时清除</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 方式1</span><br>git reset --hard<br><span class="hljs-comment"># 方式2</span><br>git reset --f &lt;filename&gt;<br></code></pre></div></td></tr></table></figure><blockquote><p>查看缓存区文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git status<br></code></pre></div></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://gitbook.liuhui998.com/4_2.html">gitbook中文</a></li><li>分支可视化使用的vscode的插件—GitGraph</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>近期总结</title>
    <link href="/2020/05/21/%E9%9A%8F%E7%AC%94/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
    <url>/2020/05/21/%E9%9A%8F%E7%AC%94/%E8%BF%91%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今年真的很不平凡，因为疫情，开学推迟、假期延长，在家待的时间变的非常长（19-12-26到家，现在2020-5-21），但是虽然这样说，这小半年的在家时间，也还是经历了很多事情，家里的一些事、春招、自己的一些反思等等，所以想着就借这次机会开始慢慢的学习写写阶段性的总结</p><a id="more"></a><h1 id="关于疫情"><a href="#关于疫情" class="headerlink" title="关于疫情"></a>关于疫情</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从发生，到爆发，到现在慢慢可控；还是觉得很不真实，我们这代人（90后晚期）从小到大都在很和平很美好的生活环境下长大，如果要说经历过什么类似这样的大事情，可能就是非典、汶川大地震，但是碍于当时年龄很小，对事情的严重性和记忆非常模糊；所以对这些事情总觉得离自己很遥远，是电视、书里才会发生的；可是生活就是这么戏剧性，在自己开始慢慢成熟、懂事即将进入社会的时候，被生活上了一课；再次为那些逝世的同胞默哀，向那些为此次事件奔波的工作人员致敬</p><h1 id="关于kobe去世"><a href="#关于kobe去世" class="headerlink" title="关于kobe去世"></a>关于kobe去世</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这个消息，是我醒来看到非常多朋友发来的微信，然后知道的；其实我并不是科密，在我开始看球的那几年，有一段时间我还是科黑，因为周围太多人喜欢他，太多人吹他，因为他太过冷血，对自己，对队友，我就越发的不喜欢他，因为我是一个比较喜欢和和气气的人，所以每次看见他和自己心仪的球队对阵时，他投进一球，领先一分，我都会咬牙切齿的口吐芬芳；对他态度的转变是在他退役的那一年，看到了关于他的一部纪录片《muse》<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;《muse》里了解到了他是如何维持自己的竞技状态，是怎么坚持数十年如一日的去训练，怎么在伤病困扰下调整自己的状态；这些都是我不曾了解到的，尤其在自己面对同样的一些处境的时候，才越发的体会到他的伟大；极强的自律和对达成目标的强烈渴望，造就了他不平凡的职业生涯，RIP</p><h1 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个博客是在自己的第一份实习结束的时候搭起来的，一开始就是抱着记录一些自己的学习笔记，然后可以在面试的成为一个加分点；非常结果导向型的一个目的；所以导致更新真的很不频繁，百般不情愿；但是这回春招的经历和这段时间学习过程让我对写博客这件事有了不一样的看法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先就是对内容这块，因为平时无论哪里看到的技术博客，都非常的正式、教程导向；所以就导致自己无形中觉得博客就得这样写，虽然这样也没错，毕竟是要发布在网络上会有人浏览到，所以肯定不能胡扯；但是最核心的目的应该还是记录自己学习的心得和过程，严谨保证记录的东西没有错误，风格其实可以更多元化一点，可以是很简短的经历描述自己踩坑的一点经验或者对一些技术点的认识；只要是自己的收货即可；再者就是自己本身也一直想培养一个记录的习惯，可以记录自己各个阶段的一个思考的状态，也可以锻炼一下自己的语言文字总结能力等等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;希望接下来的半年乃至以后，可以一直保持好这个习惯</p><h1 id="关于春招"><a href="#关于春招" class="headerlink" title="关于春招"></a>关于春招</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次春招投递了腾讯的前端实习，然后前后算上提前批一共面试了3次；最后都gg了，其实有点受打击，但是调整过来后，觉得收获还是很多；</p><blockquote><p><strong><em>感受</em></strong><br>对这几次面试的感受还是很不错，面试官都很nice，过程中会对没有思路的地方进行一些引导，然后来进行提问；也会对不知道的地方进行一些说明，所以整体的感受还是很奈斯，只怪自己太菜，有很多地方都一知半解</p></blockquote><blockquote><p><strong><em>反思</em></strong></p></blockquote><ul><li>之前就听过大厂面试造火箭，这种说法；所以在一开始也有点畏惧，导致第一次面试的时候很紧张，自己知道的问题都回答的非常糟糕；后面调整好状态后，相对第一次还是好不少</li><li>关于造火箭这里，我觉得其实也没那么夸张，问的东西都是非常基础，只是这个基础可能范围比较广和深，但是这些东西都是自己平时可以看到学到查到的东西，不像社招的一些经验是必须去实战一定规模的项目，参与进去才会体会到的，所以我觉得整体还是很基础，只是之前自己的学习习惯有些问题，导致面试结果不是很理想</li><li>关于学习习惯这里，确实在一开始自己对技术的学习只停留在api使用，达到效果即可；浅尝辄止，经不住推敲就是现在自己的状态，所以还是很感谢这次面试，让自己意识到了自己的问题，可以让自己再接下来秋招的准备中去更正</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>距离秋招还有接近四个月多的时间，准备接下来调整好节奏，开始好好准备，奥利给！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx代理</title>
    <link href="/2020/05/14/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/nginx%E4%BB%A3%E7%90%86/"/>
    <url>/2020/05/14/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/nginx%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>今天（2020-5-14）试着用nginx做了一下后端接口的代理，然后了解一下正反向代理，记录一下学习笔记</p><a id="more"></a><h1 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h1><p>就是在请求端和响应端之间，多了一层处理我们请求的服务器，叫做代理服务器</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><blockquote><p>正向代理</p></blockquote><ul><li>过程：客户端向代理服务器发送http请求，并指定目标服务器，然后代理服务器去客户端指定的服务器请求内容，然后把接收到的内容在返回给客户端</li><li>作用：实现科学上网；A能访问B但是不能访问Google，B可以访问Google，所以让A访问B，然后B去访问Google，再把收到的内容返回给A</li></ul><blockquote><p>反向代理</p></blockquote><ul><li>过程：和上述的过程类似，只是这时请求的url是代理服务器提供，然后代理服务器根据客户端发送的请求，去真正的目标服务器请求对应的内容，这个过程对客户端不可见，客户端并不知道还有一个服务器</li><li>作用：保护隐藏原始资源服务器、负载均衡、缓存静态内容等</li></ul><blockquote><p>对比</p></blockquote><ul><li>正向代理是代理客户端，使客户端对服务器不可见</li><li>反向代理是代理服务器，使服务器对客户端不可见</li></ul><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>使用nginx做正反向代理实验</p><blockquote><p>正向代理</p></blockquote><ul><li><a href="https://segmentfault.com/a/1190000022440690">正向代理实例</a> 条件有限，代做</li></ul><blockquote><p>反向代理</p></blockquote><ul><li>实验背景：一个前后端分离的demo，用nginx部署前端项目，并代理后端的接口；</li><li>配置文件如下，注：<figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">server&#123;<br>listen 80;<br>server_name ip地址或域名;<br>root 前端项目路径;<br>    # 部署页面<br>location = /todo &#123;<br><span class="hljs-meta">#</span><span class="bash"> 备注：如果外面root配置了目录，这里寻找本机目录时，路径为：前端项目路径+/todo</span><br><span class="hljs-meta">#</span><span class="bash"> 如果内部使用了root，寻找本机目录时，路径为：root目录+/todo</span><br><span class="hljs-meta">#</span><span class="bash"> 如果内部使用了<span class="hljs-built_in">alias</span>，寻找本机目录时，路径直接为root目录</span><br>index index.html;<br>&#125;<br>    # 部署静态资源<br>    location ~.*\.(css|js|png|jpg|jepg)&#123;<br>        root 静态资源路径;<br>    &#125;<br>    # 转发后端接口 这里一定要在结束添加 /；否则请求后端接口时，会把apis也携带在请求里<br>location ^~ /apis/ &#123;<br>proxy_pass 后端接口根路径;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>正向代理的对象是客户端，反向代理的对象是服务端</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.jianshu.com/p/208c02c9dd1d">正反向代理区别</a></li><li><a href="https://segmentfault.com/a/1190000022440690">Nginx做正反向代理</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>塞尔达通关</title>
    <link href="/2020/05/13/%E9%9A%8F%E7%AC%94/%E5%A1%9E%E5%B0%94%E8%BE%BE%E9%80%9A%E5%85%B3/"/>
    <url>/2020/05/13/%E9%9A%8F%E7%AC%94/%E5%A1%9E%E5%B0%94%E8%BE%BE%E9%80%9A%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>突如其来的疫情，导致过了一个及其长的寒假，长到现在还在假期（2020-5-13）；在家除了继续自己的充电计划和偶尔上上学校的网课外，谈不上清闲，但也觉得很无聊，所以冲动的跟风了一波，买了今年的第一件理财产品—switch</p><a id="more"></a><p><img src="/img/jottings/switch.png" alt="switch"></p><h1 id="关于游戏机和游戏"><a href="#关于游戏机和游戏" class="headerlink" title="关于游戏机和游戏"></a>关于游戏机和游戏</h1><ul><li><p>上一次有游戏机，印象里还是小学五六年级，买的那种国产十来块钱的黑白像素的“掌机”；再往前就是幼儿园到刚升小学那段时间的小霸王</p></li><li><p>因为家里一直以督促学习为由，在升入初中后，把我的玩具漫画等一切他们觉得会影响我学习的东西都处理掉了，就连电脑也是一会没有鼠标，一会没有键盘的存在；不过现在想想也是很庆幸，最容易沉迷游戏的年龄，因为家里的限制，不仅没有沉迷其中，还为了解决无聊，养成了看书的习惯</p></li></ul><h1 id="关于选择switch"><a href="#关于选择switch" class="headerlink" title="关于选择switch"></a>关于选择switch</h1><ul><li><p>虽然很长时间与游戏没有什么联系，但还是很想在休息的时候多一种休闲的方式；游戏肯定是一个很好的选择，但是对于网游的娱乐模式实在提不起兴趣，社交属性大于娱乐属性，所以一直三分钟热度；pc买游戏呢，因为常年在学校，笔记本性能堪忧，也一直作罢</p></li><li><p>难得这个假期时间过长，所以想着就入手一台游戏主机就好；最开始瞄准了大法的4公主，加上某东的优惠，很良心；就要剁手的时候，动森火了起来，switch再次进入了眼里；对任天堂的好感全部来自小时候在小霸王上玩的马里奥，于是查了一波switch游戏阵容，然后又正好因为动森很火，很喜欢这种养生游戏，于是就有了现在的故事</p></li></ul><h1 id="入手的游戏"><a href="#入手的游戏" class="headerlink" title="入手的游戏"></a>入手的游戏</h1><p>随机器一起买了誉为神作的《塞尔达旷野之息》卡带，和《动物森友会》电子版<br><img src="/img/jottings/games.png" alt="游戏"></p><h1 id="塞尔达"><a href="#塞尔达" class="headerlink" title="塞尔达"></a>塞尔达</h1><p>最开始玩的那几天，因为第一次接触开放世界游戏，会有点蒙逼，get不到玩点；于是跟着攻略玩了一天，大概清楚了游戏基本套路后，于是开始了自己的海拉鲁之旅</p><blockquote><p>优点</p></blockquote><ul><li>足够大的地图和各种丰富的道具，都带来了不一样的体验，四处乱跑解锁新地图，遇到新地方的那种感觉真的很有代入感</li><li>外加相对比较丰富的装备系统，不仅是装备效果不同，还有不同的穿戴效果，还可以玩出奇迹暖暖的感觉？！而且很喜欢的一点，装备没有升级系统，只存在攻击等级和耐久度的限制以及属性装备的属性效果；这样就一部分摆脱了需要去肝装备等级的乏味过程；耐久度的存在，又避免了一把武器走天下的问题，会督促玩家去不停的探索和发现新装备，这个过程就很有乐趣</li><li>有意思的打斗过程，因为装备和技能的随时切换，于是打斗就可以玩出很多sao操作，带了很不一样的体验</li><li>我最喜欢的2套装备<br><img src="/img/jottings/outfit1.JPG" alt="1"><br><img src="/img/jottings/outfit2.JPG" alt="2"></li></ul><blockquote><p>缺点</p></blockquote><ul><li>也不能算是缺点，只能说是为了后期DLC和续作让路，所以剧情比较简单；但是也能理解，因为游戏的开放性很大，很多地方都需要一点点的去探索、摸索，所以剧情也不是这个游戏的主要卖点，所以这个因人而异；</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>不愧被称为神作，吹爆</li><li>另外最近找到了小时候的小霸王游戏机，只可惜手柄坏了，卡带，主机还是好的，上一张对比图</li><li>两个时代<br><img src="/img/jottings/two.JPG" alt="2个时代"><br><img src="/img/jottings/cards.JPG" alt="氪金条"></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
      <tag>switch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初探Travis</title>
    <link href="/2020/05/12/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%88%9D%E6%8E%A2Travis/"/>
    <url>/2020/05/12/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%88%9D%E6%8E%A2Travis/</url>
    
    <content type="html"><![CDATA[<h1 id="初探cicd"><a href="#初探cicd" class="headerlink" title="初探cicd"></a>初探cicd</h1><blockquote><p>什么是cicd？</p></blockquote><ul><li>cicd是持续集成和持续交付的缩写，全称为continuous integration &amp; continuous delivery</li></ul><blockquote><p>cicd怎么做</p></blockquote><ul><li>通过一些工具，来进行</li></ul><blockquote><p>这些工具做了哪些事</p></blockquote><ul><li>将我们平时手动去跑的测试、打包、部署，全部通过前期配置，然后在以后的开发中，自动去执行，解放双手</li><li>举个vue项目的例子：  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 本地：对项目打包，（正规点还要跑一边测试）这些都没问题后，然后推送到远程仓库</span><br>npm run build -&gt; git push <br><span class="hljs-meta">#</span><span class="bash"> 服务器：进入对应的目录，然后拉去仓库的代码</span><br>git pull<br></code></pre></div></td></tr></table></figure></li><li>如果做好cicd的流程后，只需要git push代码就好，剩下的都会在集成工具里去根据配置文件，去自动执行，这个过程哪一步出现问题都会有对应的log文件<a id="more"></a></li></ul><blockquote><p>目的</p></blockquote><ul><li>将繁琐的体力劳动变化自动化，把精力集中在项目核心逻辑开发中，从而间接影响项目的质量<h1 id="Travis"><a href="#Travis" class="headerlink" title="Travis"></a>Travis</h1></li><li>和github搭配比较好的cicd工具</li><li>同样的工具还有Gitlab、Jenkins等</li></ul><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><blockquote><p>ci：集成部分</p></blockquote><ul><li>用github登陆Travis，指定我们需要进行集成的仓库</li><li>在该仓库的项目中添加.travis.yml配置文件</li><li>在配置文件中，配置当我们git push后，需要travis去做的事</li></ul><blockquote><p>cd：部署部分</p></blockquote><ul><li>这里使用ssh密钥免密登陆服务器的原理，来让travis可以免密登陆指定服务器</li><li>关于ssh登陆的流程和原理：在要登录服务器的机器生成一对秘钥，一公一私，公钥保存到目标服务器，私钥只能自己本地知道；然后当ssh连接目标服务器时，服务器会返回一段用公钥加密的字符串；客户端收到后，用私钥解密；然后在使用私钥加密该字符串，在发送给服务器，服务器使用公钥解密后，确认是自己之前传递的内容，确认成功进行连接</li><li>关于ssh：安全外科协议，使用非对称加密来进行身份验证</li></ul><h1 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h1><blockquote><p>项目</p></blockquote><ul><li>创建项目，git初始化，添加.travis.yml文件</li><li>git push到github</li><li>登陆travis，在设置页中，找到对应的仓库，并打开后面的按钮，如图<br><img src="/img/jottings/travis.png" alt="travis">  <figure class="highlight yaml"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs YAML"><span class="hljs-comment"># .travis.yml</span><br><span class="hljs-comment"># 指定项目语言</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">node_js</span><br><span class="hljs-comment"># 指定版本</span><br><span class="hljs-attr">node_js:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">10</span><br><span class="hljs-comment"># 指定分支：这样只有该分支发生变动后，才会进行操作</span><br><span class="hljs-attr">branches:</span> <br><span class="hljs-attr">only:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">serverBackup</span><br><span class="hljs-comment"># 安装依赖：如果需要</span><br><span class="hljs-comment"># install:</span><br><span class="hljs-comment"># - npm install</span><br><span class="hljs-comment"># 运行脚本</span><br><span class="hljs-attr">script:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;test&quot;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>说明</p></blockquote></li><li>travis的配置文件是YAML语法</li><li>travis的执行阶段（生命周期）分为：（括号的为可选阶段）</li><li>before_install -&gt; install -&gt;before_script -&gt; script -&gt; aftersuccess or afterfailure -&gt;(before_deploy-&gt;deploy-&gt;after_deploy)-&gt;after_script</li><li>安装依赖前-&gt;安装依赖-&gt;执行脚本之前-&gt;执行脚本-&gt;脚本执行成功后 或者 执行失败后-&gt;（部署前-&gt;部署-&gt;部署后）-&gt;脚本执行完成后</li><li>travis每一阶段执行成功后才继续下一步，如果失败立即停止</li></ul><h1 id="服务端操作"><a href="#服务端操作" class="headerlink" title="服务端操作"></a>服务端操作</h1><h3 id="Linux添加新用户-赋予root权限"><a href="#Linux添加新用户-赋予root权限" class="headerlink" title="Linux添加新用户/赋予root权限"></a>Linux添加新用户/赋予root权限</h3><ul><li>这里不要换成root创建，用普通用户使用sudo命令添加新用户即可<figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加用户</span><br>sudo adduser 用户名<br><span class="hljs-meta">#</span><span class="bash"> 按提示操作</span><br><span class="hljs-meta">#</span><span class="bash"> 给该用户赋予root权限</span><br><span class="hljs-meta">#</span><span class="bash"> 编辑该文件</span><br>vim /etc/sudoers<br><span class="hljs-meta">#</span><span class="bash"> 在改行注释下添加</span><br><span class="hljs-meta">#</span><span class="bash"> User privilege specification</span><br>用户名 ALL=(ALL:ALL) ALL<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="生成SSH秘钥"><a href="#生成SSH秘钥" class="headerlink" title="生成SSH秘钥"></a>生成SSH秘钥</h3><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 回到根目录</span><br>[~/home]:cd ~<br>[~]:ssh-keygen -t rsa #-t意思选择生成的加密算法，RSA为非对称加密<br></code></pre></div></td></tr></table></figure><h3 id="设置该文件权限为700"><a href="#设置该文件权限为700" class="headerlink" title="设置该文件权限为700"></a>设置该文件权限为700</h3><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -rw------- (600)      只有拥有者有读写权限。</span><br><span class="hljs-meta">#</span><span class="bash"> -rw-r--r-- (644)      只有拥有者有读写权限；而属组用户和其他用户只有读权限。</span><br><span class="hljs-meta">#</span><span class="bash"> -rwx------ (700)     只有拥有者有读、写、执行权限。</span><br><span class="hljs-meta">#</span><span class="bash"> -rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</span><br><span class="hljs-meta">#</span><span class="bash"> -rwx--x--x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。</span><br><span class="hljs-meta">#</span><span class="bash"> -rw-rw-rw- (666)   所有用户都有文件读、写权限。</span><br><span class="hljs-meta">#</span><span class="bash"> -rwxrwxrwx (777)  所有用户都有读、写、执行权限。</span><br><span class="hljs-meta">#</span><span class="bash"> 通过chmod命令可以修改权限</span><br><span class="hljs-meta">#</span><span class="bash"> -----------</span><br><span class="hljs-meta">#</span><span class="bash"> 设置该目录为700</span><br>[~]:chmod 700 ~/.ssh/<br><span class="hljs-meta">#</span><span class="bash"> 设置该目录下文件为600</span><br>chmod 600 ~/.ssh/*<br><span class="hljs-meta">#</span><span class="bash"> 查看当前目录下文件信息 可以看到所有文件都属于travis</span><br>[~]:ls -al<br><span class="hljs-meta">#</span><span class="bash"> 添加生成公钥为受信列表</span><br>[~]:cd .ssh/<br><span class="hljs-meta">#</span><span class="bash"> 如果没有authorized_keys先创建</span><br>[~]:touch authorized_keys<br>[~/.ssh]:cat id_rsa.pub &gt;&gt; authorized_keys # cat打印文件内容<br></code></pre></div></td></tr></table></figure><h3 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h3><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建一个配置文件</span><br>[~/.ssh]:vim config<br><span class="hljs-meta">#</span><span class="bash"> 内容如下</span><br><span class="hljs-meta">#</span><span class="bash"> 测试</span><br>[~/.ssh]:ssh test<br><span class="hljs-meta">#</span><span class="bash"> 查看是否有known_hosts 有即成功 之后再登陆时就不需要yes</span><br>[~/.ssh]:ls<br></code></pre></div></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs YAML"><span class="hljs-string">&lt;!--</span> <span class="hljs-string">文件内容</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">Host</span> <span class="hljs-string">test</span><br><span class="hljs-string">HostName</span> <span class="hljs-number">99.99</span><span class="hljs-number">.99</span><span class="hljs-number">.99</span><span class="hljs-string">(你的服务器ip)</span><br><span class="hljs-comment">#登陆的用户名</span><br><span class="hljs-string">User</span> <span class="hljs-string">travis</span><br><span class="hljs-string">IdentitiesOnly</span> <span class="hljs-literal">yes</span><br><span class="hljs-comment">#登陆使用的密钥</span><br><span class="hljs-string">IdentityFile</span> <span class="hljs-string">~/.ssh/id_rsa</span><br></code></pre></div></td></tr></table></figure><h3 id="安装travis"><a href="#安装travis" class="headerlink" title="安装travis"></a>安装travis</h3><p>travis是ruby写的，所以需要安装ruby环境</p><blockquote><p>安装rvm：ruby的版本管理工具，类似npx</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切回root</span><br><span class="hljs-meta">#</span><span class="bash"> 安装公钥</span><br>[root@~]gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB<br><span class="hljs-meta">#</span><span class="bash"> 会提示安装gpg2 安装就好</span><br><span class="hljs-meta">#</span><span class="bash"> 安装rvm</span><br>[root@~]:curl -sSL https://get.rvm.io | bash -s stable<br><span class="hljs-meta">#</span><span class="bash"> 安装会提示需要添加用户到rvm分组</span><br><span class="hljs-meta">#</span><span class="bash"> 添加用户到新分组且不离开当前所在组</span><br><span class="hljs-meta">#</span><span class="bash"> usermod -G groupA---离开当前所在组，到目标组</span><br>[root@~]:usermod -a -G 分组名 待添加用户<br><span class="hljs-meta">#</span><span class="bash"> 执行重新执行刚修改的初始化文件</span><br>[root@~]:source /etc/profile.d/rvm.sh<br><span class="hljs-meta">#</span><span class="bash"> 查看rvm版本</span><br>[root@~]:rvm --version<br><span class="hljs-meta">#</span><span class="bash"> rvm 1.29.10 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]</span><br></code></pre></div></td></tr></table></figure><blockquote><p>安装ruby和gem—ruby的包管理工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@~]:rvm install ruby<br><span class="hljs-meta">#</span><span class="bash"> 安装完成后查看版本</span><br>[root@~]:ruby --version<br>[root@~]:gem -v<br><span class="hljs-meta">#</span><span class="bash"> 查看gem当前镜像</span><br>[root@~]:gem sources -l # https://rubygems.org/<br><span class="hljs-meta">#</span><span class="bash"> 切换为国内的镜像源</span><br>[root@~]:gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/<br></code></pre></div></td></tr></table></figure><blockquote><p>安装travis命令行工具</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@~]:gem install travis<br><span class="hljs-meta">#</span><span class="bash"> 切到travis 执行travis</span><br>[travis@~]:travis<br><span class="hljs-meta">#</span><span class="bash"> 提示yes</span><br><span class="hljs-meta">#</span><span class="bash"> 进入项目目录，开始添加秘钥到仓库</span><br>[travis@~/home/xxx]:travis login<br><span class="hljs-meta">#</span><span class="bash"> 输入github登陆名和密码</span><br><span class="hljs-meta">#</span><span class="bash"> 添加秘钥到仓库的配置文件中</span><br>[travis@~/home/xxx]:travis encrypt-file ~/.ssh/id_rsa  --add<br><span class="hljs-meta">#</span><span class="bash"> 打印配置文件看到多了几行</span><br>before_install:<br>- openssl aes-256-cbc -K $encrypted_ff98517d7fe4_key -iv $encrypted_ff98517d7fe4_iv<br>  -in id_rsa.enc -out ~\/.ssh/id_rsa -d<br><span class="hljs-meta">#</span><span class="bash">   这里需要更改一下把out~后的\去掉，不然会报错这是traviscli的bug</span><br></code></pre></div></td></tr></table></figure><blockquote><p>添加目标服务器</p></blockquote><ul><li>这里就在配置文件中添加一下目标服务器ip，和登陆后要进行的操作即可<figure class="highlight yaml"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs YAML"><span class="hljs-attr">language:</span> <span class="hljs-string">node_js</span><br><span class="hljs-attr">node_js:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">10</span><br><span class="hljs-attr">branches:</span> <br><span class="hljs-attr">only:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">serverBackup</span><br><span class="hljs-attr">script:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;test&quot;</span><br><span class="hljs-attr">before_install:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">openssl</span> <span class="hljs-string">aes-256-cbc</span> <span class="hljs-string">-K</span> <span class="hljs-string">$encrypted_5ec1b68e2d5b_key</span> <span class="hljs-string">-iv</span> <span class="hljs-string">$encrypted_5ec1b68e2d5b_iv</span><br>  <span class="hljs-string">-in</span> <span class="hljs-string">id_rsa.enc</span> <span class="hljs-string">-out</span> <span class="hljs-string">~/.ssh/id_rsa</span> <span class="hljs-string">-d</span><br><span class="hljs-attr">addons:</span><br><span class="hljs-attr">ssh_known_hosts:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">ip地址或者域名</span><br><span class="hljs-attr">after_success:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">ssh</span> <span class="hljs-string">publish@shuaxinjs.cn</span> <span class="hljs-string">-o</span> <span class="hljs-string">StrictHostKeyChecking=no</span> <span class="hljs-string">&#x27;cd /home/publish/data/shuaxindiary.github.io &amp;&amp; git pull&#x27;</span><br></code></pre></div></td></tr></table></figure></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://gems.ruby-china.com/">gem国内镜像</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">阮一峰-cicd</a></li><li><a href="https://zhaosaisai.com/blog/2019/travis%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2github%E9%A1%B9%E7%9B%AE%E5%88%B0server.html">travis自动化部署github项目到server</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>Travis</tag>
      
      <tag>Linux</tag>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初探nginx</title>
    <link href="/2020/05/09/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%88%9D%E6%8E%A2nginx/"/>
    <url>/2020/05/09/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%88%9D%E6%8E%A2nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>接触前端学习一年出头，慢慢的也了解到了很多与前端紧密相关的一些非前端本职，但却很感兴趣的技术，比如docker啊、nginx啊、linux啊、cicd什么的；所以趁着疫情在家，买了服务器、域名，昨天备案也通过了；今天就准备先来试水一下，使用nginx部署一直托管在github的博客</p><a id="more"></a><h1 id="相关知识笔记"><a href="#相关知识笔记" class="headerlink" title="相关知识笔记"></a>相关知识笔记</h1><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><blockquote><p>什么是nginx</p></blockquote><ul><li>一个支持HTTP和反向代理的开源的web服务器</li></ul><blockquote><p>web服务器</p></blockquote><ul><li>基于HTTP协议，处理客户端请求，为客户端提供可供浏览内容的服务器</li><li>举例：Nginx</li></ul><blockquote><p>应用服务器</p></blockquote><ul><li>用来运行那些可以访问、操作本机资源的应用程序的服务器</li><li>举例：Tomact</li></ul><blockquote><p>两者区别</p></blockquote><ul><li>不同点：Web服务器只能处理静态资源，接受请求响应资源，结束；应用服务器也可以做请求处理，响应静态资源，但同时还可以处理动态内容，比如根据模板引擎生成页面等</li><li>相同点：2者都可以处理请求</li><li>以前开发中，会直接使用应用服务器处理用户请求，然后使用模板引擎动态生成页面给客户端；现在因为前后端分离的原因，以及为了减轻应用服务器压力的前提下；静态资源交给nginx这类web服务器来做，应用服务器只负责处理逻辑，提供数据</li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><blockquote><p>概念</p></blockquote><ul><li>macOS和Windows之外的第三大操作系统，主要用于服务器等，而且开源</li></ul><blockquote><p>版本</p></blockquote><ul><li>Ubuntu、centos、debian等</li></ul><blockquote><p>包安装工具</p></blockquote><ul><li>因为使用的Linux不同，所使用的的包管理工具也不同</li><li>Debian/Ubuntu：apt、apt-cache、apt-get、dpkg</li><li>centos：yum</li><li>备注1：apt是包管理平台，get负责包的安装更新删除管理；cache用于搜索</li><li>备注2：dpkg是Debian的包管理工具，Ubuntu基于Debian，所以也可以使用；但是两个的区别是dpkg安装会绕过并覆盖apt安装的包，切不关心模块依赖问题；不关心Ubuntu软件库软件；简单理解Ubuntu专用apt，Debian专用dpkg</li></ul><blockquote><p>apt常用命令</p></blockquote><ul><li>安装包：apt-get install &lt;包名&gt;</li><li>移除包：apt-get remove &lt;包名&gt;</li><li>更新包列表：apt-get update </li><li>更新系统、已安装包：apt-get upgrade</li><li>列出已安装包：dpkg -l</li><li>搜索某包：apt-cache search &lt;包名&gt;</li><li>查看包信息：apt-cache show &lt;包名&gt;</li></ul><blockquote><p>其他命令</p></blockquote><ul><li>wget：用来从指定的URL下载文件；类似迅雷</li><li></li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul><li>进入/etc/nginx/conf.d/目录，该目录存放自己的配置文件，nginx的主配置文件(/etc/nginx/nginx.conf)会自动加载该目录的配置文件</li><li>通过以下配置文件，就可以部署一个简单的静态项目<figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">server&#123;<br>    # 监听端口号，主配置文件默认监听了80<br>    listen 2333;<br>    # 制定ip地址或者域名<br>    server_name shuaxinjs.cn;<br>    # 配置对哪些url做出相应<br>    location / &#123;<br>        # 配置响应文件的目录<br>        root /data;<br>        # 配置目录下的响应文件<br>        index index.html;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>说明</p></blockquote></li><li>当在浏览器输入的url匹配到location的url后，就会去内部定义的root或alias目录找要返回的文件</li><li>如果没有匹配到对应的规则，就会去默认的目录找404.html并响应；这是nginx自带的，一般在/usr/share/nginx/html</li><li>可以在/var/log/nginx下查看access和error日志文件，来查看访问状态</li><li>root可以写在location也可以写在server中，如果内部有定义root，优先使用root的路径（精确匹配例外）</li></ul><blockquote><p>alias和root的区别</p></blockquote><ul><li>假设此时域名为 <a href="shuaxinjs.cn">shuaxinjs.cn</a><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> root</span><br><span class="hljs-meta">#</span><span class="bash"> 这时浏览器输入www.shuxinjs.cn/dist后，nginx会去/data/dist/目录寻找文件</span><br><br>location /dist&#123;<br>    root /data/;<br>    index index.html;<br>&#125;<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">alias</span></span><br><span class="hljs-meta">#</span><span class="bash"> 这时浏览器输入www.shuxinjs.cn/dist2后，nginx会去/home/目录寻找文件</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">alias</span>指定目录时，结尾一定要加 /;root可有可无</span><br>location /dist2&#123;<br>    alias /home/;<br>    index index.html;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1></li><li>使用nginx命令管理  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">nginx -s reload  # 向主进程发送信号，重新加载配置文件，热重启<br>nginx -s reopen # 重启 Nginx<br>nginx -s stop    # 快速关闭<br>nginx -s quit    # 等待工作进程处理完成后关闭<br>nginx -T         # 查看当前 Nginx 最终的配置<br>nginx -t -c &lt;配置路径&gt;    # 检查配置是否有问题，如果已经在配置目录，则不需要-c<br></code></pre></div></td></tr></table></figure></li><li>使用systemctl管理，这是Linux的系统应用管理工具  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl start nginx    # 启动 Nginx<br>systemctl stop nginx     # 停止 Nginx<br>systemctl restart nginx  # 重启 Nginx<br>systemctl reload nginx   # 重新加载 Nginx，用于修改配置后<br>systemctl enable nginx   # 设置开机启动 Nginx<br>systemctl disable nginx  # 关闭开机启动 Nginx<br>systemctl status nginx   # 查看 Nginx 运行状态<br></code></pre></div></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1></li></ul><h3 id="location配置规则"><a href="#location配置规则" class="headerlink" title="location配置规则"></a>location配置规则</h3><blockquote><p>基本语法</p></blockquote><ul><li>这里不需要像js一样需要用//把规则包裹起来，直接写在启用正则的符号后即可  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">location [=|~|~*|^~]/uri/&#123;...&#125;&#123;<br>    # 具体配置<br>    # root/alias dist #响应文件目录<br>    # index file  #响应文件<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="单独说明"><a href="#单独说明" class="headerlink" title="单独说明"></a>单独说明</h3><blockquote><p>=</p></blockquote><ul><li>精确匹配</li><li>使用=的时候一定要在server中指定root，会无视location内部的路径</li><li>下例：当访问shuaxinjs.cn/的时候，nginx就会去/home目录寻找index.html；但是当仅在location指定的时候就会去/usr/nginx/share/html寻找，当然那个目录不存在我们的文件，就会返回404  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">...<br>root /home;<br>location = /login/ &#123;<br>    index index.html;<br>&#125;<br>...<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>^~</p></blockquote><ul><li>表示url以某个常规字符串开始的url，不区分大小写</li><li>下例：代理后端请求，凡是携带/apis/的url，都会进行去请求转发；即：shuaxinjs.cn/apis/getData会变成localhost:3000/getData</li><li>这里需要注意apis后面一定要跟/，不然apis会添加到url中  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">location ^~ /apis/ &#123;<br>    proxy_pass http://localhost:3000/;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>~</p></blockquote><ul><li><strong><em>区分大小写</em></strong> 的正则匹配</li><li>下例：匹配所有的.(css|js|png|jpg|jepg)的资源文件;</li><li>正则说明：.为默认匹配除换行符以外的所有字符，*：默认对前一个规则执行0-n次；\对.号做转意；（css|js|png|jpg|jepg）意思是.后的字符必须是这几种任意一种  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">location ~.*\.(css|js|png|jpg|jepg)&#123;<br>    root /home/static/;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>~*</p></blockquote></li><li><strong><em>不区分大小写</em></strong> 的正则匹配</li></ul><blockquote><p>!~ , !~*</p></blockquote><ul><li>区分大小写不匹配；不区分大小写不匹配</li></ul><blockquote><p>/</p></blockquote><ul><li>通用匹配，任何请求都会匹配</li></ul><h3 id="匹配顺序"><a href="#匹配顺序" class="headerlink" title="匹配顺序"></a>匹配顺序</h3><p>多个location配置的情况下匹配顺序为：<br>首先匹配= ；<br>其次是完整路径；<br>然后匹配^~；<br>再其次是按文件中顺序的正则匹配；<br>最后是交给 / 通用匹配；<br>当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p><h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><ul><li><p>匹配静态资源</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">location ~.*\.(css|js|png|jpg|jepg)&#123;<br>    root /home/static/;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>代理后端请求，解决跨域</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"> location ^~ /api/ &#123;<br>    proxy_pass 后端地址;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>判断请求客户端为移动端还是pc，返回不同的页面</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">server&#123;<br>    listen 80;<br>    server_name 域名/ip;<br>    location / &#123;<br>    root pc目录；<br>    root /data/pc;<br>    if ( $http_user_agent ~* &#x27;(Android|webOS|iPhone|iPod|BlackBerry)&#x27; ) &#123;<br>            root 移动端目录;<br>    &#125;<br>        index index.html;<br>    &#125;<br>&#125;   <br></code></pre></div></td></tr></table></figure><h1 id="可用全局变量"><a href="#可用全局变量" class="headerlink" title="可用全局变量"></a>可用全局变量</h1><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">host ： 请求主机头字段，否则为服务器名称。</span><br><span class="hljs-meta">$</span><span class="bash">http_user_agent ： 客户端agent信息</span><br><span class="hljs-meta">$</span><span class="bash">http_cookie ： 客户端cookie信息</span><br><span class="hljs-meta">$</span><span class="bash">request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class="hljs-meta">$</span><span class="bash">content_length ： 请求头中的Content-length字段。</span><br><span class="hljs-meta">$</span><span class="bash">content_type ： 请求头中的Content-Type字段。</span><br><span class="hljs-meta">$</span><span class="bash">request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="hljs-meta">$</span><span class="bash">uri ： 不包含请求参数的当前URI，<span class="hljs-variable">$uri</span>不包含主机名，如”/foo/bar.html”。</span><br><span class="hljs-meta">$</span><span class="bash">document_uri ： 与<span class="hljs-variable">$uri</span>相同。</span><br><span class="hljs-meta">$</span><span class="bash">query_string </span><br><span class="hljs-meta">$</span><span class="bash">args ： 这个变量等于请求行中的参数，同<span class="hljs-variable">$query_string</span></span><br><span class="hljs-meta">$</span><span class="bash">document_root ： 当前请求在root指令中指定的值。</span><br><span class="hljs-meta">$</span><span class="bash">limit_rate ： 这个变量可以限制连接速率。</span><br><span class="hljs-meta">$</span><span class="bash">request_body_file </span><br><span class="hljs-meta">$</span><span class="bash">request_filename ： 当前请求的文件路径，由root或<span class="hljs-built_in">alias</span>指令与URI请求生成。</span><br><span class="hljs-meta">$</span><span class="bash">remote_addr ： 客户端的IP地址。</span><br><span class="hljs-meta">$</span><span class="bash">remote_port ： 客户端的端口。</span><br><span class="hljs-meta">$</span><span class="bash">remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class="hljs-meta">$</span><span class="bash">scheme ： HTTP方法（如http，https）。</span><br><span class="hljs-meta">$</span><span class="bash">server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="hljs-meta">$</span><span class="bash">server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="hljs-meta">$</span><span class="bash">server_name ： 服务器名称。</span><br><span class="hljs-meta">$</span><span class="bash">server_port ： 请求到达服务器的端口号。</span><br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>Nginx</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue原理学习1-响应式</title>
    <link href="/2020/05/02/vue/vue%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A01/"/>
    <url>/2020/05/02/vue/vue%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><ul><li>前几天看到vue3.0的beta版本出来了，觉得在正式版出来之前，还是得把2.x版本的原理过一遍，让脑子有个印象。</li><li>大概了分了这么几个部分：响应式系统、观察者模式、模板编译、virtual dom、路由、vuex、vue插件开发</li></ul><a id="more"></a><h1 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h1><blockquote><p>概念</p></blockquote><ul><li>针对某个参照物，进行相对变化。</li></ul><blockquote><p>解释</p></blockquote><ul><li>vue这类框架的响应式和bootstrap的响应式表现形式不一样，但是意思都是一样的，基于某个参考物进行相对变化。</li><li>bootstrap是针对显示设备的大小来对布局进行自动的调整；vue是针对数据，对视图进行自动的更新，所以vue也是数据驱动型框架</li><li>举个例子：当前有个标签显示的内容是：*<strong>刷新*** ，换jq时代我们需要去手动获取该标签，然后把值为 *</strong>刷新*** 的这个变量插入进去；假设现在我们改变了这个变量的值，我们需要让页面同步变化，就需要重复上面操作,代码如下<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#name&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;刷新&quot;</span></span><br><span class="javascript">        <span class="hljs-comment">// 渲染数据到页面</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> render = <span class="hljs-function">(<span class="hljs-params">dom, val</span>) =&gt;</span> &#123;</span><br><span class="javascript">            dom[<span class="hljs-string">&#x27;textContent&#x27;</span>] = val</span><br>        &#125;<br><span class="javascript">        <span class="hljs-comment">// 初始化</span></span><br>        render(div, name)<br><span class="javascript">        <span class="hljs-comment">// 修改name后再次渲染</span></span><br><span class="javascript">        name = <span class="hljs-string">&quot;shuaxin&quot;</span></span><br>        render(div, name)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure></li><li>上述代码在要操作的dom变多的时候，维护起来就会很麻烦，而换到vue这边，就简单的多，只需要告诉vue数据显示在哪里即可，至于怎么去显示到对应的dom里，以及数据发生变化后的更新页面显示，都是由vue来完成的<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> app=<span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span><br>            data:&#123;<br><span class="javascript">                name:<span class="hljs-string">&quot;刷新&quot;</span></span><br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure></li></ul><h1 id="关于vue的工作流程"><a href="#关于vue的工作流程" class="headerlink" title="关于vue的工作流程"></a>关于vue的工作流程</h1><p>在通过Vue构造函数实例化对象的过程中，vue同时做了2件事</p><blockquote><p>1.数据拦截</p></blockquote><ul><li>对用户传入的数据，即data的所有属性进行拦截，以此来实现vue的响应式</li></ul><blockquote><p>2.编译</p></blockquote><ul><li>对用户指定的目标节点下的内容进行解析，解析出普通节点、包含指令的节点、含有表达式的节点；</li><li>编译的目的，是为了生成虚拟dom，即用js对象来描述dom节点，以此来优化操作dom时带来的性能问题</li><li>具体流程为：在每次编译完后，vue都会生成一棵由vdom组成的dom树，然后来和上一次的dom树进行对比，找出其中的不同，然后只更新其中不同的地方到页面</li></ul><blockquote><p>数据驱动</p></blockquote><ul><li>在完成1，2后， vue会通过观察者模式，来链接数据和编译；达到每次更新数据后，自动去更新页面的效果</li><li>具体流程是，为拦截的每个数据创建一个容器，负责装载用到该数据时创建的watcher，这个watcher负责去执行更新页面的操作；然后当每次数据发生改变的时候，就会去遍历该数据的watcher容器，执行里面每一个watcher更新页面的操作</li></ul><h1 id="关于响应式的原理"><a href="#关于响应式的原理" class="headerlink" title="关于响应式的原理"></a>关于响应式的原理</h1><ul><li>对对象：vue2.x通过数据拦截api（Object.defineProperty）来实现这一功能</li><li>对数组：数据拦截是object的api，所以对数组那些操作数组本身内容的api就没什么用了，vue的做法是对数组的这些api进行一层封装，在里面执行数据依赖的一些操作和该api本身的操作</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 可以操作数组本身内容的api</span><br><span class="hljs-keyword">const</span> methodsToPatch = [<br>            <span class="hljs-string">&#x27;push&#x27;</span>,<br>            <span class="hljs-string">&#x27;pop&#x27;</span>,<br>            <span class="hljs-string">&#x27;shift&#x27;</span>,<br>            <span class="hljs-string">&#x27;unshift&#x27;</span>,<br>            <span class="hljs-string">&#x27;splice&#x27;</span>,<br>            <span class="hljs-string">&#x27;sort&#x27;</span>,<br>            <span class="hljs-string">&#x27;reverse&#x27;</span><br>]<br><span class="hljs-comment">// 创建一个新的数组对象，继承Array</span><br><span class="hljs-keyword">let</span> newArr = <span class="hljs-built_in">Object</span>.create(<span class="hljs-built_in">Array</span>.prototype)<br><span class="hljs-comment">// 遍历methodsToPatch，拦截每一个方法</span><br>methodsToPatch.forEach(<span class="hljs-function">(<span class="hljs-params">method</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 保存的是原Array的对应调用的方法</span><br>    <span class="hljs-keyword">let</span> oldMethod = newArr[method]<br>    <span class="hljs-built_in">Object</span>.defineProperty(newArr, method, &#123;<br>        <span class="hljs-comment">// 不可以枚举，不可被for in循环到</span><br>        enumerable: <span class="hljs-literal">false</span>,<br>        <span class="hljs-comment">// 可以被删除</span><br>        configurable: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 可被重写</span><br>        writable: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 将访问的元素换成函数，在这里执行通知watcher更新视图的操作</span><br>        value: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mutator</span>(<span class="hljs-params">...rest</span>) </span>&#123;<br>            <span class="hljs-comment">// (3) [1, 2, 3]  4</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>, ...rest)<br>            <span class="hljs-comment">// 将函数的this指向绑定到当前操作的数组上，然后把调用该函数的参数一并传递过去</span><br>            <span class="hljs-keyword">let</span> res = oldMethod.apply(<span class="hljs-built_in">this</span>, rest)<br>            <span class="hljs-keyword">return</span> res<br>        &#125;<br>    &#125;)<br>&#125;)<br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">let</span> data = &#123;<br>    name: <span class="hljs-string">&quot;vuejs&quot;</span>,<br>    sx: &#123;<br>        sex: <span class="hljs-string">&#x27;男&#x27;</span>,<br>        name: <span class="hljs-string">&quot;shuaxin&quot;</span><br>    &#125;,<br>    arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;<br><span class="hljs-comment">// 实现对数据的拦截</span><br><span class="hljs-keyword">let</span> defineReactive = <span class="hljs-function">(<span class="hljs-params">obj, key, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">Object</span>.defineProperty(obj, key, &#123;<br>        enumerable: <span class="hljs-literal">true</span>,<br>        configurable: <span class="hljs-literal">true</span>,<br>        get() &#123;<br>            <span class="hljs-comment">// 下面代码替代增加watcher操作</span><br>            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;get&quot;</span>);<br>            <span class="hljs-keyword">return</span> value<br>        &#125;,<br>        set(newVal) &#123;<br>            <span class="hljs-comment">// 以下代替通知watcher更新视图操作</span><br>            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;set&quot;</span>);<br>            value = newVal<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-comment">// 判断传递的data的每个属性的类型</span><br><span class="hljs-comment">// 这里会有三种类型:对象,基本数据类型,数组</span><br><span class="hljs-keyword">let</span> observe = <span class="hljs-function">(<span class="hljs-params">obj</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (!obj || (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-built_in">Object</span>.keys(obj).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 还是一个对象，递归调用该函数</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[key] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; (obj[key] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>) !== <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;对象&quot;</span>);<br>            observe(obj[key])<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj[key] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>) &#123;<br>            <span class="hljs-comment">// 是数组的话，改变数组原型为我们新创建的数组对象newArr</span><br>            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;数组&quot;</span>);<br>            obj[key].__proto__ = newArr<br>            <span class="hljs-comment">// 对内部的元素执行拦截</span><br>            defineReactive(obj, key, obj[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 基本数据直接进行拦截</span><br>            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&quot;基本数据类型&quot;</span>);<br>            defineReactive(obj, key, obj[key])<br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-comment">// 初始化</span><br>observe(data)<br><span class="hljs-comment">// 执行该操作的时候，控制台会打印 get</span><br>data.arr.push(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(data.arr);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资源推荐</title>
    <link href="/2020/04/29/%E9%9A%8F%E7%AC%94/%E8%B5%84%E6%BA%90%E6%8E%A8%E8%8D%90/"/>
    <url>/2020/04/29/%E9%9A%8F%E7%AC%94/%E8%B5%84%E6%BA%90%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>平时水的社区比较多，总是忘记哪些地方收藏了哪些东西，所以准备不定期的把一些自己觉得很不错的、很有价值的内容收录在这里</li><li>没有标注语言的都是中文或者有中文版本</li></ul><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="技术指南合集"><a href="#技术指南合集" class="headerlink" title="技术指南合集"></a>技术指南合集</h2><blockquote><p>前端</p></blockquote><ul><li><a href="https://github.com/mqyqingfeng/Blog">冴羽js深入</a></li><li><a href="https://es6.ruanyifeng.com/">ES6入门-阮一峰</a></li><li><a href="https://ustbhuangyi.github.io/vue-analysis/v2/vue-router/">Vue技术解密</a></li><li><a href="https://developer.mozilla.org/zh-CN/">MDN</a></li><li><a href="https://webpack.wuhaolin.cn/">深入浅出webpack</a></li><li><a href="https://github.com/lydiahallie/javascript-questions">常见js考题</a> 英文</li><li><a href="https://github.com/livoras/simple-virtual-dom">virtual-dom学习</a></li><li><a href="https://github.com/i5ting/How-to-learn-node-correctly">狼叔的如何学习nodejs</a></li><li><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md">Node最佳实战</a> 非项目，实战规范一类</li><li><a href="https://github.com/airbnb/javascript">AirbnbJs规范</a></li><li><a href="https://github.com/answershuto/learnVue">Vue原理解析</a></li><li><a href="https://github.com/ElemeFE/node-interview">Node面试指南</a> 饿了么出品，算是自家对node工程的事的要求，可以拿来查漏补缺</li><li><a href="https://github.com/youyudehexie/node123">Node中文资料合集</a></li></ul><blockquote><p>运维</p></blockquote><ul><li><a href="https://github.com/jaywcjlove/linux-command">Linux学习指南</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/content/?from=groupmessage&isappinstalled=0">Docker</a></li><li><a href="https://github.com/jaywcjlove/nginx-tutorial">Nginx实战</a></li><li><a href="http://tengine.taobao.org/book/index.html">Nginx开发</a></li></ul><blockquote><p>算法</p></blockquote><ul><li><a href="https://github.com/labuladong/fucking-algorithm">leetcode题解</a></li><li><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md">数据结构-js版</a></li></ul><blockquote><p>练习demo、第三方库等</p></blockquote><ul><li><a href="https://github.com/SmallRuralDog/electron-vue-music">Electron模仿QQ音乐</a></li><li><a href="https://github.com/opendigg/awesome-github-vue">Vue开源项目合集</a></li><li><a href="https://github.com/xuqiang521/nuxt-ssr-demo">nuxt模仿掘金</a></li><li><a href="https://v-charts.js.org/#/pie">V-charts</a> 饿了么基于echarts封装的vue版</li><li><a href="https://github.com/huangwei9527/quark-h5">Vue+koa全栈demo</a></li><li><a href="https://github.com/Aniket965/Hello-world">Hello World</a> 所有语言的helloworld</li><li><a href="https://github.com/caijinyc/Here">React+Electron音乐客户端</a></li><li><a href="https://github.com/timqian/chart.xkcd">手绘风图表</a></li></ul><blockquote><p>其他</p></blockquote><ul><li><a href="https://github.com/LittleXiaosi/Administrative-divisions-of-China">中华人民共和国行政区划数据</a></li><li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式</a> java版，会java语法那就没问题了，毕竟思想，和语言没啥关系</li><li><a href="https://github.com/guanguans/design-patterns-for-humans-cn">设计模式</a></li><li><a href="https://github.com/xitu/google-interview-university">Google面试指南</a></li><li><a href="https://github.com/bxm0927/canvas-special">canvas练习demo</a></li><li><a href="https://github.com/unknwon/the-way-to-go_ZH_CN">Go入门指南</a></li><li><a href="https://github.com/woai30231/http">HTTP指南核心笔记</a></li></ul><h2 id="技术干货文章"><a href="#技术干货文章" class="headerlink" title="技术干货文章"></a>技术干货文章</h2><ul><li><a href="https://mp.weixin.qq.com/s/vViJnwy2NlCs99cBObbidg">花椒前端CICD</a></li><li><a href="https://mp.weixin.qq.com/s/OC9yEU6JasHxXH_M2b6bHA">跨域常见解决方案</a></li><li><a href="https://mp.weixin.qq.com/s/yDWm57w10lpFeq8z91-L8Q">前端架构指南</a></li><li><a href="https://juejin.im/post/5e7723636fb9a07cc321675d?from=groupmessage&isappinstalled=0">前端性能优化</a></li><li><a href="https://mp.weixin.qq.com/s/PDD3GxFyYptwEl0q_XaW2g">前端性能优化2</a></li><li><a href="https://mp.weixin.qq.com/s/FJGKObVnU61ve_ioejLrtw">HTTP常见面试题</a></li><li><a href="https://mp.weixin.qq.com/s/zEq3TbOVtG9BadUgPm1YnA">手写代码的一些技巧</a></li><li><a href="https://mp.weixin.qq.com/s/OfzhdCE1pxyQhk7m_UM7ZQ">封装自己的UI组件</a></li><li><a href="https://mp.weixin.qq.com/s/_3rub0q6R0me_1m7KIye6w">web图片优化</a></li><li><a href="https://juejin.im/post/5c22ee806fb9a049fb43b2c5">前端缓存</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>懒加载</title>
    <link href="/2020/04/19/JS/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <url>/2020/04/19/JS/%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>作为最常见的优化页面的一种手段，记录一下学习笔记</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="什么是懒加载"><a href="#什么是懒加载" class="headerlink" title="什么是懒加载"></a>什么是懒加载</h3><ul><li>也叫延迟加载，即让页面依赖的一些非关键资源，先不加载，在后期达到某些触发条件时，在加载</li><li>这里的关键资源指决定和影响当前访问页面的一些资源；非关键资源，比如针对页面某一部分的一些脚本、动态切换的样式等</li></ul><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>减少资源加载带来的响应时间过长，造成用户体验不好</p><h3 id="具体表现"><a href="#具体表现" class="headerlink" title="具体表现"></a>具体表现</h3><ul><li>在页面滚动到某一部分，加载当前位置需要显示的图片和相关资源</li><li>面板切换，要切换时，在加载将要显示的资源</li><li>等等</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>对上述第一种情况进行一个简单的效果实现</li><li>页面有3部分，每一部分都占满整个屏幕，显示一张图片</li></ul><blockquote><p>思路</p></blockquote><ul><li>对一部分的图片不作处理</li><li>对剩下的2部分的图片的src不先不设置，把资源路径添加到data-src里</li><li>对整个文档添加一个滚动事件</li><li>每次滚动事件的函数触发时，获取当前文档滚动的height</li><li>当滚动的位置达到我们指定的值后，通过js给图片的src添加资源路径</li></ul><blockquote><p>用到的api</p></blockquote><ul><li>data-***：不具有表现意义的一个属性，用于给dom添加自定的片段数据</li><li>滚动事件：mousewheel</li><li>获取文档滚动的高度：scrollTop</li></ul><blockquote><p>代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- CSS&amp;HTML --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    body &#123;<br>        margin: 0;<br>        overflow-x: hidden;<br>    &#125;<br><br><span class="css">    <span class="hljs-selector-class">.box</span>&gt;<span class="hljs-selector-tag">div</span> &#123;</span><br>        width: 100vw;<br>        height: 100vh;<br>        margin: 0 auto;<br>    &#125;<br><br>    img &#123;<br>        width: 100%;<br>        height: 100%;<br>    &#125;<br><br><span class="css">    <span class="hljs-selector-class">.two</span>,</span><br><span class="css">    <span class="hljs-selector-class">.three</span> &#123;</span><br>        visibility: hidden;<br>        opacity: 0;<br><span class="css">        <span class="hljs-selector-tag">transition</span>: <span class="hljs-selector-tag">all</span> 0<span class="hljs-selector-class">.5s</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!-- HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./img/a.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/b.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;three&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;./img/c.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#box&#x27;</span>)</span><br><span class="javascript">box.addEventListener(<span class="hljs-string">&#x27;mousewheel&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.documentElement.scrollTop &gt; <span class="hljs-number">10</span>) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.two&#x27;</span>).style.visibility = <span class="hljs-string">&#x27;visible&#x27;</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.two&#x27;</span>).style.opacity = <span class="hljs-string">&#x27;1&#x27;</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.two img&#x27;</span>).src = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.two img&#x27;</span>).getAttribute(</span><br><span class="javascript">            <span class="hljs-string">&#x27;data-src&#x27;</span>)</span><br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.documentElement.scrollTop &gt; <span class="hljs-number">722</span>) &#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.three&#x27;</span>).style.visibility = <span class="hljs-string">&#x27;visible&#x27;</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.three&#x27;</span>).style.opacity = <span class="hljs-string">&#x27;1&#x27;</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.three img&#x27;</span>).src = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.three img&#x27;</span>).getAttribute(</span><br><span class="javascript">            <span class="hljs-string">&#x27;data-src&#x27;</span>)</span><br>    &#125;<br>&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>打开chrome调试工具，查看network，发现页面一开始只加载了a图片</li><li>当滚动到指定位置后，才开始加载需要后面的资源</li></ul><h3 id="关于获取dom的大小、位置"><a href="#关于获取dom的大小、位置" class="headerlink" title="关于获取dom的大小、位置"></a>关于获取dom的大小、位置</h3><p>提到了scrollTop，顺带总结一下这几个api的区别</p><blockquote><p>clientHeight、clientWidth</p></blockquote><ul><li>获取dom的height（width）+padding（如果没设置，为0）</li><li>这里还有一个同样功能的api：getClientRects</li><li>两者的区别：前者对小数取整；后者保留</li></ul><blockquote><p>clientTop、clientLeft</p></blockquote><ul><li>获取dom的border-top（left）</li></ul><blockquote><p>scrollHeight、scrollWidth</p></blockquote><ul><li>获取dom的整个内容长度（比如div的height是100px，并设置了overflow-y：scroll后，div内部内容的height长度）</li><li>后者同理</li></ul><blockquote><p>scrollTop、scrollLeft</p></blockquote><ul><li>获取dom滑动出可视区域的部分的height（width）</li></ul><blockquote><p>offsetheight、offsetWidth</p></blockquote><ul><li>获取dom的height（width）+padding+border</li></ul><blockquote><p>offsetTop、offsetLeft</p></blockquote><ul><li>获取目标dom离最近的已定位元素的margintop（left）</li><li>这里还有个api，offsetParent用来获取离目标元素最近的已定位的元素</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
      <tag>CSS&amp;HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>demo-cli</title>
    <link href="/2020/04/11/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/demo-cli/"/>
    <url>/2020/04/11/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/demo-cli/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><ul><li>习惯了基于集成了各种工具的cli，来进行开发后，有时候回到最最最原始的三剑客(HTML+CSS+JS)，纯手撸的时候觉得效率过于低下。</li><li>尤其是写CSS的时候，为了避免因为标签权重问题导致的样式错乱，而不停的重复写选择器，还有没有全局管理样式的功能，导致不停的去查查改改。。。</li><li>基于上述和还有很多一时没想起的问题，所以有了做一个自己的非SPA应用的脚手架的想法<a id="more"></a><h1 id="关于该脚手架"><a href="#关于该脚手架" class="headerlink" title="关于该脚手架"></a>关于该脚手架</h1>使用用gulp搭建的自动化脚手架</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>写静态官网</li><li>练习TS/ES6</li></ul><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><ul><li>支持区分生产/开发环境</li><li>支持LESS（可选是否使用）</li><li>支持ES6（模块化不支持）</li><li>支持TS（可选是否使用）</li><li>支持生产环境时HTML+CSS+JS+图片压缩</li></ul><blockquote><p>2020-4-16更新 1.0.0-&gt;1.1.0</p></blockquote><ul><li>添加了自己封装的工具函数模块</li><li>添加对AMD模块化支持 <a href="https://requirejs.org/">如何使用</a></li></ul><h1 id="食用指南"><a href="#食用指南" class="headerlink" title="食用指南"></a>食用指南</h1><h2 id="下载该脚手架"><a href="#下载该脚手架" class="headerlink" title="下载该脚手架"></a>下载该脚手架</h2><p>测试阶段，暂时只能通过github来下载</p><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone git@github.com:SHUAXINDIARY/demo-cli.git<br></code></pre></div></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1.先安装node</span><br><span class="hljs-meta">#</span><span class="bash"> 2.全局安装gulp</span><br>npm i gulp -g<br><span class="hljs-meta">#</span><span class="bash"> 3.安装依赖</span><br>npm i <br></code></pre></div></td></tr></table></figure><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">+ src---开发目录<br>   + assets---存放其他资源：resetcss、图标等<br>   + css---样式文件<br>   + js----js代码<br>   + less--less文件(可选：不使用无视即可)<br>   + ts----ts文件(可选：不使用无视即可)<br>   - index.html---src根目录存放页面文件<br>- babelrc---babel配置(可自定义参考官方配置)<br>+ gulpfile.js---gulp配置目录<br>   - index.js---入口文件<br>   - Tasks.js---任务方法文件<br>   - paths.js---打包入口/出口路径<br>- tsconfig.json--ts配置文件(可自定义参考)<br>- config.json----配置项目环境：例如是否使用ts/less、配置本地服务器信息<br></code></pre></div></td></tr></table></figure><h2 id="开始食用"><a href="#开始食用" class="headerlink" title="开始食用"></a>开始食用</h2><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 开发环境</span><br>npm run dev<br><span class="hljs-meta">#</span><span class="bash"> 部署前打包</span><br>npm run build<br></code></pre></div></td></tr></table></figure><h2 id="食用配置"><a href="#食用配置" class="headerlink" title="食用配置"></a>食用配置</h2><p>以下配置根据自行情况选择</p><blockquote><p>是否使用less</p></blockquote><ul><li>进入config.js</li><li>设置less为true</li></ul><blockquote><p>是否使用ts</p></blockquote><ul><li>同上</li><li>ts编译相关配置，参考<a href="https://typescript.bootcss.com/tsconfig-json.html">官方文档</a></li><li>关于ts编译配置支持情况查看<a href="https://www.npmjs.com/package/gulp-typescript">gulp-typescript</a></li></ul><blockquote><p>配置本地服务器信息</p></blockquote><ul><li>进入config.js</li><li>可根据<a href="https://www.npmjs.com/package/gulp-connect">gulp-connect</a>配置</li></ul><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><ul><li><a href="https://github.com/SHUAXINDIARY/demo-cli">该项目源码</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>GULP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于对象</title>
    <link href="/2020/04/04/JS/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/"/>
    <url>/2020/04/04/JS/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>因为js特性的原因，所以创建对象有很多中形式，各自有各自的优缺点/对应使用的场景，而且关于对象也会涉及到原型等比较重要的知识，所以总结一下</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="关于js对象"><a href="#关于js对象" class="headerlink" title="关于js对象"></a>关于js对象</h2><blockquote><p>定义</p></blockquote><ul><li>根据红皮书的描述：无序属性的集合，属性可包含基本值、对象、函数。</li><li>总结：包含多个键值对的无序集合。</li></ul><blockquote><p>属性类型</p></blockquote><ul><li>根据红皮书地址，ECMA-262标准定义了一些对象的内部属性</li><li>主要分为*<strong>数据属性*** 和*</strong>访问器属性***</li><li>数据属性就是对象存放数据的属性</li><li>访问器属性不包含数据(一个内部机制)，包含一对getter/setter函数的属性，在读写数据时调用</li></ul><blockquote><p>数据属性的4个描述行为的特性</p></blockquote><ul><li>configurable-表示该属性能否被delete删除</li><li>enumerable-表示该属性能否被for-in循环</li><li>writable-表示该属性的值能否被修改</li><li>value-存储数据的发那个</li><li>代码示范<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-keyword">let</span> sx = &#123;<br>    name: <span class="hljs-string">&#x27;sx&#x27;</span>,<br>    age: <span class="hljs-number">22</span><br>&#125;<br><span class="hljs-comment">// 通过Object.defineProperty来管理目标对象的属性行为</span><br><span class="hljs-comment">// 添加对sx对象的name属性的拦截器</span><br><span class="hljs-built_in">Object</span>.defineProperty(sx, <span class="hljs-string">&#x27;name&#x27;</span>, &#123;<br>    <span class="hljs-comment">// 定义能否delete删除该属性 默认为true</span><br>    configurable: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 定义能否通过forin循环到该属性，默认为true</span><br>    enumerable: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 定义能否修改该属性，默认为true</span><br>    writable: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 如果这里定义，会覆盖初始化对象时的值</span><br>    <span class="hljs-comment">// value:&quot;wade&quot;</span><br>&#125;)<br><span class="hljs-comment">// 即使做出了修改/删除的操作，但无效</span><br>sx.name = <span class="hljs-string">&quot;shuaxin&quot;</span><br><span class="hljs-keyword">delete</span> sx.name<br><span class="hljs-built_in">console</span>.log(sx)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> sx) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;sx[key]&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>访问器属性(属性的描述符)</p></blockquote></li><li>不包含数据</li><li>包含一对getter、setter函数，不是必须，无需定义，是对象内部的机制</li><li>当读取对象的属性时，默认调用getter函数，返回属性值</li><li>当对属性进行数据写入时，默认调用setter，并传入新值</li><li>代码示范<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> sx = &#123;<br>    name: <span class="hljs-string">&quot;shuaxin&quot;</span>,<br>    age: <span class="hljs-number">0</span>,<br>    <span class="hljs-comment">// _的属性表示该属性只能通过对象方法来访问</span><br>    _sex: <span class="hljs-string">&#x27;女&#x27;</span><br>&#125;<br><span class="hljs-comment">// 创建属性拦截器</span><br><span class="hljs-built_in">Object</span>.defineProperty(sx, <span class="hljs-string">&quot;sex&quot;</span>, &#123;<br>    <span class="hljs-comment">// 当读取sex属性的值时，触发，返回_sex的值</span><br>    get() &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>._sex)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._sex<br>    &#125;,<br>    <span class="hljs-comment">// 当对sex属性进行写入操作时触发</span><br>    set(newVal) &#123;<br>        <span class="hljs-comment">// 判断_sex和sex是否一致，否在做修改</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._sex !== newVal) &#123;<br>            <span class="hljs-built_in">this</span>._sex = newVal<br>        &#125;<br>    &#125;<br>&#125;)<br>sx.sex = <span class="hljs-string">&#x27;男&#x27;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>定义多个属性</p></blockquote></li><li>可以同时创建对多个属性的拦截器</li><li>使用defineProperties<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    name: <span class="hljs-string">&quot;shuaxin&quot;</span>,<br>    age: <span class="hljs-number">22</span>,<br>    _sex: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><span class="hljs-built_in">Object</span>.defineProperties(obj, &#123;<br>    name: &#123;<br>        configurable: <span class="hljs-literal">false</span>,<br>        enumerable: <span class="hljs-literal">false</span>,<br>        writable: <span class="hljs-literal">false</span><br>    &#125;,<br>    age: &#123;<br>        configurable: <span class="hljs-literal">false</span>,<br>        enumerable: <span class="hljs-literal">false</span>,<br>        writable: <span class="hljs-literal">false</span><br>    &#125;,<br>    sex: &#123;<br>        get() &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>._sex)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._sex<br>        &#125;,<br>        <span class="hljs-comment">// 当对sex属性进行写入操作时触发</span><br>        set(newVal) &#123;<br>            <span class="hljs-comment">// 判断_sex和sex是否一致，否在做修改</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._sex !== newVal) &#123;<br>                <span class="hljs-built_in">this</span>._sex = newVal<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）"><a href="#关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）" class="headerlink" title="关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）"></a>关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）</h2><h3 id="无法识别对象类型的"><a href="#无法识别对象类型的" class="headerlink" title="无法识别对象类型的"></a>无法识别对象类型的</h3><p>无法识别对象类型的表现为，typeof的结果都是Object</p><blockquote><p>字面量创建</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj=&#123;<br>    name:<span class="hljs-string">&quot;obj&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>优点：创建简单、直观</li><li>缺点：会产生大量重复的代码，而且无法识别对象类型</li></ul><blockquote><p>使用object构造函数创建</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>obj.name=<span class="hljs-string">&quot;obj&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li>优缺点和字面量创建一样</li></ul><blockquote><p>工厂模式创建</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createObj</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> obj=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>    obj.name=name<br>    <span class="hljs-keyword">return</span> obj<br>&#125;<br><span class="hljs-keyword">let</span> obj=createObj(<span class="hljs-string">&#x27;obj&#x27;</span>)<br></code></pre></div></td></tr></table></figure><ul><li>工厂模式是设计模式的一种</li><li>优点：封装了创建对象时的细节，减少了代码的冗余</li><li>缺点：同样这种方式也无法判断对象的类型 </li></ul><blockquote><p>寄生构造函数模式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> obj=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>    obj.name=name<br>    <span class="hljs-keyword">return</span> obj<br>&#125;<br><span class="hljs-keyword">let</span> sx=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;sx&#x27;</span>)<br></code></pre></div></td></tr></table></figure><ul><li>优缺点和工厂模式一致</li></ul><blockquote><p>稳妥构造函数模式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> name = str<br>    <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>    obj.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> name<br>    &#125;<br>    obj.setName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;<br>        name = str<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj<br>&#125;<br><span class="hljs-keyword">let</span> sx = Person(<span class="hljs-string">&#x27;sx&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(sx.name) <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(sx.getName()) <span class="hljs-comment">//sx</span><br></code></pre></div></td></tr></table></figure><ul><li>优点：保证数据安全性，除非对外提供可操作函数，否则无法访问</li><li>缺点：无法判断实例的对象类型</li></ul><h3 id="可以识别对象类型的"><a href="#可以识别对象类型的" class="headerlink" title="可以识别对象类型的"></a>可以识别对象类型的</h3><p>表现为可以使用instanceof来判断具体的类型，比如</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> obj)<span class="hljs-comment">//object</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name<br>&#125;<br><span class="hljs-keyword">let</span> sx=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;sx&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(sx <span class="hljs-keyword">instanceof</span> Person) <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><blockquote><p>自定义构造函数创建</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name<br>&#125;<br><span class="hljs-keyword">let</span> shuaxin=<span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;shuaxin&#x27;</span>)<br></code></pre></div></td></tr></table></figure><ul><li>优点：可以定义对象的类型</li><li>缺点：因为每次调用一次该构造函数都会创建一片空间来存储一模一样的对象的属性，当创建许多个该类型对象时，会存在内存空间浪费的问题</li></ul><blockquote><p>使用原型创建</p></blockquote><ul><li>关于原型：每一个函数都有一个prototype属性，该属性指向一个对象（原型对象），该对象保存的是该类型对象的所有实例共享的属性/方法</li><li>对象实例可以通过__proto__来访问原型对象<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>&#125; <br>Person.prototype.name=<span class="hljs-string">&#x27;shuaxin&#x27;</span><br></code></pre></div></td></tr></table></figure></li><li>优点：可以把属性存到原型对象里</li><li>缺点：因为所有实例共享同样的属性，所以导致数据读写会出现混乱<blockquote><p>组合使用构造函数模式和原型模式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name<br>&#125; <br>Person.prototype.sayHi=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`你好我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>优点：结合了构造函数和原型模式2者的优点</li><li>缺点：需要合理分配那些存储在函数内部，哪些在原型，否则适得其反；其次就是封装性相对来说不是很好<blockquote><p>动态原型模式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span>.sayhi !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        Person.prototype.sayhi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`大家好，我是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> shuaxin = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;shuaxin&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li><li>优点：结局了封装原型、组合模式封装性不好的问题</li></ul><h1 id="关于对象的一些api"><a href="#关于对象的一些api" class="headerlink" title="关于对象的一些api"></a>关于对象的一些api</h1><blockquote><p>Object.assign(target,…source)</p></blockquote><ul><li>给对象复制源对象的可枚举属性,返回操作完成后的目标对象</li><li>参数：目标对象，源对象(可支持多个)<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> man=&#123;<br>    name:<span class="hljs-string">&quot;shuaxin&quot;</span><br>&#125;<br><span class="hljs-keyword">const</span> sex=&#123;<br>    sex:<span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><span class="hljs-keyword">let</span> res=<span class="hljs-built_in">Object</span>.assign(man,sex)<br><span class="hljs-built_in">console</span>.log(man)<span class="hljs-comment">// &#123;name:&quot;shuaxin&quot;,sex:&quot;男&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(res)<span class="hljs-comment">// &#123;name:&quot;shuaxin&quot;,sex:&quot;男&quot;&#125;</span><br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>Object.create(proto,{propertiesObject})</p></blockquote><ul><li>创建一个新对象</li><li>参数：新建对象的原型对象，要添加到自身的属性(以及访问器属性)</li><li>应用：实现继承<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> man=&#123;<br>    sex:<span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><span class="hljs-keyword">let</span> sx = <span class="hljs-built_in">Object</span>.create(man, &#123;<br>    <span class="hljs-comment">// 注：这里如果不设置枚举属性为true，默认为false，即不能被forin遍历到</span><br>    age: &#123;<br>        value: <span class="hljs-number">22</span><br>    &#125;,<br>    name: &#123;<br>        value: <span class="hljs-string">&quot;shuaxin&quot;</span><br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(sx)<span class="hljs-comment">//&#123;name:&quot;shauxin&quot;,age:22&#125;</span><br><span class="hljs-built_in">console</span>.log(sx.__proto__)<span class="hljs-comment">//&#123;sex:&quot;男&quot;&#125;</span><br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>Object.entries(target)</p></blockquote><ul><li>返回目标对象的可枚举(enumerable)属性<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> sx = &#123;&#125;<br><span class="hljs-built_in">Object</span>.defineProperties(sx, &#123;<br>    name: &#123;<br>        value: <span class="hljs-string">&quot;shuaxin&quot;</span>,<br>        enumerable: <span class="hljs-literal">true</span><br>    &#125;,<br>    idCard: &#123;<br>        value: <span class="hljs-string">&#x27;199x-x-x-x&#x27;</span>,<br>        enumerable: <span class="hljs-literal">false</span><br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.entries(sx)) <span class="hljs-comment">//[[&quot;name&quot;, &quot;shuaxin&quot;]]</span><br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>Object.freeze(target)/Object.isFrozen(target)/ Object.isExtensible(targst)</p></blockquote><ul><li>freeze：冻结对象，使其属性不能删除、修改，也不能增加属性</li><li>isFrozen：检查对象是否被冻结，返回Boolean </li><li>isExtensible：判断对象是否可扩展（即也可以判断对象是否被冻结）</li><li>注：影响对象是否可扩展的操作有 Object.preventExtensions，Object.seal 或 Object.freeze<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> sx = &#123;<br>    name: <span class="hljs-string">&quot;shuaxin&quot;</span><br>&#125;<br><span class="hljs-built_in">Object</span>.freeze(sx)<br>sx.name = <span class="hljs-string">&#x27;update&#x27;</span><br>sx.sex = <span class="hljs-string">&#x27;男&#x27;</span><br><span class="hljs-keyword">delete</span> sx.name<br><span class="hljs-built_in">console</span>.log(sx) <span class="hljs-comment">//&#123;name:&quot;shuaxin&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.isFrozen(sx))<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>Object.fromEntries(obj)</p></blockquote><ul><li>把键值对结构(ES6的map)转换成对象<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> list = [<br>    [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;shuaxin&quot;</span>],<br>    [<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>]<br>]<br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([<br>    [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;shuaxin&quot;</span>],<br>    [<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>]<br>])<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.fromEntries(list)) <span class="hljs-comment">//&#123;name: &quot;shuaxin&quot;, sex: &quot;男&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.fromEntries(map)) <span class="hljs-comment">//&#123;name: &quot;shuaxin&quot;, sex: &quot;男&quot;&#125;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>Object.getOwnPropertyDescriptor(obj)/Object.getOwnPropertyDescriptors(obj)</p></blockquote></li><li>获取目标对象某个属性的访问器属性情况</li><li>需注意：只能指定存储在对象自身的属性，原型的属性无效<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-keyword">let</span> shuaxin = &#123;<br>    name: <span class="hljs-string">&quot;shuaxin&quot;</span><br>&#125;<br><span class="hljs-comment">// &#123;value: &quot;shuaxin&quot;, writable: true, enumerable: true, configurable: true&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertyDescriptor(shuaxin, <span class="hljs-string">&#x27;name&#x27;</span>))<br><br> <span class="hljs-keyword">let</span> sx = &#123;<br>    name: <span class="hljs-string">&quot;shuaxin&quot;</span>,<br>    sex: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><span class="hljs-comment">// &#123; name: &#123;value: &quot;shuaxin&quot;, writable: true, enumerable: true, configurable: true&#125;, sex: &#123;…&#125;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertyDescriptors(sx));<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>Object.values(target)</p></blockquote><ul><li>以数组形式返回对象自身所有属性的值</li><li>symbol作key的无法获取到<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> SEX=<span class="hljs-built_in">Symbol</span>()<br><span class="hljs-keyword">let</span> shuaxin=&#123;<br>    [SEX]:<span class="hljs-string">&quot;男&quot;</span>,<br>    name:<span class="hljs-string">&quot;shuaxin&quot;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.values(shuaxin))<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>Object.getOwnPropertyNames(target)/Object.getOwnPropertySymbols(target)/Object.keys(target)</p></blockquote><ul><li>getOwnPropertyNames:以数组形式返回对象自身的所有属性名,除过以symbol作为key的属性</li><li>getOwnPropertySymbols:以数组形式返回对象自身的所有symbol做key的属性名</li><li>keys:以数组格式返回对象自身可枚举的属性<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sex = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;sex&#x27;</span>)<br><span class="hljs-keyword">let</span> sx = &#123;<br>    [sex]: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><span class="hljs-built_in">Object</span>.defineProperties(sx, &#123;<br>    name: &#123;<br>        value: <span class="hljs-string">&quot;shuaxin&quot;</span>,<br>        enumerable: <span class="hljs-literal">true</span><br>    &#125;,<br>    idCard: &#123;<br>        value: <span class="hljs-string">&#x27;199x-x-x-x&#x27;</span>,<br>        enumerable: <span class="hljs-literal">false</span><br>    &#125;<br>&#125;)<br><span class="hljs-comment">// &#123;name: &quot;shuaxin&quot;, idCard: &quot;199x-x-x-x&quot;, Symbol(sex): &quot;男&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(sx)<br><span class="hljs-comment">// [&quot;name&quot;, &quot;idCard&quot;]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertyNames(sx));<br> <span class="hljs-comment">// [Symbol(sex)]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getOwnPropertySymbols(sx));<br><span class="hljs-comment">// [&quot;name&quot;]</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(sx))<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>Object.getPrototypeOf(target)</p></blockquote><ul><li>获取对象的原型对象<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-keyword">let</span> man = &#123;<br>    sex: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><span class="hljs-keyword">let</span> sx = <span class="hljs-built_in">Object</span>.create(man, &#123;<br>    name: &#123;<br>        value: <span class="hljs-string">&quot;shuaxin&quot;</span><br>    &#125;<br>&#125;)<br><span class="hljs-comment">// &#123;sex: &quot;男&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(sx))<br><span class="hljs-comment">// 同上</span><br><span class="hljs-built_in">console</span>.log(sx.__proto__)<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>Object.is()</p></blockquote><ul><li>判断2个值是不是相同，判断规则如下</li><li>两个值都是 undefined</li><li>两个值都是 null</li><li>两个值都是 true 或者都是 false</li><li>两个值是由相同个数的字符按照相同的顺序组成的字符串</li><li>两个值指向同一个对象</li><li>两个值都是数字并且</li><li><em>都是正零 +0</em></li><li><em>都是负零 -0</em></li><li><em>都是 NaN</em></li><li><em>都是除零和 NaN 外的其它同一个数字</em></li><li>和==还有===的区别：</li><li>这种相等性判断逻辑和传统的 == 运算不同，== 运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 “” == false 等于 true 的现象），但 Object.is 不会做这种类型转换。<br>这与 === 运算符的判定方式也不一样。=== 运算符（和== 运算符）将数字值 -0 和 +0 视为相等，并认为 Number.NaN 不等于 NaN</li></ul><blockquote><p>Object.seal(target)/Object.isSealed(target)</p></blockquote><ul><li>判断对象是否密封</li><li>表现为不能对以存在属性进行删除，不能新增属性</li><li>可以修改已存在属性，这也是与freeze的区别</li><li>isSealed用来判断对象是否是密封</li><li>isExtensible也可以判断</li></ul><blockquote><p>Object.preventExtensions(target)/Object.isExtensible(target)</p></blockquote><ul><li>让对象无法扩展</li><li>表现形式为，无法新增属性；但是可以对已存在属性进行修改和删除</li><li>isExtensible判断对象是否可扩展<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> sx = &#123;<br>    name: <span class="hljs-string">&quot;shuaxin&quot;</span><br>&#125;<br><span class="hljs-built_in">Object</span>.preventExtensions(sx)<br>sx.name = <span class="hljs-string">&#x27;update&#x27;</span><br>sx.sex = <span class="hljs-string">&#x27;男&#x27;</span><br><span class="hljs-comment">// &#123;name: &quot;update&quot;&#125;</span><br><span class="hljs-built_in">console</span>.log(sx);<br><span class="hljs-keyword">delete</span> sx.name<br><span class="hljs-comment">// &#123;&#125;</span><br><span class="hljs-built_in">console</span>.log(sx);<br></code></pre></div></td></tr></table></figure><h2 id="Object原型上的一些api"><a href="#Object原型上的一些api" class="headerlink" title="Object原型上的一些api"></a>Object原型上的一些api</h2></li></ul><blockquote><p>isPrototypeOf</p></blockquote><ul><li>判断一个对象是否存在于另一个对象的原型链上<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-keyword">let</span> man = &#123;<br>    sex: <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> sx = <span class="hljs-built_in">Object</span>.create(man)<br><span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(man.isPrototypeOf(sx))<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>hasOwnProperty</p></blockquote><ul><li>判断对象自身是否含有某个属性<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> man = &#123;<br>    sex: <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> sx = <span class="hljs-built_in">Object</span>.create(man, &#123;<br>    name: &#123;<br>        value: <span class="hljs-string">&#x27;shuaxin&#x27;</span><br>    &#125;<br>&#125;)<br><span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(sx.hasOwnProperty(<span class="hljs-string">&#x27;sex&#x27;</span>))<br><span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(sx.hasOwnProperty(<span class="hljs-string">&#x27;name&#x27;</span>))<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>propertyIsEnumerable</p></blockquote><ul><li>判断该属性属性是否可枚举</li><li>如果没有该属性，返回false</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于JWT认证</title>
    <link href="/2020/03/15/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8EJWT%E8%AE%A4%E8%AF%81/"/>
    <url>/2020/03/15/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8EJWT%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><ul><li>但凡有登陆模块的程序，都会涉及到用户身份认证的问题;目的就是确保来访问是真的用户</li><li>所以记录一下最近这一块学习/实验的笔记</li><li>实现代码均为部分，整体代码<a href="https://github.com/SHUAXINDIARY/NodeStudyNotes/tree/master/loginByExpress">点这里</a><a id="more"></a><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1></li><li>用户登陆，如果登陆信息和服务端保存的信息一致，服务端会通过一些机制生成一串字符串，返回给客户端</li><li>客户端保存该字符串，并在之后的每次请求中携带该字符串</li><li>服务端接收到请求后，会验证该字符串是否有效、是否过期;如果都没有就正常返回数据，如果失效、过期就返回对应的提示信息</li><li>这串字符串就是token令牌</li></ul><h1 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h1><ul><li>做登陆等需要处理用户账号密码等私密的操作时，要对这些隐私信息进行加密，在做操作、保存等 </li><li>目的：1.职业操守，开发人员要尊重用户的这些私密信息；2.防止被其他人攻击，拿到密码等私密信息进行一些不好的操作</li></ul><h1 id="加密的代码实现"><a href="#加密的代码实现" class="headerlink" title="加密的代码实现"></a>加密的代码实现</h1><ul><li>需要用到<a href="https://github.com/kelektiv/node.bcrypt.js">bcrypt</a>模块</li><li>对注册密码进行加密并保存，方便演示，数据直接保存到本地数组<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">...<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.Router()<br><span class="hljs-keyword">const</span> bcrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;bcrypt&#x27;</span>)<br><br><span class="hljs-comment">// 保存注册信息</span><br><span class="hljs-keyword">let</span> users=[]<br><br><span class="hljs-comment">// 生成salt的等级  </span><br><span class="hljs-keyword">const</span> saltRounds = <span class="hljs-number">10</span><br><span class="hljs-comment">// 注册</span><br>router.post(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        body=&#123;</span><br><span class="hljs-comment">            name:&#x27;shuaxin&#x27;,</span><br><span class="hljs-comment">            psw:&#x27;shuaxin&#x27;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">// 接受前端数据</span><br>    <span class="hljs-keyword">let</span> obj = req.body<br>    <span class="hljs-comment">// 生成salt</span><br>    <span class="hljs-keyword">const</span> salt = bcrypt.genSaltSync(saltRounds)<br>    <span class="hljs-comment">// 利用salt对密码进行hash生成加密字符串</span><br>    <span class="hljs-keyword">const</span> hash = bcrypt.hashSync(obj.psw, salt)<br>    <span class="hljs-comment">// 然后保存该条数据等操作</span><br>    users.push(&#123;<br>        name:obj.name,<br>        psw:hash<br>    &#125;)<br>    <span class="hljs-comment">// 返回提示</span><br>    res.json(&#123;<br>        msg: <span class="hljs-string">&#x27;register succ&#x27;</span><br>    &#125;)<br>&#125;)<br><span class="hljs-comment">// 登陆</span><br>router.post(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> obj = req.body<br>    <span class="hljs-comment">// 查找对应的账号 然后校对密码是否一致</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> users) &#123;<br>        <span class="hljs-keyword">if</span> (users[index].name === obj.name) &#123;<br>            <span class="hljs-comment">// 校对结果为Boolean</span><br>            <span class="hljs-comment">// 参数列表(用户输入的面，存储的加密后的密码)</span><br>            <span class="hljs-keyword">let</span> result = bcrypt.compareSync(obj.psw, users[index].psw)<br>            <span class="hljs-keyword">if</span> (result) &#123;<br>                res.json(&#123;<br>                    code: <span class="hljs-number">1</span>,<br>                    msg: <span class="hljs-string">&#x27;登陆成功&#x27;</span>,<br>                    token<br>                &#125;)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                res.json(&#123;<br>                    code: <span class="hljs-number">-1</span>,<br>                    msg: <span class="hljs-string">&#x27;检查账号密码是否匹配&#x27;</span><br>                &#125;)<br>            &#125;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>&#125;)<br>...<br></code></pre></div></td></tr></table></figure></li></ul><h1 id="生成token代码实现"><a href="#生成token代码实现" class="headerlink" title="生成token代码实现"></a>生成token代码实现</h1><ul><li>用到的模块<a href="https://github.com/auth0/node-jsonwebtoken">jsonwebtoken</a></li><li>登陆成功返回生成的token</li><li>在上文代码的登陆逻辑区域操作，省略重复代码<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">...<br><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><span class="hljs-comment">// 设置私钥</span><br><span class="hljs-keyword">const</span> sk = <span class="hljs-string">&#x27;shuaxin&#x27;</span><br>...<br><span class="hljs-comment">// 登陆</span><br>router.post(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> obj = req.body<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> users) &#123;<br>        <span class="hljs-keyword">if</span> (users[index].name === obj.name) &#123;<br>            <span class="hljs-keyword">let</span> result = bcrypt.compareSync(obj.psw, users[index].psw)<br>            <span class="hljs-comment">// 生成token  参数:(要加密的内容，秘钥，时间(s为单位))</span><br>            <span class="hljs-keyword">let</span> token = jwt.sign(users[index], sk, &#123; <span class="hljs-attr">expiresIn</span>: <span class="hljs-number">10</span> &#125;);<br>            <span class="hljs-keyword">if</span> (result) &#123;<br>                res.json(&#123;<br>                    code: <span class="hljs-number">1</span>,<br>                    msg: <span class="hljs-string">&#x27;登陆成功&#x27;</span>,<br>                    token<br>                &#125;)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                res.json(&#123;<br>                    code: <span class="hljs-number">-1</span>,<br>                    msg: <span class="hljs-string">&#x27;检查账号密码是否匹配&#x27;</span><br>                &#125;)<br>            &#125;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>&#125;)<br>...<br></code></pre></div></td></tr></table></figure></li><li>验证token是否有效、过期<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">...<br><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><span class="hljs-comment">// 设置私钥</span><br><span class="hljs-keyword">const</span> sk = <span class="hljs-string">&#x27;shuaxin&#x27;</span><br>...<br>router.post(<span class="hljs-string">&#x27;/testToken&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> obj = req.body<br>    <span class="hljs-comment">// 过期后会抛异常 </span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 校验token 结果为Boolean</span><br>        <span class="hljs-comment">// 参数列表（token,私钥）</span><br>        <span class="hljs-keyword">var</span> decoded = jwt.verify(obj.token, sk);<br>        <span class="hljs-keyword">if</span> (decoded) &#123;<br>            res.json(&#123;<br>                code: <span class="hljs-number">1</span>,<br>                msg: <span class="hljs-string">&#x27;有效的token&#x27;</span><br>            &#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res.json(&#123;<br>                code: <span class="hljs-number">-1</span>,<br>                msg: <span class="hljs-string">&#x27;token无效&#x27;</span><br>            &#125;)<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        res.json(&#123;<br>            code: <span class="hljs-number">-1</span>,<br>            msg: <span class="hljs-string">&#x27;token过期&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ul><h1 id="其他笔记"><a href="#其他笔记" class="headerlink" title="其他笔记"></a>其他笔记</h1><ul><li>看jwt文档的时候看到了HMAC SHA256、RSA SHA256</li><li>这两个是不同的加密算法模式，前者是默认的，后者可以自己设置</li><li>通过搜索引擎了解到常见加密算法模式有：DES,AES, RSA, MD5, SHA, HMAC, base64，区别有待学习</li><li>SHA256是一种使用了哈希长度为256的算法，太菜了，底层就不懂了</li><li><a href="https://www.jianshu.com/p/567071aadc42">DES,AES, RSA, MD5, SHA, HMAC, base64区别</a></li></ul><h1 id="关于JWT的优缺点"><a href="#关于JWT的优缺点" class="headerlink" title="关于JWT的优缺点"></a>关于JWT的优缺点</h1><p>优缺点都是对比出来的，和常用的session进行对比，由于实践有限，session没用过，总结是搜索引擎搜索后，罗列的自己能理解的</p><blockquote><p>JWT优点</p></blockquote><ul><li>减轻服务器压力，因为生成后直接返回给客户端，服务端就无须保存，session需要维持每个用户的状态</li><li>避免跨域攻击，因为服务端会对每个请求进行token校验，不存在或者无效都没法获取数据，而token保存在用户自己的客户端，只要不在这里被窃取，来自网络的伪造请求一般都无法完成</li><li>适合移动端，没做过移动端，查了查资料，因为session会话状态的控制需要依赖cookie，客户端对cookie的支持很有限，所以session不适合移动端</li><li>实现单点登录，因为cookie不能跨域，session依赖cookie，token不存在这个问题</li></ul><blockquote><p>JWT缺点</p></blockquote><ul><li>注销登录、忘记密码等后，token还有效，这样服务端需要加一些额外操作来处理</li><li><ul><li>使用UID和token对应</li></ul></li><li><ul><li>每个用户加密token使用单独的salt，过期改一下salt即可</li></ul></li><li>token有效期续签问题，续签的目的就是为了防止用户频繁需要登录，token也需要额外的一些解决方案</li><li><ul><li>每次请求，都更新一个新token，如果之间没有请求，过了token有效期，就需要重新登录了</li></ul></li></ul><blockquote><p>参考文章<br><a href="https://zhuanlan.zhihu.com/p/85873228">JWT优缺点</a><br><a href="https://learnku.com/articles/17883?order_by=vote_count&">JWT详解</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于预请求</title>
    <link href="/2020/03/15/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E9%A2%84%E8%AF%B7%E6%B1%82/"/>
    <url>/2020/03/15/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E9%A2%84%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>最近学习Node，试着用node来学习一些关于后端的知识，帮助自己更好的理解web开发整个开发体系，这里总结遇到的一些坑</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>当后端设置了允许跨域的时候,前端发送请求时设置了请求头  ‘Content-Type’: ‘application/json’的时候，请求发送不成功</p><blockquote><p>如图</p></blockquote><ul><li><img src="/img/caikeng/one.png" alt="问题"></li><li><img src="/img/caikeng/two.png" alt="问题"></li></ul><blockquote><p>这时的代码</p></blockquote><ul><li>前端<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fetch(<span class="hljs-string">&#x27;http://localhost:3000/&#x27;</span>, &#123;<br>    method: <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    headers: &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;,<br>    body: &#123;<br>        name: <span class="hljs-string">&#x27;shuaxin&#x27;</span><br>    &#125;<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> res.json()<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(data)<br>&#125;)<br></code></pre></div></td></tr></table></figure></li><li>后端<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> connect = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;connect&#x27;</span>)<br><span class="hljs-keyword">const</span> app = connect()<br><br>app<br>    .use(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 设置允许的请求的域名</span><br>        res.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br>        <span class="hljs-comment">// 设置允许跨域请求的方法类型</span><br>        res.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>)<br>        <span class="hljs-built_in">console</span>.log(req.method);<br>        next()<br>    &#125;)<br>    .use(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>        res.end(<span class="hljs-built_in">JSON</span>.stringify(&#123;<br>            msg: <span class="hljs-string">&#x27;succ&#x27;</span><br>        &#125;))<br>    &#125;)<br><br>app.listen(<span class="hljs-string">&#x27;3000&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;服务启动&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p>解决</p></blockquote><ul><li>只需要在后端在设置一下跨域允许的请求头即可，代码<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">....<br>res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&quot;Content-Type&quot;</span>)<br>....<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在没有添加允许的请求头之前，在后台打印一下请求的method<br><img src="/img/caikeng/three.png" alt="OPTIONS"><br>发现并不是请求中设置的PUT,这就是浏览器的预请求机制</p><h3 id="铺垫"><a href="#铺垫" class="headerlink" title="铺垫"></a>铺垫</h3><p>这里牵扯到一个概念:简单请求和复杂请求，对于2者的区分</p><blockquote><p>简单请求</p></blockquote><ul><li>请求方法只能是GET/POST/HEADE</li><li>请求头只能是:Accept/Accept-Language/Conent-Language/Content-Type 等</li><li>请求头的Content-Type只能是: text/plain、multipart/form-data 或 application/x-www-form-urlencoded</li></ul><blockquote><p>复杂请求(即出现预请求的条件)</p></blockquote><ul><li>不满足上述条件后，就成了复杂请求，也就出现了所谓的预请求发送的问题</li><li>分析第一张图发现请求类型的内容是 application/json,所以出现了预请求</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>什么是预请求?目的是什么?</p></blockquote><ul><li>即options请求,是浏览器在我们真实的请求之前自动发送的一个请求</li><li>目的是为了判断服务端是否允许我们真实的请求的请求头格式、请求类型等</li></ul><blockquote><p>区分简单/复杂请求</p></blockquote><ul><li>就是HTML表单配合enctype可以指定的编码格式发送的请求就是简单请求</li><li>其他像PUT/DELETE，和需要自定义请求头设置编码格式的请求就都是复杂请求</li><li>查这方面知识看到<a href="https://juejin.im/post/5d71d1e7f265da03934c027b">奇舞周刊</a>的一篇文章中提到的</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解</a><br><a href="https://juejin.im/post/5d71d1e7f265da03934c027b">CORS 为什么要区分『简单请求』和『预检请求』？</a></p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>NodeJS</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuejs基础复习-5</title>
    <link href="/2020/02/10/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-5/"/>
    <url>/2020/02/10/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-5/</url>
    
    <content type="html"><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><ul><li><p>概念：</p><blockquote><p>根据URL决定显示什么内容，这个系统就是路由系统。</p></blockquote></li><li><p>为什么需要</p><blockquote><p>因为vue和react这些SPA框架，只有一个html页面，所以需要使用某种手段来决定当前页面显示什么内容，所以才有了前端路由系统。</p></blockquote><a id="more"></a></li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul><li>路由配置除外，使用到的只有2个标签<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 用于进行页面的跳转 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 用于显示，根据url决定显示的页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>进行切换页面跳转<blockquote><p>在浏览器输入http:****/home就会显示home ，输入about就会显示about</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Home.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        home<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;home&#x27;</span></span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- About.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        about<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;about&#x27;</span></span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 在router.js中配置需要显示的页面文件</span><br>...<br><span class="hljs-keyword">const</span> routes=[<br>    &#123;<br>        <span class="hljs-comment">// url的路径</span><br>        path:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>        <span class="hljs-comment">// home.vue文件的name</span><br>        name:<span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-comment">// 引入该文件</span><br>        component:<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;Home.vue&#x27;</span>)<br>    &#125;,<br>    &#123;<br>        path:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>        name:<span class="hljs-string">&#x27;about&#x27;</span>,<br>        component:<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;About.vue&#x27;</span>)<br>    &#125;,<br>]<br>...<br></code></pre></div></td></tr></table></figure><ul><li>动态路由显示<blockquote><p>例如一个有一个todo的列表，其中每一项内都有不同的数据，但是数据显示的样式什么都一样，我们可以用同一个组件来渲染，只需要在跳转时传递一个标识，来告诉组件加载所对应的数据就可以了</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 在router.js中配置需要显示的页面文件</span><br>...<br><span class="hljs-keyword">const</span> routes=[<br>    &#123;<br>        <span class="hljs-comment">// url的路径</span><br>        path:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>        <span class="hljs-comment">// home.vue文件的name</span><br>        name:<span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-comment">// 引入该文件</span><br>        component:<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;Home.vue&#x27;</span>)<br>    &#125;,<br>    &#123;<br>        name:<span class="hljs-string">&#x27;list/:id,</span><br><span class="hljs-string">        component:&#x27;</span>list<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">        component:()=&gt;import(&#x27;</span>List.vue<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">]</span><br><span class="hljs-string">...</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- home.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in info&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 切换url来进行页面跳转，类似a标签 --&gt;</span><br>                <span class="hljs-comment">&lt;!-- 跳转时携带点击项的id --&gt;</span><br>                <span class="hljs-comment">&lt;!-- 这里也可以使用query替代params --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;name:&#x27;list&#x27;,params:&#123;id:&#x27;item&#x27;&#125;&#125;&quot;</span>&gt;</span><br>                    &#123;&#123;item.id&#125;&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;list&#x27;</span>,</span><br>    data()&#123;<br><span class="javascript">        <span class="hljs-keyword">return</span>&#123;</span><br>            info:[<br>                &#123;<br><span class="javascript">                    id:<span class="hljs-string">&#x27;1&#x27;</span></span><br>                &#125;,<br>                &#123;<br><span class="javascript">                    id:<span class="hljs-string">&#x27;2&#x27;</span></span><br>                &#125;<br>            ]<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- list.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> &gt;</span><br>            &#123;&#123;id&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;list&#x27;</span>,</span><br>    data()&#123;<br><span class="javascript">        <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">            info:<span class="hljs-string">&#x27;&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    mounted()&#123;<br><span class="javascript">        <span class="hljs-comment">// 接受从home组件传递过来的id</span></span><br><span class="javascript">        <span class="hljs-comment">// 如果跳转那里使用的query这里的params也需要换成query</span></span><br><span class="javascript">        <span class="hljs-built_in">this</span>.info=<span class="hljs-built_in">this</span>.$route.params.info;</span><br>    &#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>query和的区别：query使传递的值会显示在url中，params不会，所以这也导致了假如我们没有在list后面写id，那list页面刷新后，传递过来的数据就会丢失。<br>总结：使用query可以不在路由进行配置，params时要在路由进行动态参数配置</p></blockquote><h1 id="其他使用"><a href="#其他使用" class="headerlink" title="其他使用"></a>其他使用</h1><p>总结除过页面跳转意外，使用过的路由系统的功能。</p><ul><li><p>路由嵌套</p><blockquote><p>使用场景：当一个页面下的其他页面都有相同的部分，只有小部分需要根据不同的地址来显示不同的内容时，就可以使用，比如后台管理系统，所有页面左边都有整体的菜单</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// router.js配置</span><br>...<br><span class="hljs-keyword">const</span> routes=[<br>    &#123;<br>        <span class="hljs-comment">// url的路径</span><br>        path:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>        <span class="hljs-comment">// home.vue文件的name</span><br>        name:<span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-comment">// 引入该文件</span><br>        component:<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;Home.vue&#x27;</span>),<br>        <span class="hljs-comment">// 配置 子路由</span><br>        children:[<br>            &#123;<br>                path:<span class="hljs-string">&#x27;/one&#x27;</span>,<br>                name:<span class="hljs-string">&#x27;one&#x27;</span>,<br>                component:<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;One.vue&#x27;</span>),<br>            &#125;,<br>            &#123;<br>                path:<span class="hljs-string">&#x27;/two&#x27;</span>,<br>                name:<span class="hljs-string">&#x27;two&#x27;</span>,<br>                component:<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;Two.vue&#x27;</span>),<br>            &#125;,<br>            ...<br>        ]<br>    &#125;<br>]<br>...<br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- home.vue使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> &gt;</span><br>            菜单<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 根据url的不同来显示one，two --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;home&#x27;</span>,</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>路由导航守卫</p></li></ul><blockquote><p>作用</p><ul><li>在页面进入前后进行一些操作，比如重定向，数据操作等等</li></ul></blockquote><blockquote><p>使用场景</p><ul><li>在页面进入前验证token是否过期、验证用户是否还有权限访问该页、根据需要不一样，重新导向用户的访问页面</li></ul></blockquote><blockquote><p>分类:</p><blockquote><p>全局：作用在所有路由<br>路由独享：只作用在配置的路由<br>组件内：只作用在配置的组件</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于浏览器存储</title>
    <link href="/2019/12/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8/"/>
    <url>/2019/12/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前为了应付上课的作业，要做一个包含有留言板功能的官网。其实仅仅就HTML+CSS+JS做类似功能倒也不是很复杂，但是自己想着怎么可以做出线上那样，如果数据库存储留言的表有数据，当加载留言板页面时就会显示这些数据这样的效果。于是就想到了浏览器缓存，来模拟这个效果，所以顺带的去补了补浏览器存储相关的知识。来记录一下。</p><a id="more"></a><hr><h1 id="使用浏览器缓存实现一个伪留言板效果"><a href="#使用浏览器缓存实现一个伪留言板效果" class="headerlink" title="使用浏览器缓存实现一个伪留言板效果"></a>使用浏览器缓存实现一个伪留言板效果</h1><p>HTML+CSS+JS基础三件套！</p><h2 id="页面如下-不是重点一笔带过"><a href="#页面如下-不是重点一笔带过" class="headerlink" title="页面如下,不是重点一笔带过"></a>页面如下,不是重点一笔带过</h2><p><img src="/img/liuyan.png" alt="页面"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><p>功能</p></blockquote><ul><li>支持留言</li><li>可以及时的在留言后，显示在页面上</li><li>每次加载该页面时，如果之前有留言数据，及时渲染数据到页面</li></ul><blockquote><p>重点思路</p></blockquote><ul><li>获取浏览内容和触发条件很简单，通过绑定点击事件然后获取输入框值即可</li><li>关于留言数据渲染:使用js提供的创建dom和插入dom的api将存储起来的留言数据渲染到页面即可</li><li>关于存储留言：首先创建创建一个数组，在每一次留言后，存储每一条留言相关的数据，该数组提供渲染页面时的数据；其次就是在每次把留言存到数组时同时存储到localstrong里，来保证留言数据永久存储，在下一次打开页面时，也存在</li></ul><blockquote><p>代码实现</p></blockquote><ul><li>封装Dom一系列操作,为了省事(jq也可以更省事！)<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// @param&#123;dom:object,创建的dom&#125;</span><br><span class="hljs-comment">// @param&#123;att:object要给dom设置的属性&#125;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dom</span> </span>&#123;<br>    <span class="hljs-keyword">constructor</span>(dom, ...rest) &#123;<br>        <span class="hljs-built_in">this</span>.target = <span class="hljs-built_in">document</span>.createElement(dom);<br>        <span class="hljs-keyword">if</span> (rest[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) &#123;<br>            <span class="hljs-built_in">this</span>.initDom(rest[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> rest[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>            <span class="hljs-built_in">this</span>.addText(rest[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> rest[<span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>            <span class="hljs-built_in">this</span>.addText(rest[<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 初始化dom属性</span><br>    initDom(atts) &#123;<br>        <span class="hljs-keyword">if</span> (atts <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> atts) &#123;<br>                <span class="hljs-built_in">this</span>.target.setAttribute(i, atts[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 添加文本节点</span><br>    addText(txt) &#123;<br>        <span class="hljs-keyword">let</span> t = <span class="hljs-built_in">document</span>.createTextNode(txt);<br>        <span class="hljs-built_in">this</span>.target.appendChild(t);<br>    &#125;<br>    <span class="hljs-comment">// 添加子节点</span><br>    addChild(dom) &#123;<br>        <span class="hljs-built_in">this</span>.target.appendChild(dom.target);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>获取用户留言，并存储该留言数据<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;留言&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;context&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;enter&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    <br><span class="javascript">    <span class="hljs-comment">// 获取提交按钮</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> context=<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#context&#x27;</span>);</span><br><span class="javascript">    <span class="hljs-comment">// 存储留言数据的数组</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> comment=[];</span><br><span class="javascript">    <span class="hljs-comment">//添加新评论</span></span><br><span class="javascript">    submit.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 获取留言框</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> submit=<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#submit&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-comment">// 创建时间戳  图中看出 每一条留言要显示留言时间和内容</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="javascript">        <span class="hljs-keyword">const</span> now = <span class="hljs-string">`<span class="hljs-subst">$&#123;d.getFullYear()&#125;</span>-<span class="hljs-subst">$&#123;d.getMonth() + <span class="hljs-number">1</span>&#125;</span>-<span class="hljs-subst">$&#123;d.getDate()&#125;</span>`</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> time = <span class="hljs-string">`<span class="hljs-subst">$&#123;d.getHours()&#125;</span>:<span class="hljs-subst">$&#123;d.getMinutes()&#125;</span>:<span class="hljs-subst">$&#123;d.getSeconds()&#125;</span>`</span></span><br><span class="javascript">        <span class="hljs-comment">// 创建新评论信息</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> obj = &#123;</span><br><span class="javascript">            <span class="hljs-comment">// 留言时间</span></span><br><span class="javascript">            time: <span class="hljs-string">`<span class="hljs-subst">$&#123;now&#125;</span> <span class="hljs-subst">$&#123;time&#125;</span>`</span>,</span><br><span class="javascript">            <span class="hljs-comment">// 具体留言内容</span></span><br>            text: context.value<br>        &#125;;<br><span class="javascript">        <span class="hljs-comment">// 存储当前评论到评论数组</span></span><br>        comment.push(obj);<br><span class="javascript">        <span class="hljs-comment">// 存储到评论数据到session  </span></span><br><span class="javascript">        <span class="hljs-comment">// 键值对形式存储 值为string，所以转换对象为json格式存储</span></span><br><span class="javascript">        <span class="hljs-built_in">localStorage</span>.setItem(comment.length, <span class="hljs-built_in">JSON</span>.stringify(obj));</span><br><span class="javascript">        <span class="hljs-comment">// 清空输入框</span></span><br><span class="javascript">        context.value = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">        <span class="hljs-comment">// 渲染新添加评论到页面</span></span><br>        initComment(comment);<br>    &#125;);<br><span class="javascript">    <span class="hljs-comment">// 卸载页面dom</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> clear = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">targetDom</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 通过文档碎片API来卸载dom</span></span><br><span class="javascript">        <span class="hljs-keyword">let</span> frag = <span class="hljs-built_in">document</span>.createDocumentFragment(), child;</span><br><span class="javascript">        <span class="hljs-keyword">while</span> (child = targetDom.children) &#123;</span><br>            if (child.length === 0) &#123;<br><span class="javascript">                <span class="hljs-keyword">break</span>;</span><br>            &#125;<br>            frag.appendChild(child[0]);<br>        &#125;<br>    &#125;<br><span class="javascript">    <span class="hljs-comment">// 渲染评论到页面</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> initComment = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 卸载上一次渲染的页面 </span></span><br><span class="javascript">        <span class="hljs-comment">// 因为每次都是渲染当前comment数组的内容插入到页面中，所以插入前，需要删除上一次的页面下的留言相关信息</span></span><br>        clear(list);<br><span class="javascript">        <span class="hljs-comment">// 重新渲染评论到页面</span></span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">let</span> div = <span class="hljs-keyword">new</span> Dom(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">let</span> h3 = <span class="hljs-keyword">new</span> Dom(<span class="hljs-string">&#x27;h3&#x27;</span>, arr[i].time);</span><br><span class="javascript">            <span class="hljs-comment">// 把h3添加到div节点下</span></span><br>            div.addChild(h3);<br><span class="javascript">            <span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Dom(<span class="hljs-string">&#x27;p&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">let</span> span = <span class="hljs-keyword">new</span> Dom(<span class="hljs-string">&#x27;span&#x27;</span>, arr[i].text);</span><br>            p.addChild(span);<br><span class="javascript">            <span class="hljs-keyword">let</span> button = <span class="hljs-keyword">new</span> Dom(<span class="hljs-string">&#x27;button&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;reply&#x27;</span> &#125;, <span class="hljs-string">&#x27;回复&#x27;</span>);</span><br>            p.addChild(button);<br>            div.addChild(p);<br>            list.appendChild(div.target);<br>        &#125;<br>    &#125;;<br><span class="javascript">    <span class="hljs-comment">// 初始化页面</span></span><br><span class="javascript">    <span class="hljs-comment">// 判断localStorage中是否有数据 有就获取装入到commonent数组</span></span><br><span class="javascript">    <span class="hljs-comment">// 这里转换是因为localstrong不是一个纯数据对象</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-built_in">localStorage</span>));</span><br><span class="javascript">    <span class="hljs-comment">// 遍历localstrong数据装进comment</span></span><br><span class="javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> obj) &#123;</span><br><span class="javascript">        <span class="hljs-comment">// 因为是json格式存储，这里需要转换成js对象</span></span><br><span class="javascript">        comment.push(<span class="hljs-built_in">JSON</span>.parse(obj[i]));</span><br>    &#125;<br>    initComment(comment);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="该demo源码"><a href="#该demo源码" class="headerlink" title="该demo源码"></a><a href="https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/js-%E6%9C%9F%E6%9C%AB%E4%BD%9C%E4%B8%9A">该demo源码</a></h2></li></ul><hr><h1 id="localstrong"><a href="#localstrong" class="headerlink" title="localstrong"></a>localstrong</h1><p>是浏览器缓存的一种,可以F12打开chrome的  调试面板&gt;application 查看<br><img src="/img/liuyan2.png" alt="浏览器存储"></p><blockquote><p>特点</p></blockquote><ul><li>存储空间为5M左右</li><li>存储时间永久，除非手动删除</li><li>仅在客户端使用</li><li>页面可以直接读取(只读，如果要修改直接覆盖即可)</li><li>键值对格存储</li><li>api操作友好</li></ul><blockquote><p>使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 存储一条数据 第一个参数为&#123;key:String| Number&#125;</span><br><span class="hljs-comment">// 第二个参数为要存储的值 &#123;value:String&#125; 存储对象的话，通过json转换一下来存储就好</span><br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-comment">// 读取 参数为要读取数据的key</span><br><span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 修改</span><br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;10&#x27;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    删除</span><br><span class="hljs-comment">        1.在调试面板鼠标点击删除</span><br><span class="hljs-comment">        2.代码删除</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 参数为 目标数据的key</span><br><span class="hljs-built_in">localStorage</span>.removeItem(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 删除所有localStorage的数据</span><br><span class="hljs-built_in">localStorage</span>.clear();<br></code></pre></div></td></tr></table></figure><blockquote><p>使用场景</p></blockquote><ul><li>静态资源一类都可</li></ul><h1 id="其他存储"><a href="#其他存储" class="headerlink" title="其他存储"></a>其他存储</h1><h2 id="sessionstrong"><a href="#sessionstrong" class="headerlink" title="sessionstrong"></a>sessionstrong</h2><p>这个和localstrong一样，唯一不同的是数据存储的时间。当关闭页面或者浏览器后，数据自动清除。</p><blockquote><p>特点</p></blockquote><ul><li>和localstrong一样</li></ul><blockquote><p>使用</p></blockquote><ul><li>和localstrong一样</li></ul><blockquote><p>使用场景</p></blockquote><ul><li>存储当前用户的一些浏览足迹等，在同一URL地址下都可以使用。比如微博一类，当关闭或者退出后，自动释放。</li></ul><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote><p>使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//设置cookie</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setCookie</span>(<span class="hljs-params">name, value</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!name || !value) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">var</span> Days = <span class="hljs-number">30</span>; <span class="hljs-comment">//默认30天</span><br>    <span class="hljs-keyword">var</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    exp.setTime(exp.getTime() + Days * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(value) + <span class="hljs-string">&quot;;expires=&quot;</span> + exp.toUTCString();<br>&#125;<br><br><span class="hljs-comment">//获取cookie</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCookie</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> arr = <span class="hljs-built_in">document</span>.cookie.match(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(^| )&quot;</span> + name + <span class="hljs-string">&quot;=([^;]*)(;|$)&quot;</span>));<br>    <span class="hljs-keyword">if</span> (arr != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURIComponent</span>(arr[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">//删除cookie</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delCookie</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> exp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    exp.setTime(exp.getTime() - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">var</span> cval = getCookie(name);<br>    <span class="hljs-keyword">if</span> (!cval) <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">&quot;=&quot;</span> + cval + <span class="hljs-string">&quot;;expires=&quot;</span> + exp.toUTCString();<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>特点</p></blockquote><ul><li>4kb大小</li><li>参与客户端服务端之间数据交互</li><li>设置时，需要提供过期时间</li><li>api不友好，需要自己封装</li></ul><blockquote><p>使用场景</p></blockquote><ul><li>保存用户状态，实现身份认证等的操作</li></ul><blockquote><p>cookie算是另一种用途了，单独写笔记</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据业务需要合理使用,可以结合使用,三者对比图如下<br><img src="/img/liuyan3.png" alt="留言"></p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>浏览器存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于浏览器缓存</title>
    <link href="/2019/11/28/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <url>/2019/11/28/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要缓存"><a href="#为什么要缓存" class="headerlink" title="为什么要缓存"></a>为什么要缓存</h1><p>因为网站的所有资源都是放在服务器上的，每次访问一个页面的时候，都会通过http请求去请求该页面依赖的静态资源，这个过程会花费很多的时间，造成页面留白等响应过长的问题，导致用户体验不是非常的友好</p><p>所以合理的利用浏览器缓存，将第一次请求后得到的一些静态资源合理的存储在本地，然后当用户下次访问的时候，可以直接从本地读取；加快页面的显示。</p><p>举个例子：现在我们有一个html然后页面加载一个text.js文件；来看看使用和不使用缓存的区别</p><ul><li><p>没有使用缓存<br><img src="/img/cache.png" alt="图1"></p></li><li><p>使用了缓存<br><img src="/img/cache1.png" alt="图2"></p></li></ul><p>通过上面两张图可以明显看到，使用缓存后，加载时间从8ms变成了0，效果肉眼可见！</p><a id="more"></a><h1 id="怎么来使用缓存？"><a href="#怎么来使用缓存？" class="headerlink" title="怎么来使用缓存？"></a>怎么来使用缓存？</h1><p>通过在服务端设置响应头(header)来告诉浏览器，该资源可以被缓存</p><p>控制缓存资源的header： </p><blockquote><p><strong><em>Expries</em></strong> </p></blockquote><ul><li>于HTTP1.0中添加，值为服务端本地设置的时间+请求时间；然后客户端在该时间之前，可以一直使用该缓存</li></ul><blockquote><p><strong><em>Cache-Control</em></strong></p></blockquote><ul><li>于HTTP1.1中添加，和Expries共存时，会覆盖前者；</li><li>为了兼容1.0和1.1会和Expries共同存在</li><li>值有以下几种：</li><li>1.max-age=100—100秒后缓存过期</li><li>2.no-cache—每次使用缓存前都要去服务端进行一次验证，以此来检查本地缓存是否过期；</li><li>3.no-store—强制不进行缓存</li><li>4.public—资源可以被客户端和代理服务器缓存</li><li>5.private—资源只能被客户端缓存</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control">更多</a></li></ul><blockquote><p><strong><em>Last-Modified/If-Modified-Since</em></strong></p></blockquote><ul><li>Last-Modified为服务端设置，值是这个资源在服务器上的最后修改时间，下次客户端请求该资源时会自动携带该值并通过If-Modified-Since提交给服务端</li><li>服务端会对比返回的值和该资源最后修改时间，若没有变化，则返回空响应，告诉客户端可以直接使用缓存</li><li>如果返回给服务端的值小于该资源最后修改时间，则返回新的资源</li></ul><blockquote><p><strong><em>ETag/If-None-Match</em></strong></p></blockquote><ul><li>前者在服务端设置，后者在客户端请求时通过该首部返回给服务端</li><li>Etag的值，为当前资源在服务端生成的一个关于该资源文件的一个唯一标识符；前后通过比对该标识符是否一致，来决定是否使用缓存</li></ul><h1 id="这几种缓存手段有什么区别呢"><a href="#这几种缓存手段有什么区别呢" class="headerlink" title="这几种缓存手段有什么区别呢"></a>这几种缓存手段有什么区别呢</h1><blockquote><p>Expries、Cache-Control属于 <strong><em>强缓存</em></strong></p></blockquote><ul><li>意思就是可以直接把资源缓存，然后设置一个过期时间，在这时间之前，就可以一直使用。</li><li>这2者区别就是设置值的方式不同，然后各自对应的协议版本不同，为了兼容1.0/1.1 两者都会使用</li></ul><blockquote><p>Last-Modified、ETag属于 <strong><em>协商缓存</em></strong></p></blockquote><ul><li>意思就是即使缓存了，每次使用缓存前，都必须要去服务端进行一次验证，判断该缓存是否可用</li><li>2者的区别：前者记录时间，后者记录根据文件生成的标识符；导致的结果就是，后者会更精确</li></ul><blockquote><p>2种缓存的区别：强缓存优先于协商缓存</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从输入url到页面展示发生了什么</title>
    <link href="/2019/11/28/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <url>/2019/11/28/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在学习HTTP协议相关的知识，对这道曾经一度让我懵逼的面试题，有了一点自己的答案，所以按自己的理解简单总结一下笔记</p><h1 id="流程概述"><a href="#流程概述" class="headerlink" title="流程概述"></a>流程概述</h1><blockquote><p>解析输入的url中的域名<br>通过TCP三次握手建立TCP通道<br>客户端—服务端通过http协议进行数据交互<br>客户端(浏览器)接收到服务端发来的HTML然后开始进行页面渲染<br>请求结束，通过TCP四次挥手关闭TCP通道</p></blockquote><a id="more"></a><h2 id="解析输入的url的域名"><a href="#解析输入的url的域名" class="headerlink" title="解析输入的url的域名"></a>解析输入的url的域名</h2><blockquote><p>首先是URL是什么？</p></blockquote><ul><li>URL:统一资源定位符,如下</li><li><a href="http://www.w3school.com.cn/html/index.asp">http://www.w3school.com.cn/html/index.asp</a></li><li><strong><em>http://</em></strong>是http协议的版本，*<strong><a href="http://www.w3school.com.cn***是域名,域名后的/">www.w3school.com.cn***是域名，域名后的</a> *</strong>/<strong>* 称为路由，用来定位服务器的资源目录，*</strong>html/index.asp***就是具体目录下的具体资源文件</li></ul><blockquote><p>为什么要解析域名？</p></blockquote><ul><li>为什么解析域名?因为每一台主机都有一个属于他自己的ip地址，比如 <strong><em>127.0.0.1</em></strong>，其他互联网的居民也是根据这个ip地址来访问你主机的资源(你对外提供的可访问的资源)，但是这个ip地址非常不好记忆，所以需要一个通俗易懂的名字来代替ip地址,这个就是域名。解析域名就是通过你的域名来找到对应你这个域名的主机。</li></ul><blockquote><p>和怎么解析的呢？</p></blockquote><ul><li>怎么解析呢?通过采用DNS协议的DNS网络服务器来根据你提供的域名，自动去寻找对应该域名的ip地址，这个过程是浏览器自动完成，不需要手动参与。</li><li>解析的过程一般发生在通过URL请求之前，浏览器会先把域名发送给DNS服务器，DNS服务器根据域名找到对应的IP地址后，返回给浏览器后，浏览器将URL中的域名替换成对应的IP地址，然后继续接下来的步骤。</li></ul><h2 id="通过TCP三次握手建立TCP通道"><a href="#通过TCP三次握手建立TCP通道" class="headerlink" title="通过TCP三次握手建立TCP通道"></a>通过TCP三次握手建立TCP通道</h2><blockquote><p>为什么建立TCP通道？</p></blockquote><ul><li>因为http属于网络模型七层协议中的应用层，只负责两端数据包的发送和接受，这个过程需要一个通道来传送，这就是TCP协议，它属于网络模型七层协议中的传输层。</li></ul><blockquote><p>TCP三次握手的目的?</p></blockquote><ul><li>为了在要进行数据交互的两端，建立一个有效的数据传输通道；这个有效可以理解成，防止服务端接收到之前连接过已经断开的客户端突然传递过来的数据，导致出现一些错误。</li></ul><blockquote><p>TCP三次握手是怎么进行的？</p></blockquote><ul><li>简单概述:1.客户端先发送一个信息告诉服务端，它要进行连接;2.服务端收到信息后，会在发送一个信息告诉客户端，我知道了，你可以连接了；3.这时客户端收到服务端发来的信息后，会在传回一个信息给服务端，服务端收到后，通道搭建完成，可以开始http请求的发送了。</li><li>大体过程如下图<br><img src="/img/url.png" alt="TCP三次握手"></li><li>图中的字母和数字就是三次握手中，用来确认是具体是哪一台客户端和服务端进行的链接的数据包。</li><li>SYN：同步序列编号；seq：序列号；ACK：确认字符</li></ul><h2 id="客户端—服务端通过http协议进行数据交互"><a href="#客户端—服务端通过http协议进行数据交互" class="headerlink" title="客户端—服务端通过http协议进行数据交互"></a>客户端—服务端通过http协议进行数据交互</h2><p>客户端通过HTTP的请求方法，发送请求到服务端提供的请求地址，然后服务端收到请求后，提供客户端希望获取到的数据，在返回给客户端。</p><p><a href="http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">http协议学习</a></p><h2 id="浏览器解析渲染页面"><a href="#浏览器解析渲染页面" class="headerlink" title="浏览器解析渲染页面"></a>浏览器解析渲染页面</h2><p>浏览器一般都有两个引擎，一个渲染引擎，用来解析HTML+CSS并绘制显示出来；另一个是js引擎用来专门执行js代码。</p><blockquote><p>解析过程</p></blockquote><ul><li>浏览器收到HTML后，会先解析HTML文件的DOM树，由上至下(先解析一个节点的所有子节点，再继续该节点的兄弟节点，依次解析)；</li><li>解析完毕所有的HTML后，才会在解析对应的CSS树，并根据CSS的规则计算出布局、对应dom的样式、尺寸，完毕后在进行渲染。</li></ul><blockquote><p>注意点：</p></blockquote><ul><li>在解析HTML时，如果遇到script脚本，会停止解析，开始执行脚本，脚本执行完毕后，继续解析；这也是为什么我们写内置的script的时候，如果把代码防止在body之前，获取不到dom的原因。</li><li>在准备好DOM树和CSS树后，渲染时有两个概念，*<strong>回流**<em>、</em></strong>重绘***。</li><li>回流：当DOM的尺寸大小，以及影响布局的变化称为回流，这个操作会触发DOM的重新计算和渲染。</li><li>重绘：当DOM的颜色，和不影响布局的样式发生的改变称为重绘。<br><img src="/img/url2.png" alt="渲染HTML过程"></li></ul><h2 id="请求结束，通过TCP四次挥手关闭TCP通道"><a href="#请求结束，通过TCP四次挥手关闭TCP通道" class="headerlink" title="请求结束，通过TCP四次挥手关闭TCP通道"></a>请求结束，通过TCP四次挥手关闭TCP通道</h2><p><img src="/img/url3" alt="四次挥手"><br>和三次握手的前三次流程大致相同，只是多了一次，客户端向服务端发送确认信息的步骤。</p><p>因为服务端，是监听端，当通道搭建完成后，实时接收客户端发送的请求；它可以随时关闭通道，而当挥手的第三步完成后，浏览器需要告诉服务端，是否确认关闭通道。</p><p>图中 的FIN为结束标志，结束序列编号。</p><h1 id="学习参考链接"><a href="#学习参考链接" class="headerlink" title="学习参考链接"></a>学习参考链接</h1><p><a href="https://github.com/ljianshu/Blog/issues/24">浪里行舟</a></p><p><a href="https://zhidao.baidu.com/question/1964377688066529460.html">tcp协议中“syn，ack，fin”各有什么作用</a></p><p><a href="https://book.douban.com/subject/25863515/">图解HTTP</a></p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http协议学习笔记</title>
    <link href="/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="关于HTTP协议"><a href="#关于HTTP协议" class="headerlink" title="关于HTTP协议"></a>关于HTTP协议</h1><p>位于网络协议7层(如下图)中的应用层，主要用来进行客户端和服务按数据交互。<br><img src="/img/url4.jfif" alt="OSI七层模型"></p><a id="more"></a><h1 id="为什么用它呢"><a href="#为什么用它呢" class="headerlink" title="为什么用它呢"></a>为什么用它呢</h1><p>因为简单、灵活、无状态。</p><ul><li>简单：只需要通过请求方法请求资源路径即可</li><li>灵活：传输数据类型可以是任意类型</li><li>无状态：链接只负责数据交互，不进行保存，所以彼此间不存在依赖，比较简单明了。当然是有好处，但是也导致了需要做一些请求验证时，就需要使用一些其他的手段，比如session、token。</li></ul><h1 id="关于HTTP协议的版本的内容-就写了自己知道的-，毕竟东西太多了-我太菜了"><a href="#关于HTTP协议的版本的内容-就写了自己知道的-，毕竟东西太多了-我太菜了" class="headerlink" title="关于HTTP协议的版本的内容(就写了自己知道的=.=，毕竟东西太多了[我太菜了])"></a>关于HTTP协议的版本的内容(就写了自己知道的=.=，毕竟东西太多了[我太菜了])</h1><h3 id="0-9版本"><a href="#0-9版本" class="headerlink" title="0.9版本"></a>0.9版本</h3><ul><li>只有GET一个请求方法</li><li>没有header等描述数据的信息</li><li>为短连接，当服务器发送完毕数据后，就关闭TCP通道。</li></ul><h3 id="1-0版本"><a href="#1-0版本" class="headerlink" title="1.0版本"></a>1.0版本</h3><ul><li>增加了很多请求方法(POST等)</li><li>怎么加了状态码和header等描述数据的信息</li><li>有了If-Modified-Since,Expires处理缓存</li></ul><h3 id="1-1版本-现在使用"><a href="#1-1版本-现在使用" class="headerlink" title="1.1版本(现在使用)"></a>1.1版本(现在使用)</h3><ul><li>增加了持续链接！重点！</li><li>增加host域，可以在同一台服务器，跑多个web服务</li><li>增加了更多的缓存处理策略，如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等</li></ul><h3 id="未来—2-0版本"><a href="#未来—2-0版本" class="headerlink" title="未来—2.0版本"></a>未来—2.0版本</h3><ul><li>所有数据都以2进制传递</li><li>支持同一通道的多有请求，同时发送，1.1中。可以开多个TCP通道，但每个通道上的请求，一次一个，需要按照顺序进行发送</li><li>支持服务端向客户端推送消息等</li></ul><h1 id="HTTP协议的组成"><a href="#HTTP协议的组成" class="headerlink" title="HTTP协议的组成"></a>HTTP协议的组成</h1><p><img src="/img/url5.png" alt="OSI七层模型"><br>HTTP有请求和响应报文两种类型，但是组成部分如图所示，都是有三部分组成</p><blockquote><p>1.起始行，一般由一下三部分构成,空格隔开每一部分；通过换行和首部隔开。</p></blockquote><ul><li>请求地址</li><li>请求的方法(methods)，有GET/POST/DELETE/PUT/HEAD</li><li>http协议版本号</li><li>状态码<br><img src="/img/url6.png" alt="请求头"></li></ul><blockquote><p>2.首部(Headers)</p></blockquote><ul><li>由 <strong><em>关键字/值</em></strong> 组成，不同的关键字和值，有不同的作用；每一行一对；最后一个请求头后是一个空行来和主体隔开</li><li>比较重要的 <strong><em><a href="http://localhost:4000/2019/11/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F/">跨域</a></em></strong>、*<strong><a href="http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/">缓存</a>**<em>、</em></strong>CSP*** 都是在这里进行设置<br><img src="/img/header.png" alt="首部"></li></ul><blockquote><p>3.主体(要发送的内容、接受到的内容)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于防抖和节流</title>
    <link href="/2019/11/21/JS/%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/2019/11/21/JS/%E5%85%B3%E4%BA%8E%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><blockquote><p><strong>作用</strong></p></blockquote><ul><li>这两个名词是两种解决方案的称呼，为了解决频繁触发某一个函数时，限制它的调用次数，让它不要那么频繁的被调用。</li></ul><blockquote><p><strong>为啥要这么做</strong></p></blockquote><ul><li>首先呢，在浏览器中，有2个概念，一个叫<strong>重绘</strong>，一个叫**<em>回流**</em>。这两个现象，是在浏览器渲染页面的时候会发生的，当页面的布局不改变，仅仅是字体大小颜色等改变时就会发生重绘；当页面布局发生改变(比如width、height、margin、padding等)，会发生回流。</li><li>上述的这两个现象挺影响性能的，所以当我们的操作会导致发生这两个现象时，一般就可以使用防抖和节流来，尽可能的减少这样的操作，不至于让我们的程序挂掉。当然不止这样情况下才能用哈，比如触发ajax请求的时候其实也可以用，根据需要来判断。<a id="more"></a></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><blockquote></blockquote><ul><li>原理：通过定时器来限制我们的操作只能在一个限制的时间后才能执行，当在这个限制时间内再次触发这一操作，重新开始计时，时间到后，在执行操作。</li><li>举例：根据显示器窗口的宽来实时的设置合适的高，让背景图可以以最完美的比例，完全显示。(<a href="http://localhost:4000/2019/11/18/css/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%B9%E5%99%A8%E5%A4%A7%E5%B0%8F/">具体实现看这里</a>),这里对window的resize事件，进行防抖的操作<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 保存定时器</span><br><span class="hljs-keyword">let</span> timeout = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    des:防抖函数</span><br><span class="hljs-comment">    <span class="hljs-doctag">@params</span>:&#123;fun:要调用的函数&#125;</span><br><span class="hljs-comment">    <span class="hljs-doctag">@params</span>:&#123;wait:设置定时器延迟执行的时间&#125;</span><br><span class="hljs-comment">*/</span>  <br><span class="hljs-keyword">let</span> debounce = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fun,wait</span>) </span>&#123;<br>    <span class="hljs-comment">// 清除上次保存的定时器</span><br>    <span class="hljs-built_in">clearTimeout</span>(timeout);<br>    <span class="hljs-comment">// 创建新定时器 并保存</span><br>    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 执行要操作的函数</span><br>        fun();<br>    &#125;, wait);<br>&#125;<br><span class="hljs-comment">// 监听窗口变化事件</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    debounce(changeH,<span class="hljs-number">1000</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><ul><li>原理：持续触发某一个函数(事件)的时候，每隔一段时间只执行一次；</li><li>实现：有两种方式，一种是通过时间戳一种是通过设置定时器。</li><li>时间戳版本：触发事件前记录一个时间，当触发事件时再记录当前时间，然后让2个时间做差在和我们设置的事件周期比较，如果大，执行事件并更新时间；小于，不执行。<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 节流函数---时间戳版本</span><br><span class="hljs-comment">// 设置初始化时间</span><br><span class="hljs-keyword">let</span> initDate = <span class="hljs-built_in">Date</span>.now();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    des:防抖函数</span><br><span class="hljs-comment">    <span class="hljs-doctag">@params</span>:&#123;fun:要调用的函数&#125;</span><br><span class="hljs-comment">    <span class="hljs-doctag">@params</span>:&#123;wait:设置定时器延迟执行的时间&#125;</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-keyword">let</span> throttleOne = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fun, wait</span>) </span>&#123;<br>    <span class="hljs-comment">// 获取当前时间</span><br>    <span class="hljs-keyword">let</span> currentDate = <span class="hljs-built_in">Date</span>.now();<br>    <span class="hljs-comment">// 当执行函数的时间戳和第一次的时间戳做差大于设置的周期时，才执行函数，并更新时间戳</span><br>    <span class="hljs-keyword">if</span> (currentDate - initDate &gt; wait) &#123;<br>        fun();<br>        <span class="hljs-comment">// 更新初始化的时间为当前时间</span><br>        initDate = currentDate;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;没执行&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 监听窗口变化事件</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    throttleByTimeStamp(changeH, <span class="hljs-number">1000</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li><li>设置定时器版本：设置一个变量用来保存定时器，然后每次每次触发事件前，判断改变量是否有定时器，没有正常执行，执行后清楚触发器；如果有触发器，则不进行操作，等待上次的触发器执行完毕。</li><li>特点：这个形式就是，第一次操作一定会触发事件的执行。<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-comment">// 节流函数---定时器版本</span><br><span class="hljs-comment">// 用来保存定时器</span><br><span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> throttleTwo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">fun, wait</span>) </span>&#123;<br>    <span class="hljs-comment">// 定时器存在不执行函数，不存在就执行函数</span><br>    <span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>) &#123;<br>        timer = <span class="hljs-built_in">setTimeout</span>(<br>            () =&gt; &#123;<br>                fun();<br>                timer=<span class="hljs-literal">null</span>;<br>            &#125;, wait<br>        );<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;没有执行&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 监听窗口变化事件</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    throttleTwo(changeH, <span class="hljs-number">1000</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h3 id="2者的不同"><a href="#2者的不同" class="headerlink" title="2者的不同"></a>2者的不同</h3><blockquote><p>防抖是在一段时间后，一定会执行一次<br>节流是在一段时间内，一定会执行一次</p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote><p>这两种操作要达到的目的是一样的，但是因为特点不同，所以使用场景有时候也会有一点不同；<br>防抖</p></blockquote><ul><li>比如我们这个例子，用防抖比较好，因为当窗口一直在变化，最后还是会停止，一但停止，就必须要保证容器大小一定要按背景图比例调整好，显示完美的效果给用户。</li></ul><blockquote><p>节流</p></blockquote><ul><li>当我们的页面在无线加载的场景下，需要用户在滑动滚动条的时候，来不断的请求ajax，所以用节流就比较好。</li></ul><h1 id="学习参考链接"><a href="#学习参考链接" class="headerlink" title="学习参考链接"></a>学习参考链接</h1><p><a href="https://github.com/mqyqingfeng/Blog/issues/26">冴羽-重学JS之防抖节流</a><br><a href="https://mp.weixin.qq.com/s/Vkshf-nEDwo2ODUJhxgzVA">JS的防抖与节流</a></p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于call,bind,apply</title>
    <link href="/2019/11/20/JS/%E5%85%B3%E4%BA%8Ecall-bind-apply/"/>
    <url>/2019/11/20/JS/%E5%85%B3%E4%BA%8Ecall-bind-apply/</url>
    
    <content type="html"><![CDATA[<h1 id="关于call-bind-apply的作用"><a href="#关于call-bind-apply的作用" class="headerlink" title="关于call,bind,apply的作用"></a>关于call,bind,apply的作用</h1><p>这三个方法都是只有函数才可以调用，作用就是改变函数执行时this的指向。</p><a id="more"></a><h1 id="代码中用到的一些知识的说明"><a href="#代码中用到的一些知识的说明" class="headerlink" title="代码中用到的一些知识的说明"></a>代码中用到的一些知识的说明</h1><blockquote><p><strong><em>rest</em></strong></p></blockquote><ul><li>rest是es6的一个新语法，参数接受函数的多余参数，组成一个数组，放在形参的最后<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> one=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">...rest</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(rest <span class="hljs-keyword">instanceof</span> Arrary); <span class="hljs-comment">// true</span><br>    <span class="hljs-built_in">console</span>.log(rest);<span class="hljs-comment">// [1,2,3]</span><br>&#125;;<br>one(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p><strong><em>…&lt;一个数组&gt;</em></strong> </p></blockquote><ul><li>解构赋值,他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-built_in">console</span>.log(...arr);<span class="hljs-comment">// 1 2 3</span><br><span class="hljs-keyword">let</span> brr=[...arr];<br><span class="hljs-comment">// 很方便的复制arr的值到brr</span><br><span class="hljs-built_in">console</span>.log(brr);<span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></div></td></tr></table></figure></li></ul><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用?"></a>如何使用?</h1><p>call</p><blockquote><p><strong><em>参数(obj,arg1,arg2,…)</em></strong></p></blockquote><ul><li>第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型</li><li>代码示例<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> one = &#123;<br>    name: <span class="hljs-string">&#x27;one&#x27;</span>,<br>    sayhi(...rest) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`这是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>的函数,这是传递进来的参数：<span class="hljs-subst">$&#123;rest[<span class="hljs-number">0</span>]&#125;</span>,<span class="hljs-subst">$&#123;rest[<span class="hljs-number">1</span>]&#125;</span>`</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 这是one的函数,这是传递进来的参数：参数一,参数二</span><br>one.sayhi(<span class="hljs-string">&#x27;参数一&#x27;</span>, <span class="hljs-string">&#x27;参数二&#x27;</span>);<br><span class="hljs-keyword">let</span> two = &#123;<br>    name: <span class="hljs-string">&#x27;two&#x27;</span><br>&#125;;<br><span class="hljs-comment">// 这是two的函数,这是传递进来的参数：参数1,参数2</span><br>one.sayhi.call(two, <span class="hljs-string">&#x27;参数a&#x27;</span>, <span class="hljs-string">&#x27;参数b&#x27;</span>);<br></code></pre></div></td></tr></table></figure></li></ul><p>bind</p><blockquote><p><strong><em>参数(obj,arg1,arg2,…)()</em></strong></p></blockquote><ul><li>第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型</li><li>使用时，需要在调用一次，因为bind返回的是一个函数</li><li>代码示例<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> one = &#123;<br>    name: <span class="hljs-string">&#x27;one&#x27;</span>,<br>    sayhi(...rest) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`这是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>的函数,这是传递进来的参数：<span class="hljs-subst">$&#123;rest[<span class="hljs-number">0</span>]&#125;</span>,<span class="hljs-subst">$&#123;rest[<span class="hljs-number">1</span>]&#125;</span>`</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 这是one的函数,这是传递进来的参数：参数一,参数二</span><br>one.sayhi(<span class="hljs-string">&#x27;参数一&#x27;</span>, <span class="hljs-string">&#x27;参数二&#x27;</span>);<br><span class="hljs-keyword">let</span> two = &#123;<br>    name: <span class="hljs-string">&#x27;two&#x27;</span><br>&#125;;<br><span class="hljs-comment">// 这是two的函数,这是传递进来的参数：参数1,参数2</span><br>one.sayhi.bind(two, <span class="hljs-string">&#x27;参数a&#x27;</span>, <span class="hljs-string">&#x27;参数b&#x27;</span>)();<br></code></pre></div></td></tr></table></figure></li></ul><p>apply</p><blockquote><p><strong><em>参数(obj,[arg1,arg2,…])</em></strong></p></blockquote><ul><li>第一个参数时要绑定的目标对象,后面的参数，都以数组形式传入<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> one = &#123;<br>    name: <span class="hljs-string">&#x27;one&#x27;</span>,<br>    sayhi(...rest) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`这是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>的函数,这是传递进来的参数：<span class="hljs-subst">$&#123;rest[<span class="hljs-number">0</span>]&#125;</span>,<span class="hljs-subst">$&#123;rest[<span class="hljs-number">1</span>]&#125;</span>`</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 这是one的函数,这是传递进来的参数：参数一,参数二</span><br>one.sayhi(<span class="hljs-string">&#x27;参数一&#x27;</span>, <span class="hljs-string">&#x27;参数二&#x27;</span>);<br><span class="hljs-keyword">let</span> two = &#123;<br>    name: <span class="hljs-string">&#x27;two&#x27;</span><br>&#125;;<br><span class="hljs-comment">// 这是two的函数,这是传递进来的参数：参数1,参数2</span><br>one.sayhi.apply(two, [<span class="hljs-string">&#x27;参数a&#x27;</span>, <span class="hljs-string">&#x27;参数b&#x27;</span>]);<br></code></pre></div></td></tr></table></figure></li></ul><h1 id="总结三者不同"><a href="#总结三者不同" class="headerlink" title="总结三者不同"></a>总结三者不同</h1><blockquote><p>传参数不同</p></blockquote><ul><li>call和bind在参数传递时，都是以多参数传递，只是bind使用是需要再调用一次返回的函数；</li><li>apply在传递参数时，都是以数组形式传递；</li></ul><blockquote><p>使用不同</p></blockquote><ul><li>call和apply改变了函数的this上下文后便执行该函数</li><li>bind则是返回改变了上下文后的一个函数。</li></ul><h1 id="三者的应用"><a href="#三者的应用" class="headerlink" title="三者的应用"></a>三者的应用</h1><blockquote><p><strong><em>将伪数组转换成数组</em></strong></p></blockquote><ul><li>啥是伪数组?就是长得像数组，但是不是数组，是一个对象；以及含有length的对象<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 函数内部的 arguments 就是一个伪数组</span><br><span class="hljs-keyword">let</span> one = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>); <span class="hljs-comment">//Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">arguments</span>); <span class="hljs-comment">//object</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// false</span><br>    <span class="hljs-keyword">let</span> arr = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>);<br>    <span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//  [1, 2, 3]</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> arr); <span class="hljs-comment">// object</span><br>    <span class="hljs-built_in">console</span>.log(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">//true</span><br>&#125;;<br>one(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p><strong><em>利用call和apply实现继承</em></strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.sayhi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>向您问好`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    Person.call(<span class="hljs-built_in">this</span>, name);<br>&#125;<br><span class="hljs-keyword">let</span> shuaxin = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;刷新&#x27;</span>);<br>shuaxin.sayhi();<br></code></pre></div></td></tr></table></figure><h1 id="来动手实现一下call、bind、apply"><a href="#来动手实现一下call、bind、apply" class="headerlink" title="来动手实现一下call、bind、apply"></a>来动手实现一下call、bind、apply</h1><p>call</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 通过rest来接受参数</span><br><span class="hljs-built_in">Function</span>.prototype.mycall = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...rest</span>) </span>&#123;<br>    <span class="hljs-comment">// 判断调用该函数的是不是函数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 获取要绑定的对象</span><br>        <span class="hljs-keyword">var</span> obj = rest.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// 给目标对象添加当前调用的函数</span><br>        obj[<span class="hljs-built_in">this</span>.name] = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-comment">// 并将要传递参数再一次传入进去</span><br>        obj[<span class="hljs-built_in">this</span>.name](...rest);<br>        <span class="hljs-comment">// 删除目标对象的该方法</span><br>        <span class="hljs-keyword">delete</span> obj.sayhi;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;该函数只可以被函数调用&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj[<span class="hljs-built_in">this</span>.name];<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>bind</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.mybind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...rest</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 获取要绑定的对象</span><br>        <span class="hljs-keyword">var</span> obj = rest.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">var</span> fname = <span class="hljs-built_in">this</span>.name;<br>        <span class="hljs-comment">// 给该函数绑定当前调用的函数</span><br>        obj[fname] = <span class="hljs-built_in">this</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;该函数只可以被函数调用&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 将要传递参数再一次传入进去</span><br>        obj[fname](...rest);<br>        <span class="hljs-comment">// 删除该方法</span><br>        <span class="hljs-keyword">delete</span> obj[fname];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>apply</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-built_in">Function</span>.prototype.myapply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...rest</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 获取要绑定的对象</span><br>        <span class="hljs-keyword">var</span> obj = rest.splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// 给该函数绑定当前调用的函数</span><br>        obj[<span class="hljs-built_in">this</span>.name] = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-comment">// 将要传递参数再一次传入进去</span><br>        <span class="hljs-keyword">if</span> (rest[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>) &#123;<br>            obj[<span class="hljs-built_in">this</span>.name](...rest[<span class="hljs-number">0</span>]);<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            obj[<span class="hljs-built_in">this</span>.name](rest[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-comment">// 删除该方法</span><br>        <span class="hljs-keyword">delete</span> obj.sayhi;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;该函数只可以被函数调用&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj[<span class="hljs-built_in">this</span>.name];<br>&#125;;<br></code></pre></div></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html">JavaScript 中 call()、apply()、bind() 的用法</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/11">JavaScript深入之call和apply的模拟实现</a></p><p><a href="https://juejin.im/post/5a9640335188257a7924d5ef">让你弄懂 call、apply、bind的应用和区别</a></p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页浏览进度条</title>
    <link href="/2019/11/19/css/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E8%BF%9B%E5%BA%A6/"/>
    <url>/2019/11/19/css/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E8%BF%9B%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="网页浏览进度条"><a href="#网页浏览进度条" class="headerlink" title="网页浏览进度条"></a>网页浏览进度条</h1><p>在很多网站都能看到网站的顶部，有一条会随着页面滚动条的滑动，边长变短的一栏区域，这个可以有效的让用户看到，自己已经浏览了这个文章内容的多少。虽然网站右边都有一个滚动条了，干嘛还要这个东西呢，大概就是为了好看吧！今天来实现这个小demo！</p><a id="more"></a><h2 id="用到的知识"><a href="#用到的知识" class="headerlink" title="用到的知识"></a>用到的知识</h2><p>css</p><blockquote><p><a href="https://www.runoob.com/cssref/pr-class-position.html">position:fixed</a></p></blockquote><ul><li>固定div在某个位置</li></ul><p>js</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop">document.documentElement.scrollTop</a></p></blockquote><ul><li>获取滚动条滚动过的height(width)</li></ul><blockquote><p><a href="https://www.runoob.com/js/js-window.html">document.body.clientHeight</a></p></blockquote><ul><li>获取当前文档的height(width)</li></ul><blockquote><p><a href="https://www.runoob.com/js/js-window.html">document.documentElement.clientHeight</a></p></blockquote><ul><li>获取当前可视窗口的height(width)</li></ul><blockquote><p><a href="https://www.runoob.com/jsref/event-onscroll.html">scroll</a></p></blockquote><ul><li>当页面滚动条发生移动时，触发</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><p>问题</p></blockquote><ul><li>固定我们的进度条在页面的顶部</li><li>如何让进度条在每次滚动条滚动时，发生变化</li><li>变化时，变化多少</li></ul><blockquote><p>解决</p></blockquote><ul><li>通过设置position:fixed;top:0;固定位置</li><li>通过给window绑定scoll事件来实时改变进度条长度</li><li>变化多少：设置进度条初始长度为100vw，这样在什么显示器，宽度都会占满显示器，其次在获取当前可视窗口的height和当前网页的总height；之后通过 (文档总长-屏幕可视窗口height)/当前屏width；计算出进度条和文档长的比例关系。来控制每次进度条应该变化多少。</li></ul><p><img src="/img/19-11-19.jpg" alt="实例"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">overflow-x</span>: hidden;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.con</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>    <span class="hljs-comment">/* 让页面出现滚动条 */</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">1000vh</span>;<br>    <span class="hljs-attribute">background-color</span>: lightblue;<br>&#125;<br><br><span class="hljs-selector-class">.top</span> &#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">background-color</span>: lightcoral;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 进度条 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 网站内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;con&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;con&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>JS</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> slip = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#top&#x27;</span>);<br><span class="hljs-keyword">let</span> con = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#con&#x27;</span>);<br><span class="hljs-keyword">let</span> viewHeight = <span class="hljs-built_in">document</span>.documentElement.clientHeight;<br><span class="hljs-comment">// 获取当前屏宽</span><br><span class="hljs-keyword">let</span> slipWidth = slip.clientWidth;<br><span class="hljs-comment">// 获取文档总长</span><br><span class="hljs-keyword">let</span> documentHeight = <span class="hljs-built_in">document</span>.body.clientHeight;<br><span class="hljs-comment">// (文档总长-屏幕可视窗口height)/当前屏width</span><br><span class="hljs-keyword">let</span> prop = slipWidth / (documentHeight - viewHeight);<br><span class="hljs-comment">// 初始化 让top宽度变为0</span><br>slip.style.width = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 设置宽度</span><br><span class="hljs-keyword">let</span> setWith = <span class="hljs-function">(<span class="hljs-params">dom, h</span>) =&gt;</span> &#123;<br>    dom.style.width = <span class="hljs-string">`<span class="hljs-subst">$&#123;h&#125;</span>px`</span>;<br>    dom.style.transition = <span class="hljs-string">&quot;width 0.5s&quot;</span>;<br>&#125;;<br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 实时获取滑动的高度</span><br>    <span class="hljs-keyword">let</span> scroHeight = <span class="hljs-built_in">document</span>.documentElement.scrollTop;<br>    setWith(slip, scroHeight * prop);<br>&#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>CSS&amp;HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浮动功能栏</title>
    <link href="/2019/11/18/css/%E6%B5%AE%E5%8A%A8%E5%8A%9F%E8%83%BD%E6%A0%8F/"/>
    <url>/2019/11/18/css/%E6%B5%AE%E5%8A%A8%E5%8A%9F%E8%83%BD%E6%A0%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="关于命名"><a href="#关于命名" class="headerlink" title="关于命名"></a>关于命名</h1><p>我也不知道这个具体的名字叫什么，就按照它的功能起了这么个简单的名字，防止说不清楚，大概解释一下是什么东西。就是在很多网页，我们往下滑时，会在页面的固定位置出现一个(一栏、一片等！)按钮，里面有帮助回到网页顶部的，还有联系网站客服等等的操作。</p><p>像这样<br><img src="/img/juejin.png" alt="掘金"></p><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote><p><strong>问题</strong></p></blockquote><ul><li>首先就是根据喜好做一排这样的区域(自行发挥)</li><li>其次就是确定它要出现的位置(<font color='red'> <em>重点</em></font> )即可。</li><li>还有几个小细节，就是当回到页面顶部时，这一部分区域会隐藏，当再次滑动到页面非顶部的位置是，又会再一次出现。</li></ul><blockquote><p><strong>解决</strong></p></blockquote><ul><li>固定位置：通过position的fixed固定</li><li>通过opacity控制显示显示/隐藏</li><li>判断何时显示/隐藏:通过获取滚动条滚动的height判断</li></ul><h2 id="用到的知识"><a href="#用到的知识" class="headerlink" title="用到的知识"></a>用到的知识</h2><p>css</p><blockquote><p><a href="https://www.runoob.com/cssref/pr-class-position.html">position</a></p></blockquote><p>js</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop">scrollTop</a></p></blockquote><ul><li>获取滚动条滚动过的height</li></ul><blockquote><p><a href="https://www.runoob.com/jsref/met-win-scrollto.html">scrollTo</a></p></blockquote><ul><li>scrollTo() 方法可把内容滚动到指定的坐标。</li></ul><blockquote><p><a href="https://www.runoob.com/jsref/event-onwheel.html">onwheel</a></p></blockquote><ul><li>鼠标滑轮滚动事件</li><li>onmousewheel注意，有些文章是写的这个事件，该事件已经废弃(但是有的环境还是可以用)，换成了onwheel</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">...<br><span class="hljs-comment">/* 页面主要内容 */</span><br><span class="hljs-selector-class">.con</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>    <span class="hljs-comment">/* 让页面出现滚动条 */</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">1100vh</span>;<br>    <span class="hljs-attribute">background-color</span>: lightcoral;<br>&#125;<br><span class="hljs-comment">/* 浮动功能栏样式  */</span><br><span class="hljs-selector-class">.float</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">70vh</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">5vw</span>;<br>    <span class="hljs-comment">/* 默认不显示 */</span><br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.5s</span>;<br>&#125;<br><span class="hljs-comment">/* 其他样式 */</span><br><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">list-style</span>: none;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffff</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;con&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;con&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;float&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;float&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;backtop&quot;</span>&gt;</span>BACK<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>JS</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> con = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#con&#x27;</span>);<br><span class="hljs-keyword">let</span> float = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#float&#x27;</span>);<br><span class="hljs-keyword">let</span> backtop = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#backtop&#x27;</span>);<br><span class="hljs-comment">// des:设置浮动功能栏的显示/隐藏</span><br><span class="hljs-keyword">let</span> set = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">op, zi</span>) </span>&#123;<br>    float.style.opacity = op;<br>    float.style.zIndex = zi;<br>&#125;<br><span class="hljs-comment">// 点击back返回顶部</span><br>backtop.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 1.document.documentElement.scrollTop = 0;</span><br>    <span class="hljs-comment">// 2.scrollTo返回</span><br>    scrollTo(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 返回后隐藏</span><br>    set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;);<br><span class="hljs-comment">// 这里更好的效果是换成window的滚动条事件,这样无论是鼠标滑轮还是，键盘翻页键，还是点击滚动条都可以触发</span><br><span class="hljs-comment">// window.addEventListener(&quot;scroll&quot;,***)</span><br>con.addEventListener(<span class="hljs-string">&#x27;wheel&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 获取可视区域宽高</span><br>    <span class="hljs-keyword">let</span> viewHeight = <span class="hljs-built_in">document</span>.documentElement.clientHeight;<br>    <span class="hljs-comment">// 获取已经滚动条滚动了的高度</span><br>    <span class="hljs-keyword">let</span> scrowHeight = <span class="hljs-built_in">document</span>.documentElement.scrollTop;<br>    <span class="hljs-comment">// 获取文档高</span><br>    <span class="hljs-keyword">let</span> documentHeight = <span class="hljs-built_in">document</span>.body.clientHeight;<br>    <span class="hljs-keyword">if</span> (scrowHeight === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 隐藏按钮</span><br>        set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 显示按钮</span><br>        set(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>);<br>    &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>CSS&amp;HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态设置背景图容器大小</title>
    <link href="/2019/11/18/css/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%B9%E5%99%A8%E5%A4%A7%E5%B0%8F/"/>
    <url>/2019/11/18/css/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%B9%E5%99%A8%E5%A4%A7%E5%B0%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近在做一个官网的效果的时候，出现了背景图过大，导致不同显示器显示的图片大小不一样，和影响下面内容的布局问题。所以记录一下这个坑。</p><a id="more"></a><h2 id="用到的知识"><a href="#用到的知识" class="headerlink" title="用到的知识"></a>用到的知识</h2><p>css3</p><blockquote><p><a href="https://www.runoob.com/cssref/pr-background-position.html">background-position</a>:指定背景图像位置<br><a href="https://www.runoob.com/cssref/css3-pr-background-size.html">background-size</a>:指定背景图像的大小</p></blockquote><p>js</p><blockquote><p><a href="https://www.runoob.com/jsref/event-onresize.html">onresize</a>:当窗口大小发生变化时触发某一段代码</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><p><strong><em>问题</em></strong></p></blockquote><ul><li>遇到的问题是，1.图片不能根据不同的显示器(不同的窗口大小)，调整最佳的大小而显示。2.背景图的容器不能根据不同的显示器(不同的窗口大小)，调整自身大小，导致影响下面内容的布局。</li></ul><blockquote><p><strong><em>解决</em></strong></p></blockquote><ul><li>第一个问题可以通过上述提到的两个css的属性来做，第二个问题通过获取背景容器的宽度，再根据图片的比例，来计算适合的高度即可。</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 设置背景容器样式 */</span><br><span class="hljs-selector-class">.banner</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;<br>    <span class="hljs-comment">/* 最大宽度为图片本身宽度 */</span><br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">520px</span>;<br>    <span class="hljs-comment">/* 最大高度为图片最大高度 */</span><br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">1920px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./banner1.png&#x27;</span>) no-repeat;<br>    <span class="hljs-comment">/* 设置图片位置 为容器 居中 顶部 */</span><br>    <span class="hljs-attribute">background-position</span>: center top;<br>    <span class="hljs-comment">/* 设置图片一直以合适的比例在容器中显示 */</span><br>    <span class="hljs-attribute">background-size</span>: contain;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;banner&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;banner&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>JS</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> changeH = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> banner = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#banner&#x27;</span>);<br>    <span class="hljs-comment">// 获取banner的宽度</span><br>    <span class="hljs-keyword">let</span> width = banner.clientWidth;<br>    <span class="hljs-comment">// 计算图片宽高比例</span><br>    <span class="hljs-keyword">let</span> prop = <span class="hljs-built_in">parseInt</span>(<span class="hljs-number">1920</span> / <span class="hljs-number">520</span>);<br>    <span class="hljs-comment">// 获取当前宽度下合适的高度</span><br>    <span class="hljs-keyword">let</span> height = <span class="hljs-built_in">parseInt</span>(width / prop);<br>    <span class="hljs-comment">// 设置容器高度</span><br>    banner.style.height = height + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;;<br><span class="hljs-comment">// 初始化容器高度</span><br><span class="hljs-keyword">let</span> init = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    changeH();<br>&#125;;<br>init();<br><span class="hljs-comment">// 监听窗口大小变化 一旦变化就触发内部的函数</span><br><span class="hljs-built_in">window</span>.onresize = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    changeH();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="在Vue中使用"><a href="#在Vue中使用" class="headerlink" title="在Vue中使用"></a>在Vue中使用</h2><p>可以在组件的mounted中使用onresize事件，在通过this.$refs来获取到你的容器，然后操作就是一样了</p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>CSS&amp;HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高效利用GITHUB</title>
    <link href="/2019/11/15/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E9%AB%98%E6%95%88%E5%88%A9%E7%94%A8GITHUB/"/>
    <url>/2019/11/15/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E9%AB%98%E6%95%88%E5%88%A9%E7%94%A8GITHUB/</url>
    
    <content type="html"><![CDATA[<h1 id="高效的利用GITHUB"><a href="#高效的利用GITHUB" class="headerlink" title="高效的利用GITHUB"></a>高效的利用GITHUB</h1><p>整理自己平时使用github来学习的一些心得和小技巧</p><a id="more"></a><h2 id="通过github记录自己的学习过程"><a href="#通过github记录自己的学习过程" class="headerlink" title="通过github记录自己的学习过程"></a>通过github记录自己的学习过程</h2><blockquote><p>使用github来管理自己平时练习技术的项目</p></blockquote><ul><li>将自己的项目通过git存储到github，不仅可以备份自己的项目，还可以更好的管理项目的开发进度，以及记录自己每天学习的进度。<br><img src="/img/github1.png" alt="统计"></li></ul><blockquote><p>通过分支系统来保证不影响项目其他功能的基础上进行新功能的开发</p></blockquote><ul><li>通过一个分支(主分支)来保存项目最稳定的版本，然后另外创建一个分支，来进行新功能的开发，开发完成并测试没有问题后，在合并到主分支即可。<br><img src="/img/github2.png" alt="分支"></li></ul><blockquote><p>利用README来总结自己的项目</p></blockquote><ul><li>结合github的项目目录展示和通过reademe文件来整理自己的项目总结，比如目录结构说明，技术栈使用，项目阐述，和自己开发过程中遇见的一些坑，还有对这些坑的解决过程的描述等等。<br><img src="/img/github4.png" alt="目录"><br><img src="/img/github3.png" alt="总结"></li></ul><h2 id="通过github部署静态项目"><a href="#通过github部署静态项目" class="headerlink" title="通过github部署静态项目"></a>通过github部署静态项目</h2><p>github提供了GithubPage，来托管静态项目。可以利用这个功能来部署自己博客，或者一些静态练习的demo。</p><blockquote><p>简单描述如何部署</p></blockquote><ul><li>把你的项目提交到一个github的仓库</li><li>在该仓库下创建一个叫gh-pages的分支</li><li>把你想要托管的首页起名为inex.html，然后整个项目相关的资源都提交到该分支。<br><img src="/img/github6.png" alt="目录"></li><li>进入该项目的仓库页面，点开设置，找到如下图的区域，设置source下面的下拉框，并选中gh-pages branch即可<br><img src="/img/github5.png" alt="设置"></li></ul><h3 id="分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。"><a href="#分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。" class="headerlink" title="分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。"></a>分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。</h3><h2 id="利用github来寻找开源项目练手"><a href="#利用github来寻找开源项目练手" class="headerlink" title="利用github来寻找开源项目练手"></a>利用github来寻找开源项目练手</h2><p>github是一个全球范围内的程序开源社区，各种语言各种类型的项目，应有尽有，所以我们想要找一些项目练手是，可以通过它来寻找，接下来分享几个在寻找项目时的小技巧。</p><h3 id="高级搜索-通过在搜索时，加一些搜索条件来进行筛选-以下条件可以自由组合"><a href="#高级搜索-通过在搜索时，加一些搜索条件来进行筛选-以下条件可以自由组合" class="headerlink" title="高级搜索:通过在搜索时，加一些搜索条件来进行筛选(以下条件可以自由组合)"></a>高级搜索:通过在搜索时，加一些搜索条件来进行筛选(以下条件可以自由组合)</h3><blockquote><p>in:name</p></blockquote><ul><li>在仓库名中搜索</li></ul><blockquote><p>in:description</p></blockquote><ul><li>在项目描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)</li></ul><blockquote><p>in:readme</p></blockquote><ul><li>在readme描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)<h3 id="条件设置"><a href="#条件设置" class="headerlink" title="条件设置"></a>条件设置</h3><blockquote><p><strong><em>stars</em></strong></p></blockquote></li><li>stars:&gt;一个数字/即搜索项目star数大于这个数的项目</li><li>举例：搜素一个star超过1000的名字中带有koa的项目<br><img src="/img/github7.png" alt="例子1"></li></ul><blockquote><p><strong><em>language</em></strong></p></blockquote><ul><li>language:目标语言/设置你要搜索的项目语言</li><li>举例：搜素一个微服务，语言是java的项目，star超过1000的项目<br><img src="/img/github8.png" alt="例子1"></li></ul><blockquote><p><strong><em>fork</em></strong></p></blockquote><ul><li>forks:&gt;一个数字/即搜索项目fork数大于这个数的项目</li><li>和star一样</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GIHUTB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB入门学习笔记</title>
    <link href="/2019/11/10/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/MongoDB%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/11/10/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/MongoDB%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="使用前准备"><a href="#使用前准备" class="headerlink" title="使用前准备"></a>使用前准备</h1><p>1.安装mongodb <a href="http://downloads.mongodb.com/">下载</a><br>2.选择服务端然后对应系统版本，推荐下载msi格式(这个可以一步一步安装，比较方便)<br>3.下载后在安装目录里(与bing目录同级下)创建 data文件夹(存放数据库集合的)<br>4.通过cmd启动mongdb<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.进入bin目录</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">2. mongod --dbpath (这里的路径是第三部创建的data文件夹的而路径) <br></code></pre></div></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.看到控制台打印出 waiting forconnections on port 27017(默认端口) 即启动成功</p><p>5.将mongodb添加到本地服务中<br>&nbsp;&nbsp;&nbsp;1.在第三部的data文件中创建log文件夹<br>&nbsp;&nbsp;&nbsp;2.在log文件夹中创建mongodb.log文件<br>&nbsp;&nbsp;&nbsp;3.输入命令</p><figure class="highlight plain"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">mongod.exe --logpath (这里写你log文件的路径) --logappend --dbpath (这里写你data文件夹的路径) --directoryperdb --serviceName MongoDB --install<br></code></pre></div></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;4.通过管理员启动cmd，输入</p><figure class="highlight plain"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs linux">&lt;!-- 启动mongodb服务 --&gt;<br>net start MongoDB<br>&lt;!-- 关闭mngodb服务 --&gt;<br>net stop MongoDB<br>&lt;!-- 卸载mongodb服务 --&gt;<br>mongod.exe --remove --serviceName &quot;MongoDB&quot;<br></code></pre></div></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;5.遇到无法启动的问题 删除data目录下的 mongod.lock和storage.bson文件重新启动即可</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>集合:类似MySQL的表</p><p>文档:类似MySQL的元祖</p><!-- more --><p>mongo中的数据类型:</p><blockquote><p>Object ID： ⽂档ID</p></blockquote><ul><li>可以手动设置，未设置系统默认分配一个objectID(是⼀个12字节的⼗六进制数)<blockquote><p>String： 字符串， 最常⽤， 必须是有效的UTF-8<br>Boolean： 存储⼀个布尔值， true或false<br>Integer： 整数可以是32位或64位， 这取决于服务器<br>Double： 存储浮点值<br>Arrays： 数组或列表， 多个值存储到⼀个键<br>Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档<br>Null： 存储Null值<br>Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数<br>Date： 存储当前⽇期或时间的UNIX时间格式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 创建日期</span><br>new Date(&#x27;2017-12-20&#x27;)<br></code></pre></div></td></tr></table></figure><h1 id="MongoDB基本命令"><a href="#MongoDB基本命令" class="headerlink" title="MongoDB基本命令"></a>MongoDB基本命令</h1><blockquote><p>关于数据库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动MongoDB</span><br>net stop mongodb<br><span class="hljs-meta">#</span><span class="bash"> 进入安装目录的bin目录</span><br><span class="hljs-meta">#</span><span class="bash"> 终端启动(客户端)</span><br>mongo<br><span class="hljs-meta">#</span><span class="bash"> 服务端启动</span><br>mongod<br><span class="hljs-meta">#</span><span class="bash"> 查看当前数据</span><br>db<br><span class="hljs-meta">#</span><span class="bash"> 查看所有数据库</span><br>show dbs<br><span class="hljs-meta">#</span><span class="bash"> 切换数据库---不存在时会自动创建---如果创建了没操作，在切换时，该数据库不保存</span><br>use &lt;dbname&gt;<br><span class="hljs-meta">#</span><span class="bash"> 删除数据库</span><br>db.dropDatabase()<br><span class="hljs-meta">#</span><span class="bash"> 显示当前数据库状态信息</span><br>db.stats()<br><span class="hljs-meta">#</span><span class="bash"> 查看当前数据库版本</span><br>db.version()<br><span class="hljs-meta">#</span><span class="bash"> 查看当前连接数据库地址</span><br>db.getMongo()<br></code></pre></div></td></tr></table></figure><blockquote><p>关于集合</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看所有集合</span><br>show collections<br><span class="hljs-meta">#</span><span class="bash"> 删除集合</span><br>db.&lt;集合名&gt;.drop()<br></code></pre></div></td></tr></table></figure><blockquote><p>关于文档</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 插入文档  数据为对象格式  当集合不存在时直接插入会自动创建集合</span><br>db.&lt;集合名&gt;.insertOne(&#123;name:&#x27;shauxin&#x27;,age:21&#125;);<br><span class="hljs-meta">#</span><span class="bash"> insertOne插入一个  insertMany插入多个</span><br>db.&lt;集合名&gt;.insertOne([&#123;name:&#x27;one&#x27;&#125;,&#123;name:&#x27;two&#x27;&#125;]);<br><span class="hljs-meta">#</span><span class="bash"> 查询所有文档</span><br>db.&lt;集合名&gt;.find()<br><span class="hljs-meta">#</span><span class="bash"> 更新文档</span><br><span class="hljs-meta">#</span><span class="bash">更新一条update或者updateOne,没有更新的字段会丢弃. </span><br>db.&lt;集合名&gt;.update(&#123;name:&#x27;hr&#x27;&#125;,&#123;name:&#x27;mnc&#x27;&#125;)<br><span class="hljs-meta">#</span><span class="bash">更新一条</span><br>db.&lt;集合名&gt;.update(&#123;name:&#x27;hr&#x27;&#125;,&#123;$set:&#123;name:&#x27;hys&#x27;&#125;&#125;)<br><span class="hljs-meta">#</span><span class="bash">更新全部</span><br>db.&lt;集合名&gt;.update(&#123;&#125;,&#123;$set:&#123;gender:0&#125;&#125;,&#123;multi:true&#125;) <br><span class="hljs-meta">#</span><span class="bash"> 更新多个 updateMany</span><br>db.&lt;集合名&gt;.updateOne(&#123;name:&#x27;wade&#x27;&#125;,&#123;$set:&#123;age:21&#125;&#125;)   <br><span class="hljs-meta">#</span><span class="bash"> 删除</span><br><span class="hljs-meta">#</span><span class="bash"> 删除第一个符合条件的</span><br>db.&lt;集合名&gt;.deleteOne(&#123;age:21&#125;)<br><span class="hljs-meta">#</span><span class="bash"> 删除所有符合条件的</span><br>db.&lt;集合名&gt;.deleteMany(&#123;age:21&#125;)<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FLIP做卡片弹窗动画</title>
    <link href="/2019/11/08/css/FLIP%E5%81%9A%E5%8D%A1%E7%89%87%E5%BC%B9%E7%AA%97%E5%8A%A8%E7%94%BB/"/>
    <url>/2019/11/08/css/FLIP%E5%81%9A%E5%8D%A1%E7%89%87%E5%BC%B9%E7%AA%97%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="惯例BB"><a href="#惯例BB" class="headerlink" title="惯例BB"></a>惯例BB</h1><p>最近在做一个卡片弹窗的动画，怎么做都达不到想要的效果，查了查资料，发现通过一种叫FLIP的技术(也不算新技术，一种思路？)，可以比较好的实现这个效果，而且这个过程中，也了解到了一些关于动画性能相关的知识，所以记录一下。</p><a id="more"></a><p><a href="https://user-gold-cdn.xitu.io/2019/4/27/16a5dfd7c4d0f639?imageslim">类似效果</a></p><h1 id="关于FLIP"><a href="#关于FLIP" class="headerlink" title="关于FLIP"></a>关于FLIP</h1><p>FLIP是First、Last、Invert和Play四个单词首字母的缩写。</p><blockquote><p>简单解释下这四个单词在实现思路中对应的意思</p></blockquote><ul><li>first：指在过度效果发生前，目标对象的位置、大小</li><li>last：指过度效果发生后，目标对象的位置、大小</li><li>invert：目标对象过度前后的位置、大小差</li><li>play：通过invert得到的差值，来作为transform的参数进行动画</li></ul><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>1.动画前后的效果，用两个div写好</p><p>2.获取这两个div的大小比例和位置差</p><p>3.通过translate将动画后的div变成动画前的大小和移动到对应的位置</p><p>4.通过取消3中的translate和重新设置，加上过度就可以实现动画效果啦</p><h1 id="手撕代码前"><a href="#手撕代码前" class="headerlink" title="手撕代码前"></a>手撕代码前</h1><p>代码使用到的API</p><blockquote><p>transform:translate/scale</p></blockquote><ul><li>偏移/缩放</li></ul><blockquote><p>getBoundingClientRect</p></blockquote><ul><li>获取dom元素的位置和大小</li></ul><h1 id="关于性能"><a href="#关于性能" class="headerlink" title="关于性能"></a>关于性能</h1><p><img src="/img/flip.png" alt="浏览器渲染过程"><br>上图中的layout和paint是非常影响性能的，比如position和display控制显示隐藏，都会触发这两步，所以在动画过程实现中，位置用transform的translate、显示隐藏用visibility/opacity 来做。因为他们只会触发最后一步。</p><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>body &#123;<br>    margin: 0;<br>    position: relative;<br>&#125;<br><br>div &#123;<br>    text-align: center;<br>    background-color: rgb(139, 206, 248);<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.before</span> &#123;</span><br>    width: 300px;<br>    height: 300px;<br>    line-height: 300px;<br>    margin: 0 auto;<br>    transition: all 1s;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.after</span> &#123;</span><br>    width: 100vw;<br>    height: 100vh;<br>    line-height: 100vh;<br>    position: absolute;<br>    top: 0;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;before&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;after&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> before = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#before&#x27;</span>);</span><br><span class="javascript"><span class="hljs-keyword">let</span> after = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#after&#x27;</span>);</span><br><span class="javascript"><span class="hljs-comment">// 获取过度前 位置大小</span></span><br><span class="javascript"><span class="hljs-keyword">let</span> first = before.getBoundingClientRect();</span><br><span class="javascript"><span class="hljs-comment">// 获取过度后 位置大小</span></span><br><span class="javascript"><span class="hljs-keyword">let</span> last = after.getBoundingClientRect();</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(first);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(last);</span><br><br><span class="javascript"><span class="hljs-comment">// 记录前后大小位置差</span></span><br><span class="javascript"><span class="hljs-keyword">let</span> invert = &#123;</span><br>    left: first.left - last.left,<br>    top: first.top - last.top,<br>    width: first.width / last.width,<br>    height: first.height / last.height,<br>&#125;;<br><span class="javascript"><span class="hljs-comment">// 让after通过transform变成before的大小，以及移动到before的位置</span></span><br><span class="javascript">after.style.visibility=<span class="hljs-string">&#x27;hidden&#x27;</span>;</span><br><span class="javascript">after.style.transformOrigin = <span class="hljs-string">&#x27;top left&#x27;</span>;</span><br><span class="javascript">after.style.transform = <span class="hljs-string">`translate(<span class="hljs-subst">$&#123;invert.left&#125;</span>px,<span class="hljs-subst">$&#123;invert.top&#125;</span>px) scale(<span class="hljs-subst">$&#123;invert.width&#125;</span>,<span class="hljs-subst">$&#123;invert.height&#125;</span>)`</span>;</span><br><span class="javascript"><span class="hljs-comment">// 放大</span></span><br><span class="javascript">before.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    after.style.transform = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">    after.style.transition = <span class="hljs-string">&#x27; all 1s&#x27;</span>;</span><br><span class="javascript">    after.style.visibility=<span class="hljs-string">&#x27;visible&#x27;</span>;</span><br><br>&#125;);<br><span class="javascript"><span class="hljs-comment">// 缩小</span></span><br><span class="javascript">after.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    after.style.visibility=<span class="hljs-string">&#x27;hidden&#x27;</span>;</span><br><span class="javascript">    after.style.transition = <span class="hljs-string">&#x27; all 1s&#x27;</span>;</span><br>    after.style.transform =<br><span class="javascript">        <span class="hljs-string">`translate(<span class="hljs-subst">$&#123;invert.left&#125;</span>px,<span class="hljs-subst">$&#123;invert.top&#125;</span>px) scale(<span class="hljs-subst">$&#123;invert.width&#125;</span>,<span class="hljs-subst">$&#123;invert.height&#125;</span>)`</span>;</span><br>&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://segmentfault.com/a/1190000019713766#articleHeader5">浏览器渲染原理</a><br><a href="https://juejin.im/post/5da689b76fb9a04e143dbebc">前端动画之FLIP技术</a></p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>CSS&amp;HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于meta</title>
    <link href="/2019/11/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8Emeta/"/>
    <url>/2019/11/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8Emeta/</url>
    
    <content type="html"><![CDATA[<h1 id="meta是什么"><a href="#meta是什么" class="headerlink" title="meta是什么"></a>meta是什么</h1><p>meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p><a id="more"></a><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>提供文档的描述信息</p><p>永远位于head内部</p><p>永远以键值对形式存在</p><h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><blockquote><p>描述文档信息,以下列举常见参数</p></blockquote><meta name="参数" content="描述内容"><figure class="highlight xml"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">- 1.keywords---关键字<br>```html<br><span class="hljs-comment">&lt;!-- 用于告诉搜索引擎，你网页的关键字 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;博客，前端&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 2.description---描述<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 用于告诉搜索引擎，你网站的主要内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;学习笔记&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 3.viewport---移动窗口<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这个属性常用于设计移动端网页 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 4.robots---定义爬虫搜索方式<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引 --&gt;</span><br><span class="hljs-comment">&lt;!-- content的参数有all,none,index,noindex,follow,nofollow。默认是all。 --&gt;</span><br><span class="hljs-comment">&lt;!-- 1.none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</span><br><span class="hljs-comment">2.noindex : 搜索引擎不索引此网页。</span><br><span class="hljs-comment">3.nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</span><br><span class="hljs-comment">4.all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</span><br><span class="hljs-comment">5.index : 搜索引擎索引此网页。</span><br><span class="hljs-comment">6.follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 5.author---作者<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;刷新&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 6.generator---制作软件<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 用于标明网页是什么软件做的 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;generator&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;vscode&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 7.copyright---版权<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;copyright&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;***所有&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 8.revisit-after---定义爬虫重访时间<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;revisit-after&quot;</span>  <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;7 days&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 9.renderer---双核浏览器渲染方式(360)<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;webkit&quot;</span>&gt;</span> //默认webkit内核<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie-comp&quot;</span>&gt;</span> //默认IE兼容模式<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie-stand&quot;</span>&gt;</span> //默认IE标准模式<br></code></pre></div></td></tr></table></figure>## http-equiv>http请求头作用，但在h5标准中不包括cache-control、Pragma、Expires，即使设置了也不会生效<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;参数&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;具体的描述&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 1.content-Type---网页字符集<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 用于设定网页字符集，便于浏览器解析与渲染页面 --&gt;</span><br><span class="hljs-comment">&lt;!-- 旧 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- h5 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 2.X-UA-Compatible---浏览器采取何种版本渲染当前页面<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 默认最新 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面<br></code></pre></div></td></tr></table></figure>- 3.cache-control---请求遵循的缓存机制<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;cache-control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>- 4.expires---网页到期时间<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 用于设定网页的到期时间，过期后网页必须到服务器上重新传输。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;expires&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Sunday 26 October 2016 01:00 GMT&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>- 5.refresh---自动刷新页面<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 网页将在设定的时间内，自动刷新并调向设定的网址。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;2；URL=http://www.lxxyx.win/&quot;</span>&gt;</span> //意思是2秒后跳转向我的博客<br></code></pre></div></td></tr></table></figure>- 6.Set-Cookie---设置cookie<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Set-Cookie&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;name, date&quot;</span>&gt;</span> //格式<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Set-Cookie&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;User=Lxxyx; path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT&quot;</span>&gt;</span> //具体范例<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于跨域</title>
    <link href="/2019/11/01/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F/"/>
    <url>/2019/11/01/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>跨域是浏览器为了保证服务数据的安全性，而存在的一种限制请求的一种机制，只存在于浏览器。</p><p>主要工作原理就是根据有没有遵循同源策略(当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域)，来判断一个请求是否跨域，然后决定是否允许这个请求。</p><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><blockquote><p>概念</p></blockquote><ul><li>1.同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</li><li>2.同源指，发请求和接受请求的两端处在：同一协议，同一域名，同一端口下。<a id="more"></a><img src="/img/tongyuan.png" alt="一个域名的组成"><blockquote><p>作用</p></blockquote></li><li>同源策略是浏览器的行为，是为了保护本地数据不被JavaScript代码获取回来的数据污染，因此拦截的是客户端发出的请求回来的数据接收，即请求发送了，服务器响应了，但是无法被浏览器接收。</li></ul><blockquote><p>同源策略会限制的内容</p></blockquote><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 请求发送后，结果被浏览器拦截了</li></ul><blockquote><p>同源策略下有几个允许跨域加载资源的方式:</p></blockquote><ul><li>&lt;img src=’***’&gt;</li><li>&lt;link href=’***’&gt;</li><li>&lt;script src=’***’&gt;<h1 id="跨域限制"><a href="#跨域限制" class="headerlink" title="跨域限制"></a>跨域限制</h1>跨域不仅对请求有限制，对请求的方法和发送的内容格式，也会有限制；除过默认允许的一些外，其他的非默认请求方法和内容格式都需要在服务端进行设置允许这些对应的可以访问。</li></ul><p>因为非默认的请求方法和内容类型会在正式发送该请求前，发送一个预请求，来判断服务端是否允许该请求的访问，之后再发送该请求，如果服务端允许就正常获取响应内容，不允许就会报错，如下图。<br><img src="/img/cros2.png" alt="不允许put访问"></p><p>服务端允许后允许访问，可以看到会有2个请求，第一就是预请求，第二个是正式发送的请求，预请求的方法是会显示OPTIONS。<br><img src="/img/cros3.png" alt="允许访问"><br><img src="/img/cros4.png" alt="允许访问"></p><p>设置代码(以node为例)</p><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa();<br><br>app.use(<span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>    <span class="hljs-built_in">console</span>.log(ctx.request.url);<br>    ctx.response.status=<span class="hljs-number">200</span>;<br>    <span class="hljs-comment">// 设置允许跨域</span><br>    ctx.response.set(&#123;<br>        <span class="hljs-comment">// 允许跨域访问的域名</span><br>        <span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>        <span class="hljs-comment">// 当请求方法是跨域默认请求之外的请求时，服务器需要设置对应的允许的请求方法</span><br>        <span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>:<span class="hljs-string">&quot;PUT&quot;</span>,<br>        <span class="hljs-comment">// 允许该请求在第一次请求成功后的1000秒内，不需要再发送预请求</span><br>        <span class="hljs-string">&quot;Access-Control-Max-Age&quot;</span>:<span class="hljs-string">&quot;1000&quot;</span><br>    &#125;)<br>    ctx.response.body = <span class="hljs-string">&#x27;hi&#x27;</span>;<br>&#125;);<br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>列举一下跨域默认不需要预请求就可以发送的方法(Mthods)和内容类型(Content-Type)</p><blockquote><p>跨域默认允许的请求方法(Method)</p></blockquote><ul><li>GET</li><li>POST</li><li>HEAD</li></ul><blockquote><p>默认允许的发送请求内容类型(Content-Type)</p></blockquote><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><blockquote><p>默认允许的请求头</p></blockquote><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type</li></ul><blockquote><p><a href="https://fetch.spec.whatwg.org/#http-extensions">更多</a></p></blockquote><h2 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h2><p><img src="/img/kuayu.png" alt="跨域"></p><h3 id="浪里行舟大佬的一些说明"><a href="#浪里行舟大佬的一些说明" class="headerlink" title="浪里行舟大佬的一些说明"></a><a href="https://github.com/ljianshu/Blog">浪里行舟</a>大佬的一些说明</h3><p>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</p><p>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。</p><p>这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？</p><p>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>1.利用&lt;script src=’***’&gt;可以跨域请求资源的原理<br>2.这种方式只能通过GET请求。<br>3.但是适配较广</p><blockquote><p>代码</p></blockquote><ul><li>前端<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;btn&#x27;</span>&gt;</span>请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> btn=<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btn&#x27;</span>);</span><br><span class="javascript">        btn.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">// 创建一个script标签块</span></span><br><span class="javascript">                <span class="hljs-keyword">let</span> frame = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);</span><br><span class="javascript">                <span class="hljs-comment">// 设置src链接</span></span><br><span class="javascript">                <span class="hljs-comment">// http://localhost:3000/person为请求借口</span></span><br><span class="javascript">                <span class="hljs-comment">// ? 分隔符</span></span><br><span class="javascript">                <span class="hljs-comment">// callback=func传给后端的一个回调函数</span></span><br><span class="javascript">                frame.src=<span class="hljs-string">&#x27;http://localhost:3000/person?callback=func&#x27;</span>;</span><br><span class="javascript">                <span class="hljs-comment">// 添加到body内</span></span><br><span class="javascript">                <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;body&#x27;</span>).append(frame);</span><br>        &#125;;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">res</span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 后端成功收到请求后 会返回并执行 该函数 </span></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(res);<span class="hljs-comment">// 打印收到的数据</span></span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure></li><li>后端(koa)<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">...<br><span class="hljs-keyword">let</span> data=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>);<br>route.get(<span class="hljs-string">&#x27;/person&#x27;</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;<br>    newData = <span class="hljs-built_in">JSON</span>.stringify(data);<br>    <span class="hljs-comment">// 执行前端传递来的函数 并把数据作为参数传递</span><br>    ctx.body = <span class="hljs-string">`func(<span class="hljs-subst">$&#123;newData&#125;</span>)`</span>;<br>&#125;)<br>...<br></code></pre></div></td></tr></table></figure></li><li>以上前端代码可以通过jQuery来写,jQuery有封装好的方法直接使用<h2 id="CROS"><a href="#CROS" class="headerlink" title="CROS"></a>CROS</h2><blockquote><p>什么是CROS</p></blockquote></li><li>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。—来自<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">MDN</a>。</li></ul><blockquote><p>使用：</p></blockquote><ul><li>通过在后端设置相应头信息来允许一些指定的域名可以访问。<blockquote><p>代码</p></blockquote></li><li>前端<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>send<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#btn&#x27;</span>);</span><br><span class="javascript">    btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br>        getData();<br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">let</span> getData = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="javascript">        fetch(<span class="hljs-string">&#x27;http://localhost:3000/person&#x27;</span>, &#123;</span><br><span class="javascript">            method: <span class="hljs-string">&#x27;GET&#x27;</span></span><br>        &#125;)<br>            .then(<br>                (res) =&gt; res.json()<br>            )<br>            .then(<br>                (data) =&gt; &#123;<br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(data);</span><br>                &#125;<br>            )<br>            .catch(<br>                (err) =&gt; &#123;<br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(err);</span><br>                &#125;<br>            )<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>后端(koa)<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa2-cors&#x27;</span>);<br><span class="hljs-comment">// 使用cors中间件</span><br>app.use(cors(&#123;<br>    <span class="hljs-comment">// 允许get方法跨域请求</span><br>    allowMethods: [<span class="hljs-string">&#x27;GET&#x27;</span>],<br>    <span class="hljs-comment">// 在koa中不适用中间件 可以使用上下文对象来自己设置</span><br>    <span class="hljs-comment">// ctx.set(...);</span><br>&#125;));<br><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="Node-nginx做代理"><a href="#Node-nginx做代理" class="headerlink" title="Node/nginx做代理"></a>Node/nginx做代理</h2><p>因为服务器之间不用遵守同源策略,所以可以通过node或者nginx来转发请求，实现跨域</p><blockquote><p>步骤</p></blockquote><ul><li>接受客户端请求 。</li><li>将请求 转发给服务器。</li><li>拿到服务器 响应 数据。</li><li>将 响应 转发给客户端。<br><img src="/img/daili.png" alt="流程"><h2 id="其他方式尝试后更新"><a href="#其他方式尝试后更新" class="headerlink" title="其他方式尝试后更新"></a>其他方式尝试后更新</h2></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuejs基础复习4---生命周期函数</title>
    <link href="/2019/10/31/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-4/"/>
    <url>/2019/10/31/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-4/</url>
    
    <content type="html"><![CDATA[<h1 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h1><p>vue框架内部提供的一系列函数，主要用于vue创建的实例在挂载到页面以及从页面销毁这一过程中，我们要进行一些操作时所使用的函数。</p><a id="more"></a><h1 id="所有生命周期函数"><a href="#所有生命周期函数" class="headerlink" title="所有生命周期函数"></a>所有生命周期函数</h1><p>beforeCreate</p><blockquote><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                name: <span class="hljs-string">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            mthods:&#123;<br>                sayHi()&#123;<br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);</span><br>                &#125;<br>            &#125;,<br>            beforeCreate() &#123;<br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.sayHi);<span class="hljs-comment">// undefined</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<span class="hljs-comment">// undefined</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;beforeCreate&#x27;</span>);</span><br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure><p>created</p><blockquote><p>在实例创建完成后被立即调用。已经可以获取实例的data、methods、watch。但是不能获取实例根节点</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                name: <span class="hljs-string">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                sayHi() &#123;<br><span class="javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hi&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            created() &#123;<br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">// 生命周期函数</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$el);<span class="hljs-comment">// undefind</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.sayHi());<span class="hljs-comment">// hi</span></span><br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure><p>beforeMount</p><blockquote><p>这一步生成虚拟dom，准备将其渲染到页面,但还未渲染</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                name: <span class="hljs-string">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                sayHi() &#123;<br><span class="javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hi&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            beforeMount() &#123;<br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">// 生命周期函数</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$el);</span><br>                /*  <br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">                        </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>                */<br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.sayHi()); <span class="hljs-comment">// hi</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.demo);<span class="hljs-comment">// undefind</span></span><br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>mounted</p><blockquote><p>将虚拟DOM根据el挂载到对应HTML中，将虚拟dom渲染到页面，已经完成</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>dmeo<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                name: <span class="hljs-string">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                sayHi() &#123;<br><span class="javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hi&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            mounted() &#123;<br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name); <span class="hljs-comment">// 生命周期函数</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$el);</span><br>                /*  <br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">                        </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>                */<br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.sayHi()); <span class="hljs-comment">// hi</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.demo);<span class="hljs-comment">// &lt;p&gt;dmeo&lt;/p&gt;</span></span><br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>beforeUpdate</p><blockquote><p>当data中的数据更新后，虚拟DOM更新前</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span><br>            &#123;&#123;name&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;update&#x27;</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                name: <span class="hljs-string">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                update() &#123;<br><span class="javascript">                    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;update&#x27;</span>;</span><br>                &#125;<br>            &#125;,<br>            beforeUpdate() &#123;<br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;p&#x27;</span>).innerText); <span class="hljs-comment">//生命周期函数</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>updated</p><blockquote><p>数据更新完毕，且虚拟dom完成在页面的渲染之后执行</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span><br>            &#123;&#123;name&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;update&#x27;</span>&gt;</span>更新<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                name: <span class="hljs-string">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                update() &#123;<br><span class="javascript">                    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;update&#x27;</span>;</span><br>                &#125;<br>            &#125;,<br>            updated() &#123;<br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;p&#x27;</span>).innerText); <span class="hljs-comment">//update</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>bdeforeDestroy</p><blockquote><p>当调用vm.$destroy()销毁组件时,销毁前使用,这时data、methods、虚拟dom都可以使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span><br>            &#123;&#123;name&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;update&#x27;</span>&gt;</span>卸载<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                name: <span class="hljs-string">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                update() &#123;<br><span class="javascript">                    <span class="hljs-built_in">this</span>.$destroy();</span><br>                &#125;<br>            &#125;,<br>            beforeDestroy() &#123;<br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<span class="hljs-comment">//生命周期函数</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$el);<span class="hljs-comment">//&lt;div id=​&quot;app&quot;&gt;​…​&lt;/div&gt;​</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.update);</span><br>               /* ƒ update() &#123;<br><span class="javascript">                    <span class="hljs-built_in">this</span>.$destroy();</span><br>                &#125;*/<br>            &#125;<br>        &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>destroyed</p><blockquote><p>彻底销毁完毕时使用</p></blockquote><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>上述就是官方规定的生命周期函数，但大体来看生命周期函数的特点就是会在实例的某个阶段自动调用，这样看watch，computed也应该算。</p><h1 id="常见使用场景"><a href="#常见使用场景" class="headerlink" title="常见使用场景"></a>常见使用场景</h1><p>个人使用过的</p><blockquote><p>created</p></blockquote><ul><li>ajax请求</li></ul><blockquote><p>mounted</p></blockquote><ul><li>挂载元素内dom节点的获取</li></ul><blockquote><p>updated</p></blockquote><ul><li>任何数据的更新，如果要做统一的业务逻辑处理</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js实现计算器</title>
    <link href="/2019/10/27/JS/js%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <url>/2019/10/27/JS/js%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="栈计算器"><a href="#栈计算器" class="headerlink" title="栈计算器"></a>栈计算器</h1><p><img src="/img/computer.png" alt="效果图"></p><a id="more"></a><h2 id="说些废话"><a href="#说些废话" class="headerlink" title="说些废话"></a>说些废话</h2><blockquote><p>1.界面不是重点,使用的flex布局,仿的ios的计算器界面<br>2.代码只写了核心的算法实现(理解了你就能写出来了),想要整体的代码,大家参考给出的源码链接</p></blockquote><h2 id="本文源码"><a href="#本文源码" class="headerlink" title="本文源码"></a><a href="https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/%E8%AE%A1%E7%AE%97%E5%99%A8">本文源码</a></h2><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><p>1.多项运算时,运算符优先级的问题<br>2.获取要运算的数字时处理,是个位数还是多位数的问题</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>优先级问题</p></blockquote><ul><li>1.用2个栈分别存储数字和运算符</li><li>2.在存储运算符时判断和前一个运算符的优先级来决定是否要进行运算或者直接存储</li><li>说明:这里判断优先级,是为了解决一串表达式中间位置出现乘除,如果出现,将这两个数运算后的结果入栈</li><li>3.因为JS的数组结合push/pop后和栈的效果一致,所以代码使用数组来做</li></ul><blockquote><p>处理个位数还是多位数问题</p></blockquote><ul><li>1.每次获取到的数字暂存在一个变量中,在点击运算符时,在将该变量中的数入栈,随后清空改变量</li><li>2.当表达式只有两项时,例如 1+2,上述的操作只存储了一个数,所以在点击=号后还需要判断一下,如果该变量不为空,将中间的数入栈.<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 创建存储数字的栈</span><br><span class="hljs-keyword">let</span> nums = [];<br><span class="hljs-comment">// 存储运算符的栈</span><br><span class="hljs-keyword">let</span> op = [];<br><span class="hljs-comment">// 创建运算符优先级表(用对象来做)</span><br><span class="hljs-keyword">let</span> priority = &#123;<br>    <span class="hljs-string">&#x27;+&#x27;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&#x27;-&#x27;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&#x27;*&#x27;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&#x27;/&#x27;</span>: <span class="hljs-number">1</span><br>&#125;;<br><span class="hljs-comment">// 比较优先级函数op1栈顶(即数组最后一个)元素,op2为当前获取到运算符</span><br><span class="hljs-keyword">let</span> compare = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">op1, op2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (priority[op1] &gt; priority[op2]) &#123;<br>        <span class="hljs-comment">// 当前运算符优先级小于栈顶元素 取出栈顶运算符和nums栈顶2个数字进行运算 并将结果入栈</span><br>        <span class="hljs-keyword">let</span> one = nums.pop();<br>        <span class="hljs-keyword">let</span> two = nums.pop();<br>        <span class="hljs-keyword">switch</span> (op.pop()) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                <span class="hljs-comment">// 将运算结果入栈</span><br>                nums.push(one + two);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                nums.push(one - two);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                nums.push(one * two);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                nums.push(one / two);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 将该运算符入栈</span><br>        op.push(op2);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 大于或者等于时 直接入栈</span><br>        op.push(op2);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 假设一串表达式是 1+5*6-1;</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;1+5*6-1&#x27;</span>;<br><span class="hljs-keyword">let</span> arr = str.split(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// [&quot;1&quot;, &quot;+&quot;, &quot;5&quot;, &quot;*&quot;, &quot;6&quot;, &quot;-&quot;, &quot;1&quot;]</span><br><span class="hljs-comment">// 入口函数 </span><br><span class="hljs-keyword">var</span> cal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 模拟真实点击按键获取数据入栈的过程</span><br>    arr.forEach(<br>        (e) =&gt; &#123;<br>            <span class="hljs-comment">// 判断当前元素是数字还是运算符</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(<span class="hljs-built_in">Number</span>(e))) &#123;<br>                <span class="hljs-comment">// 运算符 比较优先级</span><br>                compare(op[op.length - <span class="hljs-number">1</span>], e);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 数字 直接入栈 </span><br>                nums.push(<span class="hljs-built_in">Number</span>(e));<br>            &#125;<br>        &#125;<br>    );<br>    <span class="hljs-comment">//计算表达式结果   这里没有遵循栈的操作规则 老铁们可以自己优化下 </span><br>    <span class="hljs-comment">// 遍历op 当op内没有元素后 停止循环</span><br>    <span class="hljs-keyword">while</span> (op.length != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 依次取出栈低(数组起始位置)的2个元素和符号进行运算</span><br>        <span class="hljs-comment">// 运算完毕后 再将结果插入到第一个 </span><br>        <span class="hljs-keyword">let</span> one = nums.shift();<br>        <span class="hljs-keyword">let</span> two = nums.shift();<br>        <span class="hljs-keyword">switch</span> (op.shift()) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                <span class="hljs-comment">// 将运算结果插入到第一个</span><br>                nums.unshift(one + two);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                nums.unshift(one - two);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                nums.unshift(one * two);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                nums.unshift(one / two);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 上述操作后 数组最后就剩下一个数 即运算结果</span><br>    <span class="hljs-built_in">console</span>.log(nums[<span class="hljs-number">0</span>]);<br>&#125;<br>cal();<br></code></pre></div></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>在最后的计算结果的地方，因为在数组中如果对第一个元素进行增删，当数组元素过多时，会很影响性能，所以这里还有很多优化的地方，后序会再更新。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于面试</title>
    <link href="/2019/10/17/%E9%9A%8F%E7%AC%94/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/"/>
    <url>/2019/10/17/%E9%9A%8F%E7%AC%94/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="关于面试"><a href="#关于面试" class="headerlink" title="关于面试"></a>关于面试</h1><p>因为之前有找过实习，以及当时准备面试时一些大佬有给过一些建议，最近恰好一个朋友又在准备校招面试，于是聊了各自关于面试的一些感受，所以想总结一些自己对于面试的想法。</p><a id="more"></a><h2 id="关于面试的心态准备"><a href="#关于面试的心态准备" class="headerlink" title="关于面试的心态准备"></a>关于面试的心态准备</h2><blockquote><p>第一次面试</p></blockquote><ul><li>关于面试心态上的准备，很多第一次面试的同学，都会去搜一些面试指南一类的东西(我也是)，这主要是因为没有经验，不清楚面试流程，但很多所谓的面试指南(不是指全部，有的还是很有针对性，主要看岗位)大多都是在说一些不痛不痒的东西;其实只要穿着得体(有的岗位会在面试通知告诉你着装要求)，面试过程中回答面试官的问题时，咬字清楚，准确的表达自己的意思即可;真正要核心准备的是与你应聘岗位对应的**<em>职业技能！**</em></li></ul><blockquote><p>温馨提示1</p></blockquote><ul><li>这里要提一点的是，关于一些指南的所谓的说话模板，假造实习经验的一些建议，真心劝大家，尤其是在校的同学们，切勿模仿，你要知道面试你的前辈，可是比你早进入社会很多年的，他会意识不到你的小心思吗？切记，一定要诚实，踏实的去准备。</li></ul><!-- >还有一点是对于刚进入大学的学弟学妹们的一点建议，摆脱了高三繁重的学习生活后，体验大学生活固然是一方面，但最好在大二大三就确定下自己以后的从业方向，提早的去了解这个职业的相关知识，以及需要具备的职业技能，并提早的去准备；因为有很多同学(牛逼的大学不知道，我身边的一些普通本科大多是这样)，都在进入大学后抱着锻炼自己能力的想去参加更多的社团，学生会；但很多时候，这些事情只会浪费你很多的精力(是我太菜了，只能专注做一件事)； --><blockquote><p>温馨提示2</p></blockquote><ul><li>很多同学在对于找工作的认识上有一些误区(我身边有很多)，觉得自己在学校有过一些社团、学生会的经验，就足以胜任一些岗位，忽略了相关技能准备，认为这些东西都是去了公司，公司会培训，教给你的，一定要更正这个想法，学校的社团经验有了当然更好，但这不是重点，你要知道公司招你的第一目的还是为公司带来利益，至于对于你能力的一些培训，也是在你具备投入公司正常工作的基础上，为了让你更好融入工作环境，和熟悉公司业务的一些培训，而不是从0开始培养你(当然很多公司是会有一些学习培训，等等的)。<h2 id="关于面试的技能准备"><a href="#关于面试的技能准备" class="headerlink" title="关于面试的技能准备"></a>关于面试的技能准备</h2><blockquote><p>职业技能的准备一定是面试准备的重点(因岗位而议，但比重一定是最大的)，这方面是决定了你面试成败的很大的一部分，试想一个只会加法和四则运算都会的同学你觉得老师喜欢哪个呢(原谅我只能举出这样过于简单的例子)；你的技能准备充分，带给面试官的印象一般就比较好，因为不谈别的至少面试官会觉得你具备一定的工作能力，考虑时肯定也会优先考虑你。</p></blockquote></li></ul><blockquote><p>该如何准备呢?</p></blockquote><ul><li>首先肯定要很早就确定自己以后的就业方向(这也是一个很大的话题，同学们自己想咯)，然后利用搜索引擎去搜集相关的信息，比如做什么的，怎么做，职业路线是怎么样等等，最后就是去一些招聘网站看看，一般公司会对这个职位有哪些要求，这样一圈下来，你至少对这个职位有了一定的了解，也有了一定的头绪去准备，接下来的就是靠时间去不停的学习，提升自己的能力。<!-- ## 关于大厂的面试造火箭 --></li></ul><h2 id="关于面试官"><a href="#关于面试官" class="headerlink" title="关于面试官"></a>关于面试官</h2><p>关于这一点呢，我就从我面试时对面试官的感觉，和准备过程一些做过面试官的大佬给我的建议来谈谈我的看法(毕竟我这种菜鸟，自己还在学习中，哪有资格面试别人，hhh)。<br>其实要展示给面试官的，就是我有这个职位应该具备的能力，而且我还很喜欢这个岗位，我也有积极向上学习的这个心态；但是面试就短短的半个多小时到一个小时左右，怎么就通过这么短的时间来展示自己有这个能力呢！<br>我自己想法就是，首先肯定是扎实自己知识储备，面试官的问题怎么也要回答的相差不大，另外就是在一些开放性问题上，能提出一些自己的想法；关于这一点就真的需要自己平时一直在了解，关注这些才能做到的。其次技术岗位(画画啊设计啊程序员啊)，平时是否有自己的项目，数量和技术深度上的一些实践和探索，以上2点都是充分向面试官证明自己真的有学习能力以及积极学习的心态的机会。</p><h2 id="关于面试结果"><a href="#关于面试结果" class="headerlink" title="关于面试结果"></a>关于面试结果</h2><p>其实我觉得面试这东西还是挺讲究运气(运气也是建立在一定的实力上的)，和相亲真的很像(虽然我没相过，但是能想象),有时候其实什么都对了，要求也符合，问的问题也回答上了，但是还是挂了，那真的就是没缘分，两个人感觉对不上，毕竟以后要一起工作的，人呢，就是有时候有这种感觉，也不知道怎么解释，暂时就称这个叫所谓的气场不和吧。所以同学也别在意，如果是自己的问题，觉得不足，就加以改正，如果觉得也没什么，就继续找和自己有缘的公司咯。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上所有的观点和想法，都是个人所见。每个人对于事情都有自己的想法，和观点，在第一次面对一些事情的时候，都会很慌企图有经验的人能告诉自己该怎么做，但别人的话无非也只是一种参考，你自己心里其实有自己的想法，只是你不确定，所以最重要的还是自己去亲身经历感受一遍，那才是属于你自己的东西，别人的建议有用就吸收，无用就自动排除掉即可，最后希望各位同学都能找到自己心仪的工作呀！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli3配置</title>
    <link href="/2019/10/14/vue/vue-cli3%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/10/14/vue/vue-cli3%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="vue-cli3-0常见配置"><a href="#vue-cli3-0常见配置" class="headerlink" title="vue-cli3.0常见配置"></a>vue-cli3.0常见配置</h1><a id="more"></a><h3 id="配置打包后资源依赖路径"><a href="#配置打包后资源依赖路径" class="headerlink" title="配置打包后资源依赖路径"></a>配置打包后资源依赖路径</h3><blockquote><p>创建vue.config.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports=&#123;<br>    publicPath: process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span><br>        ? <span class="hljs-string">&#x27;/TODO/&#x27;</span><br>        : <span class="hljs-string">&#x27;/&#x27;</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="配置请求本地json文件"><a href="#配置请求本地json文件" class="headerlink" title="配置请求本地json文件"></a>配置请求本地json文件</h3><blockquote><p>1.通过配置webpack的<a href="https://webpack.js.org/configuration/dev-server/">devserver</a><br>2.导入expres来响应路由请求，并返回json文件内容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-keyword">var</span> apiRoutes = express.Router()<br>app.use(<span class="hljs-string">&#x27;/api&#x27;</span>, apiRoutes)<br><span class="hljs-comment">// 加载本地的json文件</span><br><span class="hljs-keyword">var</span> globalData = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;[你的json文件路径]&#x27;</span>);<br><span class="hljs-built_in">module</span>.exports=&#123;<br>    <span class="hljs-comment">// webpack devServer的配置</span><br>    devServer: &#123;<br>        <span class="hljs-comment">// host: &#x27;localhost&#x27;,</span><br>        <span class="hljs-comment">// port: &#x27;8080&#x27;,</span><br>        before(app) &#123;<br>            app.get(<span class="hljs-string">&#x27;[路由路径]&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>                res.json(&#123;<br>                    <span class="hljs-comment">// 这里是你的json内容</span><br>                    errno: <span class="hljs-number">0</span>,<br>                    data: globalData(上面引入的json文件变量)<br>                &#125;)<br>            &#125;)<br>        &#125;,<br>    &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git笔记</title>
    <link href="/2019/10/10/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/git%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/10/10/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/git%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote><p>下文命令中 [ ]内部为具体要填写的数据，并不包括[ ]</p></blockquote><blockquote><p>如: git clone [url],实际为 git clone https://****</p></blockquote><h1 id="GIT学习"><a href="#GIT学习" class="headerlink" title="GIT学习"></a>GIT学习</h1><h2 id="关于-GIT"><a href="#关于-GIT" class="headerlink" title="关于 GIT"></a>关于 GIT</h2><blockquote><p>项目的版本管理工具<br>多人同时开发项目协作工具</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>官网下载并安装git </p></blockquote><a id="more"></a><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong><em>初始化仓库</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入你的项目文件夹 初始化该项目</span><br>git init<br></code></pre></div></td></tr></table></figure><p><strong><em>全局配置</em></strong></p><p><strong><strong>注:刚下载好，第一次使用时做这一步</strong></strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global user.name &quot;[name]&quot;<br>git config --global user.email &quot;[email]&quot;<br></code></pre></div></td></tr></table></figure><p><strong><em>克隆项目</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone [项目地址]<br></code></pre></div></td></tr></table></figure><p><strong><em>项目管理</em></strong></p><blockquote><p>增加文件到暂存区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加指定文件 到暂存区</span><br>git add [文件名] [文件名] ...<br><span class="hljs-meta">#</span><span class="bash"> 添加指定目录 到暂存区</span><br>git add [目录名]<br><span class="hljs-meta">#</span><span class="bash"> 添加所有 到暂存区</span><br>git add .<br></code></pre></div></td></tr></table></figure><blockquote><p>将暂存区的文件提交到仓库区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 提交暂存区所有文件</span><br>git commit -m &#x27;[提交备注]&#x27;<br><span class="hljs-meta">#</span><span class="bash"> 提交暂存区指定文件</span><br>git commit [文件名] [文件名] ... -m &#x27;[备注]&#x27;<br></code></pre></div></td></tr></table></figure><blockquote><p>撤销暂存区的文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 恢复暂存区文件到工作区</span><br>git checkout [文件名]<br><span class="hljs-meta">#</span><span class="bash"> 恢复所有</span><br>git checkout .<br></code></pre></div></td></tr></table></figure><p><strong><em>分支</em></strong></p><blockquote><p>如果在vscode，一下操作可以通过软件的界面完成</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看本地所有分支</span><br>git branch<br><span class="hljs-meta">#</span><span class="bash"> 查看远程仓库分支</span><br>git branch -r<br><span class="hljs-meta">#</span><span class="bash"> 同时查看本地和远程所有分支</span><br>git branch -a <br><span class="hljs-meta">#</span><span class="bash"> 新建分支，但还留在本分支</span><br>git branch [分支名]<br><span class="hljs-meta">#</span><span class="bash"> 创建分支并切换到新建分支</span><br>git checkout -b [分支名]<br><span class="hljs-meta">#</span><span class="bash"> 切换分支</span><br>git checkout [分支名]<br><span class="hljs-meta">#</span><span class="bash"> 删除分支</span><br>git branch -d [分支名]<br><span class="hljs-meta">#</span><span class="bash"> 合并本地另一个分支代码到当前分支</span><br>git merge [目标分支]<br></code></pre></div></td></tr></table></figure><p><strong><em>远程仓库</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 添加远程仓库</span><br>git remote add [重命名] [url]<br><span class="hljs-meta">#</span><span class="bash"> 将本地仓库推送到远程仓库 master分支(或其他分支)</span><br>git push  origin master<br><span class="hljs-meta">#</span><span class="bash"> 提交时创建本地分支和远程对应的分支关联</span><br>git push -u origin master<br><span class="hljs-meta">#</span><span class="bash"> 之后提交关联后的仓库代码时直接</span><br>git push<br><span class="hljs-meta">#</span><span class="bash"> 将本地仓库代码提交并强行覆盖远程库的代码(慎重操作)</span><br>git push -f<br><br><span class="hljs-meta">#</span><span class="bash"> 同步远程仓库代码到本地</span><br>git pull [远程分支] [本地分支]<br></code></pre></div></td></tr></table></figure><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h3 id="master分支"><a href="#master分支" class="headerlink" title="master分支"></a><strong><em>master分支</em></strong></h3><blockquote><p>项目最稳定最完整，随时可上线代码</p></blockquote><h3 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a>hotfix</h3><blockquote><p>修复线上bug</p></blockquote><h3 id="feature分支"><a href="#feature分支" class="headerlink" title="feature分支"></a>feature分支</h3><blockquote><p>开发新功能版本</p></blockquote><h3 id="devlop分支"><a href="#devlop分支" class="headerlink" title="devlop分支"></a><strong><em>devlop分支</em></strong></h3><blockquote><p>功能最新最全分支</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2019/10/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2019/10/08/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote><p>检查一段字符串是否符合自定义的一个规则</p></blockquote><a id="more"></a><h2 id="特殊符"><a href="#特殊符" class="headerlink" title="特殊符"></a>特殊符</h2><blockquote><p>^</p></blockquote><ul><li>匹配输入开始</li><li>/^a/—-字符串开始位置必须是a</li></ul><blockquote><p>$</p></blockquote><ul><li>匹配输入结束</li><li>/a$/—-字符串结尾必须是a</li></ul><blockquote><p>\</p></blockquote><ul><li>转义字符</li></ul><blockquote><p>+</p></blockquote><ul><li>执行一个规则多次</li><li>/a+/—-匹配candy中的a和caaaaaay中的所有a</li></ul><blockquote><p>x|y</p></blockquote><ul><li>匹配x或者y</li></ul><blockquote><p>[]</p></blockquote><ul><li>匹配括号内的任意字符</li><li>//[a]//—-匹配a</li><li>//[a-z]//—-匹配a-z任意一个</li></ul><blockquote><p>?</p></blockquote><ul><li>匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。</li><li>例如，/e?le?/ 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。</li></ul><blockquote><p>{}</p></blockquote><ul><li>匹配规则出现的次数(括号里的数组)</li><li>/a{2}/—不会匹配apple 会匹配 aapple 和 aaaaapple</li></ul><blockquote><p>更多参考</p></blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN正则表达式教程</a></li></ul><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><blockquote><p>exec</p></blockquote><ul><li>一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。<blockquote><p>test    </p></blockquote></li><li>一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。<blockquote><p>match    </p></blockquote></li><li>一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。<blockquote><p>matchAll    </p></blockquote></li><li>一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。<blockquote><p>search</p></blockquote></li><li>一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回- 1。<blockquote><p>replace    </p></blockquote></li><li>一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。<blockquote><p>split    </p></blockquote></li><li>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</li></ul><h2 id="常见规则"><a href="#常见规则" class="headerlink" title="常见规则"></a>常见规则</h2><blockquote><p>/^[1][0-9]{10}/</p></blockquote><ul><li>1开头的11位手机号码</li></ul><blockquote><p>/^\s*|\s*$/g</p></blockquote><ul><li>字符串是否为空</li></ul><blockquote><p>/^\w+@[a-zA-Z0-9]{2,10}(?:.[a-z]{2,4}){1,3}$/</p></blockquote><ul><li>邮箱</li></ul><blockquote><p>/^\d+.\d+$/</p></blockquote><ul><li>是否有小数</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuejs基础复习3---vuex</title>
    <link href="/2019/10/06/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-3/"/>
    <url>/2019/10/06/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-3/</url>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><blockquote><p>1.在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据，整个流程就像下图一样<br><img src="/img/vuex1.png" alt="vuex1"></p></blockquote><ul><li>state相当于组件的data</li><li>view相当于显示data数据的html结构</li><li>action相当于一些事件触发的函数</li></ul><a id="more"></a><blockquote><p>2.通过action改变state的数据，view来实时显示state中的数据<br>3.vuex就是一个所有组件一起维护的一个data<br>4.因为3，所以他是最强大的组件通信方式</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>核心概念</p></blockquote><ul><li>State——-相当于组件的data存放具体数据</li><li>Getters—–相当于组件的计算属性</li><li>Mutations—存放更改state中数据的事件(就是一个一个的函数)</li><li>Actions—–用来处理异步操作的事件</li><li>Module——对state数据进行模块化划分<br><img src="/img/vuex2.png" alt="vuex2"><blockquote><p>通过commit触发mutations的事件来改变state的数据，组件显示state的数据<br>当有异步操作时，通过dispatch触发actions内部的事件，然后传递给mutations的事件，在改变state的数据</p></blockquote></li></ul><blockquote><p>代码演示</p></blockquote><ul><li>使用vue-cli创建一个项目(目录如下图)<br><img src="/img/vuex3.png" alt="项目目录"></li><li>store中存放我们的vuex代码(store.js)</li></ul><blockquote><p>代码实现</p></blockquote><ul><li>store.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store=<span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    state:&#123;&#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="store使用"><a href="#store使用" class="headerlink" title="store使用"></a>store使用</h2><blockquote><p><strong><em>在A组件中获取state的数据并显示</em></strong> </p></blockquote><ul><li><p>A组件($store.state.name—获取vuex的数据)</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;&#123;$store.state.name&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;A&#x27;</span></span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>store.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store=<span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class="hljs-string">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="getters使用1"><a href="#getters使用1" class="headerlink" title="getters使用1"></a>getters使用1</h2><blockquote><p><strong>获取数据后添加一段字符串在显示</strong> </p></blockquote></li><li><p>A组件</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;&#123;$store.getters.addStr&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;A&#x27;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>store.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store=<span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class="hljs-string">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    <span class="hljs-comment">// 默认参数1 state， 等同于this.state</span><br>    <span class="hljs-comment">// 默认参数2 getters 等同于this.getters</span><br>    getters:&#123;<br>        addStr(state)&#123;<br>            <span class="hljs-keyword">return</span> state.name+<span class="hljs-string">&#x27;111&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="getters使用2"><a href="#getters使用2" class="headerlink" title="getters使用2"></a>getters使用2</h2><blockquote><p><strong>获取数据后添加一段字符串在显示，添加的字符串是组件传递过去的</strong> </p></blockquote></li><li><p>A组件</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;&#123;$store.getters.addStr(&#x27;A组件&#x27;)&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;A&#x27;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>store.js</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store=<span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class="hljs-string">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;<br>        addStr(state)&#123;<br>            <span class="hljs-comment">// 通过返回一个函数 然后接受组件传递的参数</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> state.name+str;<br>            &#125;<br>        &#125;<br>    &#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="mutations使用"><a href="#mutations使用" class="headerlink" title="mutations使用"></a>mutations使用</h2><blockquote><p><strong>当点击按钮后，改变state中的name</strong> </p></blockquote><ul><li><p>A组件</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;&#123;$store.state.name&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;change&#x27;</span>&gt;</span>btn<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;A&#x27;</span>,</span><br>    methods:&#123;<br>        change()&#123;<br><span class="javascript">            <span class="hljs-comment">// 1.通过commit(事件类型)触发mutations的事件</span></span><br><span class="javascript">            <span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;changeName&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-comment">// 2.通过对象类型触发</span></span><br><span class="javascript">            <span class="hljs-built_in">this</span>.$store.commit(&#123;</span><br><span class="javascript">                <span class="hljs-comment">// 触发事件类型</span></span><br><span class="javascript">                type:<span class="hljs-string">&#x27;changeName&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-comment">// 传递的参数</span></span><br>                num:0<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>store.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store=<span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class="hljs-string">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;<br>        <span class="hljs-comment">// 默认参数1.state</span><br>        <span class="hljs-comment">// 默认参数2.payload 这个参数是接受触发该事件时传递的参数</span><br>        <span class="hljs-comment">// 注:如果是以对象格式触发该事件时，payload接受到的是一个对象</span><br>        changeName(state,payload)&#123;<br>            state.name=<span class="hljs-string">&#x27;mutations使用&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="actions使用"><a href="#actions使用" class="headerlink" title="actions使用"></a>actions使用</h2><blockquote><p><strong>当点击按钮后，先发送actions，进行异步操作后，触发mutations的事件，在改变state的name</strong> </p></blockquote></li><li><p>A组件</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;&#123;$store.state.name&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;change&#x27;</span>&gt;</span>btn<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;A&#x27;</span>,</span><br>    methods:&#123;<br>        change()&#123;<br><span class="javascript">            <span class="hljs-built_in">this</span>.$sotre.dispatch(<span class="hljs-string">&#x27;asyncChange&#x27;</span>);</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>store.js</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store=<span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class="hljs-string">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;<br>        <span class="hljs-comment">// 默认参数1.state</span><br>        <span class="hljs-comment">// 默认参数2.payload 这个参数是接受触发该事件时传递的参数</span><br>        <span class="hljs-comment">// 注:如果是以对象格式触发该事件时，payload接受到的是一个对象</span><br>        changeName(state,payload)&#123;<br>            state.name=<span class="hljs-string">&#x27;mutations使用&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    actions:&#123;<br>        <span class="hljs-comment">// 默认参数1.context 就是store对象;</span><br>        <span class="hljs-comment">// 默认参数2.payload为接受的参数对象</span><br>        asyncChange(context,payload)&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                context.commit(<span class="hljs-string">&#x27;changeName&#x27;</span>);<br>            &#125;,<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="module的使用"><a href="#module的使用" class="headerlink" title="module的使用"></a>module的使用</h2><blockquote><p>说明</p></blockquote></li><li><p>用来模块化state中的数据的</p></li><li><p>store.js</p></li><li><p>A组件</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        &#123;&#123;$store.state.personInfo.name&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span><br><span class="javascript">    name:<span class="hljs-string">&#x27;A&#x27;</span>,</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store=<span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class="hljs-string">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;<br>        perosonInfo:&#123;<br>            state:&#123;<br>                name:<span class="hljs-string">&#x27;man&#x27;</span><br>            &#125;,<br>            getters:&#123;&#125;,<br>            mutations:&#123;&#125;,<br>            <span class="hljs-comment">// 需要注意 模块中的actions的context指向的是该模块</span><br>            <span class="hljs-comment">// 如果想要获取根state:  context.rootstate即可</span><br>            actions:&#123;&#125;,<br>            modules:&#123;<br>        &#125;,<br>        animalInfo:&#123;<br>            state:&#123;<br>                name:<span class="hljs-string">&#x27;dog&#x27;</span><br>            &#125;,<br>            getters:&#123;&#125;,<br>            mutations:&#123;&#125;,<br>            actions:&#123;&#125;,<br>            modules:&#123;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h1 id="以上就是vuex基本使用，详细可以参考官方文档"><a href="#以上就是vuex基本使用，详细可以参考官方文档" class="headerlink" title="以上就是vuex基本使用，详细可以参考官方文档"></a>以上就是vuex基本使用，详细可以参考官方文档</h1>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuejs基础复习2---组件/组件通信</title>
    <link href="/2019/09/26/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-2/"/>
    <url>/2019/09/26/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-2/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是组件呢？"><a href="#什么是组件呢？" class="headerlink" title="什么是组件呢？"></a>什么是组件呢？</h1><blockquote><p>1.简单的理解，UI层组件可以是一个按钮，可以是一个轮播图等等；逻辑方面，就是可复用的代码块；<br>2.更简单粗暴的理解，因为vue做的是单页应用，意味着只有一个HTML文件，那每一个页面其实就是组成这个HTML文件的一部分，而每个页面又是通过不同的部分组成；所以一个页面可以理解成一个大的组件，页面里的每一个部分，都是一个一个小组件；</p></blockquote><a id="more"></a><h1 id="什么是组件化开发和模块化开发呢？"><a href="#什么是组件化开发和模块化开发呢？" class="headerlink" title="什么是组件化开发和模块化开发呢？"></a>什么是组件化开发和模块化开发呢？</h1><blockquote><p>1.模块化和组件化想要达成的目的都是一样的，组件化是包含了UI和页面逻辑处理在一起；而模块化只是将可以重复使用的逻辑代码提取成一个个模块，方便随时使用；<br>2.两者都是一种开发思想，为了更好的开发效率</p></blockquote><!-- more --><h1 id="怎么在vue中创建并注册一个组件呢？-暂时不包括模块开发"><a href="#怎么在vue中创建并注册一个组件呢？-暂时不包括模块开发" class="headerlink" title="怎么在vue中创建并注册一个组件呢？(暂时不包括模块开发)"></a>怎么在vue中创建并注册一个组件呢？(暂时不包括模块开发)</h1><blockquote><p>1.在vue中全局创建组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-comment">&lt;!-- 第一个参数 是字符串，定义该组件名字； --&gt;</span><br><span class="hljs-comment">&lt;!-- 第二个参数是一个对象，需要定义组件的模板，其他都是和vue实例中的一样 --&gt;</span><br><span class="hljs-comment">&lt;!-- 这里需要注意，一个组件的 data 选项必须是一个函数；</span><br><span class="hljs-comment">这样的目的，是为了让每个组件之间的数据独立；</span><br><span class="hljs-comment">原理就是js函数会重新开辟一块存储空间，存储当前组件的数据</span><br><span class="hljs-comment">返回一个对象就是让我们能拿到这个对象里的数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    Vue.component(<span class="hljs-string">&#x27;btn&#x27;</span>,&#123;</span><br><span class="handlebars"><span class="xml">        template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;hint&quot;</span>&gt;</span>clickme<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>&#x27;,</span></span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                name:<span class="hljs-string">&#x27;全局组件&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            hint:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-built_in">this</span>.name);<span class="hljs-comment">//在页面会出现提示窗 并显示全局组件</span></span><br>            &#125;<br>        &#125;<br>    &#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>// 使用该组件<br><span class="hljs-tag">&lt;<span class="hljs-name">btn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">btn</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>2.创建一个局部组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br>// 注册后才能使用<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">btn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">btn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> btn=&#123;</span><br><span class="handlebars"><span class="xml">    template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;hint&quot;</span>&gt;</span>clickme<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>&#x27;,</span></span><br>    data()&#123;<br><span class="javascript">        <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">            name:<span class="hljs-string">&#x27;局部组件&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    methods:&#123;<br><span class="javascript">        hint:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-built_in">this</span>.name);<span class="hljs-comment">//在页面会出现提示窗 并显示全局组件</span></span><br>        &#125;<br>    &#125;<br>&#125;;<br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    le:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class="javascript">        name:<span class="hljs-string">&#x27;组件练习&#x27;</span></span><br>    &#125;,<br><span class="javascript">    <span class="hljs-comment">// 注册我们的局部组件</span></span><br>    components:&#123;<br>        btn:btn<br>    &#125;<br>&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>3.两种组件创建的区别：</p></blockquote><ul><li>全局组件不需要注册，可以直接使用，所以可以再任意的vue实例中使用；</li><li>局部组件需要在要使用它的vue实例里注册后，才能使用</li></ul><h1 id="什么是组件通信？"><a href="#什么是组件通信？" class="headerlink" title="什么是组件通信？"></a>什么是组件通信？</h1><blockquote><p>在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据<br>正因为每一个组件维护属于自己的data，所以在一个组件中想要使用其他组件的data数据就需要进行组件通信</p></blockquote><h1 id="组件通信有哪些类型呢？"><a href="#组件通信有哪些类型呢？" class="headerlink" title="组件通信有哪些类型呢？"></a>组件通信有哪些类型呢？</h1><blockquote><p>1.父子组件之间传递<br>2.子父组件之间传递<br>3.兄弟组件之间传递<br>4.跨级组件之间传递</p></blockquote><h1 id="关于父子组件通信"><a href="#关于父子组件通信" class="headerlink" title="关于父子组件通信"></a>关于父子组件通信</h1><blockquote><p>1.在父组件中使用子组件时，在子组件上通过v-bind(缩写为 :)绑定要传递的数据<br>2.在子组件中，使用props来接受父组件传递过来的数据</p></blockquote><p><strong><em>代码</em></strong></p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-comment">&lt;!-- 这里父组件就是我们的vue实例 然后创建一个子组件one --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 绑定我们要传递的数据，然后传递要传递的数据 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">one</span> <span class="hljs-attr">v-bind:name</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">one</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> one=&#123;</span><br><span class="handlebars"><span class="xml">    template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,</span></span><br>    props:&#123;<br><span class="javascript">        name:&#123; <span class="hljs-attr">type</span>:<span class="hljs-built_in">String</span>&#125;</span><br>    &#125;<br>&#125;;<br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    le:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class="javascript">        name:<span class="hljs-string">&#x27;父组件&#x27;</span></span><br>    &#125;,<br><span class="javascript">    <span class="hljs-comment">// 注册我们的局部组件</span></span><br>    components:&#123;<br>        one:one<br>    &#125;<br>&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="关于子父组件通信"><a href="#关于子父组件通信" class="headerlink" title="关于子父组件通信"></a>关于子父组件通信</h1><blockquote><p>1.子组件通过$emit监听一个自定义事件，传递数据给父组件<br>2.父组件通过v-on(缩写为@)监听该自定义事件，然后该事件会触发一个函数来获取子组件传递的数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    &#123;&#123;name&#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">one</span> <span class="hljs-attr">v-on:ok</span>=<span class="hljs-string">&#x27;get&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">one</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-comment">// 点击子组件的button 后开始传递数据</span></span><br><span class="javascript"> <span class="hljs-keyword">let</span> one=&#123;</span><br><span class="handlebars"><span class="xml">        template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,</span></span><br>        data()&#123;<br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                name:<span class="hljs-string">&#x27;子组件&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            start:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">// 触发自定义ok事件</span></span><br><span class="javascript">                <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;ok&#x27;</span>,<span class="hljs-built_in">this</span>.name);</span><br>            &#125;<br>        &#125;<br>    &#125;<br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    el:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class="javascript">        name:<span class="hljs-string">&#x27;parent&#x27;</span></span><br>    &#125;,<br>    components:&#123;<br>        one<br>    &#125;,<br>    methods:&#123;<br><span class="javascript">        get:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.name=e;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="使用全局事件管理中心进行跨级组件通信-父子-子父-跨级也可以用"><a href="#使用全局事件管理中心进行跨级组件通信-父子-子父-跨级也可以用" class="headerlink" title="使用全局事件管理中心进行跨级组件通信(父子,子父,跨级也可以用)"></a>使用全局事件管理中心进行跨级组件通信(父子,子父,跨级也可以用)</h1><blockquote><p>1.重新创建一个vue对象<br>2.在需要传递参数的组件内部通过$emit绑定触发一个自定义事件，并传递要传递的数据<br>3.在需要接受数据的组件通过$on绑定被emit触发的事件，然后在回调函数中接受传递过来的参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">one</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">one</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">two</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">two</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-comment">// 创建事件管理中心对象</span></span><br><span class="javascript"><span class="hljs-keyword">let</span> event=<span class="hljs-keyword">new</span> Vue();</span><br><span class="javascript"><span class="hljs-comment">// 创建两个组件</span></span><br><span class="javascript"><span class="hljs-keyword">let</span> one=&#123;</span><br><span class="handlebars"><span class="xml">    template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,</span></span><br>    data()&#123;<br><span class="javascript">        <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">            name:<span class="hljs-string">&#x27;one&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    methods:&#123;<br><span class="javascript">        <span class="hljs-comment">// 当我们点击发送按钮后执行该函数</span></span><br>        start()&#123;<br><span class="javascript">            <span class="hljs-comment">// 触发recive这个我们自定义的事件 并传递要传递的数据</span></span><br><span class="javascript">            event.$emit(<span class="hljs-string">&#x27;recive&#x27;</span>,<span class="hljs-built_in">this</span>.name);</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="javascript"><span class="hljs-keyword">let</span> two=&#123;</span><br><span class="handlebars"><span class="xml">    template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,</span></span><br>    data()&#123;<br><span class="javascript">        <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">            name:<span class="hljs-string">&#x27;two&#x27;</span></span><br>        &#125;<br>    &#125;,<br><span class="javascript">    <span class="hljs-comment">// 官方的生命周期函数  理解为在我们的所有数据渲染在div节点内部前自动执行的一个函数</span></span><br>    mounted()&#123;<br><span class="javascript">        <span class="hljs-comment">// 这里我们监听另一个组件触发的函数，然后接受传递过来的数据</span></span><br><span class="javascript">        event.$on(<span class="hljs-string">&#x27;recive&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.name=data;</span><br>        &#125;);<br>    &#125;<br>&#125;<br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    el:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class="javascript">        name:<span class="hljs-string">&#x27;event&#x27;</span></span><br>    &#125;,<br>    components:&#123;<br>        one,<br>        two<br>    &#125;<br>&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="跨级组件-父组件和子孙组件-通信"><a href="#跨级组件-父组件和子孙组件-通信" class="headerlink" title="跨级组件(父组件和子孙组件)通信"></a>跨级组件(父组件和子孙组件)通信</h1><p><strong><em>假设父组件是A，子组件是B，孙子组件是C</em></strong></p><blockquote><p>1.A组件通过v-bind绑定要传递数据<br>2.在B中不使用props接收，而是在B组件中的C组件上通过v-bind=’$attrs’ 来转发A组件传递过来的数据<br>3.在C组件内部可以通过this.$attrs获取到A组件传递过来的数据(获取到的是对象格式)<br>tips:</p></blockquote><ul><li>在C组件中设置inheritAttrs: false；</li><li>这个属性是为了C组件在B中使用v-bind=’$attrs’时，该属性不会被当做HTML的属性渲染到页面</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">one</span> <span class="hljs-attr">:name</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">one</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">let</span> two = &#123;</span><br><span class="handlebars"><span class="xml">            template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,</span></span><br>            data() &#123;<br><span class="javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                    name: <span class="hljs-string">&#x27;two&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            mounted() &#123;<br><span class="javascript">                <span class="hljs-comment">// 接受传递的数据</span></span><br><span class="javascript">                <span class="hljs-built_in">this</span>.name = <span class="hljs-built_in">this</span>.$attrs[<span class="hljs-string">&#x27;name&#x27;</span>];</span><br>            &#125;,<br><span class="javascript">            inheritAttrs: <span class="hljs-literal">false</span>,</span><br><br>&#125;<br><span class="javascript"><span class="hljs-keyword">let</span> one = &#123;</span><br><span class="javascript">    <span class="hljs-comment">// 转发父组件的数据给自己的子组件</span></span><br><span class="handlebars"><span class="xml">    template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">two</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">two</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,</span></span><br>    data() &#123;<br><span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">            msg :<span class="hljs-string">&#x27;one&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    components: &#123;<br>        two<br>    &#125;<br>&#125;<br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>    data: &#123;<br><span class="javascript">        name: <span class="hljs-string">&#x27;app&#x27;</span></span><br>    &#125;,<br>    components: &#123;<br>        one<br>    &#125;<br>&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="使用provide-对象-函数内部返回一个对象-和inject-数组-字符数组格式-进行跨级通信"><a href="#使用provide-对象-函数内部返回一个对象-和inject-数组-字符数组格式-进行跨级通信" class="headerlink" title="使用provide(对象/函数内部返回一个对象)和inject(数组/字符数组格式)进行跨级通信"></a>使用provide(对象/函数内部返回一个对象)和inject(数组/字符数组格式)进行跨级通信</h1><blockquote><p>1.在父组件通过provide提供要所有子组件可继承的属性<br>2.所有的子组件都可以用inject来进行继承</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">one</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">one</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> one = &#123;</span><br><span class="handlebars"><span class="xml">        template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,</span></span><br>        data() &#123;<br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                msg: <span class="hljs-string">&#x27;one&#x27;</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        inject: [<span class="hljs-string">&#x27;name&#x27;</span>],</span><br>        mounted() &#123;<br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.msg = <span class="hljs-string">&#x27;继承的&#x27;</span>+<span class="hljs-built_in">this</span>.name;</span><br>        &#125;<br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>        data: &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;app&#x27;</span></span><br>        &#125;,<br>        provide() &#123;<br><span class="javascript">            <span class="hljs-comment">// 定义一个name属性 然后把data的name的值赋值给他</span></span><br><span class="javascript">            <span class="hljs-built_in">this</span>.name = <span class="hljs-built_in">this</span>.name;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 返回一个新的name变量 值为刚才定义的name属性</span></span><br><span class="javascript">                name: <span class="hljs-built_in">this</span>.name</span><br>            &#125;<br>        &#125;,<br>        components: &#123;<br>            one<br>        &#125;<br>    &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="parent和-childern和ref进行父子组件通信"><a href="#parent和-childern和ref进行父子组件通信" class="headerlink" title="$parent和$childern和ref进行父子组件通信"></a>$parent和$childern和ref进行父子组件通信</h1><blockquote><p>获取子组件数据</p></blockquote><ul><li>在子组件绑定ref=’属性名’  获取时通过this.$refs.属性名 获取到该组件实例<blockquote><p>获取父组件</p></blockquote></li><li>this.$parent<figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">one</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;one&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">one</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> one = &#123;</span><br><span class="handlebars"><span class="xml">        template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>one<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&#x27;,</span></span><br>        data() &#123;<br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                name: <span class="hljs-string">&#x27;one&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        mounted()&#123;<br><span class="javascript">            <span class="hljs-comment">// 获取父组件的data</span></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$parent.name);</span><br>        &#125;<br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>        data: &#123;<br><span class="javascript">            name: <span class="hljs-string">&#x27;app&#x27;</span></span><br>        &#125;,<br>        components: &#123;<br>            one<br>        &#125;,<br>        mounted() &#123;<br><span class="javascript">            <span class="hljs-comment">// 获取子组件data</span></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$refs.one.name);</span><br>        &#125;<br>    &#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---图论</title>
    <link href="/2019/09/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B010/"/>
    <url>/2019/09/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B010/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%9B%BE%E8%AE%BA.html">这里</a></h1><h1 id="什么是图"><a href="#什么是图" class="headerlink" title="什么是图"></a>什么是图</h1><p>1.图是网络结构的抽象模型<br>2.由一组边连接的顶点(或节点)组成</p><p><img src="/img/Graph.jpg" alt="图"></p><h1 id="图和树的区别"><a href="#图和树的区别" class="headerlink" title="图和树的区别"></a>图和树的区别</h1><p>1.树和链表也是图的一种<br>2.但是和树不同，树的左右两个子树的节点不可以相连，图可以(如上图)</p><a id="more"></a><h1 id="图可以干嘛"><a href="#图可以干嘛" class="headerlink" title="图可以干嘛"></a>图可以干嘛</h1><blockquote><p>用来抽象实际生活中某些关系网的结构，比如</p></blockquote><ul><li>1.人际关系网抽象成图，每个人就是这张图中的点，人与人之间的关系就是点点之间的连线</li><li>2.地铁站点图，每个站就是一个顶点，站与站之间的路线就是一条边</li></ul><h1 id="关于图的术语"><a href="#关于图的术语" class="headerlink" title="关于图的术语"></a>关于图的术语</h1><blockquote><p><strong><em>顶点</em></strong>：图中的一个点；比如在地铁图中的某一站；人际关系网中某个人</p></blockquote><blockquote><p><strong><em>边</em></strong>：顶点之间的距离；比如地铁图中两站之间的距离</p></blockquote><blockquote><p><strong><em>相邻顶点</em></strong>：一条边链接在一起的2个顶点称为相邻顶点</p></blockquote><blockquote><p><strong><em>度</em></strong>：一个顶点的度是相邻顶点的数量</p></blockquote><blockquote><p><strong><em>出度</em></strong>：某个顶点指向别的顶点的数量</p></blockquote><blockquote><p><strong><em>入度</em></strong>：别的顶点指向某个顶点的数量</p></blockquote><blockquote><p><strong><em>路径</em></strong>：两顶点之间经过的所有顶点构成的一个顶点序列称为路径，可以有多个；</p></blockquote><ul><li><strong>简单路径</strong>：顶点序列中不包含重复的顶点</li><li><strong>回路</strong>：顶点序列的第一项和最后一项是同一个顶点；就是从一个顶点出发转一圈又回到该点</li></ul><blockquote><p><strong>无向图</strong>：假设有AB两个顶点通过一条边连接在一起，可以从A-B也可以从B-A，这条边没有方向，就称为无向图；(如上图)</p></blockquote><blockquote><p><strong>有向图</strong>：假设有AB两个顶点通过一条边连接在一起，只可以从A-&gt;B或B-&gt;A，称为有向图(下图)</p></blockquote><p><img src="/img/graph2.png" alt="有向图"></p><blockquote><p><strong>无权图</strong>：图中的边没有携带权重，称为无权图(上面两个图都是)</p></blockquote><blockquote><p><strong>带权图</strong>：边有一定的权重；这个权重可以表示各种想表示的数据，比如花费时间，顺序，等等</p></blockquote><p><img src="/img/graph3.png" alt="带权图"></p><h1 id="用代码表示图"><a href="#用代码表示图" class="headerlink" title="用代码表示图"></a>用代码表示图</h1><blockquote><p><strong><em>使用邻接矩阵(表示顶点之间相邻关系的矩阵)</em></strong></p></blockquote><ul><li>1.用数字或者字母表示顶点，然后用一维数组存放顶点(和顶点包含的数据)</li><li>2.用一个二维数组表示顶点之间的链接(边);<ul><li>2.1假设a-b相连，即表示1，不相连表示0;</li><li>2.2顶点到自己本身没有边，成为自回路，也用0表示</li><li>2.3如果边带权重，当两点相连时，可以把这个数字按一定规则来表示</li><li>2.4邻接矩阵表示无向图时，一定是对称的</li></ul></li><li>3.邻接矩阵的问题：<ul><li>3.1表示稀疏图(顶点之间的边很少的图)的时候会浪费很多内存空间,因为用0表示了很多不存在的边</li></ul></li><li>4.多用于表示无向图</li></ul><p><img src="/img/graph4.png" alt="邻接矩阵"></p><blockquote><p><strong><em>使用邻接表(本文也是用这种方式)</em></strong></p></blockquote><ul><li>1.邻接表由顶点和相邻顶点的顶点列表组成</li><li>2.数组/链表/字典(哈希表)都可以实现</li><li>3.多用于表示有向图</li><li>4.邻接表的问题<ul><li>4.1计算出度比较简单</li><li>4.2计算入度非常麻烦</li></ul></li></ul><p><img src="/img/graph5.png" alt="邻接表"></p><h1 id="关于图的遍历"><a href="#关于图的遍历" class="headerlink" title="关于图的遍历"></a>关于图的遍历</h1><blockquote><p>1.需要注意的时，遍历时不能重复访问某个节点，且需要指定第一个要访问的节点，一般对图的遍历常用的有一下2种算法</p></blockquote><blockquote><p>2.广度优先算法(BFS)</p></blockquote><ul><li>特点：优先遍历当前访问节点的相邻节点 ，属于一层一层遍历</li><li>使用队列实现</li></ul><blockquote><p>3.深度优先算法(DFS)</p></blockquote><ul><li>特点：有点类似树的先序遍历，沿着路径，一条路径的节点全部访问完毕后，再返回有分支路径的节点去访问另一条路径；</li><li>可以使用栈，或者递归(本文使用递归)来实现</li></ul><blockquote><p>4.上述的两种方式遍历结果的区别：如图</p></blockquote><p><img src="/img/graph6.png" alt="遍历"></p><h1 id="表示节点的状态"><a href="#表示节点的状态" class="headerlink" title="表示节点的状态"></a>表示节点的状态</h1><blockquote><p><strong><em>白色</em></strong>：表示顶点还没有被访问<br>*<strong>灰色***：表示该顶点被访问过，但未被探索过(就是和他连接的点还未被访问)<br>*</strong>黑色***：表示该顶点被访问过且被完全探索过(该点和该点相连的顶点都被访问过)</p></blockquote><h1 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h1><blockquote><p>开始前先做一点说明</p></blockquote><ul><li>1.我们用一个数组存储所有的顶点</li><li>2.然后用一个对象存储相连点的关系：key为一个点，value是一个数组，存储和该点相连的点<figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Graph</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-built_in">this</span>.vertexes = [];<br>   <span class="hljs-built_in">this</span>.eage = &#123;&#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p><strong><em>BFS</em></strong><br>实现思路：</p></blockquote><ul><li>1.每次访问一个节点时，把和它相连的节点插入队列</li><li>2.一个节点访问完毕后，在读取队列中先进队列的节点开始访问，</li><li>3.然后重复执行12，直到队列为空，结束<figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 参数：指定第一个访问节点  callback</span><br>Graph.prototype.BFS = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">initV, handler</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.check(initV)) &#123;<br>        <span class="hljs-comment">// 1.初始化颜色</span><br>        <span class="hljs-keyword">let</span> color = <span class="hljs-built_in">this</span>.initColor();<br>        <span class="hljs-comment">// 2.创建队列</span><br>        <span class="hljs-keyword">let</span> que = <span class="hljs-keyword">new</span> Queue();<br>        <span class="hljs-comment">// 3.将第一个顶点插入队列</span><br>        que.enqueue(initV);<br>        <span class="hljs-comment">// 4.循环队列取出元素</span><br>        <span class="hljs-keyword">while</span> (!que.isEmpty()) &#123;<br>            <span class="hljs-comment">// 4.1取出顶点</span><br>            <span class="hljs-keyword">let</span> v = que.dequeue();<br>            <span class="hljs-comment">// 4.2获取顶点的相邻顶点</span><br>            <span class="hljs-keyword">let</span> vList = <span class="hljs-built_in">this</span>.eage[v];<br>            <span class="hljs-comment">// 4.3将v颜色设置成灰色</span><br>            color[v] = <span class="hljs-string">&#x27;gray&#x27;</span>;<br>            <span class="hljs-comment">// 4.4把相邻顶点插入队列 </span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; vList.length; i++) &#123;<br>                <span class="hljs-comment">// 遍历相邻节点</span><br>                <span class="hljs-keyword">let</span> e = vList[i];<br>                <span class="hljs-comment">// 检查该点之前有没有被访问过</span><br>                <span class="hljs-keyword">if</span> (color[e] == <span class="hljs-string">&#x27;white&#x27;</span>) &#123;<br>                    <span class="hljs-built_in">console</span>.log(e);<br>                    color[e] = <span class="hljs-string">&#x27;gray&#x27;</span>;<br>                    que.enqueue(e);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 4.5.访问v节点</span><br>            handler(v);<br>            <span class="hljs-comment">// 4.6访问完毕</span><br>            color[v] = <span class="hljs-string">&#x27;black&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&#x27;检查顶点是否存在&#x27;</span>);<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure></li></ul><blockquote><p><strong><em>DFS</em></strong><br>实现思路：</p></blockquote><ul><li>通过递归函数，访问一个节点的相邻节点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 参数：指定第一个访问节点  callback</span><br>Graph.prototype.DFS = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">initV, handler</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.check(initV)) &#123;<br>        <span class="hljs-comment">// 1.初始化颜色</span><br>        <span class="hljs-keyword">let</span> color = <span class="hljs-built_in">this</span>.initColor();<br>        <span class="hljs-built_in">this</span>.recurrence(initV, color, handler);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">&#x27;检查顶点是否存在&#x27;</span>);<br>    &#125;<br><br>    &#125;;<br>    <span class="hljs-comment">// 递归访问顶点</span><br>    Graph.prototype.recurrence = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v, color, handler</span>) </span>&#123;<br>        <span class="hljs-comment">// 1标记正在访问</span><br>        color[v] = <span class="hljs-string">&#x27;gray&#x27;</span>;<br>        <span class="hljs-comment">// 2处理顶点</span><br>        handler(v);<br>        <span class="hljs-comment">// 3探索该点相邻顶点</span><br>        <span class="hljs-keyword">let</span> vList = <span class="hljs-built_in">this</span>.eage[v];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> vList) &#123;<br>            <span class="hljs-keyword">let</span> e = vList[i];<br>            <span class="hljs-keyword">if</span> (color[e] == <span class="hljs-string">&#x27;white&#x27;</span>) &#123;<br>                color[e] = <span class="hljs-string">&#x27;gray&#x27;</span>;<br>                <span class="hljs-comment">// 递归探索该点</span><br>                <span class="hljs-built_in">this</span>.recurrence(e, color, handler);<br>            &#125;<br>    &#125;;<br>    <span class="hljs-comment">// 4标记探索完成</span><br>    color[v] = <span class="hljs-string">&quot;black&quot;</span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---红黑树</title>
    <link href="/2019/09/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B09/"/>
    <url>/2019/09/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B09/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是红黑树"><a href="#什么是红黑树" class="headerlink" title="什么是红黑树"></a>什么是红黑树</h1><blockquote><p>1.为了解决二叉搜索树出现非平衡树的情况而出现的优化方案；<br>2.当插入一个节点使树不平衡时，通过一些规则和一些处理方式来让树保持平衡；这个平衡后的树叫做红黑树</p></blockquote><h1 id="为什么需要红黑树？"><a href="#为什么需要红黑树？" class="headerlink" title="为什么需要红黑树？"></a>为什么需要红黑树？</h1><p>1.假如现在要向一颗BST插入10 9 8 7 6 5 4 3 2 1这样一组数，最后的结果就是每个数依次出现在上一个节点的左子树的情况，这样就相当于一个链表，体现不出我们使用树结构的优势，所以需要一些措施让每次插入的节点尽量出现在左右两端，避免出现这样的极端的情况。<br>2.红黑树是这种处理方式的一种常用结构。</p><a id="more"></a><h1 id="红黑树的特点"><a href="#红黑树的特点" class="headerlink" title="红黑树的特点"></a>红黑树的特点</h1><blockquote><p>1.满足二叉搜索树的所有特征<br>2.节点是红色或者黑色<br>3.根节点是黑色<br>4.每个叶子节点都是黑色的null节点</p></blockquote><ul><li><font color="black">注:可以理解成当一个节点没有子节点时我们用null节点给他补齐</font></li></ul><blockquote><p>5.每个红色的节点的两个子节点都是黑色</p></blockquote><ul><li><font color="black">注:从每个叶子节点到根节点的路径上不能有两个连续的红色节点</font></li></ul><blockquote><p>6.从任意节点开始到其每个叶子节点的所有路径都包含相同数目的黑色节点</p></blockquote><h1 id="红黑树的相对平衡"><a href="#红黑树的相对平衡" class="headerlink" title="红黑树的相对平衡"></a>红黑树的相对平衡</h1><blockquote><p>1.从根节点到叶子节点的最长可能路径，不会超过最短可能路径的两倍长</p></blockquote><ul><li>特点5决定了不可能有2个相连的红色节点</li><li>最短路径可能全部都是黑色节点(根节点没有子节点的情况，补全两个null节点)</li><li>最长的可能路径只可能是红黑交替</li><li>特点6表明了所有路径都有相同数目的黑色节点</li><li>这就表明了没有路径能多余任何其他路径的2倍长</li><li>注：首先每次插入新节点的颜色都是红色<blockquote><p>2.结果就是这个数基本是平衡的<br>3.虽然不可能完全平衡，但是可以保证在极端的情况下，效率依旧相对比链表高</p></blockquote></li></ul><h1 id="插入节点时变化规则"><a href="#插入节点时变化规则" class="headerlink" title="插入节点时变化规则"></a>插入节点时变化规则</h1><blockquote><p>1.变色</p></blockquote><ul><li>为了重新符合红黑树的规则，尝试把节点在黑红两色之间变换<blockquote><p>2.左旋转</p></blockquote></li><li>逆时针旋转红黑树的2个节点，使得父节点被自己的右子节点取代，自己成为自己的左子节点<blockquote><p>3.右旋转</p></blockquote></li><li>顺时针旋转红黑树的2个节点，使得父节点被自己的左子节点取代，自己成为自己的右子节点</li></ul><p><img src="/img/rbt.jpg" alt="红黑树变化"></p><h1 id="节点插入时根据以下几点情况做对应的处理："><a href="#节点插入时根据以下几点情况做对应的处理：" class="headerlink" title="节点插入时根据以下几点情况做对应的处理："></a>节点插入时根据以下几点情况做对应的处理：</h1><p><font color="red"><strong><em>说明：插入节点为N；父节点为p；祖父节点为G；其父亲兄弟节点为U</em></strong></font></p><blockquote><p>情况1:新节点N位于树的根上时，没有父节点；直接将红色节点变成黑色节点即可</p></blockquote><blockquote><p>情况2:新节点父节点为黑色；性质4没有失效，性质5也没问题；新节点不变，还是红色</p></blockquote><blockquote><p>情况3:当p和u都是红色节点的时候；将pu变成黑色，g变成红色</p></blockquote><blockquote><p>情况4:N的父节点是红色，叔叔节点是黑，祖父节点是黑色，然后N是左子节点时： 先把父节点变黑，在把祖父节点变红，再以插入节点的g节点为root节点右旋转；</p></blockquote><blockquote><p>情况5:N的父亲节点是红色，叔叔节点是黑色，然后N是右子节点时： 先以p节点为根节点进行左旋转，然后将p节点作为新插入节点来考虑(这时情况就是情况4)</p></blockquote><h1 id="通过案例理解红黑树的变化规则和插入操作的情况："><a href="#通过案例理解红黑树的变化规则和插入操作的情况：" class="headerlink" title="通过案例理解红黑树的变化规则和插入操作的情况："></a>通过案例理解红黑树的变化规则和插入操作的情况：</h1><p><font color="red"><strong><em>假设现在要依次插入10 9 8 7 6 5 4 3 2 1到一个BST</em></strong></font></p><blockquote><p>1.插入10</p></blockquote><ul><li>1.因为是第一个节点，所以作为root节点</li><li>2.因为红黑树插入节点时都是红色节点，但root’节点必须要是黑色</li><li>3.所以对该节点变色</li><li>4.插入完成</li></ul><blockquote><p>2.插入9</p></blockquote><ul><li>1.因为比10小，所以插入到左子节点</li><li>2.满足红黑节点相连等特点，所以不进行处理，直接插入</li><li>3.插入完成</li></ul><blockquote><p>3.插入8</p></blockquote><ul><li>1.比9小，插入到9的左子节点</li><li>2.但因为和9节点都是红色节点，违背红节点的2个子节点必须是黑色，所以要进行处理</li><li>3.这时满足情况4的条件，先进行情况4的变色规则，然后进行右旋转</li><li>4.插入完成</li></ul><h1 id="剩下的画了图"><a href="#剩下的画了图" class="headerlink" title="剩下的画了图"></a>剩下的画了图</h1><p><img src="/img/anli.png" alt="案例"></p><p><img src="/img/anli2.png" alt="案例"></p><p><img src="/img/anli3.png" alt="案例"></p><p><img src="/img/anli4.png" alt="案例"></p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---树</title>
    <link href="/2019/09/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B08/"/>
    <url>/2019/09/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B08/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%91.html">这里</a></h1><h1 id="什么是树"><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h1><blockquote><p>1.一种非线性结构,由n(n&gt;=1)个有限节点组成的有层次关系的集合<br>2.如下图：<br><img src="/img/tree.jpg" alt="树"><br>3.HTML的所有dom节点其实就是一棵dom树，如图<br><img src="/img/domtree.gif" alt="dom树"></p></blockquote><a id="more"></a><h1 id="树的特点"><a href="#树的特点" class="headerlink" title="树的特点"></a>树的特点</h1><blockquote><p><strong><em>优点</em></strong></p></blockquote><ul><li>1.因为基于链表实现，所以集成了链表的优点；但又因为非线性结构的原因查询比链表有效率；</li><li>2.虽然查询效率不集哈希表，但比哈希表节省空间；</li><li>3.也改善了数组插入和删除时，效率低下的原因；</li><li>4.可以表示一对多的关系；</li></ul><blockquote><p><strong><em>缺点</em></strong></p></blockquote><ul><li>1.查找删除效率取决该树的深度，深度越大效率越低</li><li>2.查找效率没有哈希表更有效率</li></ul><hr><p><strong><strong>存在即合理，根据自己会继续要选择合适的结构</strong></strong></p><hr><h1 id="关于树的一些术语"><a href="#关于树的一些术语" class="headerlink" title="关于树的一些术语"></a>关于树的一些术语</h1><p><img src="/img/tree.jpg" alt="树"></p><blockquote><p>1.位于顶部的节点叫做根节点；图中的A<br>2.树中的每个元素叫做节点；图中的所有圆点<br>3.内部节点：有子节点的节点；图中的abcde<br>4.外部节点也叫叶节点：没有子节点的节点；图中的#<br>5.父节点：a时bc的父节点；是其他节点的祖先节点；<br>6.子节点：bc是a的子节点；<br>7.子树：由某个子节点和他的子节点组成的树；<br>8.节点的度:节点的子节点个数<br>9.节点的层：根节点是1层(或0层),子节点层数依次加一；<br>10.树的深度：层数最大的节点；是树的深度</p></blockquote><h1 id="一些常见树"><a href="#一些常见树" class="headerlink" title="一些常见树"></a>一些常见树</h1><blockquote><p><strong><em>二叉树(Binary Tree)</em></strong></p></blockquote><ul><li>1.每个节点的子节点个数最多只有2个；一个左节点，一个右节点</li><li>2.二叉树i层的最大节点树为 2的i-1次方,i&gt;=1;</li><li>3.深度为k的二叉树的最大节点总数为 2的k次方后再-1；k&gt;=1</li><li>4.非空二叉树的叶结点个数n0=n2+1； n2为叶节点个数</li></ul><blockquote><p><strong><em>完美二叉树</em></strong></p></blockquote><ul><li>除过根节点其他所有子节点都有2个子节点的二叉树</li></ul><blockquote><p><strong><em>完全二叉树(Complete Binary Tree)</em></strong></p></blockquote><ul><li>1.除过根节点其他所有子节点都有2个子节点；</li><li>2.且最后一层从左到右叶节点连续存在，只缺右边若干接点的二叉树</li><li>3.完美二叉树时特殊的完全二叉树</li><li>4.举例子<br><img src="/img/treedemo.jpg" alt="完全二叉树"></li></ul><blockquote><p><strong><font color="red">二叉搜索树(Binary Search Tree)</font></strong>   <strong><strong>重点</strong></strong></p></blockquote><ul><li>非空*<strong>左**<em>子树的所有值</em></strong>小于***其根节点；</li><li>非空*<strong>右**<em>子树的所有值</em></strong>大于***其根节点；</li><li>每一个子树也都满足二叉搜索树规则；<br><img src="/img/bst.jpg" alt="二叉搜索树">;</li></ul><h1 id="非平衡树"><a href="#非平衡树" class="headerlink" title="非平衡树"></a>非平衡树</h1><blockquote><p>1.一颗左右子树节点分布不平衡的树，叫做非平衡树<br>2.一颗非平衡树相当于写了一个链表，体现不出树的优势；<br><img src="/img/notbts.jpg" alt="非平衡二叉树">;</p></blockquote><h1 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h1><blockquote><p>1.也是二叉搜索树<br>2.每个节点的左子树节点个数和右子树节点个数相近<br>3.在二叉搜索树的实现上多封装了一些条件来保证不会出现非平衡树那样的情况的树<br>常见平衡树:</p></blockquote><ul><li>AVL树:不常用</li><li><strong><em>红黑树</em></strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---哈希表</title>
    <link href="/2019/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B07/"/>
    <url>/2019/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B07/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%A1%88%E4%BE%8B.html">这里</a></h1><h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><p><strong><em>特点</em></strong></p><blockquote><p>1.基于数组创建的一种数据结构<br>2.存储元素时，对每一个元素通过哈希函数，进行哈希化后存储<br>3.存储后的这个数组就叫做哈希表(HashTable，也有叫散列表的)</p></blockquote><p><strong><em>和数组对比</em></strong></p><blockquote><p><strong>优点</strong></p><blockquote><p>比数组更快的查找速度(因为删除，修改基于查找所以效率也提高)</p></blockquote></blockquote><blockquote><p><strong>缺点</strong></p><blockquote><p>key值不可以重复<br>哈希表没有顺序，不能以一定的顺序遍历</p></blockquote></blockquote><a id="more"></a><p><strong><em>哈希函数</em></strong></p><blockquote><p>1.当在一百万数据的数组中，根据内容查找一个元素和根据那个元素的下标来查找时，时间差距很大<br><img src="/img/hash.jpg" alt="对比图"><br>2.哈希函数做的事就是把一个元素的key值转换成一个数字，然后在数组中以这个数字为下表存入数据<br>3.查找时，也是根据存入时哈希化(使用哈希函数对key进行转换的过程)的key值条件,先对其哈希化然后通过哈希化后的数字去数组中查找<br>4.一个好的哈希函数应该具有2个特点:</p></blockquote><ul><li>1.快速计算(减少乘法，乘法比加法在计算机中更耗费性能)</li><li>2.哈希后的数组下标要尽可能平均</li></ul><p><strong><em>冲突</em></strong></p><blockquote><p>当哈希化key值后出现的数字发生重复时这种现象叫做冲突<br>冲突的解决方案</p><blockquote><p>1.链地址法(用的更多，下文代码实现也使用这种方式)</p></blockquote></blockquote><ul><li>存储元素时，用数组或链表进行存储</li></ul><blockquote><blockquote><p>2.开放地址法(寻找还是空的位置来存储)</p></blockquote></blockquote><ul><li>线性探测：以一定的规则来寻找下一个空位置来存储，这个规则得出的数一般是一个质数，称做步长.</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p><strong><em>封装哈希表</em></strong></p><blockquote><p>封装方法：</p><blockquote><p>哈希函数—hash(key)</p></blockquote></blockquote><ul><li>传入要哈希的key，然后将该key值每个字母转换成ASCII码做和在进行一定的处理，以下函数规则参考自《学习JavaScript数据结构与算法》</li></ul><blockquote><blockquote><p>存储元素—put(obj)</p></blockquote></blockquote><ul><li>传入要存储的元素(下文是存储一个对象)，存储时先通过哈希函数将某个属性(下文是name)哈希化得到要存储的位置，然后在存储时进行判断：1.该位置为空，直接插入；2.不为空，对比查看name值是否相同，不同插入在最后，若相同，覆盖；</li></ul><blockquote><blockquote><p>获取元素—get(str)</p></blockquote></blockquote><ul><li>传入要查找的的内容(存储时哈希化的属性name)，查找时先通过哈希函数将查找值哈希化得到目标位置，然后直接查找，有返回整个对象；无，返回null</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HashTable</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">//  存储元素的数组</span><br>            <span class="hljs-built_in">this</span>.items = [];<br>            <span class="hljs-comment">// 哈希函数</span><br>            HashTable.prototype.hash = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) </span>&#123;<br>                <span class="hljs-keyword">let</span> hashCode = <span class="hljs-number">5381</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; key.length; i++) &#123;<br>                    hashCode = <span class="hljs-number">33</span> * hashCode + key.charCodeAt();<br>                &#125;;<br>                <span class="hljs-keyword">return</span> hashCode % <span class="hljs-number">1013</span>;<br>            &#125;;<br>            <span class="hljs-comment">// 存和改</span><br>            HashTable.prototype.put = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>                <span class="hljs-keyword">let</span> index = <span class="hljs-built_in">this</span>.hash(obj.name);<br>                <span class="hljs-comment">// 初始化该位置</span><br>                <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.items[index];<br>                <span class="hljs-comment">// 判断要存储位置是否为空</span><br>                <span class="hljs-keyword">if</span> (current == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.items[index] = [];<br>                    current = <span class="hljs-built_in">this</span>.items[index];<br>                    <span class="hljs-comment">// 为空 直接插入到第一个位置</span><br>                    current.push(obj);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 不为空 判断和里面的元素是否相同</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; current.length; i++) &#123;<br>                        <span class="hljs-comment">// 相同修改</span><br>                        <span class="hljs-keyword">if</span> (current[i].name == obj.name) &#123;<br>                            current[i] = obj;<br>                            <span class="hljs-keyword">return</span>;<br>                        &#125;<br>                    &#125;;<br>                    <span class="hljs-comment">// 不同 插入到最后</span><br>                    current.push(obj);<br>                &#125;<br>            &#125;;<br>            <span class="hljs-comment">// 取</span><br>            HashTable.prototype.get = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;<br>                <span class="hljs-keyword">let</span> index = <span class="hljs-built_in">this</span>.hash(str);<br>                <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.items[index];<br>                <span class="hljs-keyword">if</span> (current != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; current.length; i++) &#123;<br>                        <span class="hljs-keyword">if</span> (current[i].name == str) &#123;<br>                            <span class="hljs-keyword">return</span> current[i];<br>                        &#125;<br>                    &#125;;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;;<br>    &#125;;<br>    <span class="hljs-comment">// 测试代码  </span><br><br>        <span class="hljs-keyword">let</span> hs = <span class="hljs-keyword">new</span> HashTable();<br>        <span class="hljs-comment">// 创建一个对象并存如</span><br>        <span class="hljs-keyword">let</span> shuaxin = &#123;<br>            name: <span class="hljs-string">&quot;shuaxin&quot;</span>,<br>            phone: <span class="hljs-string">&#x27;158****26**&#x27;</span><br>        &#125;;<br>        hs.put(shuaxin);<br><span class="hljs-comment">// 测试哈希表和数组查找效率对比</span><br><span class="hljs-comment">// 先给数组空的位置插入模拟数据 100w</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (hs.items[i] == <span class="hljs-literal">null</span>) &#123;<br>                    hs.items[i] = [&#123;<br>                        name: <span class="hljs-string">&quot;demo&quot;</span>,<br>                        phone: <span class="hljs-string">&quot;456&quot;</span><br>                    &#125;];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;;<br>        &#125;;<br>        insert();<br>        <span class="hljs-comment">// 数组普通的对比查找</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span>(<span class="hljs-params">str</span>) </span>&#123;<br>            <span class="hljs-comment">// console.log(str);</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> hs.items) &#123;<br>                <span class="hljs-keyword">if</span> (str == hs.items[i][<span class="hljs-number">0</span>].name) &#123;<br>                    <span class="hljs-keyword">return</span> hs.items[i][<span class="hljs-number">0</span>];<br>                &#125;<br>            &#125;;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;;<br><br>        <span class="hljs-comment">// 上文图片的结果</span><br>        <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&#x27;100w数据中效率对比&#x27;</span>);<br>        <span class="hljs-comment">// 250+ms</span><br>        <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&#x27;遍历查找&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(find(<span class="hljs-string">&#x27;shuaxin&#x27;</span>));<br>        <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&#x27;遍历查找&#x27;</span>);<br>        <span class="hljs-comment">// 1ms左右</span><br>        <span class="hljs-built_in">console</span>.time(<span class="hljs-string">&#x27;哈希查找&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(hs.get(<span class="hljs-string">&#x27;shuaxin&#x27;</span>));<br>        <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">&#x27;哈希查找&#x27;</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---集合</title>
    <link href="/2019/09/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B06/"/>
    <url>/2019/09/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B06/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%9B%86%E5%90%88%E7%BB%93%E6%9E%84.html">这里</a></h1><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li>集合是由一组*<strong>无序**<em>且</em></strong>唯一***的项组成的。</li><li>可以理解成一种特殊的数组<br> 1.特殊在里面的元素没有顺序，不能重复<br> 2.没有顺序意味着不能通过下标访问，不能重复意味着相同对象在集合中只存一份</li><li>和数学中的集合一样，也有并集、交集、差集、子集的概念。</li></ol><a id="more"></a><h1 id="ES6的set结构就是一个集合"><a href="#ES6的set结构就是一个集合" class="headerlink" title="ES6的set结构就是一个集合"></a>ES6的set结构就是一个集合</h1><h1 id="集合常见的实现方式是哈希表"><a href="#集合常见的实现方式是哈希表" class="headerlink" title="集合常见的实现方式是哈希表"></a>集合常见的实现方式是哈希表</h1><h1 id="封装一个集合类"><a href="#封装一个集合类" class="headerlink" title="封装一个集合类"></a>封装一个集合类</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SetCustomer</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 通过对象来存储我们的元素 也可以用数组 对象方便操作</span><br>    <span class="hljs-comment">// 属性</span><br>    <span class="hljs-built_in">this</span>.items = &#123;&#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h1 id="动手封装集合的常见操作"><a href="#动手封装集合的常见操作" class="headerlink" title="动手封装集合的常见操作"></a>动手封装集合的常见操作</h1><blockquote><p><strong><em>基本方法</em></strong><br>1.add(value)向集合添加一个新的项</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">SetCustomer.prototype.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.items[value] = value;<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>2.remove(vlaue)移除集合的一项</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">SetCustomer.prototype.remove = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.has(value)) &#123;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-built_in">this</span>.items[value];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>3.has(value)判断集合有无指定的一项?返回true:返回false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">SetCustomer.prototype.has = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.items.hasOwnProperty(value)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>4.clear()移除集合所有项</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">SetCustomer.prototype.clear = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.items = &#123;&#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>5.size()返回集合包含项的个数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">SetCustomer.prototype.size = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">this</span>.items).length;<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>6.values()返回一个包含集合所有值的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">SetCustomer.prototype.values = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 因为存储集合时键值保持一致的 所以取键也行</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">this</span>.items);<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p><strong><em>封装两个集合的求集操作</em></strong><br>1.并集：对于给定的2个集合，返回一个包含两个集合中 所有的 元素的新集合</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">SetCustomer.prototype.union = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">otherSet</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.创建新集合</span><br>    <span class="hljs-keyword">let</span> unionSet = <span class="hljs-keyword">new</span> SetCustomer();<br>    <span class="hljs-comment">// 2.将A集合元素添加到新集合</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.size(); i++) &#123;<br>        unionSet.add(<span class="hljs-built_in">this</span>.values()[i]);<br>    &#125;;<br>    <span class="hljs-comment">// 3.将B集合添加到新集合</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; otherSet.size(); i++) &#123;<br>        unionSet.add(otherSet.values()[i]);<br>    &#125;;<br>    <span class="hljs-comment">// 4.返回新集合</span><br>    <span class="hljs-keyword">return</span> unionSet;<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>2.交集：对于给定的2个集合，返回一个包含两个集合中 共有的 元素的新集合</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> SetCustomer.prototype.intersection = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">otherSet</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> insSet = <span class="hljs-keyword">new</span> SetCustomer();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (otherSet.has(<span class="hljs-built_in">this</span>.values()[i])) &#123;<br>            insSet.add(<span class="hljs-built_in">this</span>.values()[i]);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> insSet;<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>3.差集：对于给定的2个集合，返回一个包含所有存在A但不存在B集合的所有元素的新集合</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">SetCustomer.prototype.difference = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">otherSet</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> diffSet = <span class="hljs-keyword">new</span> SetCustomer();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (!otherSet.has(<span class="hljs-built_in">this</span>.values()[i])) &#123;<br>            diffSet.add(<span class="hljs-built_in">this</span>.values()[i]);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> diffSet;<br>&#125;;<br></code></pre></div></td></tr></table></figure><blockquote><p>4.子集：验证一个集合是否是另一个集合的子集</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">SetCustomer.prototype.subset = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">otherSet</span>) </span>&#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.size() &gt; otherSet.size) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.size(); i++) &#123;<br>                        <span class="hljs-keyword">if</span> (!otherSet.has(<span class="hljs-built_in">this</span>.values()[i])) &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                        &#125;<br>                    &#125;;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vuejs基础复习1---指令/基本语法</title>
    <link href="/2019/09/03/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-1/"/>
    <url>/2019/09/03/vue/vuejs%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0-1/</url>
    
    <content type="html"><![CDATA[<h1 id="vue基础复习"><a href="#vue基础复习" class="headerlink" title="vue基础复习"></a>vue基础复习</h1><a id="more"></a><h1 id="学习前知识储备"><a href="#学习前知识储备" class="headerlink" title="学习前知识储备"></a>学习前知识储备</h1><p>1.HTML+CSS+JS肯定要会啊！！！<br>2.ES6知识储备！</p><h1 id="一些概念解释"><a href="#一些概念解释" class="headerlink" title="一些概念解释"></a>一些概念解释</h1><blockquote><p><strong><em>什么是MVVM</em></strong><br>MVVM是一种设计模式，是Model-View-ViewMode的缩写。view就是视图层，可以认为就是HTML。Model是数据层，就是我们通过ajax请求后端接口获取到的数据。ViewMode就是vue帮我们做的，将我们的数据绑定到我们要显示的视图层上。</p></blockquote><!-- more --><blockquote><p><strong><em>什么是数据驱动</em></strong><br>MVVM框架的特点，当数据变化时，视图层显示也会自动变化；反过来也是一样。</p></blockquote><blockquote><p><strong><em>为什么要用vue(或者类似的框架)？</em></strong><br>1.减少了对dom的操作,我们只需要关心我们的数据，dom操作交给框架就好<br>2.让前后端分离更彻底</p></blockquote><blockquote><p><strong><em>什么SPA应用？</em></strong><br>全称是单页Web应用（single page web application，SPA），只有一个HTML页面，通过访问路径不同来切换显示内容。<br>之前纯HTML+CSS的开发，通过a标签跳转的，有多个页面的就是多页应用。</p></blockquote><blockquote><p><strong><em>路由</em></strong><br>路由是根据不同的 url 地址展示不同的内容或页面</p></blockquote><blockquote><p>前后端路由区别?<br>1.前端路由完全由前端工程师控制，通过不同的URL俩决定显示区域显示的内容，页面不会刷新<br>2.后端路由是浏览器地址栏切换不同url时，每次都会给后台发送一个请求，然后后端在根据请求返回对应的页面，页面会刷新。</p></blockquote><blockquote><p><strong><em>什么叫组件？</em></strong><br>1.你可以把它理解成某一个页面，或者某个页面的一部分，比如一个按钮等。<br>2.我们开发中需要大量重复利用的我们就可以封装成一个共用组件，来重复使用。</p></blockquote><h1 id="正篇"><a href="#正篇" class="headerlink" title="正篇"></a>正篇</h1><p><strong><em>1.以上的概念作为了解即可，先不管什么是单页应用和组件，慢慢就会了解</em></strong><br><strong><em>2.多看vue官方的教程！！！</em></strong></p><blockquote><p><strong><em>首先学习vue的基本语法(指令)</em></strong><br>1.引入vuejs,下载或者引入cdn到你的HTML文件<br>2.创建一个vue应用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 使用我们的name变量  这时打开页面 hello world --&gt;</span><br>    &#123;&#123;name&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 通过CDN的方式引入vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 书写我们的vue 应用代码</span></span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,<span class="hljs-comment">//绑定到我们的视图容器</span></span><br><span class="javascript">        <span class="hljs-comment">//data对象中 存放我们的所有数据</span></span><br>        data:&#123;<br><span class="javascript">            name:<span class="hljs-string">&quot;hello world&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><blockquote><p>3.v-if,v-else条件渲染</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;on&quot;</span>&gt;</span>yes<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>        data: &#123;<br><span class="javascript">            on: <span class="hljs-literal">true</span><span class="hljs-comment">//on是true时，页面显示yes 反之显示no    </span></span><br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>4.绑定js的原生事件，v-on:加原生js事件名称(以点击事件举例),可以缩写成@加原生js事件名</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;hint&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript">        <span class="hljs-comment">// methods中存放我们的函数</span></span><br>        methods:&#123;<br><span class="javascript">            <span class="hljs-comment">// es6中 当键和函数名一样时 可以省略键名</span></span><br>            hint()&#123;<br><span class="javascript">                alert(<span class="hljs-string">&quot;你好&quot;</span>);</span><br>            &#125;<br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>5.当在html标签中想使用data中的数据时，用v-bind，可以缩写成 :</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;src&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class="javascript">            src:<span class="hljs-string">&quot;图片路径&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>6.双向绑定数据，v-model</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 输入的数据保存到msg --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 显示我们msg的数据 我们可以看到当我们在input输入或删除一些文字时，p标签内容会变化 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class="javascript">            msg:<span class="hljs-string">&quot;12132&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>7.动态给html绑定class</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.con</span>&#123;</span><br><span class="css">        <span class="hljs-selector-tag">color</span><span class="hljs-selector-pseudo">:red</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;con:isActive&#125;&quot;</span>&gt;</span>测试内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class="javascript">            isActive:<span class="hljs-literal">true</span></span><br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>8.给html绑定多个class</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.con</span>&#123;</span><br><span class="css">        <span class="hljs-selector-tag">color</span><span class="hljs-selector-pseudo">:red</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.con2</span>&#123;</span><br><span class="css">        <span class="hljs-selector-tag">font-size</span><span class="hljs-selector-pseudo">:100px</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;[one.two]&quot;</span>&gt;</span>测试内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class="javascript">            one:<span class="hljs-string">&quot;con&quot;</span>,</span><br><span class="javascript">            two:<span class="hljs-string">&quot;con2&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>9.computed计算属性</p><blockquote><p>他的作用和一个函数效果是一样的，但是计算属性会缓存我们的计算结果，只有当依赖的数据(实例代码的items)发生改变时，才会重新计算，不然每次调用findSame时，都会使用第一次计算的结果</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 应该显示 [1,1] --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;findSame&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span><br>        data:&#123;<br>            items:[1,1,2]<br>        &#125;,<br>        computed&#123;<br>            findSame()&#123;<br><span class="javascript">                <span class="hljs-keyword">let</span> arr=[];</span><br><span class="javascript">                <span class="hljs-comment">// 查找item中相同的元素，并且装入到一个新数组中并返回</span></span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">this</span>.items.length;i++)&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(arr.indexOf(<span class="hljs-built_in">this</span>.items[i])==<span class="hljs-number">-1</span>)&#123;</span><br><span class="javascript">                        arr.push(<span class="hljs-built_in">this</span>.items[i]);</span><br>                    &#125;<br>                &#125;<br><span class="javascript">                <span class="hljs-keyword">return</span> arr;</span><br>            &#125;<br>        &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---(双向)链表</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B05/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B05/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.html">这里</a></h1><h1 id="和单向链表区别"><a href="#和单向链表区别" class="headerlink" title="和单向链表区别"></a>和单向链表区别</h1><p>1.每个节点有两个指针，一个指向上一个节点，一个指向下一个节点<br>2.除过链表头head还多了一链表尾tail属性<br><img src="/img/doubleLinked.png" alt="示例图"></p><blockquote><p><strong><em>双向链表的优点</em></strong><br>1.从双向链表中的任意一个结点开始，都可以很方便地访问它的前节点和后节点，单向链表都得从第一个节点开始<br>2.既可以从头遍历，又可以从尾部遍历</p></blockquote><hr><blockquote><p><strong><em>双向链表的缺点</em></strong><br>1.每次插入删除节点时，需要处理四个引用<br>2.相比较单向链表，存储空间要求更大</p></blockquote><a id="more"></a><h1 id="封装一个双向链表"><a href="#封装一个双向链表" class="headerlink" title="封装一个双向链表"></a>封装一个双向链表</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LinkedList</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 头结点</span><br>    <span class="hljs-built_in">this</span>.head=<span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 链表长度</span><br>    <span class="hljs-built_in">this</span>.length=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 尾结点</span><br>    <span class="hljs-built_in">this</span>.tail=<span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 节点类 </span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Node</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        <span class="hljs-comment">// 存储指向上一个节点的指针(应用)</span><br>        <span class="hljs-built_in">this</span>.prev=<span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 存储节点包含的数据</span><br>        <span class="hljs-built_in">this</span>.data=data;<br>        <span class="hljs-comment">// 存储指向下一个节点的指针(引用)</span><br>        <span class="hljs-built_in">this</span>.next=<span class="hljs-literal">null</span>;<br>    &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h1 id="基本方法和单向链表的方法一样"><a href="#基本方法和单向链表的方法一样" class="headerlink" title="基本方法和单向链表的方法一样"></a>基本方法和单向链表的方法一样</h1><p><strong><strong>但需要注意的时，涉及到要操作前后两个节点时，不仅要处理指向下一个节点的指针，还要处理指向上一个节点的指针</strong></strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.遍历链表：通过查看节点的next是否为空来遍历<br>2.查找指定位置节点：通过设置index，然后在遍历时和目标位置对比来查找</p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---(单向)链表</title>
    <link href="/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B04/"/>
    <url>/2019/09/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B04/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%93%BE%E8%A1%A8.html">这里</a></h1><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>1.类似于数组一样存储多个数据的数据结构<br>2.链表中每个元素称为节点，每个节点包含元素内容和指向下一个节点的指针<br><img src="/img/linked.jpg" alt="示例图"></p><a id="more"></a><h1 id="和数组对比"><a href="#和数组对比" class="headerlink" title="和数组对比"></a>和数组对比</h1><blockquote><p><strong><em>链表的优点</em></strong><br>1.内存空间不是必须连续的。可以实现灵活的内存管理<br>2.链表不必再创建时就确定大小，并且大小可以无限延伸下去<br>3.链表再插入和删除数据时，时间复杂度低，效率高</p></blockquote><blockquote><p><strong><em>链表的缺点</em></strong><br>1.访问任何一个位置的元素时，都需要从头开始访问(无法跳过第一或任何一个元素)<br>2.无法通过下标直接访问元素</p></blockquote><hr><blockquote><p><strong><em>数组的优点</em></strong><br>1.占用内存空间少<br>2.数组内的数据可以随机访问<br>3.数据查找效率较高（内存连续）</p></blockquote><blockquote><p><strong><em>数组的缺点</em></strong><br>1.插入和删除效率低，因为要移动操作元素之后的所有元素(无法跳过第一或任何一个元素)<br>2.数组大小固定，不能动态拓展(大多数语言是这样js的是动态的)</p></blockquote><h1 id="封装一个单向链表"><a href="#封装一个单向链表" class="headerlink" title="封装一个单向链表"></a>封装一个单向链表</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LinkedList</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 链表头</span><br>    <span class="hljs-built_in">this</span>.head=<span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 链表长度</span><br>    <span class="hljs-built_in">this</span>.length=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 节点类 </span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Node</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        <span class="hljs-comment">// 存储节点包含的数据</span><br>        <span class="hljs-built_in">this</span>.data=data;<br>        <span class="hljs-comment">// 存储指向下一个节点的指针(引用)</span><br>        <span class="hljs-built_in">this</span>.next=<span class="hljs-literal">null</span>;<br>    &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h1 id="封装一些基本方法"><a href="#封装一些基本方法" class="headerlink" title="封装一些基本方法"></a>封装一些基本方法</h1><p><strong><em>只列举插入、添加、删除三个方法，其他方法可以查看源代码</em></strong><br>1.append(data)—-给链表尾部追加节点方法，参数:节点数据 不返回结果<br>    <figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">LinkedList.prototype.append = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.创建新节点</span><br>    <span class="hljs-keyword">let</span> node = <span class="hljs-keyword">new</span> Node(data);<br>    <span class="hljs-comment">// 2.判断是否是第一个节点  也可以根据heae是否为空判断</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.length === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.head = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 当前第一个节点</span><br>        <span class="hljs-keyword">let</span> current = <span class="hljs-built_in">this</span>.head;<br>        <span class="hljs-comment">// 通过判断每个节点的next是否为空来找到最后一个元素 </span><br>        <span class="hljs-keyword">while</span> (current.next) &#123;<br>            current = current.next;<br>        &#125;;<br>        <span class="hljs-comment">// 然后给将最后一个元素的next指向我们新添加的元素</span><br>        current.next = node;<br>    &#125;<br>    <span class="hljs-comment">// 3.更新长度</span><br>    <span class="hljs-built_in">this</span>.length++;<br>&#125;;<br></code></pre></div></td></tr></table></figure><br><img src="/img/insert0.png" alt="第一种情况"><br><img src="/img/insert1.png" alt="第二种情况"></p><p><strong><em>不理解的时候画图就好了</em></strong></p><p>2.toString()—-打印每个节点data内容<br>3.insert(position,data)—-向特定位置插入节点，参数:位置索引,插入数据  成功返回1，失败返回0</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">LinkedList.prototype.insert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position, data</span>) </span>&#123;<br>    <span class="hljs-comment">// 1.对position做越界判断  即插入位置是否存在</span><br>    <span class="hljs-keyword">if</span> (position &gt;= <span class="hljs-number">0</span> &amp;&amp; position &lt;= <span class="hljs-built_in">this</span>.length) &#123;<br>        <span class="hljs-keyword">let</span> node = <span class="hljs-keyword">new</span> Node(data);<br>        <span class="hljs-comment">// 2.插入位置是第一个时</span><br>        <span class="hljs-keyword">if</span> (position === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 让要插入的节点的指针指向原来的第一个节点</span><br>            node.next = <span class="hljs-built_in">this</span>.head;<br>            <span class="hljs-comment">// 让head指向要插入的节点</span><br>            <span class="hljs-built_in">this</span>.head = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 标识每一个节点的位置  previous保存前一个节点 </span><br>            <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>,<br>                current = <span class="hljs-built_in">this</span>.head,<br>                previous;<br>                <span class="hljs-comment">// 当index=position时跳出循环</span><br>            <span class="hljs-keyword">while</span> (index++ &lt; position) &#123;<br>                previous = current;<br>                current = current.next;<br>            &#125;;<br>            node.next = current;<br>            previous.next = node;<br>        &#125;;<br>        <span class="hljs-built_in">this</span>.length++;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>4.get(position)—–获取指定位置节点的数据 参数:位置索引  返回获取到的数据或-1<br>5.indexof(data)—–在链表中查找指定数据 参数:要查找的数据 返回目标数据节点位置 ，没有返回-1<br>6.update(position,data)—–修改指定位置的数据 参数:位置索引,要修改的数据  成功返回1，失败返回0<br>7.removeAt(position)—–删除指定位置的节点 参数:位置索引 成功返回删除节点data，失败返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">LinkedList.prototype.removeAt = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">position</span>) </span>&#123;<br>    <span class="hljs-comment">// 越界判断</span><br>    <span class="hljs-keyword">if</span> (position &gt;= <span class="hljs-number">0</span> &amp;&amp; position &lt;= <span class="hljs-built_in">this</span>.length) &#123;<br>        <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>,<br>            current = <span class="hljs-built_in">this</span>.head,<br>            previous;<br>        <span class="hljs-keyword">if</span> (position === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.head = current.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (index++ &lt; position) &#123;<br>                previous = current;<br>                current = current.next;<br>            &#125;;<br>            previous.next = current.next;<br>        &#125;<br>        <span class="hljs-comment">// 更新长度</span><br>        <span class="hljs-built_in">this</span>.length--;<br>        <span class="hljs-keyword">return</span> current.data;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>8.remove(data)—–根据data移除该data所在节点 参数:要删除的数据 成功返回删除节点data，失败返回-1<br>9.size()—–返回链表对的元素个数<br>10.isEmpty()——判断链表是否为空</p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---队列之优先队列</title>
    <link href="/2019/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B03/"/>
    <url>/2019/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.html">这里</a></h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>1.优先队列和队列的主要区别就是，队列中每个元素不仅含有自身的元素，还有一个代表该元素优先级的标识。<br>2.在插入新的元素到队列时，根据该元素的优先级来决定它插入的正确位置。<br>3.优先队列具有最高级先出队列的行为特征</p></blockquote><a id="more"></a><h3 id="封装优先级队列"><a href="#封装优先级队列" class="headerlink" title="封装优先级队列"></a>封装优先级队列</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PriorityQueue</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 封装属性 用数组来存储元素</span><br>   <span class="hljs-built_in">this</span>.items = [];<br>   <span class="hljs-comment">// 创建一个包含元素内容和优先级的类</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">QueueElement</span>(<span class="hljs-params">element, priority</span>) </span>&#123;<br>       <span class="hljs-built_in">this</span>.element = element;<br>       <span class="hljs-built_in">this</span>.priority = priority;<br>   &#125;;<br>   <span class="hljs-comment">// 实现插入方法</span><br>   PriorityQueue.prototype.enqueue = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">element, priority</span>) </span>&#123;<br>       <span class="hljs-comment">// 创建QueueElement</span><br>       <span class="hljs-keyword">let</span> queueElement = <span class="hljs-keyword">new</span> QueueElement(element, priority);<br>       <span class="hljs-comment">// 判断队列是否为空?直接插入:和已有元素对比优先级后插入</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.items.length===<span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-built_in">this</span>.items.push(queueElement);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">let</span> added=<span class="hljs-literal">false</span>;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">this</span>.items)&#123;<br>               <span class="hljs-keyword">if</span>(queueElement.priority&lt;<span class="hljs-built_in">this</span>.items[i].priority)&#123;<br>                   <span class="hljs-built_in">this</span>.items.splice(i,<span class="hljs-number">0</span>,queueElement);<br>                   added=<span class="hljs-literal">true</span>;<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>           &#125;;<br>           <span class="hljs-keyword">if</span> (!added) &#123;<br>               <span class="hljs-built_in">this</span>.items.push(queueElement);<br>           &#125;;<br>       &#125;<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> pq = <span class="hljs-keyword">new</span> PriorityQueue();<br>    pq.enqueue(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>);<br>    pq.enqueue(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">20</span>);<br>    pq.enqueue(<span class="hljs-string">&#x27;taotao&#x27;</span>,<span class="hljs-number">19</span>);<br>    <span class="hljs-built_in">console</span>.log(pq.items);<br>    <span class="hljs-comment">/* 控制台打印内容</span><br><span class="hljs-comment">    (3) [QueueElement, QueueElement, QueueElement]</span><br><span class="hljs-comment">        0: QueueElement &#123;element: &quot;a&quot;, priority: 1&#125;</span><br><span class="hljs-comment">        1: QueueElement &#123;element: &quot;taotao&quot;, priority: 19&#125;</span><br><span class="hljs-comment">        2: QueueElement &#123;element: &quot;b&quot;, priority: 20&#125;</span><br><span class="hljs-comment">        length: 3</span><br><span class="hljs-comment">        __proto__: Array(0)</span><br><span class="hljs-comment">        */</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongoose简单入门</title>
    <link href="/2019/08/14/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/mongoose%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/08/14/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/mongoose%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="mongoose是什么？"><a href="#mongoose是什么？" class="headerlink" title="mongoose是什么？"></a>mongoose是什么？</h1><p>Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。</p><a id="more"></a><h1 id="基本增删改查使用-最近几天用过的一些基本的操作-中文文档"><a href="#基本增删改查使用-最近几天用过的一些基本的操作-中文文档" class="headerlink" title="基本增删改查使用(最近几天用过的一些基本的操作) 中文文档"></a>基本增删改查使用(最近几天用过的一些基本的操作) <a href="http://www.mongoosejs.net/docs/index.html">中文文档</a></h1><p>1.安装mongoose</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">npm i mongoose --save<br></code></pre></div></td></tr></table></figure><p>2.引入mongoose</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mongoose=requie(<span class="hljs-string">&#x27;mongoose&#x27;</span>); <br></code></pre></div></td></tr></table></figure><p>3.连接本地数据库</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 参数是mongodb:+数据库地址/数据库名称 </span><br><span class="hljs-comment">// useNewUrlParser 是设置新的url解析</span><br>mongoose.connect(<span class="hljs-string">&#x27;mongodb://localhost:27017/mongo-relation&#x27;</span>, &#123; <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span> &#125;);<br></code></pre></div></td></tr></table></figure><p>3.创建集合,以创建一个users集合(即数据库表)为例</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// mongoose通过model来对应数据库中的集合 </span><br><span class="hljs-comment">// 第一个参数时 是集合名 第二个参数是设置集合的键以及类型</span><br><span class="hljs-keyword">const</span> Users=mongoose.model(<span class="hljs-string">&#x27;Users&#x27;</span>,<span class="hljs-keyword">new</span> mongoose.Scema(&#123;<br>    name:&#123;<br>        type:<span class="hljs-built_in">String</span><br>    &#125;<br>&#125;));<br></code></pre></div></td></tr></table></figure><p>4.插入数据，向users集合中插入2行文档(即数据)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> insert=<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">await</span> Users.insertMany([&#123;<br>        name:<span class="hljs-string">&#x27;刷新1&#x27;</span><br>    &#125;,&#123;<br>        name:<span class="hljs-string">&#x27;shuaxin&#x27;</span><br>    &#125;]);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;插入成功&#x27;</span>);<br>&#125;;<br>insert();<br></code></pre></div></td></tr></table></figure><p>5.查找数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> find=<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 查找集合中所有数据</span><br>    <span class="hljs-keyword">const</span> users=<span class="hljs-keyword">await</span> Users.find();<br>    cosnole.log(users);<br>    <span class="hljs-comment">// 根据条件查找</span><br>    <span class="hljs-keyword">const</span> findUser=<span class="hljs-keyword">await</span> Users.find().where(&#123;<br>        name:<span class="hljs-string">&#x27;刷新1&#x27;</span><br>    &#125;);<br>    cosnole.log(findUser);<br>    <span class="hljs-comment">// 限制条数查找</span><br>    <span class="hljs-keyword">const</span> twoUsers = <span class="hljs-keyword">await</span> Users.find().limit(<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">console</span>.log(twoUsers);<br>    <span class="hljs-comment">// 更多使用可以看官网</span><br>&#125;;<br>find();<br></code></pre></div></td></tr></table></figure><p>6.修改数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> updata=<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 先查找要修改的数据</span><br>    <span class="hljs-keyword">const</span> target=<span class="hljs-keyword">await</span> Users.find().where(&#123;<br>        name:<span class="hljs-string">&#x27;刷新1&#x27;</span><br>    &#125;);<br>    target.name=<span class="hljs-string">&#x27;刷新2&#x27;</span>;<br>    <span class="hljs-comment">// 保存修改的数据</span><br>    <span class="hljs-keyword">await</span> Users.save();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;修改成功&#x27;</span>);<br>&#125;;<br>update();<br></code></pre></div></td></tr></table></figure><p>7.删除数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> del=aync <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 先查找要删除的数据</span><br>    <span class="hljs-keyword">const</span> target=<span class="hljs-keyword">await</span> Users.find().where(&#123;<br>        name:<span class="hljs-string">&#x27;刷新2&#x27;</span><br>    &#125;);<br>    <span class="hljs-comment">// 直接删除</span><br>    <span class="hljs-keyword">await</span> product.remove();<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;;<br>del();<br></code></pre></div></td></tr></table></figure><h1 id="4-集合之间的关联"><a href="#4-集合之间的关联" class="headerlink" title="4.集合之间的关联"></a>4.集合之间的关联</h1><p>1.创建一个性别集合(Gender)和用户(Users)集合<br>2.性别集合插入男(man)和女(woman)属性<br>3.在用户集合键类型设置时,性别类型性别集合中对应性别的id，ref为指向性别集合</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">gender:&#123;<span class="hljs-attr">type</span>: mongoose.SchemaTypes.ObjectId, <span class="hljs-attr">ref</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>&#125;<br></code></pre></div></td></tr></table></figure><p>4.插入数据时，先获取性别集合中对应的性别，然后设置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取性别</span><br><span class="hljs-keyword">const</span> man=<span class="hljs-keyword">await</span> Gender.findOne(&#123;<span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;);<br><span class="hljs-keyword">const</span> woman=<span class="hljs-keyword">await</span> Gender.findOne(&#123;<span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;);<br><span class="hljs-comment">// 插入数据</span><br><span class="hljs-keyword">const</span> res=<span class="hljs-keyword">await</span> Users.insertMany([&#123;<br>    name:<span class="hljs-string">&#x27;刷新&#x27;</span>,<br>    gender:man<br>&#125;,&#123;<br>    name:<span class="hljs-string">&#x27;tao&#x27;</span>,<br>    gender:man<br>&#125;,&#123;<br>    name:<span class="hljs-string">&#x27;guiyi&#x27;</span>,<br>    gender:woman<br>&#125;]);<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mongoose=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br>mongoose.connect(<span class="hljs-string">&#x27;mongodb://localhost:27017/userMsg&#x27;</span>, &#123; <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span> &#125;);<br><br><span class="hljs-comment">// 性别集合</span><br><span class="hljs-keyword">const</span> Gender=mongoose.model(<span class="hljs-string">&#x27;Gender&#x27;</span>,<span class="hljs-keyword">new</span> mongoose.Schema(&#123;<br>    gender:&#123;<br>        type:<span class="hljs-built_in">String</span><br>    &#125;<br>&#125;)); <br><span class="hljs-comment">// 用户集合</span><br><span class="hljs-keyword">const</span> Users=mongoose.model(<span class="hljs-string">&#x27;Users&#x27;</span>,<span class="hljs-keyword">new</span> mongoose.Schema(&#123;<br>    name:&#123;<span class="hljs-attr">type</span>:<span class="hljs-built_in">String</span>&#125;,<br>    gender:&#123;<span class="hljs-attr">type</span>: mongoose.SchemaTypes.ObjectId, <span class="hljs-attr">ref</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>&#125;<br>&#125;));<br><span class="hljs-comment">// 向gender中插入数据</span><br><span class="hljs-keyword">const</span> insertGender=<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">await</span> Gender.insertMany([&#123;<br>        gender:<span class="hljs-string">&#x27;男&#x27;</span><br>    &#125;,&#123;<br>        gender:<span class="hljs-string">&#x27;女&#x27;</span><br>    &#125;]);<br>&#125;;<br><span class="hljs-comment">// 向users中插入数据</span><br><span class="hljs-keyword">const</span> insertUser=<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> man=<span class="hljs-keyword">await</span> Gender.findOne(&#123;<span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;);<br>    <span class="hljs-keyword">const</span> woman=<span class="hljs-keyword">await</span> Gender.findOne(&#123;<span class="hljs-attr">gender</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;);<br>    <span class="hljs-keyword">const</span> res=<span class="hljs-keyword">await</span> Users.insertMany([&#123;<br>        name:<span class="hljs-string">&#x27;刷新&#x27;</span>,<br>        gender:man<br>    &#125;,&#123;<br>        name:<span class="hljs-string">&#x27;tao&#x27;</span>,<br>        gender:man<br>    &#125;,&#123;<br>        name:<span class="hljs-string">&#x27;guiyi&#x27;</span>,<br>        gender:woman<br>    &#125;]);<br>&#125;;<br><span class="hljs-keyword">const</span> main=<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> gender=<span class="hljs-keyword">await</span> Gender.find();<br>    <span class="hljs-keyword">const</span> users=<span class="hljs-keyword">await</span> Users.find();<br>    <span class="hljs-comment">// 当Gender中没有数据时 执行insertGender</span><br>    <span class="hljs-keyword">if</span> (gender.length==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">await</span> insertGender();<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;插入成功&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 当Gender中有数据时 直接打印</span><br>        <span class="hljs-built_in">console</span>.log(gender);<br>        <span class="hljs-keyword">if</span>(users.length==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 当Users中没有数据时 执行insertGender</span><br>            <span class="hljs-keyword">await</span> insertUser();<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;用户插入成功&#x27;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//  当Users中有数据时 执行insertUsers</span><br>            <span class="hljs-comment">//  populate(&#x27;gender&#x27;) 显示分类属性的详细信息</span><br>            <span class="hljs-keyword">const</span> usersDeatl=<span class="hljs-keyword">await</span> Users.find().populate(<span class="hljs-string">&#x27;gender&#x27;</span>);<br>            <span class="hljs-built_in">console</span>.log(usersDeatl);<br>        &#125;;<br>    &#125;;<br>&#125;;<br>main();<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于js实现重载</title>
    <link href="/2019/07/23/JS/js%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%BD%BD/"/>
    <url>/2019/07/23/JS/js%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%BD%BD.html">这里</a></h1><h1 id="重载是什么"><a href="#重载是什么" class="headerlink" title="重载是什么"></a>重载是什么</h1><div class="hljs code-wrapper"><pre><code>定义：函数名相同,函数的参数列表不同(包括参数个数和参数类型)，至于返回类型可同可不同</code></pre></div><a id="more"></a><h1 id="js没有实现重载"><a href="#js没有实现重载" class="headerlink" title="js没有实现重载"></a>js没有实现重载</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> calculate=&#123;<br>    add(a)&#123;<br>        <span class="hljs-built_in">console</span>.log(a);<br>    &#125;,<br>    add(a,b)&#123;<br>        cosole.log(a+b);<br>    &#125;<br>&#125;;<br>calculate.add(<span class="hljs-number">5</span>);<span class="hljs-comment">// NaN  因为第二个参数未定义</span><br>calculate.add(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">// 10</span><br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>根据上面的例子发现，当有两个重名的方法的时候，会执行后面的那一个</code></pre></div><h1 id="模拟重载"><a href="#模拟重载" class="headerlink" title="模拟重载"></a>模拟重载</h1><p>虽然js本身不支持重载，但是我们可以通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments">arguments对象</a>和<a href="http://es6.ruanyifeng.com/?search=rest&x=0&y=0#docs/function#rest-%E5%8F%82%E6%95%B0">rest参数</a>来模拟重载的效果</p><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><p>arguments对象版本</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> calculate = &#123;<br>    <span class="hljs-comment">// arguments版本</span><br>    add_arguments() &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`arg是数组吗:<span class="hljs-subst">$&#123;<span class="hljs-built_in">arguments</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>&#125;</span>`</span>);<br>        <span class="hljs-keyword">let</span> argCount = <span class="hljs-built_in">arguments</span>.length;<br>        <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">switch</span> (argCount) &#123;<br>            <span class="hljs-comment">// 当传入一个参数的时候，直接返回该值</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                sum = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>];<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`sum=<span class="hljs-subst">$&#123;sum&#125;</span>`</span>);<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 当参数个数大于一个时，进行求和</span><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">arguments</span>) &#123;<br>                    sum += <span class="hljs-built_in">arguments</span>[i];<br>                &#125;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`sum=<span class="hljs-subst">$&#123;sum&#125;</span>`</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br> calculate.add_arguments(<span class="hljs-number">1</span>);<span class="hljs-comment">//1</span><br> calculate.add_arguments(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>);<span class="hljs-comment">//102</span><br></code></pre></div></td></tr></table></figure><p>rest参数版本</p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><br><span class="hljs-keyword">let</span> calculate=&#123;<br>    <span class="hljs-comment">// rest参数版本</span><br>    add_rest(one, ...arg) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`arg是数组吗:<span class="hljs-subst">$&#123;arg <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>&#125;</span>`</span>);<br>        <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 当传入一个参数的时候，直接返回该值</span><br>        <span class="hljs-keyword">if</span> (arg.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&#x27;参数只有一个&#x27;</span>);<br>            <span class="hljs-built_in">console</span>.log(one);<br>            sum = one;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 当参数个数大于一个时，进行求和</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`参数有<span class="hljs-subst">$&#123;arg.length+<span class="hljs-number">1</span>&#125;</span>个`</span>);<br>            sum = one;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> arg) &#123;<br>                <span class="hljs-built_in">console</span>.log(arg[i]);<br>                sum += arg[i];<br>            &#125;;<br>            <span class="hljs-built_in">console</span>.log(sum);<br>        &#125;;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br>calculate.add_rest(<span class="hljs-number">0</span>);<span class="hljs-comment">//0</span><br>calculate.add_rest(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//10</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于js模块化</title>
    <link href="/2019/07/21/JS/js%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <url>/2019/07/21/JS/js%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="前端js模块化规范"><a href="#前端js模块化规范" class="headerlink" title="前端js模块化规范"></a>前端js模块化规范</h1><p>1.CommonJS<br>2.ES6<br>3.AMD的RequireJS<br>4.还有其他的，比如CMD的seajs等</p><a id="more"></a><h1 id="CommonJS-学习更多"><a href="#CommonJS-学习更多" class="headerlink" title="CommonJS  学习更多"></a>CommonJS  <a href="http://javascript.ruanyifeng.com/nodejs/module.html">学习更多</a></h1><p>1.一个文件就是一个模块<br>2.通过requie导入模块<br>3.通过exports和module.exports导出模块<br>4.<strong>主要</strong> 作用在Node(vue-cli脚手架环境里也可以用)<br>5.CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作<br>6.引入时，是整体加载引入的文件模块，生成一个对象,然后从该对象里获取内部属性<br>7.运行时加载</p><p><strong><em>实例：在node环境中编写</em></strong></p><div class="hljs code-wrapper"><pre><code><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// one.js</span><br><span class="hljs-keyword">let</span> sayhi=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是one.js文件的sayhi函数&#x27;</span>);<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    exports.sayhi=sayhi;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">module</span>.exports=&#123;<br>    <span class="hljs-comment">// es6语法 键值一样时，可以只写一个</span><br>    sayhi<br>&#125;;<br><span class="hljs-comment">// main.js</span><br><span class="hljs-comment">/*真实开发时注意导入路径*/</span><br><span class="hljs-keyword">let</span> one=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;one.js&#x27;</span>);<br>one.sayhi();<span class="hljs-comment">//控制台打印 这是one.js文件的sayhi函数</span><br></code></pre></div></td></tr></table></figure></code></pre><h1 id="ES6-学习更多"><a href="#ES6-学习更多" class="headerlink" title="ES6  学习更多"></a>ES6  <a href="http://es6.ruanyifeng.com/#docs/module">学习更多</a></h1><p>1.一个文件就是一个模块<br>2.通过export和export default导出模块</p><div class="hljs code-wrapper"><pre><code>两个的区别：    1.  通过export导出的对象属性方法，在导入时也必须安其导出时的名字进行导入    2.  通过export default 导出的对象属性方法时，        导入可以任意起名，然后通过该名来调用导入文件内部的成员</code></pre></div><p>3.通过import {<strong>*}  from *</strong>导入模块<br>4.编译时加载，ES6模块不时对象，而是通过export指定输出的代码，再通过import输入</p><p><strong><em>实例：在vue-cli脚手架环境中编写</em></strong></p><div class="hljs code-wrapper"><pre><code><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**使用export导出  */</span><br> <span class="hljs-comment">// one.js</span><br> <span class="hljs-keyword">let</span> sayhi=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是one.js文件的sayhi函数&#x27;</span>);<br> &#125;;<br> <span class="hljs-keyword">export</span> &#123;sayhi&#125;;<br> <span class="hljs-comment">// main.js</span><br> <span class="hljs-comment">/*真实开发时注意导入路径*/</span><br> <span class="hljs-keyword">import</span> &#123;sayhi&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;one&#x27;</span>;<br> sayhi();<span class="hljs-comment">//这是one.js文件的sayhi函数</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*使用export default导出  */</span><br><span class="hljs-comment">// one.js</span><br><span class="hljs-keyword">let</span> sayhi=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是one.js文件的sayhi函数&#x27;</span>);<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    sayhi<br>&#125;;<br><span class="hljs-comment">// main.js</span><br><span class="hljs-comment">/*真实开发时注意导入路径*/</span><br><span class="hljs-keyword">import</span> one <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;one&#x27;</span>;<br>one.sayhi();<span class="hljs-comment">//这是one.js文件的sayhi函数</span><br></code></pre></div></td></tr></table></figure></code></pre><h1 id="AMD-的-RequireJS-学习更多"><a href="#AMD-的-RequireJS-学习更多" class="headerlink" title="AMD 的 RequireJS 学习更多"></a>AMD 的 RequireJS <a href="http://javascript.ruanyifeng.com/tool/requirejs.html">学习更多</a></h1><p>1.在es6出来之前，主要使用就是CommonJS和RequireJS<br>2.不同于CommonJS的同步加载，RequireJS是异步加载(所以支持回调函数)<br>3.通过defin定义模块<br>4.通过require加载模块(注意require中的依赖是一个数组，即使只有一个依赖，你也必须使用数组来定义))</p><p><strong><em>实例：引入requirejs后编写</em></strong></p><div class="hljs code-wrapper"><pre><code><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// one.js</span><br>    define(&#123;<br>        sayhi()&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是sayhi&#x27;</span>);<br>        &#125;<br>    &#125;);<br><span class="hljs-comment">// 以上也可以写成</span><br>    define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            sayhi() &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是saihi&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br><span class="hljs-comment">// main.js  注意实际开发时的路径</span><br>&lt;script src=<span class="hljs-string">&quot;https://cdn.bootcss.com/require.js/2.3.6/require.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)</span>&#123;<br>        a.sayhi();<span class="hljs-comment">//这是sayhi</span><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></code></pre><p>5.当定义模块中依赖其他模块时，把导入的模块当作参数传递进去，再使用</p><div class="hljs code-wrapper"><pre><code> <figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// one.js</span><br>    define([<span class="hljs-string">&#x27;./b&#x27;</span>],<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">b</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            sayhi() &#123;<br>                <span class="hljs-comment">// console.log(&#x27;这是saihi&#x27;);</span><br>                b.sayhi();<br>            &#125;<br>        &#125;<br>    &#125;);<br><span class="hljs-comment">// main.js  注意实际开发时的路径</span><br>&lt;script src=<span class="hljs-string">&quot;https://cdn.bootcss.com/require.js/2.3.6/require.js&quot;</span>&gt;&lt;/script&gt;<br> &lt;script&gt;<br>    <span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)</span>&#123;<br>        a.sayhi();<span class="hljs-comment">//这是sayhi</span><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></code></pre>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>熟悉小程序开发目录</title>
    <link href="/2019/07/19/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E7%86%9F%E6%82%89%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9B%AE%E5%BD%95/"/>
    <url>/2019/07/19/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/%E7%86%9F%E6%82%89%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/prism.css"/>><script src="../source/js/prism.js"></script><h1 id="新项目默认目录"><a href="#新项目默认目录" class="headerlink" title="新项目默认目录"></a>新项目默认目录</h1><div class="hljs code-wrapper"><pre><code>/pages--------存放小程序所有界面    -/index---首页        /*            每一个界面都是由以下四个文件组成            1.index.js-----页面交互(web的js文件)            2.index.json---页面配置文件            3.index.wxml---页面结构(web的html文件)            4.index.wxss---页面样式(web的css文件)        */*    -/logs----log信息页/untils    -/until.js---官方默认有格式化时间的代码    /*全局就是对整个程序所有页面作用*/app.js-----------小程序全局js文件app.json---------小程序全局配置文件app.wxss---------小程序全局css文件project.config.json--项目相关信息文件sitemap.json-----小程序内搜索配置相关文件</code></pre></div><a id="more"></a><h1 id="和传统web开发的区别"><a href="#和传统web开发的区别" class="headerlink" title="和传统web开发的区别"></a>和传统web开发的区别</h1><p>1.json文件不再是模拟数据时使用,而是作为配置小程序使用</p><div class="hljs code-wrapper"><pre><code><figure class="highlight javascript"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">&#123;<br>   &lt;!-- 配置该程序有几个页面 --&gt;<br>    <span class="hljs-string">&quot;pages&quot;</span>: [<br>        <span class="hljs-string">&quot;pages/index/index&quot;</span>,<br>        <span class="hljs-string">&quot;pages/logs/logs&quot;</span><br>    ],<br>    &lt;!-- 配置程序页面样式等 --&gt;<br>    <span class="hljs-string">&quot;window&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;backgroundTextStyle&quot;</span>: <span class="hljs-string">&quot;light&quot;</span>,<br>        <span class="hljs-string">&quot;navigationBarBackgroundColor&quot;</span>: <span class="hljs-string">&quot;#fff&quot;</span>,<br>        <span class="hljs-string">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;WeChat&quot;</span>,<br>        <span class="hljs-string">&quot;navigationBarTextStyle&quot;</span>: <span class="hljs-string">&quot;black&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;sitemapLocation&quot;</span>: <span class="hljs-string">&quot;sitemap.json&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure></code></pre><h1 id="语法上和vue的一些使用区别"><a href="#语法上和vue的一些使用区别" class="headerlink" title="语法上和vue的一些使用区别"></a>语法上和vue的一些使用区别</h1><p>1.更改data属性时</p><div class="hljs code-wrapper"><pre><code><figure class="highlight javascript"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-comment">//vue里更改data属性</span><br> data:&#123;<br>     name:<span class="hljs-string">&#x27;test&#x27;</span><br> &#125;,<br> methods:&#123;<br>     update()&#123;<br>         <span class="hljs-built_in">this</span>.data=<span class="hljs-string">&#x27;tes2&#x27;</span>;<br>     &#125;<br> &#125;<br> <span class="hljs-comment">//微信里更改data属性</span><br>data:&#123;<br>     name:<span class="hljs-string">&#x27;test&#x27;</span><br> &#125;,<br> <span class="hljs-comment">// 微信里方法和data并列，不用像vue那样全写在methods对象里</span><br> update()&#123;<br>    <span class="hljs-built_in">this</span>.setData(&#123;<br>        name:<span class="hljs-string">&#x27;test3&#x27;</span><br>    &#125;)<br> &#125;<br></code></pre></div></td></tr></table></figure></code></pre><p>2.点击事件传值</p><div class="hljs code-wrapper"><pre><code><figure class="highlight javascript"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//vue 绑定一个事件是 v-on:(js原生事件名)click=&#x27;方法名&#x27;</span><br><span class="hljs-comment">// 传递参数向普通js一样传递即可</span><br>&lt;div @click=<span class="hljs-string">&#x27;hint(&quot;hi&quot;)&#x27;</span>&gt; &lt;/div&gt;<br><br>methods:&#123;<br>    hint(str)&#123;<br>        <span class="hljs-built_in">console</span>.log(str);<span class="hljs-comment">//hi</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 微信通过bindTap绑定点击事件 其他事件查看文档 </span><br>&lt;view data-hintstr=<span class="hljs-string">&#x27;hi&#x27;</span> bindTap=<span class="hljs-string">&#x27;hint&#x27;</span>&gt;&lt;/view&gt;<br>hint(e)&#123;<br>    <span class="hljs-built_in">console</span>.log(e.currentTarget.dataset.hintstr);<span class="hljs-comment">//hi</span><br>&#125;<br></code></pre></div></td></tr></table></figure></code></pre><p>3.微信里的页面标签<br>    view==div<br>    text==p<br>    block用wx:for时使用<br>    wxss和js都是和传统web一致</p><p>4.小程序官方封装好了ajax的请求，类似axios那样的</p><p>5。。。继续摸索中。。。</p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于js深拷贝</title>
    <link href="/2019/07/07/JS/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <url>/2019/07/07/JS/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h1><p>面试复习，复习到了深拷贝，记录一下</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="基本数据类型-amp-复杂数据类型-引用数据类型"><a href="#基本数据类型-amp-复杂数据类型-引用数据类型" class="headerlink" title="基本数据类型&amp;复杂数据类型(引用数据类型)"></a>基本数据类型&amp;复杂数据类型(引用数据类型)</h2><blockquote><p>概念</p></blockquote><ul><li>在js种，有2中数据类型：一类是基本数据类型，一类是复杂数据类型；</li><li>基本数据类型有:null,undefined,number,string,boolean,symbol(ES6)</li><li>复杂数据类型:Object/arrary等<blockquote><p>区别</p></blockquote></li><li>两者的区别就是在内存中的存储位置不同</li><li>前者在栈中存储数据</li><li>后者在堆中存储数据，而栈中存储的是数据在堆中存储的位置(引用)<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2>作用与复制复杂数据类型时，因为栈中只保存了数据的地址，所以如果只是简单赋值一样的复制，就会出现如下情况(浅拷贝)<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> one=&#123;<br>    one:<span class="hljs-string">&quot;this is one&quot;</span><br>&#125;<br><span class="hljs-keyword">let</span> two=one<br><span class="hljs-built_in">console</span>.log(two)  <span class="hljs-comment">// &#123;one:&quot;this is one&quot;&#125;</span><br>one.one=<span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.log(two)  <span class="hljs-comment">// &#123;one:1&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="深拷贝实现"><a href="#深拷贝实现" class="headerlink" title="深拷贝实现"></a>深拷贝实现</h2><blockquote><p>思路</p></blockquote></li><li>判断要复制的目标的数据类型</li><li>1.简单数据类型，直接复制</li><li>2.复杂数据类型(对象/数组)，遍历内部每一项</li><li>3.在遍历复杂数据类型内部属性时，会出现情况上面2中情况，再次调用该函数就好(递归)<figure class="highlight js"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> deepCopy = <span class="hljs-function">(<span class="hljs-params">copyTarget</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-literal">null</span><br>    <span class="hljs-comment">// 返回和复制对象一致的类型</span><br>    <span class="hljs-keyword">if</span> (copyTarget <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>) &#123;<br>        res = []<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res = &#123;&#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> copyTarget) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> copyTarget[key] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; copyTarget[key] !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 1.复杂数据类型</span><br>            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&#x27;复杂数据类型&#x27;</span>)<br>            res[key] = deepCopy(copyTarget[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">&#x27;基本数据类型&#x27;</span>);<br>            <span class="hljs-comment">// 2.基本数据类型/和函数</span><br>            res[key] = copyTarget[key]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---队列</title>
    <link href="/2019/07/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B02/"/>
    <url>/2019/07/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%98%9F%E5%88%97.html">这里</a></h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><font size=5>队列是单向操作，而且是先进先出，所以在队尾进行添加元素，队头移除元素。用数组来理解就是，从数组尾部添加，数组头部删除这样才能模拟先进先出。  </font>  <p><img src="/img/queue.png" alt="示例图"></p><a id="more"></a><h5 id="创建一个队列"><a href="#创建一个队列" class="headerlink" title="创建一个队列"></a>创建一个队列</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span>()</span>&#123;<br>    <span class="hljs-comment">/*通过数组来保存队列的元素*/</span><br>    item=[];<br>&#125;;<br></code></pre></div></td></tr></table></figure><h5 id="给队列添加一些方法"><a href="#给队列添加一些方法" class="headerlink" title="给队列添加一些方法"></a>给队列添加一些方法</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span></span>&#123;<br>    item=[];<br>    <span class="hljs-comment">// 给队列队尾添加元素</span><br>    enqueue(val)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item.push(val);<br>    &#125;;<br>    <span class="hljs-comment">// 给队列队头删除元素</span><br>    dequeue(val)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item.shift(val);<br>    &#125;;<br>    <span class="hljs-comment">// 返回队列第一个元素</span><br>    front(val)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item[<span class="hljs-number">0</span>];<br>    &#125;;<br>    <span class="hljs-comment">// 判断队列中是否含有元素</span><br>    isEmpty(val)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item.length;<br>    &#125;;<br>    <span class="hljs-comment">// 判断队列的元素个数</span><br>    size()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item.length;<br>    &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《学习JavaScript数据结构与算法》笔记---栈</title>
    <link href="/2019/07/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/07/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="本文源码-这里"><a href="#本文源码-这里" class="headerlink" title="本文源码 这里"></a>本文源码 <a href="https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%88.html">这里</a></h1><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><font size=5> 栈的特点就是后进先出。栈有栈顶和栈底的概念。用数组举例子，数组第一个位置这边就是栈底，最后一个元素的位置就是栈顶，新添加的元素保存在栈顶，在js中基本数据类就是存储在栈中。数组模拟就是给数组尾部添加元素，移除元素也是从数组尾部移除。</font><p><img src="/img/stack.png" alt="示例图"></p><a id="more"></a><h5 id="创建一个栈"><a href="#创建一个栈" class="headerlink" title="创建一个栈"></a>创建一个栈</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Stack</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">/*通过数组来保存栈的元素*/</span><br>    <span class="hljs-keyword">let</span> item=[];<br>&#125;;<br></code></pre></div></td></tr></table></figure><h5 id="给栈添加一些方法"><a href="#给栈添加一些方法" class="headerlink" title="给栈添加一些方法"></a>给栈添加一些方法</h5><ol><li>push 添加一个或几个元素到栈顶</li><li>pop移除并返回栈顶的元素</li><li>isEmpty 判断栈是不是空的</li><li>clear 清空栈内的元素</li><li>size返回栈内元素个数</li><li>peek返回栈顶的元素</li></ol><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Stack</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 通过数组保存栈的元素</span><br>    <span class="hljs-keyword">let</span> item = [];<br>    <span class="hljs-built_in">this</span>.push = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> item.push(val);<br>    &#125;;<br>    <span class="hljs-built_in">this</span>.pop = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> item.pop(val);<br>    &#125;;<br>    <span class="hljs-built_in">this</span>.isEmpty = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> item.length == <span class="hljs-number">0</span>;<br>    &#125;;<br>    <span class="hljs-built_in">this</span>.clear = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        item = [];<br>    &#125;;<br>    <span class="hljs-built_in">this</span>.size = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> item.length;<br>    &#125;;<br>    <span class="hljs-built_in">this</span>.peek = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> item[item.length - <span class="hljs-number">1</span>];<br>    &#125;;<br>    <span class="hljs-built_in">this</span>.print = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=item.length<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-built_in">console</span>.log(item[i]);<br>        &#125;;<br>    &#125;;<br>&#125;;<br><br></code></pre></div></td></tr></table></figure><p><strong><em>ES6版本</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> </span>&#123;<br>    item = [];<br>    <span class="hljs-keyword">constructor</span>() &#123;&#125;;<br>    push(val) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item.push(val);<br>    &#125;;<br>    print() &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-built_in">this</span>.item.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.item[i]);<br>        &#125;;<br>    &#125;;<br>    pop(val) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item.pop(val);<br>    &#125;;<br>    isEmpty(val) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item.length == <span class="hljs-number">0</span>;<br>    &#125;;<br>    clear() &#123;<br>        <span class="hljs-built_in">this</span>.item = [];<br>    &#125;;<br>    size() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item.length;<br>    &#125;;<br>    peek() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.item[<span class="hljs-built_in">this</span>.item.length - <span class="hljs-number">1</span>];<br>    &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h2 id="demo-做一个10进制和其他进制的转换"><a href="#demo-做一个10进制和其他进制的转换" class="headerlink" title="demo 做一个10进制和其他进制的转换"></a>demo 做一个10进制和其他进制的转换</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*有两个参数 第一个参数要转换的数字 第二个参数是要转换成的进制*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">conversion</span>(<span class="hljs-params">num, type</span>) </span>&#123;<br>    <span class="hljs-keyword">while</span> (num / type) &#123;<br>        stack.push(num % type);<br>        <span class="hljs-comment">// 确保每次计算后都是整数</span><br>        num = <span class="hljs-built_in">parseInt</span>(num / type);<br>    &#125;;<br>    stack.print();<br>    <span class="hljs-comment">// 处理完成后对栈进行清除</span><br>    stack.clear();<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo常用配置和命令</title>
    <link href="/2019/07/01/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/hexo%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/07/01/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/hexo%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>内容转载自(<a href="https://chars.tech/blog/build-blog-by-hexo/">https://chars.tech/blog/build-blog-by-hexo/</a>)</p><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">常用命令：<br>hexo help #查看帮助<br>hexo init #初始化一个目录<br>hexo new <span class="hljs-string">&quot;postName&quot;</span> #新建文章<br>hexo new<span class="hljs-built_in"> page </span><span class="hljs-string">&quot;pageName&quot;</span> #新建页面<br>hexo generate #生成网页，可以在 public 目录查看整个网站的文件<br>hexo<span class="hljs-built_in"> server </span>#本地预览，<span class="hljs-string">&#x27;Ctrl+C&#x27;</span>关闭<br>hexo deploy #部署.deploy目录<br>hexo clean #清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹<br><br>简写：<br>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br></code></pre></div></td></tr></table></figure><h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><figure class="highlight yaml"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><br><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment">## Docs: http://hexo.io/docs/configuration.html</span><br><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><br><span class="hljs-comment"># Site #站点信息</span><br><span class="hljs-attr">title:</span>  <span class="hljs-comment">#标题</span><br><span class="hljs-attr">subtitle:</span>  <span class="hljs-comment">#副标题</span><br><span class="hljs-attr">description:</span>  <span class="hljs-comment">#站点描述，给搜索引擎看的</span><br><span class="hljs-attr">author:</span>  <span class="hljs-comment">#作者</span><br><span class="hljs-attr">email:</span>  <span class="hljs-comment">#电子邮箱</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment">#语言</span><br><span class="hljs-comment"># URL #链接格式</span><br><span class="hljs-attr">url:</span>  <span class="hljs-comment">#网址</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/</span> <span class="hljs-comment">#根目录</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span> <span class="hljs-comment">#文章的链接格式</span><br><span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span> <span class="hljs-comment">#标签目录</span><br><span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span> <span class="hljs-comment">#存档目录</span><br><span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span> <span class="hljs-comment">#分类目录</span><br><span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-comment"># Directory #目录</span><br><span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span> <span class="hljs-comment">#源文件目录</span><br><span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span> <span class="hljs-comment">#生成的网页文件目录</span><br><span class="hljs-comment"># Writing #写作</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment">#新文章标题</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span> <span class="hljs-comment">#默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</span><br><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#标题转换成大写</span><br><span class="hljs-attr">external_link:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#在新选项卡中打开连接</span><br><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">highlight:</span> <span class="hljs-comment">#语法高亮</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否启用</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#显示行号</span><br>  <span class="hljs-attr">tab_replace:</span><br><span class="hljs-comment"># Category &amp; Tag #分类和标签</span><br><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span> <span class="hljs-comment">#默认分类</span><br><span class="hljs-attr">category_map:</span><br><span class="hljs-attr">tag_map:</span><br><span class="hljs-comment"># Archives</span><br><span class="hljs-attr">2:</span> <span class="hljs-string">开启分页</span><br><span class="hljs-attr">1:</span> <span class="hljs-string">禁用分页</span><br><span class="hljs-attr">0:</span> <span class="hljs-string">全部禁用</span><br><span class="hljs-attr">archive:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">category:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">tag:</span> <span class="hljs-number">2</span><br><span class="hljs-comment"># Server #本地服务器</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">4000</span> <span class="hljs-comment">#端口号</span><br><span class="hljs-attr">server_ip:</span> <span class="hljs-string">localhost</span> <span class="hljs-comment">#IP 地址</span><br><span class="hljs-attr">logger:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">logger_format:</span> <span class="hljs-string">dev</span><br><span class="hljs-comment"># Date / Time format #日期时间格式</span><br><span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span> <span class="hljs-comment">#参考http://momentjs.com/docs/#/displaying/format/</span><br><span class="hljs-attr">time_format:</span> <span class="hljs-string">H:mm:ss</span><br><span class="hljs-comment"># Pagination #分页</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#每页文章数，设置成 0 禁用分页</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span><br><span class="hljs-comment"># Disqus #Disqus评论，替换为多说</span><br><span class="hljs-attr">disqus_shortname:</span><br><span class="hljs-comment"># Extensions #拓展插件</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape-plus</span> <span class="hljs-comment">#主题</span><br><span class="hljs-attr">exclude_generator:</span><br><span class="hljs-attr">plugins:</span> <span class="hljs-comment">#插件，例如生成 RSS 和站点地图的</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo-generator-feed</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo-generator-sitemap</span><br><span class="hljs-comment"># Deployment #部署，将 lmintlcx 改成用户名</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">github创库地址.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

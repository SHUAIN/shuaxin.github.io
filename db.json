{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/19-11-19.jpg","path":"img/19-11-19.jpg","modified":0,"renderable":0},{"_id":"source/img/4-19.png","path":"img/4-19.png","modified":0,"renderable":0},{"_id":"source/img/Graph.jpg","path":"img/Graph.jpg","modified":0,"renderable":0},{"_id":"source/img/VUEX.png","path":"img/VUEX.png","modified":0,"renderable":0},{"_id":"source/img/anli.png","path":"img/anli.png","modified":0,"renderable":0},{"_id":"source/img/anli2.png","path":"img/anli2.png","modified":0,"renderable":0},{"_id":"source/img/anli3.png","path":"img/anli3.png","modified":0,"renderable":0},{"_id":"source/img/anli4.png","path":"img/anli4.png","modified":0,"renderable":0},{"_id":"source/img/bst.jpg","path":"img/bst.jpg","modified":0,"renderable":0},{"_id":"source/img/cache.png","path":"img/cache.png","modified":0,"renderable":0},{"_id":"source/img/cache1.png","path":"img/cache1.png","modified":0,"renderable":0},{"_id":"source/img/computer.png","path":"img/computer.png","modified":0,"renderable":0},{"_id":"source/img/cros1.png","path":"img/cros1.png","modified":0,"renderable":0},{"_id":"source/img/cros2.png","path":"img/cros2.png","modified":0,"renderable":0},{"_id":"source/img/cros3.png","path":"img/cros3.png","modified":0,"renderable":0},{"_id":"source/img/cros4.png","path":"img/cros4.png","modified":0,"renderable":0},{"_id":"source/img/daili.png","path":"img/daili.png","modified":0,"renderable":0},{"_id":"source/img/domtree.gif","path":"img/domtree.gif","modified":0,"renderable":0},{"_id":"source/img/doubleLinked.png","path":"img/doubleLinked.png","modified":0,"renderable":0},{"_id":"source/img/flip.png","path":"img/flip.png","modified":0,"renderable":0},{"_id":"source/img/github1.png","path":"img/github1.png","modified":0,"renderable":0},{"_id":"source/img/github2.png","path":"img/github2.png","modified":0,"renderable":0},{"_id":"source/img/github3.png","path":"img/github3.png","modified":0,"renderable":0},{"_id":"source/img/github4.png","path":"img/github4.png","modified":0,"renderable":0},{"_id":"source/img/github5.png","path":"img/github5.png","modified":0,"renderable":0},{"_id":"source/img/github6.png","path":"img/github6.png","modified":0,"renderable":0},{"_id":"source/img/github7.png","path":"img/github7.png","modified":0,"renderable":0},{"_id":"source/img/github8.png","path":"img/github8.png","modified":0,"renderable":0},{"_id":"source/img/graph2.png","path":"img/graph2.png","modified":0,"renderable":0},{"_id":"source/img/graph3.png","path":"img/graph3.png","modified":0,"renderable":0},{"_id":"source/img/graph4.png","path":"img/graph4.png","modified":0,"renderable":0},{"_id":"source/img/graph5.png","path":"img/graph5.png","modified":0,"renderable":0},{"_id":"source/img/graph6.png","path":"img/graph6.png","modified":0,"renderable":0},{"_id":"source/img/hash.jpg","path":"img/hash.jpg","modified":0,"renderable":0},{"_id":"source/img/header.png","path":"img/header.png","modified":0,"renderable":0},{"_id":"source/img/insert0.png","path":"img/insert0.png","modified":0,"renderable":0},{"_id":"source/img/insert1.png","path":"img/insert1.png","modified":0,"renderable":0},{"_id":"source/img/juejin.png","path":"img/juejin.png","modified":0,"renderable":0},{"_id":"source/img/kuayu.png","path":"img/kuayu.png","modified":0,"renderable":0},{"_id":"source/img/left.png","path":"img/left.png","modified":0,"renderable":0},{"_id":"source/img/linked.jpg","path":"img/linked.jpg","modified":0,"renderable":0},{"_id":"source/img/liuyan2.png","path":"img/liuyan2.png","modified":0,"renderable":0},{"_id":"source/img/liuyan.png","path":"img/liuyan.png","modified":0,"renderable":0},{"_id":"source/img/liuyan3.png","path":"img/liuyan3.png","modified":0,"renderable":0},{"_id":"source/img/mongodb.png","path":"img/mongodb.png","modified":0,"renderable":0},{"_id":"source/img/notbts.jpg","path":"img/notbts.jpg","modified":0,"renderable":0},{"_id":"source/img/prototype1.png","path":"img/prototype1.png","modified":0,"renderable":0},{"_id":"source/img/prototype2.png","path":"img/prototype2.png","modified":0,"renderable":0},{"_id":"source/img/prototype3.png","path":"img/prototype3.png","modified":0,"renderable":0},{"_id":"source/img/queue.png","path":"img/queue.png","modified":0,"renderable":0},{"_id":"source/img/rbt.jpg","path":"img/rbt.jpg","modified":0,"renderable":0},{"_id":"source/img/react.jfif","path":"img/react.jfif","modified":0,"renderable":0},{"_id":"source/img/right.png","path":"img/right.png","modified":0,"renderable":0},{"_id":"source/img/scrollTop.png","path":"img/scrollTop.png","modified":0,"renderable":0},{"_id":"source/img/stack.png","path":"img/stack.png","modified":0,"renderable":0},{"_id":"source/img/tongyuan.png","path":"img/tongyuan.png","modified":0,"renderable":0},{"_id":"source/img/tree.jpg","path":"img/tree.jpg","modified":0,"renderable":0},{"_id":"source/img/treedemo.jpg","path":"img/treedemo.jpg","modified":0,"renderable":0},{"_id":"source/img/url.png","path":"img/url.png","modified":0,"renderable":0},{"_id":"source/img/url2.png","path":"img/url2.png","modified":0,"renderable":0},{"_id":"source/img/url3","path":"img/url3","modified":0,"renderable":0},{"_id":"source/img/url4.jfif","path":"img/url4.jfif","modified":0,"renderable":0},{"_id":"source/img/url5.png","path":"img/url5.png","modified":0,"renderable":0},{"_id":"source/img/url6.png","path":"img/url6.png","modified":0,"renderable":0},{"_id":"source/img/vue.jfif","path":"img/vue.jfif","modified":0,"renderable":0},{"_id":"source/img/vuex1.png","path":"img/vuex1.png","modified":0,"renderable":0},{"_id":"source/img/vuex2.png","path":"img/vuex2.png","modified":0,"renderable":0},{"_id":"source/img/vuex3.png","path":"img/vuex3.png","modified":0,"renderable":0},{"_id":"source/img/caikeng/one.png","path":"img/caikeng/one.png","modified":0,"renderable":0},{"_id":"source/img/caikeng/three.png","path":"img/caikeng/three.png","modified":0,"renderable":0},{"_id":"source/img/caikeng/two.png","path":"img/caikeng/two.png","modified":0,"renderable":0},{"_id":"source/img/git/git.png","path":"img/git/git.png","modified":0,"renderable":0},{"_id":"source/img/git/git10.png","path":"img/git/git10.png","modified":0,"renderable":0},{"_id":"source/img/git/git11.png","path":"img/git/git11.png","modified":0,"renderable":0},{"_id":"source/img/git/git12.png","path":"img/git/git12.png","modified":0,"renderable":0},{"_id":"source/img/git/git13.png","path":"img/git/git13.png","modified":0,"renderable":0},{"_id":"source/img/git/git14.png","path":"img/git/git14.png","modified":0,"renderable":0},{"_id":"source/img/git/git15.png","path":"img/git/git15.png","modified":0,"renderable":0},{"_id":"source/img/git/git16.png","path":"img/git/git16.png","modified":0,"renderable":0},{"_id":"source/img/git/git17.png","path":"img/git/git17.png","modified":0,"renderable":0},{"_id":"source/img/git/git2.png","path":"img/git/git2.png","modified":0,"renderable":0},{"_id":"source/img/git/git3.png","path":"img/git/git3.png","modified":0,"renderable":0},{"_id":"source/img/git/git4.png","path":"img/git/git4.png","modified":0,"renderable":0},{"_id":"source/img/git/git5.png","path":"img/git/git5.png","modified":0,"renderable":0},{"_id":"source/img/git/git6.png","path":"img/git/git6.png","modified":0,"renderable":0},{"_id":"source/img/git/git7.png","path":"img/git/git7.png","modified":0,"renderable":0},{"_id":"source/img/git/git8.png","path":"img/git/git8.png","modified":0,"renderable":0},{"_id":"source/img/git/git9.png","path":"img/git/git9.png","modified":0,"renderable":0},{"_id":"source/img/jottings/cards.JPG","path":"img/jottings/cards.JPG","modified":0,"renderable":0},{"_id":"source/img/jottings/games.png","path":"img/jottings/games.png","modified":0,"renderable":0},{"_id":"source/img/jottings/gitbash.png","path":"img/jottings/gitbash.png","modified":0,"renderable":0},{"_id":"source/img/jottings/outfit1.JPG","path":"img/jottings/outfit1.JPG","modified":0,"renderable":0},{"_id":"source/img/jottings/outfit2.JPG","path":"img/jottings/outfit2.JPG","modified":0,"renderable":0},{"_id":"source/img/jottings/switch.png","path":"img/jottings/switch.png","modified":0,"renderable":0},{"_id":"source/img/jottings/theme.png","path":"img/jottings/theme.png","modified":0,"renderable":0},{"_id":"source/img/jottings/travis.png","path":"img/jottings/travis.png","modified":0,"renderable":0},{"_id":"source/img/jottings/two.JPG","path":"img/jottings/two.JPG","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"9f250363da8bfbbc22380424c01572fd246dbc52","modified":1639227687037},{"_id":"source/categories/index.md","hash":"1601d845e693898c37e868fe5bd1b40594e73bb2","modified":1639227687037},{"_id":"source/sitemap/index.md","hash":"e19b92d6d9e8201b2f4db1956ec5b64bc71c7184","modified":1639227687089},{"_id":"source/next_about/index.md","hash":"2cd098580c0c13a9b5d8385c1a451d326d94ecea","modified":1639227687088},{"_id":"source/img/4-19.png","hash":"a1b2b466bdcf9b768b89dceaa5b530547ac5fd02","modified":1639227687039},{"_id":"source/img/bst.jpg","hash":"960a66b9098f0eaadd07417b317a9952fe79411f","modified":1639227687046},{"_id":"source/img/cache.png","hash":"50ead9a74799326f0ae27fab90538c548fb4c64c","modified":1639227687046},{"_id":"source/img/cache1.png","hash":"49a2c48a5bc85cfea8eb23a9ac51e04784e07982","modified":1639227687046},{"_id":"source/img/cros2.png","hash":"936e6bec39d9b7d3903dd1fa605cb38563c2a997","modified":1639227687047},{"_id":"source/img/computer.png","hash":"b1fdbefe71f4e715ec54d8e2c2f1d3ee52bfa212","modified":1639227687047},{"_id":"source/img/cros1.png","hash":"6c2b2c8539d2ac0cd13aec088918974f82fbdd43","modified":1639227687047},{"_id":"source/img/cros3.png","hash":"140f8ad3deec6c0a2b159e042ba9f821ede2cd1f","modified":1639227687047},{"_id":"source/img/cros4.png","hash":"26030f59b26347dc6530399885615b4ffa59ffb7","modified":1639227687047},{"_id":"source/img/domtree.gif","hash":"164dd2e4fe565e9ea4dccc436d9d0f9484d807f3","modified":1639227687048},{"_id":"source/img/github1.png","hash":"80876a85ec105060d64b62d99703305026509342","modified":1639227687050},{"_id":"source/img/flip.png","hash":"b032dc3e07c8ea24f6707dfcae0d5fed150794bd","modified":1639227687048},{"_id":"source/img/github2.png","hash":"6cb1c10a8b2e1067a09cbe20eaccbf0c663177c9","modified":1639227687050},{"_id":"source/img/github3.png","hash":"3adb6f33ae58e75ad2fe31633a7d7ad292cc4857","modified":1639227687051},{"_id":"source/img/github4.png","hash":"4b6776ff0e940bcf9e4ff3819e48a2eac67505d7","modified":1639227687051},{"_id":"source/img/github5.png","hash":"bddc0911b72fa4a6122b11a510f96e39aad73e44","modified":1639227687051},{"_id":"source/img/github6.png","hash":"3f26efdb86708557659cee0be697c2adf2c2f27f","modified":1639227687051},{"_id":"source/img/graph2.png","hash":"6563f0f1166518c693710ec5160dd3207da3097d","modified":1639227687053},{"_id":"source/img/header.png","hash":"8ccc99a1d0ee273b0265d5617fd08a2ba6af392e","modified":1639227687056},{"_id":"source/img/juejin.png","hash":"f32b13cc15b32af4b114bf062b421084d2d1c64e","modified":1639227687076},{"_id":"source/img/liuyan2.png","hash":"6de6e21a4e95cba3fbd90e512781a3fb63db9771","modified":1639227687077},{"_id":"source/img/linked.jpg","hash":"25303e03a914a5236c235ca8f3bea550b22ad17c","modified":1639227687077},{"_id":"source/img/liuyan.png","hash":"cec7fc8aeb752ff7eaac195e73af17e4edbb8b1f","modified":1639227687077},{"_id":"source/img/liuyan3.png","hash":"b11d1e4bfa4f4ab1cd92ee74bd824622a68a4bd6","modified":1639227687077},{"_id":"source/img/notbts.jpg","hash":"8ed791c9e782db02f133f8cca0e873ff261b6dd9","modified":1639227687078},{"_id":"source/img/prototype1.png","hash":"bacae75a1e1aa35d0985d747471f5b22cf9ccec9","modified":1639227687078},{"_id":"source/img/prototype2.png","hash":"072cf38440fd2b825d01a581033f33adb7a0bc90","modified":1639227687078},{"_id":"source/img/prototype3.png","hash":"a257698b8859de833678d912f2e5870dfdf04972","modified":1639227687078},{"_id":"source/img/scrollTop.png","hash":"b4b06c96469607530b7a59ccbcfad6174f1a5594","modified":1639227687081},{"_id":"source/img/tree.jpg","hash":"fa201225604ccedeb8c6ad7816e42e3cf06ae2a4","modified":1639227687082},{"_id":"source/img/url2.png","hash":"9a9b83de375397ecdc17889e3c1a4774b4ca9ea2","modified":1639227687083},{"_id":"source/img/url4.jfif","hash":"da18aa35e5ec545cf21b6f155a580e0a68967d91","modified":1639227687084},{"_id":"source/img/url6.png","hash":"b579d322371ada287b88d55bf118447db1d3e7d5","modified":1639227687087},{"_id":"source/img/vuex1.png","hash":"73bb62ebc338fcd64ee95bde18684ffe3b3bb379","modified":1639227687088},{"_id":"source/img/vuex2.png","hash":"4fb73c3495849d5ac2ac80546a8431d563a7da45","modified":1639227687088},{"_id":"source/tags/index.md","hash":"1d92c559b24d74f1bf09a6848c2648e07de6c671","modified":1639227687089},{"_id":"source/img/vuex3.png","hash":"7104f2889abb38a3b6396ee68ab451691b28f1bd","modified":1639227687088},{"_id":"source/_posts/JS/js实现计算器.md","hash":"8728456efe7c6e94438e82026624aa18a42cf355","modified":1639227687030},{"_id":"source/_posts/JS/js基础之深拷贝.md","hash":"d0a1ec471c9a379780113edfdf2329f69934c8fd","modified":1639227687030},{"_id":"source/_posts/JS/js模块化.md","hash":"1f2ef00a9fc5c805f4c0078a91178bb51ddd2132","modified":1639227687030},{"_id":"source/_posts/JS/js模拟重载.md","hash":"00efdc601529a25dcaecea7a2d76b77d3a0fbcdd","modified":1639227687030},{"_id":"source/_posts/JS/关于对象.md","hash":"97e6bf8f618b621b659b691ad9c704ecdeb18e9a","modified":1639227687031},{"_id":"source/_posts/JS/关于call-bind-apply.md","hash":"2bf083ce9018d13afa3a1450d2866d8d59295628","modified":1639227687030},{"_id":"source/_posts/JS/关于防抖和节流.md","hash":"649fbbbb1a2996d116e5841a0fec9ac64c56cfd8","modified":1639227687031},{"_id":"source/_posts/JS/懒加载.md","hash":"efe6e8190c9a53a2939dd5722c31a412aa9022c7","modified":1639227687031},{"_id":"source/_posts/css/FLIP做卡片弹窗动画.md","hash":"ec833406857ab92039b6a575114b65d4f0e3e43b","modified":1639227687031},{"_id":"source/_posts/css/动态设置背景图容器大小.md","hash":"3b6f230803529c3bb495b3c8c60deb3b5e1d9006","modified":1639227687031},{"_id":"source/_posts/css/浮动功能栏.md","hash":"811cdddd5803431673ff37e2f2be99f968946ea4","modified":1639227687031},{"_id":"source/_posts/css/网页浏览进度.md","hash":"628a69438f2c08b7d7c1ecd1df656bfcaa94a748","modified":1639227687031},{"_id":"source/_posts/vue/vue-cli3配置.md","hash":"f1ec0ca2a69245f416e70277b8c5d7a48d8b5773","modified":1639227687031},{"_id":"source/_posts/css/网格布局.md","hash":"6031a5e2849fb03e33005ea4ee6c1455aab21df5","modified":1639227687031},{"_id":"source/_posts/vue/vuejs基础复习-3.md","hash":"4f3c7bad27fa31ae059d98b8d7a956a1e9efce23","modified":1639227687032},{"_id":"source/_posts/vue/vuejs基础复习-2.md","hash":"b6afc2ab6adee9d0fcbb1eb25839d2e9a751119e","modified":1639227687032},{"_id":"source/_posts/vue/vuejs基础复习-1.md","hash":"4efe1092609b69f873ad7ad19739ef57fc510557","modified":1639227687031},{"_id":"source/_posts/vue/vuejs基础复习-4.md","hash":"c0850e8d37223cf7263b8011f33848eb671ba27f","modified":1639227687032},{"_id":"source/_posts/vue/vuejs基础复习-5.md","hash":"2f3b630b12ee158056d808078bcd08abc3cba2b9","modified":1639227687032},{"_id":"source/_posts/vue/vue原理学习1.md","hash":"f67c7fc7c175f37013ae06af23e881d7ed623d90","modified":1639227687032},{"_id":"source/_posts/vue/父子组件生命周期函数.md","hash":"bf3c0243a61a667502fe2796135fec45c619cedc","modified":1639227687032},{"_id":"source/_posts/技术笔记/MongoDB入门学习笔记.md","hash":"fdecb698bf1d7969827ed9d9d8b418e77820b205","modified":1639227687032},{"_id":"source/_posts/技术笔记/antd-menu组件.md","hash":"1ad4273e2c6a094f8f7d06fa511889f36dcddba4","modified":1639227687032},{"_id":"source/_posts/日常/ios-date构造函数.md","hash":"d8d26a306548a38caa979be19d627b6581a3b1ac","modified":1639227687035},{"_id":"source/_posts/日常/在react中获取Dom.md","hash":"1cd0b4f775a7ff81d3f0351551b6b39212031ff9","modified":1639227687035},{"_id":"source/_posts/技术笔记/demo-cli.md","hash":"a3a040a745daf12225d491dc8d4e40bdb83d3815","modified":1639227687032},{"_id":"source/_posts/技术笔记/antd表格组件扩展行.md","hash":"ccee6f814397a91606f93a2d671cd503f6edb9ca","modified":1639227687032},{"_id":"source/_posts/技术笔记/git笔记.md","hash":"4f4225f8d650c87c1d475bf8a7c85bd3fed4edcc","modified":1639227687033},{"_id":"source/_posts/技术笔记/hexo常用配置和命令.md","hash":"32b52746301aa5ee6301577675869b2659d38df0","modified":1639227687033},{"_id":"source/_posts/技术笔记/git笔记2.md","hash":"6a2273003d7da1ea1a47ab1731f544fc698a7236","modified":1639227687033},{"_id":"source/_posts/技术笔记/mongoose使用.md","hash":"1e946e62686aadd4f1e5fb4fbc489e56b4223ed3","modified":1639227687033},{"_id":"source/_posts/技术笔记/nginx代理.md","hash":"82f67bcea23b626660a93f1e9f290f7c854c6ab4","modified":1639227687033},{"_id":"source/_posts/技术笔记/iterm2-配置.md","hash":"0449eb4ad3f34d1f7f23edb48a04997433e100be","modified":1639227687033},{"_id":"source/_posts/技术笔记/textarea中复制光标所在行文本.md","hash":"02818231698a987ca4c3d0a6eac881bc2fc0614b","modified":1639227687033},{"_id":"source/_posts/技术笔记/textarea标签tab键无效.md","hash":"68d21f570b777cd0e0687a8f4b52d017559ae68a","modified":1639227687033},{"_id":"source/_posts/技术笔记/从输入url到页面展示发生了什么.md","hash":"458394afaf668669b8adfa61489b2734eb64fe35","modified":1639227687033},{"_id":"source/_posts/技术笔记/优雅的扩展React官方cli配置.md","hash":"deffba67d3b4cafda2abb5e12796f3fbb5a3f784","modified":1639227687033},{"_id":"source/_posts/技术笔记/像Vue一样使用react路由.md","hash":"c9b2f6e0b7662f2638be9be2316cfb7ce65d8b0b","modified":1639227687033},{"_id":"source/_posts/技术笔记/关于hexo打包路径问题.md","hash":"d2a23af333d3c05538aa7ef420660c4cd8bce7ed","modified":1639227687034},{"_id":"source/_posts/技术笔记/关于前端下载.md","hash":"a8a73f87838f555c4f0ce128763864973e7b300d","modified":1639227687034},{"_id":"source/_posts/技术笔记/关于meta.md","hash":"a73b983dd4fbf0361cdfc9ee4087d77932448e64","modified":1639227687034},{"_id":"source/_posts/技术笔记/关于浏览器存储.md","hash":"b74b0232ff35bc7329b4c7a636185111b8194d98","modified":1639227687034},{"_id":"source/_posts/技术笔记/关于浏览器缓存.md","hash":"36baf73bf0e426561f934a52e088f8659007ca1b","modified":1639227687034},{"_id":"source/_posts/技术笔记/关于跨域.md","hash":"bfd539ea3c7600062b4c19dbb93869cb7a3768cc","modified":1639227687034},{"_id":"source/_posts/技术笔记/关于预请求.md","hash":"2e5794228933338d6191942473aecbd5d52f15e6","modified":1639227687034},{"_id":"source/_posts/技术笔记/初探Travis.md","hash":"3178d14a2d1c63c0bc9852670779c5817da7b816","modified":1639227687034},{"_id":"source/_posts/技术笔记/初探nginx.md","hash":"201991f308c8b2283b112ab6a95ae9e41726507e","modified":1639227687035},{"_id":"source/_posts/技术笔记/搭建图床服务器.md","hash":"270bec3265f361029f698faf7c106fa180228ace","modified":1639227687035},{"_id":"source/_posts/技术笔记/可视化图表踩坑记录.md","hash":"a7b1042d226514c6bd2794fc239b3246d9a027cf","modified":1639227687035},{"_id":"source/_posts/技术笔记/时间分片.md","hash":"79e2eeec4c5eed3d33b375a1889f0c594b411269","modified":1639227687035},{"_id":"source/_posts/技术笔记/正则表达式.md","hash":"292c85669bfa73e4e731b2d0713e50597d72e493","modified":1639227687035},{"_id":"source/_posts/技术笔记/熟悉小程序开发目录.md","hash":"1dcbd468ad9aacba4a82a923119f407ed8bef0e5","modified":1639227687035},{"_id":"source/_posts/技术笔记/记一次跨平台开发.md","hash":"44e1667446d698645f3e888d40ab2727c6043334","modified":1639227687035},{"_id":"source/_posts/技术笔记/评论系统.md","hash":"2afb1f5b07fde44bc88dd379c67f3337a0233998","modified":1639227687035},{"_id":"source/_posts/技术笔记/高效利用GITHUB.md","hash":"c141a181ad5708d3004632c02f08445ae6a3c608","modified":1639227687035},{"_id":"source/_posts/读书笔记/工作漂流.md","hash":"8efbd0c89a4737750e561d0b2877e46e255f135f","modified":1639227687037},{"_id":"source/_posts/计算机基础/http协议学习笔记.md","hash":"d7067050b8857deeff572b79a6bb5eddf4a1b86c","modified":1639227687036},{"_id":"source/_posts/计算机基础/js数据结构笔记10.md","hash":"4ac6481ccf5b6076cf30305ef1fd3e25f186734a","modified":1639227687036},{"_id":"source/_posts/计算机基础/js数据结构笔记2.md","hash":"d055491d8d71f9a6b4d207aa2b444a8b8a35df8a","modified":1639227687036},{"_id":"source/_posts/计算机基础/js数据结构笔记3.md","hash":"538430048fddd2a35b641b7f0a3054a023b660f7","modified":1639227687036},{"_id":"source/_posts/计算机基础/js数据结构笔记.md","hash":"aae5ef33d41d135e67862a536a4b42a6ceffb2de","modified":1639227687036},{"_id":"source/_posts/计算机基础/js数据结构笔记5.md","hash":"390b4ce9f7f64e5be2b5584c873265e63b37dbcb","modified":1639227687036},{"_id":"source/_posts/计算机基础/js数据结构笔记6.md","hash":"9a91595a9b50e5af722849e96ab84937c6b19c71","modified":1639227687036},{"_id":"source/_posts/技术笔记/关于JWT认证.md","hash":"cf34c02ded5058cded4a7fc239f3fdc76fce2e00","modified":1639227687034},{"_id":"source/_posts/计算机基础/js数据结构笔记9.md","hash":"9c07479a8655cf25e7d163fabd59f42827f4abf1","modified":1639227687036},{"_id":"source/_posts/计算机基础/js数据结构笔记4.md","hash":"aba12268a8539d4b536dbad9914b36e7f9c3874f","modified":1639227687036},{"_id":"source/_posts/计算机基础/js数据结构笔记7.md","hash":"b3f997bb772bcb703585ba83a8356a7a8b714a42","modified":1639227687036},{"_id":"source/_posts/随笔/2020总结.md","hash":"6149e74ba9e7cd673a79f46521d7ab41d0990810","modified":1639227687037},{"_id":"source/_posts/随笔/关于毕业生图像采集.md","hash":"80c2a7eb19c2ffe473f8d06b38bc36f1448532c5","modified":1639227687037},{"_id":"source/_posts/随笔/关于面试.md","hash":"57f7e3cfbbd20a913eddb2ea7a7964485f17bfba","modified":1639227687037},{"_id":"source/_posts/随笔/北京游玩指南.md","hash":"47589c7a4f2a3559f8b1e74c4d3e64d62fbcebe7","modified":1639227687037},{"_id":"source/_posts/随笔/软件著作权申请.md","hash":"7abef67a5b5aae80832a93a426b1b74080ddd763","modified":1639227687037},{"_id":"source/_posts/随笔/塞尔达通关.md","hash":"c56277ef2ee1785ec4d3622fdb997e33aacf7b34","modified":1639227687037},{"_id":"source/_posts/随笔/资源推荐.md","hash":"7a792e12579ebdcfd5d52e164dc832171421abcd","modified":1639227687037},{"_id":"source/_posts/计算机基础/js数据结构笔记8.md","hash":"cc2c7130051a18259690325e161a7449eeb74dc9","modified":1639227687036},{"_id":"source/_posts/随笔/近期总结.md","hash":"6a47cd8a417be6edd3a0289d881f5b40e253b0d7","modified":1639227687037},{"_id":"source/img/caikeng/one.png","hash":"fc677cce5382d7ff5a56ef9a2863f144469ded3e","modified":1639227687046},{"_id":"source/img/caikeng/three.png","hash":"025ac481f91d2ee32d029686d873215bf84234c7","modified":1639227687046},{"_id":"source/img/caikeng/two.png","hash":"4128dd1dd18f61f0be8bdefda7ff06c6eb2b4b6a","modified":1639227687047},{"_id":"source/img/git/git.png","hash":"36dd390a7a1465b7b33acd0da03694127eab4c49","modified":1639227687048},{"_id":"source/img/git/git10.png","hash":"e032e5812e127928d49163444e9eaaa2675ba9b4","modified":1639227687048},{"_id":"source/img/git/git11.png","hash":"81065d191618dd1e86a8647bee6c45bca5e5ac0a","modified":1639227687048},{"_id":"source/img/git/git13.png","hash":"89915ae15e52ae917841bc44fa91b793b9368722","modified":1639227687049},{"_id":"source/img/git/git12.png","hash":"38d63a9fc0aceb04e95e3ee95401c5bb8ff9e6ff","modified":1639227687049},{"_id":"source/img/git/git14.png","hash":"29382ab0eaef3a1089dd90d04f2a8f029021925b","modified":1639227687049},{"_id":"source/img/git/git15.png","hash":"3fc1625727f818921e3cd78758efa71e39ffe222","modified":1639227687049},{"_id":"source/img/git/git2.png","hash":"01fce5979bd6c26a766d9dbc1e6546d171e1225d","modified":1639227687049},{"_id":"source/img/git/git16.png","hash":"84cde608b7e0debc7b79d71a28e5ff8dc99b9101","modified":1639227687049},{"_id":"source/img/git/git3.png","hash":"9f18e14543ba76143aa5b99e42e99a752b2b5f83","modified":1639227687049},{"_id":"source/img/git/git6.png","hash":"9aa5997f5c8763c1c10e112adcfeae022a506b2f","modified":1639227687050},{"_id":"source/img/git/git17.png","hash":"1a7ea030cd7116e47173a0cf9b671a2099563e04","modified":1639227687049},{"_id":"source/img/git/git5.png","hash":"cd510183a9a27a3b2199280ffe7f7c12ac49d6ce","modified":1639227687050},{"_id":"source/img/git/git4.png","hash":"0aaa1d5276550419d3bfd1934d2f00fa4a14bb93","modified":1639227687050},{"_id":"source/img/git/git8.png","hash":"8e689bf6cf63951036b6b02f5d01716d626290f3","modified":1639227687050},{"_id":"source/img/git/git9.png","hash":"373f3df0363045b38717aef626ebcee1e9d62765","modified":1639227687050},{"_id":"source/img/git/git7.png","hash":"2e616b3a0a7ee52b1c9f8878693b0a4da7074ffb","modified":1639227687050},{"_id":"source/img/jottings/gitbash.png","hash":"1af1904218cd5c96507621d82da3ded62c1c49d3","modified":1639227687063},{"_id":"source/img/jottings/travis.png","hash":"26de73bfbe91a732cee2825ab76efe1645434846","modified":1639227687073},{"_id":"source/img/jottings/theme.png","hash":"4a9ef01b4a1ad4afad078f92bf265475278506b8","modified":1639227687073},{"_id":"source/img/VUEX.png","hash":"297c3423ba2fe66ac397a67c4547c6aae41788aa","modified":1639227687040},{"_id":"source/img/daili.png","hash":"8e91e8f842d8d0fd89686b86de96c8647a27df08","modified":1639227687048},{"_id":"source/img/github8.png","hash":"9ab3079fa1cca5f70eb5f8494137ccaf5609e156","modified":1639227687052},{"_id":"source/img/github7.png","hash":"1dcac618802987bf8eebfcc1784a57144269beb1","modified":1639227687052},{"_id":"source/img/doubleLinked.png","hash":"8508325e214881612d5035d739c4a2ff1519412d","modified":1639227687048},{"_id":"source/img/graph3.png","hash":"3efea936f579b75b3b95ecd40f584474892acabe","modified":1639227687053},{"_id":"source/img/graph5.png","hash":"f33450e3d59e2ffa35fa902c9e6bae3102669133","modified":1639227687054},{"_id":"source/img/graph4.png","hash":"8a49db6745371fc07fd93dfe22c38944d9412fa9","modified":1639227687054},{"_id":"source/img/kuayu.png","hash":"f74baf6079afd4f7158d71fa3bc3e643403dc6c9","modified":1639227687076},{"_id":"source/img/left.png","hash":"0bf23a4374d0e2e937b4d291d8a47f7699405a10","modified":1639227687077},{"_id":"source/img/mongodb.png","hash":"624e1a13a4a1c74487cbb4b205163eaf34b5f6e9","modified":1639227687078},{"_id":"source/img/react.jfif","hash":"0bdcac0f29983c3feb451205656318f831e82701","modified":1639227687080},{"_id":"source/img/right.png","hash":"6715f8481431433aae16b7a97d31d9d0c0a1373d","modified":1639227687081},{"_id":"source/img/tongyuan.png","hash":"f5ddeddc9802082bed87b36c699f7bd24d466749","modified":1639227687082},{"_id":"source/img/url.png","hash":"fe6de7bf0aa8ab0c1479414b839ca5eccded66a5","modified":1639227687083},{"_id":"source/img/vue.jfif","hash":"fcf4ecf2f1987bb0b4f7231149822be6cacdf5cf","modified":1639227687088},{"_id":"source/img/Graph.jpg","hash":"655836bbdaad871d47474943bbf086035c3c199c","modified":1639227687040},{"_id":"source/img/rbt.jpg","hash":"95b67afb77c20d0083e8bd2b8566d5639528291d","modified":1639227687080},{"_id":"source/img/stack.png","hash":"835e187324403680bdd0a9d2efe5a4b8e7be9160","modified":1639227687081},{"_id":"source/img/url3","hash":"932036de7b83ce5881e06dc870659abe48c2d068","modified":1639227687084},{"_id":"source/img/graph6.png","hash":"763825094d356b564839d721f3f9834d4e7e0482","modified":1639227687055},{"_id":"source/img/hash.jpg","hash":"263a544b30c85516fa79520f51308d9cfb922cf8","modified":1639227687056},{"_id":"source/img/treedemo.jpg","hash":"a97afb76930eab4393c6a5cb6314f6ab0a401dd4","modified":1639227687083},{"_id":"source/img/queue.png","hash":"150dc084e280dd47891904f536f4935eb87be0dc","modified":1639227687079},{"_id":"source/img/anli4.png","hash":"d841efd8d0cb759fe02a85a8717066da6d670dc9","modified":1639227687046},{"_id":"source/img/insert1.png","hash":"d3ab2a5ae2c8e0dd6aa8791e50d7a19bf2cee8da","modified":1639227687058},{"_id":"source/img/insert0.png","hash":"202681bd9b0c4b363116a8ec9e421791a2a427c5","modified":1639227687057},{"_id":"source/img/anli.png","hash":"065a2166137ad6d4b53e66f02738587c3d03d402","modified":1639227687042},{"_id":"source/img/anli2.png","hash":"e5c2f8e81c8aac7b6ed1b2519c9d782e9c50453d","modified":1639227687043},{"_id":"source/img/anli3.png","hash":"a6b2cca39990eecc4a341e943017f735374e0e01","modified":1639227687045},{"_id":"source/img/19-11-19.jpg","hash":"9663ee6832d3955d3b2c1452e67c8f68d887f26f","modified":1639227687039},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1638618131753},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1638618131753},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1639212047617},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1639212047617},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1639212047617},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1639212047619},{"_id":"themes/fluid/.DS_Store","hash":"f32513173e80344df2be43dd0d3d9a94791210c3","modified":1639212114568},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1638618131745},{"_id":"themes/fluid/package.json","hash":"18f04247801549fe78600c1ee9c601fcbea4cab3","modified":1638698755346},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1638618131745},{"_id":"themes/fluid/_config.yml","hash":"02b78531d8ceeee1546ec28907e409d227bf8331","modified":1639209929492},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1638618131745},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"05c5cf17a79a3334680bd3e5290c508d3e1b4d60","modified":1641211234467},{"_id":"themes/fluid/languages/en.yml","hash":"962af74303bfb0c1307b0a4ab190fa4646fb13ad","modified":1641211225438},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1638618131745},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1638618131745},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"42d384c68fcd5963474e2eb69e95e255d9df297b","modified":1641211250503},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1638618131746},{"_id":"themes/fluid/README.md","hash":"bb3afa31d8344d80ade93db2beed8fb6147b6bab","modified":1641210798722},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1638618131748},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1638618131748},{"_id":"themes/fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1638698755346},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1638618131748},{"_id":"themes/fluid/layout/index.ejs","hash":"666476260a2cead2cc2928d51977c4a7ba8de6bb","modified":1638698755346},{"_id":"themes/fluid/layout/articlecount.ejs","hash":"a2223c94a75c2e6f4564c30b335e14163d6baf81","modified":1641212346564},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1638618131748},{"_id":"themes/fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1638698755346},{"_id":"themes/fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1638698755346},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1638618131749},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1638618131749},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1638618131748},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1639212047618},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1639212047618},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1639212047618},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1639212047618},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1639212047618},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1639212047619},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1638698755343},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1638698755344},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1638698755343},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1639212047618},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"68b1067bd9e7ec43f14b7baa2454e898a6e15a5e","modified":1638698755345},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1638698755344},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1638698755345},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1638618131747},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1638698755345},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1638698755345},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1638618131749},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"8e53c5f1d9f0f63ba5f2519161a120a0151d2261","modified":1638698764017},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1638618131750},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1638618131748},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1638618131750},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1638698755346},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1638618131748},{"_id":"themes/fluid/scripts/helpers/count-article.js","hash":"9394b2eca376e6639647159e0a785200ad23d363","modified":1641212357134},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1638698755347},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1638618131750},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1638698755347},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1638618131750},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1638618131750},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1638618131750},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1638618131750},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1638618131751},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1638618131751},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1638698755347},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1638698755347},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1638618131751},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1638698755347},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1638618131748},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1638618131753},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1638618131754},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1638618131751},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1638618131753},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1638618131754},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1638618131754},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1638618131754},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1638618131754},{"_id":"themes/fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1638618131754},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1638618131754},{"_id":"themes/fluid/source/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1638698755349},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1638618131754},{"_id":"themes/fluid/source/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1638698755349},{"_id":"themes/fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1638698755349},{"_id":"themes/fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1638698755349},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1638698755343},{"_id":"themes/fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1638698755350},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1638618131755},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1638698755343},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1638618131746},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1638618131746},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1638618131746},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1638618131746},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1638698755344},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1638698755344},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1638618131746},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1638618131747},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1638698755344},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1638618131747},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"a7ed1d3079c32497c8955ca75f5fb6992e5ffb8b","modified":1638698755345},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1638618131749},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1638618131749},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1638618131749},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1638698755346},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1638618131747},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1638618131749},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1638618131749},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1638618131753},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"63aedd67d90d641cc672540db20ef615f528c9f1","modified":1638698755349},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1638698755347},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"e8e01c5db46b383748855452aecd70fcda99f598","modified":1638698755345},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1638618131751},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1638618131751},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1638618131751},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1638618131753},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1638698755348},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1638698755348},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":1638618131752},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd55a2dce6b9d3e165a0a26d0b5bf7f649006bcd","modified":1638698755348},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1638618131752},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1638618131752},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":1638618131753},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"c66e0da2c0d05e76a686a77ab4e74f0d2e89777d","modified":1638698755348},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1638698755348},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1638618131753},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1638618131752},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1638618131752},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1638618131752},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1638698755348},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1638698755348},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"0bc287c9da8122d91ca83fc3502bea94860dd9ae","modified":1639210364522},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1638618131752},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1638618131752},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1638618131752},{"_id":"source/img/jottings/switch.png","hash":"24d33a4e21b4f9accda13b0469fffee70754b7e6","modified":1639227687073},{"_id":"source/img/jottings/games.png","hash":"6f40c9cd059e6640781bb00720527fb954b9fa1e","modified":1639227687063},{"_id":"themes/fluid/package-lock.json","hash":"960151a89dd3cfc2d878b7d6b5e854a8997bdd28","modified":1638618313945},{"_id":"source/img/jottings/outfit1.JPG","hash":"7bb20edca6718e3a488ec41cb1ac1860a7dceb7a","modified":1639227687067},{"_id":"source/img/jottings/outfit2.JPG","hash":"d40378647cd9857e11aac3ba7ab843a032d18e0d","modified":1639227687071},{"_id":"source/img/jottings/cards.JPG","hash":"6726e5c01da92220b0a0d62cdbba57b73430e302","modified":1639227687061},{"_id":"source/img/url5.png","hash":"00dc9d85b0cc48e9fe7a245b173cabeb72b031a9","modified":1639227687087},{"_id":"source/img/jottings/two.JPG","hash":"52161bfa3f3873a920226572dab5d08fa5dc25a1","modified":1639227687076},{"_id":"source/_posts/技术笔记/tailwindcss-入门.md","hash":"69bc9eff6fbd4bb31e8f126a6861c41a02802170","modified":1639229397565},{"_id":"source/_posts/随笔/澳门玩具踩点-搬.md","hash":"be7f67df416cf2731b001c8fc6669749105432d6","modified":1640952049646},{"_id":"public/local-search.xml","hash":"4179897354363f17d28150eb21b67b517c5fe419","modified":1641213619919},{"_id":"public/about/index.html","hash":"02cb771f922ff8ba969af84efb82e1bd1b0bb628","modified":1640952189468},{"_id":"public/next_about/index.html","hash":"83132440750ed5c983f7fa59028b024853d7ac63","modified":1640952189468},{"_id":"public/tags/index.html","hash":"fd2a73f2f18d57b904c0cf76817f182f5156d1d3","modified":1640952189468},{"_id":"public/archives/index.html","hash":"690ba92d9cb1e9bf58833a947e545d7e41f6cf7c","modified":1641213619919},{"_id":"public/archives/page/3/index.html","hash":"a5c1cfad28bc80aedd25392f4d84cc2cbf3534a4","modified":1641213619919},{"_id":"public/archives/page/4/index.html","hash":"06b834019714d29f68c15c2ba277c6fc63712f6a","modified":1641213619919},{"_id":"public/archives/page/5/index.html","hash":"c282a4d35788038bf2ddc2eb02b27176aa06ae08","modified":1641213619919},{"_id":"public/archives/page/2/index.html","hash":"21ae2232c8b97eebaa0fbbfa898ba4c70dfe5a3d","modified":1641213619919},{"_id":"public/archives/page/8/index.html","hash":"e771208954437f8f1b889bb9053035967384cff8","modified":1641213619919},{"_id":"public/archives/page/7/index.html","hash":"c1754f2d7ee3f940e003bc183bb66093f7701e77","modified":1641213619919},{"_id":"public/archives/page/9/index.html","hash":"dd74623295c86023a7398381a153dad1c7274b03","modified":1641213619919},{"_id":"public/archives/page/10/index.html","hash":"48bb8655f499039cb3a53dd53a0c83e2cf22e9b4","modified":1641213619919},{"_id":"public/archives/page/11/index.html","hash":"5abcb8765dde24c7bda24826512ec52bbd7805b2","modified":1641213619919},{"_id":"public/archives/page/6/index.html","hash":"089ad41cd139bb4c30e107d703af3ecdc9cab86b","modified":1641213619919},{"_id":"public/archives/page/12/index.html","hash":"d81616d8f8796fd8b98b779f1758b93b6b141078","modified":1641213619919},{"_id":"public/archives/page/13/index.html","hash":"ca19df304ee608ea1f72fc7dd8980933990ca0c9","modified":1641213619919},{"_id":"public/archives/page/14/index.html","hash":"d77511f2eab6b28abd7cddde148620e68fba7097","modified":1641213619919},{"_id":"public/archives/page/15/index.html","hash":"985fe2f23452103baa52f210aa2c7469cdf22b38","modified":1641213619919},{"_id":"public/archives/page/16/index.html","hash":"f5a5ced429530e107ccb87b4587289e1210a99c6","modified":1641213619919},{"_id":"public/archives/2019/index.html","hash":"2f02ec2f17604f47daaa2966ce9cce2f30a485e9","modified":1641213619919},{"_id":"public/archives/2019/page/2/index.html","hash":"2fb344c01a859a03de69626fc8dda3ee7422225e","modified":1641213619919},{"_id":"public/archives/2019/page/3/index.html","hash":"c8f566232c4d8f3afe26c3208af1b7ce0b85eae4","modified":1641213619919},{"_id":"public/archives/2019/page/4/index.html","hash":"824c269931d563c9217b5ab5cb2b3cce23b5b553","modified":1641213619919},{"_id":"public/archives/2019/page/5/index.html","hash":"c3c62a01885862f4cb621d376f197619cdd7511d","modified":1641213619919},{"_id":"public/archives/2019/page/6/index.html","hash":"33c2237d9ad1daa42b388e1a24af7cb4bb334970","modified":1641213619919},{"_id":"public/archives/2019/page/7/index.html","hash":"0a24355ae82a9eb5fff04876d98a88a0897128d7","modified":1641213619919},{"_id":"public/archives/2019/page/8/index.html","hash":"e724d641e4596d282435fa20ca0b733664c0158d","modified":1641213619919},{"_id":"public/archives/2019/07/index.html","hash":"e006447e71b0d8b7f2d7c115f0bbb9fe88abf985","modified":1641213619919},{"_id":"public/archives/2019/07/page/2/index.html","hash":"a4cf45ad90430a06df9a00ab47cfb6e89b1232db","modified":1641213619919},{"_id":"public/archives/2019/08/index.html","hash":"c3ab4aed5aec971cde329d4b039e1155d73d27a0","modified":1641213619919},{"_id":"public/archives/2019/09/index.html","hash":"8bb3733c8e2d59111305c54b0fc3852d23f39531","modified":1641213619919},{"_id":"public/archives/2019/09/page/2/index.html","hash":"200751248515103d0565079008af664e93874976","modified":1641213619919},{"_id":"public/archives/2019/10/index.html","hash":"d83784a536a12cd13e278c3f091c295edd475d0d","modified":1641213619919},{"_id":"public/archives/2019/10/page/2/index.html","hash":"808332f32d5bfb41eae5d0d230ed1904746e3f76","modified":1641213619919},{"_id":"public/archives/2019/11/index.html","hash":"bba8573ddcdb0aa5523e71bfa59acf45ba994745","modified":1641213619919},{"_id":"public/archives/2019/11/page/2/index.html","hash":"a3aa3fbc85caff6431c84638bb510e98c6553304","modified":1641213619919},{"_id":"public/archives/2019/11/page/3/index.html","hash":"6daf93d7b7371f8f3732ba980635e272d03d2fef","modified":1641213619919},{"_id":"public/archives/2019/12/index.html","hash":"19ee41ac9b18f7d4c2b676996a8a2f57cc1cdf09","modified":1641213619919},{"_id":"public/archives/2020/index.html","hash":"c5a937606500fc88fa81da9a91e0cfecc20078b5","modified":1641213619919},{"_id":"public/archives/2020/page/2/index.html","hash":"50763dfc2d5054c0bdff1cc580aecd622612bea8","modified":1641213619919},{"_id":"public/archives/2020/page/3/index.html","hash":"bcfd3e3c41a86ee28b7fa110cd031e09b2997106","modified":1641213619919},{"_id":"public/archives/2020/page/5/index.html","hash":"9e5baa049462d815f62c617c5bdf832ceabb93f8","modified":1641213619919},{"_id":"public/archives/2020/page/6/index.html","hash":"c7de682bf45fa55d75a39fe122f590ab9482a597","modified":1641213619919},{"_id":"public/archives/2020/page/7/index.html","hash":"d60c16bbe041f91665046007e1256896657c80b2","modified":1641213619919},{"_id":"public/archives/2020/03/index.html","hash":"7a9c9ad0a064b9dcb22ffda3af1cc22971c0e937","modified":1641213619919},{"_id":"public/archives/2020/04/index.html","hash":"588b948edb072003bcd340788ce685b20e208a3f","modified":1641213619919},{"_id":"public/archives/2020/02/index.html","hash":"1b4a511ab91a983660f28aedbdab6d8fdb61b969","modified":1641213619919},{"_id":"public/archives/2020/05/index.html","hash":"24c1ee60503642adb685e30525bca51b67522b61","modified":1641213619919},{"_id":"public/archives/2020/05/page/2/index.html","hash":"f1c67ee7a6c9d4c88c505f4faf0e62c43d4ae60c","modified":1641213619919},{"_id":"public/archives/2020/06/index.html","hash":"e04b51ef267632cf4c901b129199aeb2a4de0082","modified":1641213619919},{"_id":"public/archives/2020/08/index.html","hash":"8bd8bdf6a43ac501a3f57f5d44d83f85b8bb1072","modified":1641213619919},{"_id":"public/archives/2020/09/index.html","hash":"8f4b4c6c7c4397c69ba598c6907cafc7a8ffd368","modified":1641213619919},{"_id":"public/archives/2020/page/4/index.html","hash":"bb684e22edc3c92d05cc4deb8e1d063f5a1a8275","modified":1641213619919},{"_id":"public/archives/2020/11/index.html","hash":"8a0b47b90bba8c01dda0d574a6eba9166d85083a","modified":1641213619919},{"_id":"public/archives/2020/11/page/2/index.html","hash":"b6b63a3a3c685fe4c35b2d255e8ea4ee27981434","modified":1641213619919},{"_id":"public/archives/2020/10/index.html","hash":"498a092ce5cdebf76187692c4d60fa36eeaa94c0","modified":1641213619919},{"_id":"public/archives/2020/12/index.html","hash":"485878952276961d0f3a1c159c7357885105ef32","modified":1641213619919},{"_id":"public/archives/2021/page/2/index.html","hash":"3e6a0359f140aa3a5a82094f07ee70ccdf50c32f","modified":1641213619919},{"_id":"public/archives/2021/01/index.html","hash":"6059a07e39a09951d2ef2c584b261791a3ceeaec","modified":1641213619919},{"_id":"public/archives/2021/index.html","hash":"895258f9e20a76949365df7db2fa015dcea6c4d2","modified":1641213619919},{"_id":"public/archives/2021/03/index.html","hash":"cf845443c04d83b2e51f90a8ccec7ffc1081c5f4","modified":1641213619919},{"_id":"public/archives/2021/12/index.html","hash":"b42be7f17a1363c76688bcd342491acc3643e87a","modified":1641213619919},{"_id":"public/archives/2021/02/index.html","hash":"0861a0732849f8b728bbe44870565f73e1b22719","modified":1641213619919},{"_id":"public/page/16/index.html","hash":"5e977a757a9adda913b0aadb07e5b3e5adbeb264","modified":1641213619919},{"_id":"public/categories/技术笔记/page/2/index.html","hash":"6ae7aedc7fd41f02efac35c5366a5cde289a582f","modified":1640952189468},{"_id":"public/categories/技术笔记/index.html","hash":"4f801e13cfecefd33538885264373ff70ef90d70","modified":1640952189468},{"_id":"public/categories/技术笔记/page/3/index.html","hash":"811bccc77488227eb5a1b0f55ec876980f26edd1","modified":1640952189468},{"_id":"public/categories/技术笔记/page/4/index.html","hash":"55378ebcd7a65b1018f38d07ab352b23f2048d8b","modified":1640952189468},{"_id":"public/categories/技术笔记/page/5/index.html","hash":"5f2930150ddd99772d1f4c34b68bedce140538da","modified":1640952189468},{"_id":"public/categories/技术笔记/page/6/index.html","hash":"86e1ce552d51c33d7ff814a807d6589258102b19","modified":1640952189468},{"_id":"public/categories/技术笔记/page/8/index.html","hash":"027bf4ed09f19aeac679ff2df32b93666a92e198","modified":1640952189468},{"_id":"public/categories/技术笔记/page/10/index.html","hash":"026325e9067b809a3f62699e325cdcdcc66ebb6a","modified":1640952189468},{"_id":"public/categories/技术笔记/page/11/index.html","hash":"c4f6e950b17e05bc67cde52f49c100df7e11e1e0","modified":1640952189468},{"_id":"public/categories/技术笔记/page/12/index.html","hash":"c8d603bb6bb083505a12266b84d1f706f8875962","modified":1640952189468},{"_id":"public/categories/技术笔记/page/7/index.html","hash":"be1b2e8d58e7da59e691756882bdc15cd1d3a8bd","modified":1640952189468},{"_id":"public/categories/日常/index.html","hash":"948d9512d45a70a4132528b9a6871e21a8551a7c","modified":1640952189468},{"_id":"public/categories/技术笔记/page/9/index.html","hash":"8ced0ffe489ab774d1cc530b6a4c6b71bbca4d17","modified":1640952189468},{"_id":"public/categories/技术笔记/page/13/index.html","hash":"67f0ec4fbabcaf63ca7ef8f8af31cf6029e84801","modified":1640952189468},{"_id":"public/categories/读书笔记/index.html","hash":"bb9c55b7ab0a202f8504dbe3bb2eb499d771dc27","modified":1640952189468},{"_id":"public/categories/随笔/index.html","hash":"29e158fdfb62f12815f0a96e0fa70a965b8dfaf6","modified":1641213619919},{"_id":"public/categories/随笔/page/2/index.html","hash":"805c94280dd758a59ffa5c3ef327747f714116c6","modified":1641213619919},{"_id":"public/tags/JavaScript/index.html","hash":"52a015d4d0e1d8856feb2ab6aa499dfee0751237","modified":1640952189468},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"436931b669f7898c507f2026b9dc7fd4aafe8893","modified":1640952189468},{"_id":"public/tags/JavaScript/page/3/index.html","hash":"12253e37d443286b9d4586b0e17dafae9ad911a7","modified":1640952189468},{"_id":"public/tags/JavaScript/page/4/index.html","hash":"316f11df2604d96ef00a0b080c5a9d45047886ef","modified":1640952189468},{"_id":"public/tags/JavaScript/page/5/index.html","hash":"565bcedfb5f605b59f48726baeaeff74c371b28e","modified":1640952189468},{"_id":"public/tags/JavaScript/page/6/index.html","hash":"fe731cd23e0627665c2525b6df95f4daa7ceef0a","modified":1640952189468},{"_id":"public/tags/前端/index.html","hash":"d575261dc407e7e1857e8b4ac7d1b1c81cf69171","modified":1640952189468},{"_id":"public/tags/前端/page/2/index.html","hash":"6e7649c3b4fb047fcabb8621a196cd2dfe80eae1","modified":1640952189468},{"_id":"public/tags/前端/page/4/index.html","hash":"8cf04b73306c7aca7213d7d5167e87080d888543","modified":1640952189468},{"_id":"public/tags/前端/page/3/index.html","hash":"c43446fe9ffe6b504130e3fee4209420028de4cb","modified":1640952189468},{"_id":"public/tags/CSS-HTML/index.html","hash":"dff5504d48a90ca228d5f7520bc67c62adfa8f7d","modified":1640952189468},{"_id":"public/tags/CSS-HTML/page/2/index.html","hash":"1958054c1ea3d1c015fe8568c28fd00570b2bbf4","modified":1640952189468},{"_id":"public/tags/Vue/page/2/index.html","hash":"f4cda7a31f940c62022a2b7a09bd0a13aeaf923d","modified":1640952189468},{"_id":"public/tags/Vue/index.html","hash":"a7a14b42ab26309f3497b74002ee0e813659743b","modified":1640952189468},{"_id":"public/tags/踩坑/index.html","hash":"8ac5a6680ea72349f7a243d40b711de40e5ba1cc","modified":1640952189468},{"_id":"public/tags/踩坑/page/2/index.html","hash":"619045694496d530f996281f3eec3c8b382c8a6b","modified":1640952189468},{"_id":"public/tags/踩坑/page/4/index.html","hash":"d4f2b685b751258040ae75b196ceae1ba52b7382","modified":1640952189468},{"_id":"public/tags/踩坑/page/5/index.html","hash":"49be629f845647c264563b5a701749810042d5c5","modified":1640952189468},{"_id":"public/tags/NodeJS/index.html","hash":"362f9d1d09627601f125f79ea1061391954910d1","modified":1640952189468},{"_id":"public/tags/React/index.html","hash":"c995575c2a5cbaf9460954ece116ebc502b55e41","modified":1640952189468},{"_id":"public/tags/GULP/index.html","hash":"b12872659f47e65eebe8cd54a206c40a5fd3c8a4","modified":1640952189468},{"_id":"public/tags/踩坑/page/3/index.html","hash":"fafb6113ee8f5c612fbc229ec7c632d79063254e","modified":1640952189468},{"_id":"public/tags/Git/index.html","hash":"e24ab682796c10d8c2d62e9bc066849ab2224518","modified":1640952189468},{"_id":"public/tags/工具/index.html","hash":"5310b0670113367e9ff22ec27d1f9630ffe9cd92","modified":1640952189468},{"_id":"public/tags/Hexo/index.html","hash":"2458168a5325101dcf93b079ca205082e706476b","modified":1640952189468},{"_id":"public/tags/网络/index.html","hash":"ce476218360fef768ae83483855c55e943906467","modified":1640952189468},{"_id":"public/tags/hexo/index.html","hash":"ebcfce8b5bb18d9cf06addafa3ceaa389a67af8b","modified":1640952189468},{"_id":"public/tags/Nginx/index.html","hash":"07b8c9fb301df9ea2b0ada5fc80648cc573f81de","modified":1640952189468},{"_id":"public/tags/浏览器存储/index.html","hash":"43cfa6430760bae6edf28aeb1ec38666e337271d","modified":1640952189468},{"_id":"public/tags/Travis/index.html","hash":"306e64b74630a57161540d93260ff19b9b3bb8ac","modified":1640952189468},{"_id":"public/tags/Linux/index.html","hash":"fe61dd4a5bd5e390a69a411788adccc6f61a916d","modified":1640952189468},{"_id":"public/tags/前端下载/index.html","hash":"1bfb925bdabe03f2a42f6b4032024c9550f4ef75","modified":1640952189468},{"_id":"public/tags/zsh/index.html","hash":"11ada5120d52a824f93d512703745adbcce141d1","modified":1640952189468},{"_id":"public/tags/CICD/index.html","hash":"72c8f06625eec2ea20d6af06756073dba5b65597","modified":1640952189468},{"_id":"public/tags/Echarts/index.html","hash":"dc234639cc3c0d632fa08b7cd39eb1d668e69a4b","modified":1640952189468},{"_id":"public/tags/V-Charts/index.html","hash":"4817a6d27622a88053e5b3b27fa7aa0750960b74","modified":1640952189468},{"_id":"public/tags/Highcharts/index.html","hash":"6028b5da7e9833482d8f8d31175dd98ba425a42f","modified":1640952189468},{"_id":"public/tags/正则表达式/index.html","hash":"173ad0e6bb4c8b826f4069df59e956b2e45136e4","modified":1640952189468},{"_id":"public/tags/小程序/index.html","hash":"c8f18cdb8a9eae3c94d957d370d96faf11f0dfdc","modified":1640952189468},{"_id":"public/tags/跨平台/index.html","hash":"20f592da7c63260b02d2e65c95eafee474fac479","modified":1640952189468},{"_id":"public/tags/scriptable/index.html","hash":"e92caf400e800cf76adf40f6da857981f7fa2b49","modified":1640952189468},{"_id":"public/tags/GIHUTB/index.html","hash":"fa79bcade52b55f1b23d6564569eaf9b1ed10da1","modified":1640952189468},{"_id":"public/tags/读书笔记/index.html","hash":"57ad7f987bb559b6473b8b2223e45436380762e9","modified":1640952189468},{"_id":"public/tags/日本文学/index.html","hash":"a420ea8f2a2486769bda378f6f32af90abe695c1","modified":1640952189468},{"_id":"public/tags/数据结构/index.html","hash":"11f69473ef5c4713dae3a18d4b2e22999258bf88","modified":1640952189468},{"_id":"public/tags/总结/index.html","hash":"d04292790add0aef01bc2e66ce6207c74a4a0cdc","modified":1640952189468},{"_id":"public/tags/数据结构/page/2/index.html","hash":"498cb310438d0a2b30eeef15407623972ceb4242","modified":1640952189468},{"_id":"public/tags/随笔/index.html","hash":"71076e07ee1b0cddc1f4541b7caf851dace6ea49","modified":1640952189468},{"_id":"public/tags/switch/index.html","hash":"c8cf34ea73879cf871bdef1cc8839e106ddcdc81","modified":1640952189468},{"_id":"public/tags/旅游/index.html","hash":"d9d32d1f3b80d08fa70419fe6233fe7f124f3236","modified":1640952189468},{"_id":"public/404.html","hash":"84e7eb6a0b1361c4f992ee1e637c18a47b1d529c","modified":1640952189468},{"_id":"public/links/index.html","hash":"c141c79664cfc25f8c347108b1a42c5fa56e39b5","modified":1640952189468},{"_id":"public/articlecount/index.html","hash":"2d684fafa13a0bcca9211e6a870f7f91d3b440b6","modified":1641213619919},{"_id":"public/sitemap/index.html","hash":"dc2e3a98825d17d698b9a797e4180ac443ff141a","modified":1640952189468},{"_id":"public/2021/12/31/随笔/澳门玩具踩点-搬/index.html","hash":"03a2af52cccfd5cc947579fda31609da8dec3a95","modified":1640964078167},{"_id":"public/2021/12/08/技术笔记/iterm2-配置/index.html","hash":"6dbf8f64cea09cb45a7b07763a2fa7540f9d1733","modified":1640952189468},{"_id":"public/2021/03/02/技术笔记/关于前端下载/index.html","hash":"04358aee857f5d2b6d9d3c561e8b93e105e572be","modified":1640952189468},{"_id":"public/categories/index.html","hash":"0ced9e4fdcf7bff14e10d74c0570d2316ce2914a","modified":1641213619919},{"_id":"public/2021/02/10/技术笔记/记一次跨平台开发/index.html","hash":"2473ca69c895571316935adb251d03ec8024c541","modified":1640952189468},{"_id":"public/2021/02/11/日常/ios-date构造函数/index.html","hash":"5546abf449efe49259851dbfdd5e732334bab715","modified":1640952189468},{"_id":"public/2021/01/06/技术笔记/textarea中复制光标所在行文本/index.html","hash":"e0433e6c7de39f728bd39d863848c83989d05405","modified":1640952189468},{"_id":"public/2021/01/02/随笔/北京游玩指南/index.html","hash":"c02efecab72cb99c19ce16eb410b3f40ae84cc11","modified":1640952189468},{"_id":"public/2020/12/31/随笔/2020总结/index.html","hash":"a5b3902c4b1df096524808fcaae896dd9c41a243","modified":1640952189468},{"_id":"public/2020/12/27/技术笔记/textarea标签tab键无效/index.html","hash":"b46e3810d88b0efbe3806aa4c8f1caeba8d013c6","modified":1640952189468},{"_id":"public/2020/11/29/读书笔记/工作漂流/index.html","hash":"59af974672e8ae5526373d7766eb8ef73c1e8983","modified":1640952189468},{"_id":"public/2020/11/19/技术笔记/可视化图表踩坑记录/index.html","hash":"0dfced3833e34cccd74f216ab2b1f7ebbe537157","modified":1640952189468},{"_id":"public/2020/11/14/技术笔记/像Vue一样使用react路由/index.html","hash":"7300378200b104cfa4ef84d6ff938e6751f495d1","modified":1640952189468},{"_id":"public/2020/12/27/技术笔记/评论系统/index.html","hash":"4b756f03ba9f0313734ce39509c70db54e16e9b4","modified":1640952189468},{"_id":"public/2020/11/11/技术笔记/antd-menu组件/index.html","hash":"4467c38b8f542af396fb7e9863333b4f734a3f5a","modified":1640952189468},{"_id":"public/2020/11/11/日常/在react中获取Dom/index.html","hash":"52f0d0dd9555642b67e44c2ed0ccc4707d17df5b","modified":1640952189468},{"_id":"public/2020/11/08/技术笔记/关于hexo打包路径问题/index.html","hash":"50f980c9048c49056b8fdcc2f3fa155dd4a4d803","modified":1640952189468},{"_id":"public/2020/11/06/技术笔记/优雅的扩展React官方cli配置/index.html","hash":"7e9a06728154dd50c0f5771e34111936f62408ca","modified":1640952189468},{"_id":"public/2020/11/01/css/网格布局/index.html","hash":"9fe46c7497e2f0ff84aa7d2f9b487d001eb0ad7f","modified":1640952189468},{"_id":"public/2020/10/13/随笔/关于毕业生图像采集/index.html","hash":"1e83b3bbf1d69ebed5150ae0c3c4c169cee9e375","modified":1640952189468},{"_id":"public/2020/08/31/随笔/软件著作权申请/index.html","hash":"1dfcc7447e2c9c0e917ece36c328cc0c93343bbf","modified":1640952189468},{"_id":"public/2020/09/19/技术笔记/时间分片/index.html","hash":"1cc971e6c0fb077068e72e98f98d48ff597f8fe7","modified":1640952189468},{"_id":"public/2020/10/29/vue/父子组件生命周期函数/index.html","hash":"58e1d074fa681fd60635f514ab5ed5ade460591b","modified":1640952189468},{"_id":"public/2020/08/28/技术笔记/antd表格组件扩展行/index.html","hash":"b6f604081e082e0e23356f6b56d79a96f7b050ca","modified":1640952189468},{"_id":"public/2020/06/14/技术笔记/搭建图床服务器/index.html","hash":"fa68ee590fd5e91a4baa8885bbeb826176f6e251","modified":1640952189468},{"_id":"public/2020/05/29/技术笔记/git笔记2/index.html","hash":"875c0aca4d27d85c72a830da6ece9f0b50bdc56c","modified":1640952189468},{"_id":"public/2020/05/21/随笔/近期总结/index.html","hash":"7a50e7c47ad076e8eed1a76ec9317717178b3c04","modified":1640952189468},{"_id":"public/2020/05/13/随笔/塞尔达通关/index.html","hash":"40dd9f81e1e3654a9a800c820d6b3c07e3ec0ec9","modified":1640952189468},{"_id":"public/2020/05/12/技术笔记/初探Travis/index.html","hash":"7a29323fb561a1ea90973bc11363682827270454","modified":1640952189468},{"_id":"public/2020/05/14/技术笔记/nginx代理/index.html","hash":"054853e75c841a97bd8f3b3099cd9b42a7d8ba58","modified":1640952189468},{"_id":"public/2020/05/09/技术笔记/初探nginx/index.html","hash":"32274e815205274cd76fc40ab1186ed8b93ea628","modified":1640952189468},{"_id":"public/2020/05/02/vue/vue原理学习1/index.html","hash":"386135a0d6d849fc37f7c5ed816861cb687dacf3","modified":1640952189468},{"_id":"public/2020/04/29/随笔/资源推荐/index.html","hash":"cc3e27b83d7dc83aa506b5fe8fbee4e7dd2b4f19","modified":1640952189468},{"_id":"public/2020/04/19/JS/懒加载/index.html","hash":"90772fb57cccca4146e8bf6f2613244138dbc188","modified":1640952189468},{"_id":"public/2020/04/11/技术笔记/demo-cli/index.html","hash":"05053a332fb484283afb5a3cfc9d8ff2fa7c64fe","modified":1640952189468},{"_id":"public/2020/04/04/JS/关于对象/index.html","hash":"bfab1e5010aaacbe91b68ac2b19288c7a35ee359","modified":1640952189468},{"_id":"public/2020/03/15/技术笔记/关于JWT认证/index.html","hash":"2ddaa30329a7e99b98628ad7d3ea670f89a4c085","modified":1640952189468},{"_id":"public/2020/03/15/技术笔记/关于预请求/index.html","hash":"4e8e88f542c118b59d8de5958bb83cc3d6f09874","modified":1640952189468},{"_id":"public/2020/02/10/vue/vuejs基础复习-5/index.html","hash":"de39844150e20bb69999c19652ff6c806628b26f","modified":1640952189468},{"_id":"public/2019/12/08/技术笔记/关于浏览器存储/index.html","hash":"102bd54bbc3828ea43b55b4b4e41d0d79fc7de11","modified":1640952189468},{"_id":"public/2019/11/28/技术笔记/关于浏览器缓存/index.html","hash":"5c18ef045facdd5ab27a3281df30df544fb40f0d","modified":1640952189468},{"_id":"public/2019/11/28/技术笔记/从输入url到页面展示发生了什么/index.html","hash":"b47856105ed02d69bff761a34d69ed25fc2b75a8","modified":1640952189468},{"_id":"public/2019/11/28/计算机基础/http协议学习笔记/index.html","hash":"2fa6602e24a244e9466d88f4599a0b741ac3338a","modified":1640952189468},{"_id":"public/2019/11/21/JS/关于防抖和节流/index.html","hash":"abdebc63223b8e036bd2a98869049bf3ac781669","modified":1640952189468},{"_id":"public/2019/11/20/JS/关于call-bind-apply/index.html","hash":"72ad4f95fb54d612ae72f365939af1c99d4767b2","modified":1640952189468},{"_id":"public/2019/11/19/css/网页浏览进度/index.html","hash":"7c416e16bb3e5ac23594923fb5382d475b95b847","modified":1640952189468},{"_id":"public/2019/11/18/css/浮动功能栏/index.html","hash":"590e3f2778640e95cd2dba2c05e7e53112ff1668","modified":1640952189468},{"_id":"public/2019/11/18/css/动态设置背景图容器大小/index.html","hash":"8225dc25cbfb9f9e273e4fc87f02dc7f2cc77a8c","modified":1640952189468},{"_id":"public/2019/11/15/技术笔记/高效利用GITHUB/index.html","hash":"b05a634e6e79e94db030f7a43f278ff147139b2f","modified":1640952189468},{"_id":"public/2019/11/10/技术笔记/MongoDB入门学习笔记/index.html","hash":"140526216ce741be727bbac3e48608b14598934a","modified":1640952189468},{"_id":"public/2019/11/08/css/FLIP做卡片弹窗动画/index.html","hash":"6cbd31c4a64edb63f8f80d878115e19199183ccc","modified":1640952189468},{"_id":"public/2019/11/08/技术笔记/关于meta/index.html","hash":"bbee84d7c8d8705f72f453d7cecf65c8e85d75d2","modified":1640952189468},{"_id":"public/2019/10/31/vue/vuejs基础复习-4/index.html","hash":"5d7a450398b529676343075708ed6a5b63b13376","modified":1640952189468},{"_id":"public/2019/11/01/技术笔记/关于跨域/index.html","hash":"e79b9b52db8256ae4f26e1639bbe7c69364c5ba8","modified":1640952189468},{"_id":"public/2019/10/27/JS/js实现计算器/index.html","hash":"64b51ff29ffa4b9f7999a85ab72e78fbefbdcb31","modified":1640952189468},{"_id":"public/2019/10/17/随笔/关于面试/index.html","hash":"113771fb195e2dfac43b89681a53abcb67ab587d","modified":1640952189468},{"_id":"public/2019/10/14/vue/vue-cli3配置/index.html","hash":"c03fde12ba19b84e6a49cc68488e6a119439393a","modified":1640952189468},{"_id":"public/2019/10/08/技术笔记/正则表达式/index.html","hash":"ecb06febcba62c900e9c90a7f99f2b5e674b4ada","modified":1640952189468},{"_id":"public/2019/10/10/技术笔记/git笔记/index.html","hash":"e2722c9651529086e5fc40e06b32ea544d82fd4c","modified":1640952189468},{"_id":"public/2019/10/06/vue/vuejs基础复习-3/index.html","hash":"aa05eaec0ff0cd7b732fc34e02e9e085d8c599dc","modified":1640952189468},{"_id":"public/2019/09/26/vue/vuejs基础复习-2/index.html","hash":"7487a47604db066f14d1205e4df98b340ef16e90","modified":1640952189468},{"_id":"public/2019/09/23/计算机基础/js数据结构笔记10/index.html","hash":"60048e12f2ff9d28fa76a3e1d1b183507e0f2ca4","modified":1640952189468},{"_id":"public/2019/09/22/计算机基础/js数据结构笔记9/index.html","hash":"7f754cac0724e57290855f3629cd019c3decc290","modified":1640952189468},{"_id":"public/2019/09/16/计算机基础/js数据结构笔记8/index.html","hash":"d6a2146e46bb46b85205a4f7f34776e7111c7301","modified":1640952189468},{"_id":"public/2019/09/10/计算机基础/js数据结构笔记7/index.html","hash":"d06c58b4bf3bb586ac787fa4cdb25a559d7805a1","modified":1640952189468},{"_id":"public/2019/09/03/vue/vuejs基础复习-1/index.html","hash":"aff8fb326f983a30952f0b92f96243a88feb74a0","modified":1640952189468},{"_id":"public/2019/09/03/计算机基础/js数据结构笔记5/index.html","hash":"69432047eecfa261c075d3d8da0acea1250908a8","modified":1640952189468},{"_id":"public/2019/09/03/计算机基础/js数据结构笔记4/index.html","hash":"46b9f48cec3fb4242a1277038be8edacf0092e95","modified":1640952189468},{"_id":"public/2019/08/14/技术笔记/mongoose使用/index.html","hash":"0d8aa129b30a0320c8fdac5b37a974d43584bb2f","modified":1640952189468},{"_id":"public/2019/09/04/计算机基础/js数据结构笔记6/index.html","hash":"4b7c55f0b9b333f221c55efb5bd6e94583ea06db","modified":1640952189468},{"_id":"public/2019/07/23/JS/js模拟重载/index.html","hash":"74aa2a41f5479f8a446a74dde470ca6c189522ce","modified":1640952189468},{"_id":"public/2019/09/02/计算机基础/js数据结构笔记3/index.html","hash":"290a3a2bc603cd3eb61fddfe66d37b7d53ed5742","modified":1640952189468},{"_id":"public/2019/07/19/技术笔记/熟悉小程序开发目录/index.html","hash":"805c3c3b17bb8f929244f9ecbdf1f377e07d9e2d","modified":1640952189468},{"_id":"public/2019/07/21/JS/js模块化/index.html","hash":"df2a997d698009026e301294333c0aa55e071ed7","modified":1640952189468},{"_id":"public/2019/07/02/计算机基础/js数据结构笔记2/index.html","hash":"cfff457216dd3b9f2323cc279c6ba9afcbf35804","modified":1640952189468},{"_id":"public/2019/07/07/JS/js基础之深拷贝/index.html","hash":"599dbdbe12a25b55e843b79063e0212cf99af27e","modified":1640952189468},{"_id":"public/2019/07/02/计算机基础/js数据结构笔记/index.html","hash":"f17d6dc14109cb179cae3ad9690d23a8ceaac4a0","modified":1640952189468},{"_id":"public/2019/07/01/技术笔记/hexo常用配置和命令/index.html","hash":"df99827cc2090d02abccb572f0b5f0222ff4bcad","modified":1640952189468},{"_id":"public/index.html","hash":"3de5aadfa31bc8dfddb4e102dfb63c6395aa46b2","modified":1641213619919},{"_id":"public/page/2/index.html","hash":"52ca1ee97ba700803af1bc00c05947e3f78aa305","modified":1641213619919},{"_id":"public/page/3/index.html","hash":"7d16f27bac28693b31584d0396036099313857eb","modified":1641213619919},{"_id":"public/page/4/index.html","hash":"eccd2260fa9ce29f798e7c7e5c4b742db8d90677","modified":1641213619919},{"_id":"public/page/6/index.html","hash":"a3575bb6fa141732148cc257258e0766beec8fb5","modified":1641213619919},{"_id":"public/page/7/index.html","hash":"6f28d6fedd3448c7aacff73ac0fdb9c6bda260a1","modified":1641213619919},{"_id":"public/page/9/index.html","hash":"e74052f761602cc4c3c476fba92c960e9cc7230e","modified":1641213619919},{"_id":"public/page/8/index.html","hash":"e0babfd4008b262f7dacb3e10b72bceee8b0f65a","modified":1641213619919},{"_id":"public/page/10/index.html","hash":"554204b37b387ae7dd8fafbbe596fb90bc9ceb68","modified":1641213619919},{"_id":"public/page/5/index.html","hash":"ea9641ae8fedf5e908349d5b6a2bf42b0b287290","modified":1641213619919},{"_id":"public/page/11/index.html","hash":"e2c6d2ee0973d8c52c6070a486891ddab82e276d","modified":1641213619919},{"_id":"public/page/13/index.html","hash":"384d272bd38bc722b7c04291de934928ff3e3d0c","modified":1641213619919},{"_id":"public/page/14/index.html","hash":"3e75e37ad04df27b68c6e9654d5fcd27ac750b87","modified":1641213619919},{"_id":"public/page/15/index.html","hash":"fb168e237a441ccab6e4e37177231aa105979375","modified":1641213619919},{"_id":"public/page/12/index.html","hash":"4a9b002aca70022193fee34f1e3f4fa82b59312f","modified":1641213619919},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1640952189468},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1640952189468},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1640952189468},{"_id":"public/img/4-19.png","hash":"a1b2b466bdcf9b768b89dceaa5b530547ac5fd02","modified":1640952189468},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1640952189468},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1640952189468},{"_id":"public/img/bst.jpg","hash":"960a66b9098f0eaadd07417b317a9952fe79411f","modified":1640952189468},{"_id":"public/img/cache1.png","hash":"49a2c48a5bc85cfea8eb23a9ac51e04784e07982","modified":1640952189468},{"_id":"public/img/cache.png","hash":"50ead9a74799326f0ae27fab90538c548fb4c64c","modified":1640952189468},{"_id":"public/img/cros2.png","hash":"936e6bec39d9b7d3903dd1fa605cb38563c2a997","modified":1640952189468},{"_id":"public/img/computer.png","hash":"b1fdbefe71f4e715ec54d8e2c2f1d3ee52bfa212","modified":1640952189468},{"_id":"public/img/cros4.png","hash":"26030f59b26347dc6530399885615b4ffa59ffb7","modified":1640952189468},{"_id":"public/img/domtree.gif","hash":"164dd2e4fe565e9ea4dccc436d9d0f9484d807f3","modified":1640952189468},{"_id":"public/img/cros3.png","hash":"140f8ad3deec6c0a2b159e042ba9f821ede2cd1f","modified":1640952189468},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1640952189468},{"_id":"public/img/github1.png","hash":"80876a85ec105060d64b62d99703305026509342","modified":1640952189468},{"_id":"public/img/flip.png","hash":"b032dc3e07c8ea24f6707dfcae0d5fed150794bd","modified":1640952189468},{"_id":"public/img/github3.png","hash":"3adb6f33ae58e75ad2fe31633a7d7ad292cc4857","modified":1640952189468},{"_id":"public/img/github4.png","hash":"4b6776ff0e940bcf9e4ff3819e48a2eac67505d7","modified":1640952189468},{"_id":"public/img/github2.png","hash":"6cb1c10a8b2e1067a09cbe20eaccbf0c663177c9","modified":1640952189468},{"_id":"public/img/github5.png","hash":"bddc0911b72fa4a6122b11a510f96e39aad73e44","modified":1640952189468},{"_id":"public/img/cros1.png","hash":"6c2b2c8539d2ac0cd13aec088918974f82fbdd43","modified":1640952189468},{"_id":"public/img/github6.png","hash":"3f26efdb86708557659cee0be697c2adf2c2f27f","modified":1640952189468},{"_id":"public/img/graph2.png","hash":"6563f0f1166518c693710ec5160dd3207da3097d","modified":1640952189468},{"_id":"public/img/header.png","hash":"8ccc99a1d0ee273b0265d5617fd08a2ba6af392e","modified":1640952189468},{"_id":"public/img/juejin.png","hash":"f32b13cc15b32af4b114bf062b421084d2d1c64e","modified":1640952189468},{"_id":"public/img/linked.jpg","hash":"25303e03a914a5236c235ca8f3bea550b22ad17c","modified":1640952189468},{"_id":"public/img/liuyan2.png","hash":"6de6e21a4e95cba3fbd90e512781a3fb63db9771","modified":1640952189468},{"_id":"public/img/liuyan3.png","hash":"b11d1e4bfa4f4ab1cd92ee74bd824622a68a4bd6","modified":1640952189468},{"_id":"public/img/liuyan.png","hash":"cec7fc8aeb752ff7eaac195e73af17e4edbb8b1f","modified":1640952189468},{"_id":"public/img/prototype1.png","hash":"bacae75a1e1aa35d0985d747471f5b22cf9ccec9","modified":1640952189468},{"_id":"public/img/notbts.jpg","hash":"8ed791c9e782db02f133f8cca0e873ff261b6dd9","modified":1640952189468},{"_id":"public/img/prototype3.png","hash":"a257698b8859de833678d912f2e5870dfdf04972","modified":1640952189468},{"_id":"public/img/prototype2.png","hash":"072cf38440fd2b825d01a581033f33adb7a0bc90","modified":1640952189468},{"_id":"public/img/scrollTop.png","hash":"b4b06c96469607530b7a59ccbcfad6174f1a5594","modified":1640952189468},{"_id":"public/img/tree.jpg","hash":"fa201225604ccedeb8c6ad7816e42e3cf06ae2a4","modified":1640952189468},{"_id":"public/img/url4.jfif","hash":"da18aa35e5ec545cf21b6f155a580e0a68967d91","modified":1640952189468},{"_id":"public/img/url2.png","hash":"9a9b83de375397ecdc17889e3c1a4774b4ca9ea2","modified":1640952189468},{"_id":"public/img/url6.png","hash":"b579d322371ada287b88d55bf118447db1d3e7d5","modified":1640952189468},{"_id":"public/img/vuex1.png","hash":"73bb62ebc338fcd64ee95bde18684ffe3b3bb379","modified":1640952189468},{"_id":"public/img/vuex2.png","hash":"4fb73c3495849d5ac2ac80546a8431d563a7da45","modified":1640952189468},{"_id":"public/img/vuex3.png","hash":"7104f2889abb38a3b6396ee68ab451691b28f1bd","modified":1640952189468},{"_id":"public/img/caikeng/one.png","hash":"fc677cce5382d7ff5a56ef9a2863f144469ded3e","modified":1640952189468},{"_id":"public/img/caikeng/three.png","hash":"025ac481f91d2ee32d029686d873215bf84234c7","modified":1640952189468},{"_id":"public/img/caikeng/two.png","hash":"4128dd1dd18f61f0be8bdefda7ff06c6eb2b4b6a","modified":1640952189468},{"_id":"public/img/git/git.png","hash":"36dd390a7a1465b7b33acd0da03694127eab4c49","modified":1640952189468},{"_id":"public/img/git/git10.png","hash":"e032e5812e127928d49163444e9eaaa2675ba9b4","modified":1640952189468},{"_id":"public/img/git/git11.png","hash":"81065d191618dd1e86a8647bee6c45bca5e5ac0a","modified":1640952189468},{"_id":"public/img/git/git13.png","hash":"89915ae15e52ae917841bc44fa91b793b9368722","modified":1640952189468},{"_id":"public/img/git/git12.png","hash":"38d63a9fc0aceb04e95e3ee95401c5bb8ff9e6ff","modified":1640952189468},{"_id":"public/img/git/git14.png","hash":"29382ab0eaef3a1089dd90d04f2a8f029021925b","modified":1640952189468},{"_id":"public/img/git/git15.png","hash":"3fc1625727f818921e3cd78758efa71e39ffe222","modified":1640952189468},{"_id":"public/img/git/git16.png","hash":"84cde608b7e0debc7b79d71a28e5ff8dc99b9101","modified":1640952189468},{"_id":"public/img/git/git17.png","hash":"1a7ea030cd7116e47173a0cf9b671a2099563e04","modified":1640952189468},{"_id":"public/img/git/git2.png","hash":"01fce5979bd6c26a766d9dbc1e6546d171e1225d","modified":1640952189468},{"_id":"public/img/git/git3.png","hash":"9f18e14543ba76143aa5b99e42e99a752b2b5f83","modified":1640952189468},{"_id":"public/img/git/git4.png","hash":"0aaa1d5276550419d3bfd1934d2f00fa4a14bb93","modified":1640952189468},{"_id":"public/img/git/git5.png","hash":"cd510183a9a27a3b2199280ffe7f7c12ac49d6ce","modified":1640952189468},{"_id":"public/img/git/git6.png","hash":"9aa5997f5c8763c1c10e112adcfeae022a506b2f","modified":1640952189468},{"_id":"public/img/git/git7.png","hash":"2e616b3a0a7ee52b1c9f8878693b0a4da7074ffb","modified":1640952189468},{"_id":"public/img/git/git9.png","hash":"373f3df0363045b38717aef626ebcee1e9d62765","modified":1640952189468},{"_id":"public/img/git/git8.png","hash":"8e689bf6cf63951036b6b02f5d01716d626290f3","modified":1640952189468},{"_id":"public/img/jottings/gitbash.png","hash":"1af1904218cd5c96507621d82da3ded62c1c49d3","modified":1640952189468},{"_id":"public/img/jottings/theme.png","hash":"4a9ef01b4a1ad4afad078f92bf265475278506b8","modified":1640952189468},{"_id":"public/img/jottings/travis.png","hash":"26de73bfbe91a732cee2825ab76efe1645434846","modified":1640952189468},{"_id":"public/img/VUEX.png","hash":"297c3423ba2fe66ac397a67c4547c6aae41788aa","modified":1640952189468},{"_id":"public/img/daili.png","hash":"8e91e8f842d8d0fd89686b86de96c8647a27df08","modified":1640952189468},{"_id":"public/img/doubleLinked.png","hash":"8508325e214881612d5035d739c4a2ff1519412d","modified":1640952189468},{"_id":"public/img/github7.png","hash":"1dcac618802987bf8eebfcc1784a57144269beb1","modified":1640952189468},{"_id":"public/img/github8.png","hash":"9ab3079fa1cca5f70eb5f8494137ccaf5609e156","modified":1640952189468},{"_id":"public/img/graph3.png","hash":"3efea936f579b75b3b95ecd40f584474892acabe","modified":1640952189468},{"_id":"public/img/graph4.png","hash":"8a49db6745371fc07fd93dfe22c38944d9412fa9","modified":1640952189468},{"_id":"public/img/graph5.png","hash":"f33450e3d59e2ffa35fa902c9e6bae3102669133","modified":1640952189468},{"_id":"public/img/kuayu.png","hash":"f74baf6079afd4f7158d71fa3bc3e643403dc6c9","modified":1640952189468},{"_id":"public/img/left.png","hash":"0bf23a4374d0e2e937b4d291d8a47f7699405a10","modified":1640952189468},{"_id":"public/img/mongodb.png","hash":"624e1a13a4a1c74487cbb4b205163eaf34b5f6e9","modified":1640952189468},{"_id":"public/img/react.jfif","hash":"0bdcac0f29983c3feb451205656318f831e82701","modified":1640952189468},{"_id":"public/img/right.png","hash":"6715f8481431433aae16b7a97d31d9d0c0a1373d","modified":1640952189468},{"_id":"public/img/tongyuan.png","hash":"f5ddeddc9802082bed87b36c699f7bd24d466749","modified":1640952189468},{"_id":"public/img/url.png","hash":"fe6de7bf0aa8ab0c1479414b839ca5eccded66a5","modified":1640952189468},{"_id":"public/img/vue.jfif","hash":"fcf4ecf2f1987bb0b4f7231149822be6cacdf5cf","modified":1640952189468},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1640952189468},{"_id":"public/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1640952189468},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1640952189468},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1640952189468},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1640952189468},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1640952189468},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1640952189468},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1640952189468},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1640952189468},{"_id":"public/css/main.css","hash":"80b7c3dc3f47db8b700b4437bdf45706fe504f66","modified":1640952189468},{"_id":"public/img/Graph.jpg","hash":"655836bbdaad871d47474943bbf086035c3c199c","modified":1640952189468},{"_id":"public/img/rbt.jpg","hash":"95b67afb77c20d0083e8bd2b8566d5639528291d","modified":1640952189468},{"_id":"public/img/stack.png","hash":"835e187324403680bdd0a9d2efe5a4b8e7be9160","modified":1640952189468},{"_id":"public/img/url3","hash":"932036de7b83ce5881e06dc870659abe48c2d068","modified":1640952189468},{"_id":"public/img/graph6.png","hash":"763825094d356b564839d721f3f9834d4e7e0482","modified":1640952189468},{"_id":"public/img/hash.jpg","hash":"263a544b30c85516fa79520f51308d9cfb922cf8","modified":1640952189468},{"_id":"public/img/queue.png","hash":"150dc084e280dd47891904f536f4935eb87be0dc","modified":1640952189468},{"_id":"public/img/treedemo.jpg","hash":"a97afb76930eab4393c6a5cb6314f6ab0a401dd4","modified":1640952189468},{"_id":"public/img/anli4.png","hash":"d841efd8d0cb759fe02a85a8717066da6d670dc9","modified":1640952189468},{"_id":"public/img/insert1.png","hash":"d3ab2a5ae2c8e0dd6aa8791e50d7a19bf2cee8da","modified":1640952189468},{"_id":"public/img/insert0.png","hash":"202681bd9b0c4b363116a8ec9e421791a2a427c5","modified":1640952189468},{"_id":"public/img/anli.png","hash":"065a2166137ad6d4b53e66f02738587c3d03d402","modified":1640952189468},{"_id":"public/img/anli2.png","hash":"e5c2f8e81c8aac7b6ed1b2519c9d782e9c50453d","modified":1640952189468},{"_id":"public/img/anli3.png","hash":"a6b2cca39990eecc4a341e943017f735374e0e01","modified":1640952189468},{"_id":"public/img/19-11-19.jpg","hash":"9663ee6832d3955d3b2c1452e67c8f68d887f26f","modified":1640952189468},{"_id":"public/img/jottings/switch.png","hash":"24d33a4e21b4f9accda13b0469fffee70754b7e6","modified":1640952189468},{"_id":"public/img/jottings/games.png","hash":"6f40c9cd059e6640781bb00720527fb954b9fa1e","modified":1640952189468},{"_id":"public/img/jottings/outfit1.JPG","hash":"7bb20edca6718e3a488ec41cb1ac1860a7dceb7a","modified":1640952189468},{"_id":"public/img/jottings/outfit2.JPG","hash":"d40378647cd9857e11aac3ba7ab843a032d18e0d","modified":1640952189468},{"_id":"public/img/jottings/cards.JPG","hash":"6726e5c01da92220b0a0d62cdbba57b73430e302","modified":1640952189468},{"_id":"public/img/url5.png","hash":"00dc9d85b0cc48e9fe7a245b173cabeb72b031a9","modified":1640952189468},{"_id":"public/img/jottings/two.JPG","hash":"52161bfa3f3873a920226572dab5d08fa5dc25a1","modified":1640952189468},{"_id":"source/_posts/随笔/2021总结.md","hash":"83898594440bad172e7d682ff66552dc47400717","modified":1640964060068},{"_id":"public/2021/12/31/随笔/2021总结/index.html","hash":"c7643154eff1809c52787bf89047f56852cfda0c","modified":1641213619919},{"_id":"source/新成员/index.md","hash":"55ca65827865b5dae27dff3762f62cf03938d98c","modified":1641198231017},{"_id":"source/_posts/随笔/新成员.md","hash":"5a0a1691ba1f59be84758053b2e33ffed0a68ec0","modified":1641200791879},{"_id":"themes/fluid/.vscode/settings.json","hash":"53da4d1eca2bd79cf2805389cec8fdeda1d98c54","modified":1641213321353},{"_id":"themes/fluid/source/css/_pages/_base/dist/inline.css","hash":"5841467ba9e348c3e27bb373046592f15ff6d5c3","modified":1641213322734},{"_id":"public/archives/2022/index.html","hash":"d3546d22b99f7b32ebd5e5a6ed11b21df979e53a","modified":1641213619919},{"_id":"public/archives/2022/01/index.html","hash":"c37ecfd1e184ad648ee3cf6d664337c3dc4d146d","modified":1641213619919},{"_id":"public/categories/随笔/page/3/index.html","hash":"adf9694b150366379626d335877fa35ab9e50131","modified":1641213619919},{"_id":"public/2022/01/03/随笔/新成员/index.html","hash":"51ab9cc5f0e0b838429667c903bc67ef2b88dabe","modified":1641213619919},{"_id":"source/_posts/博客改造.md","hash":"4f414409ef7da704f0500aec4589c431345412b3","modified":1643434416407}],"Category":[{"name":"技术笔记","_id":"ckx1ty4qo00047jjf7ea8emog"},{"name":"日常","_id":"ckx1ty4qy00227jjf23fhdf50"},{"name":"读书笔记","_id":"ckx1ty4rc005i7jjf63xo7p8r"},{"name":"随笔","_id":"ckx1ty4rg006f7jjf8an8g2mh"}],"Data":[],"Page":[{"title":"about","date":"2020-12-30T13:13:24.000Z","layout":"about","comment":true,"_content":"\n# 关于本站\n>  **本站内容**\n> - 学习笔记\n> - 踩坑记录\n\n>  **建站信息**\n> - 建站：[Hexo](https://hexo.io/zh-cn/)\n> - 部署：\n> - - gh-pages:[访问博客-ghpages](https://blog.shuaxinjs.cn)\n> - - [vercel](https://vercel.com):[访问博客-vercel](https://blog.shuaxindiary.cn)\n> - 主题：[fluid](https://hexo.fluid-dev.com/docs/)\n> - - 现在改成了自己fork fluid（1.8.2）魔改的版本，加了一些自己需要的特性\n> - 访问统计：[leancloud](https://www.leancloud.cn/)\n> - 图床：[七牛云](https://www.qiniu.com/)\n\n\n\n>  **曾经用过的第三方插件&主题**\n> - ~统计：不蒜子统计~\n> - ~主题：[clover](https://github.com/esappear/hexo-theme-clover)~\n> - ~主题：[next](http://theme-next.iissnan.com/)~\n> - ~评论：[gitalk](https://github.com/gitalk/gitalk)~\n> - ~评论：[valine](https://valine.js.org/)~\n> - ~评论：[Waline](https://waline.js.org/)~\n> - ~图床：github~\n\n\n# 关于我\n\n- 98\n- ~大四~\n- 前端\n- 计算机\n- 悠悠球\n- bbox\n- 已脱单\n- 帝都某厂打工中\n\n# 小玩具\n\n- [vuex持久化插件](https://github.com/SHUAXINDIARY/cacheState)\n- [练习CLI](https://github.com/SHUAXINDIARY/demo-cli)\n- [色卡](https://github.com/SHUAXINDIARY/colorGuide)\n- [布局站点](https://layout-sigma.vercel.app/)\n- [Chrome批量删除微博插件](https://github.com/SHUAXINDIARY/Weibo-plugin)\n- [vuepress-theme-stella](https://github.com/SHUAXINDIARY/vuepress-theme-stella) --- 开发中\n- [md编辑器-ol](https://github.com/SHUAXINDIARY/md-editor-ol) ---开发中","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-12-30 21:13:24\nlayout: about\ncomment: true\n---\n\n# 关于本站\n>  **本站内容**\n> - 学习笔记\n> - 踩坑记录\n\n>  **建站信息**\n> - 建站：[Hexo](https://hexo.io/zh-cn/)\n> - 部署：\n> - - gh-pages:[访问博客-ghpages](https://blog.shuaxinjs.cn)\n> - - [vercel](https://vercel.com):[访问博客-vercel](https://blog.shuaxindiary.cn)\n> - 主题：[fluid](https://hexo.fluid-dev.com/docs/)\n> - - 现在改成了自己fork fluid（1.8.2）魔改的版本，加了一些自己需要的特性\n> - 访问统计：[leancloud](https://www.leancloud.cn/)\n> - 图床：[七牛云](https://www.qiniu.com/)\n\n\n\n>  **曾经用过的第三方插件&主题**\n> - ~统计：不蒜子统计~\n> - ~主题：[clover](https://github.com/esappear/hexo-theme-clover)~\n> - ~主题：[next](http://theme-next.iissnan.com/)~\n> - ~评论：[gitalk](https://github.com/gitalk/gitalk)~\n> - ~评论：[valine](https://valine.js.org/)~\n> - ~评论：[Waline](https://waline.js.org/)~\n> - ~图床：github~\n\n\n# 关于我\n\n- 98\n- ~大四~\n- 前端\n- 计算机\n- 悠悠球\n- bbox\n- 已脱单\n- 帝都某厂打工中\n\n# 小玩具\n\n- [vuex持久化插件](https://github.com/SHUAXINDIARY/cacheState)\n- [练习CLI](https://github.com/SHUAXINDIARY/demo-cli)\n- [色卡](https://github.com/SHUAXINDIARY/colorGuide)\n- [布局站点](https://layout-sigma.vercel.app/)\n- [Chrome批量删除微博插件](https://github.com/SHUAXINDIARY/Weibo-plugin)\n- [vuepress-theme-stella](https://github.com/SHUAXINDIARY/vuepress-theme-stella) --- 开发中\n- [md编辑器-ol](https://github.com/SHUAXINDIARY/md-editor-ol) ---开发中","updated":"2021-12-31T12:01:59.689Z","path":"about/index.html","comments":1,"_id":"ckxuciv3t0060j7jf8yda6xey","content":"<h1 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h1><blockquote>\n<p> <strong>本站内容</strong></p>\n<ul>\n<li>学习笔记</li>\n<li>踩坑记录</li>\n</ul>\n</blockquote>\n<blockquote>\n<p> <strong>建站信息</strong></p>\n<ul>\n<li>建站：<a href=\"https://hexo.io/zh-cn/\">Hexo</a></li>\n<li>部署：</li>\n<li><ul>\n<li>gh-pages:<a href=\"https://blog.shuaxinjs.cn/\">访问博客-ghpages</a></li>\n</ul>\n</li>\n<li><ul>\n<li><a href=\"https://vercel.com/\">vercel</a>:<a href=\"https://blog.shuaxindiary.cn/\">访问博客-vercel</a></li>\n</ul>\n</li>\n<li>主题：<a href=\"https://hexo.fluid-dev.com/docs/\">fluid</a></li>\n<li><ul>\n<li>现在改成了自己fork fluid（1.8.2）魔改的版本，加了一些自己需要的特性</li>\n</ul>\n</li>\n<li>访问统计：<a href=\"https://www.leancloud.cn/\">leancloud</a></li>\n<li>图床：<a href=\"https://www.qiniu.com/\">七牛云</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p> <strong>曾经用过的第三方插件&amp;主题</strong></p>\n<ul>\n<li><del>统计：不蒜子统计</del></li>\n<li><del>主题：<a href=\"https://github.com/esappear/hexo-theme-clover\">clover</a></del></li>\n<li><del>主题：<a href=\"http://theme-next.iissnan.com/\">next</a></del></li>\n<li><del>评论：<a href=\"https://github.com/gitalk/gitalk\">gitalk</a></del></li>\n<li><del>评论：<a href=\"https://valine.js.org/\">valine</a></del></li>\n<li><del>评论：<a href=\"https://waline.js.org/\">Waline</a></del></li>\n<li><del>图床：github</del></li>\n</ul>\n</blockquote>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><ul>\n<li>98</li>\n<li><del>大四</del></li>\n<li>前端</li>\n<li>计算机</li>\n<li>悠悠球</li>\n<li>bbox</li>\n<li>已脱单</li>\n<li>帝都某厂打工中</li>\n</ul>\n<h1 id=\"小玩具\"><a href=\"#小玩具\" class=\"headerlink\" title=\"小玩具\"></a>小玩具</h1><ul>\n<li><a href=\"https://github.com/SHUAXINDIARY/cacheState\">vuex持久化插件</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/demo-cli\">练习CLI</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/colorGuide\">色卡</a></li>\n<li><a href=\"https://layout-sigma.vercel.app/\">布局站点</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/Weibo-plugin\">Chrome批量删除微博插件</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/vuepress-theme-stella\">vuepress-theme-stella</a> — 开发中</li>\n<li><a href=\"https://github.com/SHUAXINDIARY/md-editor-ol\">md编辑器-ol</a> —开发中</li>\n</ul>\n","site":{"data":{}},"wordcount":317,"excerpt":"","more":"<h1 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h1><blockquote>\n<p> <strong>本站内容</strong></p>\n<ul>\n<li>学习笔记</li>\n<li>踩坑记录</li>\n</ul>\n</blockquote>\n<blockquote>\n<p> <strong>建站信息</strong></p>\n<ul>\n<li>建站：<a href=\"https://hexo.io/zh-cn/\">Hexo</a></li>\n<li>部署：</li>\n<li><ul>\n<li>gh-pages:<a href=\"https://blog.shuaxinjs.cn/\">访问博客-ghpages</a></li>\n</ul>\n</li>\n<li><ul>\n<li><a href=\"https://vercel.com/\">vercel</a>:<a href=\"https://blog.shuaxindiary.cn/\">访问博客-vercel</a></li>\n</ul>\n</li>\n<li>主题：<a href=\"https://hexo.fluid-dev.com/docs/\">fluid</a></li>\n<li><ul>\n<li>现在改成了自己fork fluid（1.8.2）魔改的版本，加了一些自己需要的特性</li>\n</ul>\n</li>\n<li>访问统计：<a href=\"https://www.leancloud.cn/\">leancloud</a></li>\n<li>图床：<a href=\"https://www.qiniu.com/\">七牛云</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p> <strong>曾经用过的第三方插件&amp;主题</strong></p>\n<ul>\n<li><del>统计：不蒜子统计</del></li>\n<li><del>主题：<a href=\"https://github.com/esappear/hexo-theme-clover\">clover</a></del></li>\n<li><del>主题：<a href=\"http://theme-next.iissnan.com/\">next</a></del></li>\n<li><del>评论：<a href=\"https://github.com/gitalk/gitalk\">gitalk</a></del></li>\n<li><del>评论：<a href=\"https://valine.js.org/\">valine</a></del></li>\n<li><del>评论：<a href=\"https://waline.js.org/\">Waline</a></del></li>\n<li><del>图床：github</del></li>\n</ul>\n</blockquote>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><ul>\n<li>98</li>\n<li><del>大四</del></li>\n<li>前端</li>\n<li>计算机</li>\n<li>悠悠球</li>\n<li>bbox</li>\n<li>已脱单</li>\n<li>帝都某厂打工中</li>\n</ul>\n<h1 id=\"小玩具\"><a href=\"#小玩具\" class=\"headerlink\" title=\"小玩具\"></a>小玩具</h1><ul>\n<li><a href=\"https://github.com/SHUAXINDIARY/cacheState\">vuex持久化插件</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/demo-cli\">练习CLI</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/colorGuide\">色卡</a></li>\n<li><a href=\"https://layout-sigma.vercel.app/\">布局站点</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/Weibo-plugin\">Chrome批量删除微博插件</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/vuepress-theme-stella\">vuepress-theme-stella</a> — 开发中</li>\n<li><a href=\"https://github.com/SHUAXINDIARY/md-editor-ol\">md编辑器-ol</a> —开发中</li>\n</ul>\n"},{"title":"刷新","date":"2019-07-01T09:20:12.000Z","_content":"# 关于本站\n>  **本站内容**\n> - 学习\n> - 记录\n\n>  **建站信息**\n> 1. 建站：Hexo\n> 2. 主题：[next](http://theme-next.iissnan.com/)\n> 3. 部署：github+actions自动打包部署\n> 4. 评论：[gitalk](https://github.com/gitalk/gitalk)\n\n>  **曾经用过的第三方插件&主题**\n> - 统计：不蒜子统计\n> - 主题：[clover](https://github.com/esappear/hexo-theme-clover)\n\n--------------------\n# 关于我\n\n- 95后\n- 前端&计算机爱好者\n\n\n--------------------\n\n# FIND ME\n[GITHUB](https://github.com/SHUAXINDIARY)\n\n[DOUBAN](https://www.douban.com/people/91950904/)\n\nEmail:986384495@qq.com\n\n----------\n\n# 小玩具\n- [vuex持久化插件](https://github.com/SHUAXINDIARY/cacheState)\n- [练习CLI](https://github.com/SHUAXINDIARY/demo-cli)","source":"next_about/index.md","raw":"---\ntitle: 刷新\ndate: 2019-07-01 17:20:12\n---\n# 关于本站\n>  **本站内容**\n> - 学习\n> - 记录\n\n>  **建站信息**\n> 1. 建站：Hexo\n> 2. 主题：[next](http://theme-next.iissnan.com/)\n> 3. 部署：github+actions自动打包部署\n> 4. 评论：[gitalk](https://github.com/gitalk/gitalk)\n\n>  **曾经用过的第三方插件&主题**\n> - 统计：不蒜子统计\n> - 主题：[clover](https://github.com/esappear/hexo-theme-clover)\n\n--------------------\n# 关于我\n\n- 95后\n- 前端&计算机爱好者\n\n\n--------------------\n\n# FIND ME\n[GITHUB](https://github.com/SHUAXINDIARY)\n\n[DOUBAN](https://www.douban.com/people/91950904/)\n\nEmail:986384495@qq.com\n\n----------\n\n# 小玩具\n- [vuex持久化插件](https://github.com/SHUAXINDIARY/cacheState)\n- [练习CLI](https://github.com/SHUAXINDIARY/demo-cli)","updated":"2021-12-31T12:01:59.744Z","path":"next_about/index.html","comments":1,"layout":"page","_id":"ckxuciv3t0062j7jfegpbhr1l","content":"<h1 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h1><blockquote>\n<p> <strong>本站内容</strong></p>\n<ul>\n<li>学习</li>\n<li>记录</li>\n</ul>\n</blockquote>\n<blockquote>\n<p> <strong>建站信息</strong></p>\n<ol>\n<li>建站：Hexo</li>\n<li>主题：<a href=\"http://theme-next.iissnan.com/\">next</a></li>\n<li>部署：github+actions自动打包部署</li>\n<li>评论：<a href=\"https://github.com/gitalk/gitalk\">gitalk</a></li>\n</ol>\n</blockquote>\n<blockquote>\n<p> <strong>曾经用过的第三方插件&amp;主题</strong></p>\n<ul>\n<li>统计：不蒜子统计</li>\n<li>主题：<a href=\"https://github.com/esappear/hexo-theme-clover\">clover</a></li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><ul>\n<li>95后</li>\n<li>前端&amp;计算机爱好者</li>\n</ul>\n<hr>\n<h1 id=\"FIND-ME\"><a href=\"#FIND-ME\" class=\"headerlink\" title=\"FIND ME\"></a>FIND ME</h1><p><a href=\"https://github.com/SHUAXINDIARY\">GITHUB</a></p>\n<p><a href=\"https://www.douban.com/people/91950904/\">DOUBAN</a></p>\n<p>Email:<a href=\"mailto:&#x39;&#56;&#x36;&#x33;&#56;&#x34;&#x34;&#57;&#x35;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;\">&#x39;&#56;&#x36;&#x33;&#56;&#x34;&#x34;&#57;&#x35;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a></p>\n<hr>\n<h1 id=\"小玩具\"><a href=\"#小玩具\" class=\"headerlink\" title=\"小玩具\"></a>小玩具</h1><ul>\n<li><a href=\"https://github.com/SHUAXINDIARY/cacheState\">vuex持久化插件</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/demo-cli\">练习CLI</a></li>\n</ul>\n","site":{"data":{}},"wordcount":249,"excerpt":"","more":"<h1 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h1><blockquote>\n<p> <strong>本站内容</strong></p>\n<ul>\n<li>学习</li>\n<li>记录</li>\n</ul>\n</blockquote>\n<blockquote>\n<p> <strong>建站信息</strong></p>\n<ol>\n<li>建站：Hexo</li>\n<li>主题：<a href=\"http://theme-next.iissnan.com/\">next</a></li>\n<li>部署：github+actions自动打包部署</li>\n<li>评论：<a href=\"https://github.com/gitalk/gitalk\">gitalk</a></li>\n</ol>\n</blockquote>\n<blockquote>\n<p> <strong>曾经用过的第三方插件&amp;主题</strong></p>\n<ul>\n<li>统计：不蒜子统计</li>\n<li>主题：<a href=\"https://github.com/esappear/hexo-theme-clover\">clover</a></li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><ul>\n<li>95后</li>\n<li>前端&amp;计算机爱好者</li>\n</ul>\n<hr>\n<h1 id=\"FIND-ME\"><a href=\"#FIND-ME\" class=\"headerlink\" title=\"FIND ME\"></a>FIND ME</h1><p><a href=\"https://github.com/SHUAXINDIARY\">GITHUB</a></p>\n<p><a href=\"https://www.douban.com/people/91950904/\">DOUBAN</a></p>\n<p>Email:<a href=\"mailto:&#x39;&#56;&#x36;&#x33;&#56;&#x34;&#x34;&#57;&#x35;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;\">&#x39;&#56;&#x36;&#x33;&#56;&#x34;&#x34;&#57;&#x35;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a></p>\n<hr>\n<h1 id=\"小玩具\"><a href=\"#小玩具\" class=\"headerlink\" title=\"小玩具\"></a>小玩具</h1><ul>\n<li><a href=\"https://github.com/SHUAXINDIARY/cacheState\">vuex持久化插件</a></li>\n<li><a href=\"https://github.com/SHUAXINDIARY/demo-cli\">练习CLI</a></li>\n</ul>\n"},{"title":"标签","date":"2019-10-10T01:04:28.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-10-10 09:04:28\ntype: 'tags'\n---\n","updated":"2021-12-31T12:01:59.744Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckxuciv3u0065j7jffs6i844h","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"站点","date":"2020-10-13T15:29:00.000Z","_content":"\n\n**团队**\n\n 名称 | 名称 | 名称 \n ---- | ---|---- \n [GoogleCubelab](https://www.chrome.com/cubelab#experiment) | [腾讯AlloyTeam](http://www.alloyteam.com/) | [ZooTeam](https://www.zoo.team/) \n [奇舞团](https://75.team/) | [凹凸实验室](https://aotu.io/) | [阿里TXD](https://txd.alibaba-inc.com/) \n [腾讯ISUX](https://isux.tencent.com/articles/) | [百度FEX](http://fex.baidu.com/) | [大搜车](https://blog.souche.com/) \n [腾讯CDC](https://cdc.tencent.com/) | [京东JDC](https://jdc.jd.com/) |  \n\n**博客（学习过程中对个人很有帮助的几位前辈）**\n\n| 名称                                    | 名称                                          | 名称                                   | 名称                                                      |\n| --------------------------------------- | --------------------------------------------- | -------------------------------------- | --------------------------------------------------------- |\n| [尤大](https://github.com/yyx990803)    | [soulteary](https://soulteary.com/)           | [雪碧](https://ewind.us/)              | [jiajun的编程思想](https://jiajunhuang.com/)              |\n| [DanAbramov](https://overreacted.io/)   | [张秋怡](https://joyeecheung.github.io/blog/) | [奇舞周刊](https://weekly.75.team/)    | [于江水](https://github.com/yujiangshui?tab=repositories) |\n| [浪里行舟](https://github.com/ljianshu) | [阮一峰](http://www.ruanyifeng.com/blog/)     | [童话](https://tonghuashuo.github.io/) | [阴明](https://ming.today/)                               |\n| [公子](https://imnerd.org/)             | [冴羽](https://github.com/mqyqingfeng)        | [张鑫旭](https://www.zhangxinxu.com/)  | [前端导航](https://www.frontendjs.com/)                   |\n\n**社区（不止技术）**\n\n| 名称                                                  | 名称                                                   | 名称                                   | 名称                                        | 名称                              |\n| ----------------------------------------------------- | ------------------------------------------------------ | -------------------------------------- | ------------------------------------------- | --------------------------------- |\n| [Magi](https://magi.com/)                             | [codePen](https://codepen.io/)                         | [思否](https://segmentfault.com/)      | [leetCode](https://leetcode-cn.com/)        | [InfoQ](https://www.infoq.cn/)    |\n| [掘金](https://juejin.im/)                            | [v2ex](https://www.v2ex.com/)                          | [Github](https://github.com/)          | [stackoverflow](https://stackoverflow.com/) | [码云](https://gitee.com/)        |\n| [数字尾巴](https://www.dgtle.com/)                    | [chiphell](https://www.chiphell.com/)                  | [装备前线](https://www.zfrontier.com/) | [机核网](https://www.gcores.com/)           | [站酷](https://www.zcool.com.cn/) |\n| [doyoudo-资源导航](https://www.doyoudo.com/resources) | [少数派](https://sspai.com/?utm_source=infinitynewtab) | [网易蜗牛读书](https://du.163.com/)    | [微信读书](https://weread.qq.com/)          | [值得买](https://www.smzdm.com/)  |\n\n **常用/不错的技术文档**\n\n| 名称                                         | 名称                                                         | 名称                                                         |\n| :------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [Vue2.x](https://cn.vuejs.org/)              | [React](https://reactjs.org/)                                | [Redux](https://www.redux.org.cn/)                           |\n| [Vue3](https://vue3js.cn/)                   | [React-Router](https://reactrouter.com/web/guides/quick-start) | [Antd](https://ant.design/)                                  |\n| [Element](https://element.eleme.io/#/zh-CN)  | [ElementPlus](https://element-plus.org/#/zh-CN)              | [Glup](https://www.gulpjs.com.cn/)                           |\n| [H5视频组件-chimee](http://chimee.org/)      | [手绘图表库](https://timqian.com/chart.xkcd/)                | [express校验中间件](https://express-validator.github.io/docs/) |\n| [Vue源码学习](https://vue-js.com/learn-vue/) | [React技术揭秘](https://react.iamkasong.com/)                | [normalizr](https://github.com/paularmstrong/normalizr)      |\n\n","source":"sitemap/index.md","raw":"---\ntitle: 站点\ndate: 2020-10-13 23:29:00\n---\n\n\n**团队**\n\n 名称 | 名称 | 名称 \n ---- | ---|---- \n [GoogleCubelab](https://www.chrome.com/cubelab#experiment) | [腾讯AlloyTeam](http://www.alloyteam.com/) | [ZooTeam](https://www.zoo.team/) \n [奇舞团](https://75.team/) | [凹凸实验室](https://aotu.io/) | [阿里TXD](https://txd.alibaba-inc.com/) \n [腾讯ISUX](https://isux.tencent.com/articles/) | [百度FEX](http://fex.baidu.com/) | [大搜车](https://blog.souche.com/) \n [腾讯CDC](https://cdc.tencent.com/) | [京东JDC](https://jdc.jd.com/) |  \n\n**博客（学习过程中对个人很有帮助的几位前辈）**\n\n| 名称                                    | 名称                                          | 名称                                   | 名称                                                      |\n| --------------------------------------- | --------------------------------------------- | -------------------------------------- | --------------------------------------------------------- |\n| [尤大](https://github.com/yyx990803)    | [soulteary](https://soulteary.com/)           | [雪碧](https://ewind.us/)              | [jiajun的编程思想](https://jiajunhuang.com/)              |\n| [DanAbramov](https://overreacted.io/)   | [张秋怡](https://joyeecheung.github.io/blog/) | [奇舞周刊](https://weekly.75.team/)    | [于江水](https://github.com/yujiangshui?tab=repositories) |\n| [浪里行舟](https://github.com/ljianshu) | [阮一峰](http://www.ruanyifeng.com/blog/)     | [童话](https://tonghuashuo.github.io/) | [阴明](https://ming.today/)                               |\n| [公子](https://imnerd.org/)             | [冴羽](https://github.com/mqyqingfeng)        | [张鑫旭](https://www.zhangxinxu.com/)  | [前端导航](https://www.frontendjs.com/)                   |\n\n**社区（不止技术）**\n\n| 名称                                                  | 名称                                                   | 名称                                   | 名称                                        | 名称                              |\n| ----------------------------------------------------- | ------------------------------------------------------ | -------------------------------------- | ------------------------------------------- | --------------------------------- |\n| [Magi](https://magi.com/)                             | [codePen](https://codepen.io/)                         | [思否](https://segmentfault.com/)      | [leetCode](https://leetcode-cn.com/)        | [InfoQ](https://www.infoq.cn/)    |\n| [掘金](https://juejin.im/)                            | [v2ex](https://www.v2ex.com/)                          | [Github](https://github.com/)          | [stackoverflow](https://stackoverflow.com/) | [码云](https://gitee.com/)        |\n| [数字尾巴](https://www.dgtle.com/)                    | [chiphell](https://www.chiphell.com/)                  | [装备前线](https://www.zfrontier.com/) | [机核网](https://www.gcores.com/)           | [站酷](https://www.zcool.com.cn/) |\n| [doyoudo-资源导航](https://www.doyoudo.com/resources) | [少数派](https://sspai.com/?utm_source=infinitynewtab) | [网易蜗牛读书](https://du.163.com/)    | [微信读书](https://weread.qq.com/)          | [值得买](https://www.smzdm.com/)  |\n\n **常用/不错的技术文档**\n\n| 名称                                         | 名称                                                         | 名称                                                         |\n| :------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| [Vue2.x](https://cn.vuejs.org/)              | [React](https://reactjs.org/)                                | [Redux](https://www.redux.org.cn/)                           |\n| [Vue3](https://vue3js.cn/)                   | [React-Router](https://reactrouter.com/web/guides/quick-start) | [Antd](https://ant.design/)                                  |\n| [Element](https://element.eleme.io/#/zh-CN)  | [ElementPlus](https://element-plus.org/#/zh-CN)              | [Glup](https://www.gulpjs.com.cn/)                           |\n| [H5视频组件-chimee](http://chimee.org/)      | [手绘图表库](https://timqian.com/chart.xkcd/)                | [express校验中间件](https://express-validator.github.io/docs/) |\n| [Vue源码学习](https://vue-js.com/learn-vue/) | [React技术揭秘](https://react.iamkasong.com/)                | [normalizr](https://github.com/paularmstrong/normalizr)      |\n\n","updated":"2021-12-31T12:01:59.744Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"ckxuciv40007ej7jfdreo9cc8","content":"<p><strong>团队</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.chrome.com/cubelab#experiment\">GoogleCubelab</a></td>\n<td><a href=\"http://www.alloyteam.com/\">腾讯AlloyTeam</a></td>\n<td><a href=\"https://www.zoo.team/\">ZooTeam</a></td>\n</tr>\n<tr>\n<td><a href=\"https://75.team/\">奇舞团</a></td>\n<td><a href=\"https://aotu.io/\">凹凸实验室</a></td>\n<td><a href=\"https://txd.alibaba-inc.com/\">阿里TXD</a></td>\n</tr>\n<tr>\n<td><a href=\"https://isux.tencent.com/articles/\">腾讯ISUX</a></td>\n<td><a href=\"http://fex.baidu.com/\">百度FEX</a></td>\n<td><a href=\"https://blog.souche.com/\">大搜车</a></td>\n</tr>\n<tr>\n<td><a href=\"https://cdc.tencent.com/\">腾讯CDC</a></td>\n<td><a href=\"https://jdc.jd.com/\">京东JDC</a></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>博客（学习过程中对个人很有帮助的几位前辈）</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/yyx990803\">尤大</a></td>\n<td><a href=\"https://soulteary.com/\">soulteary</a></td>\n<td><a href=\"https://ewind.us/\">雪碧</a></td>\n<td><a href=\"https://jiajunhuang.com/\">jiajun的编程思想</a></td>\n</tr>\n<tr>\n<td><a href=\"https://overreacted.io/\">DanAbramov</a></td>\n<td><a href=\"https://joyeecheung.github.io/blog/\">张秋怡</a></td>\n<td><a href=\"https://weekly.75.team/\">奇舞周刊</a></td>\n<td><a href=\"https://github.com/yujiangshui?tab=repositories\">于江水</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ljianshu\">浪里行舟</a></td>\n<td><a href=\"http://www.ruanyifeng.com/blog/\">阮一峰</a></td>\n<td><a href=\"https://tonghuashuo.github.io/\">童话</a></td>\n<td><a href=\"https://ming.today/\">阴明</a></td>\n</tr>\n<tr>\n<td><a href=\"https://imnerd.org/\">公子</a></td>\n<td><a href=\"https://github.com/mqyqingfeng\">冴羽</a></td>\n<td><a href=\"https://www.zhangxinxu.com/\">张鑫旭</a></td>\n<td><a href=\"https://www.frontendjs.com/\">前端导航</a></td>\n</tr>\n</tbody></table>\n<p><strong>社区（不止技术）</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://magi.com/\">Magi</a></td>\n<td><a href=\"https://codepen.io/\">codePen</a></td>\n<td><a href=\"https://segmentfault.com/\">思否</a></td>\n<td><a href=\"https://leetcode-cn.com/\">leetCode</a></td>\n<td><a href=\"https://www.infoq.cn/\">InfoQ</a></td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/\">掘金</a></td>\n<td><a href=\"https://www.v2ex.com/\">v2ex</a></td>\n<td><a href=\"https://github.com/\">Github</a></td>\n<td><a href=\"https://stackoverflow.com/\">stackoverflow</a></td>\n<td><a href=\"https://gitee.com/\">码云</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.dgtle.com/\">数字尾巴</a></td>\n<td><a href=\"https://www.chiphell.com/\">chiphell</a></td>\n<td><a href=\"https://www.zfrontier.com/\">装备前线</a></td>\n<td><a href=\"https://www.gcores.com/\">机核网</a></td>\n<td><a href=\"https://www.zcool.com.cn/\">站酷</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.doyoudo.com/resources\">doyoudo-资源导航</a></td>\n<td><a href=\"https://sspai.com/?utm_source=infinitynewtab\">少数派</a></td>\n<td><a href=\"https://du.163.com/\">网易蜗牛读书</a></td>\n<td><a href=\"https://weread.qq.com/\">微信读书</a></td>\n<td><a href=\"https://www.smzdm.com/\">值得买</a></td>\n</tr>\n</tbody></table>\n<p> <strong>常用/不错的技术文档</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th>名称</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://cn.vuejs.org/\">Vue2.x</a></td>\n<td><a href=\"https://reactjs.org/\">React</a></td>\n<td><a href=\"https://www.redux.org.cn/\">Redux</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://vue3js.cn/\">Vue3</a></td>\n<td><a href=\"https://reactrouter.com/web/guides/quick-start\">React-Router</a></td>\n<td><a href=\"https://ant.design/\">Antd</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://element.eleme.io/#/zh-CN\">Element</a></td>\n<td><a href=\"https://element-plus.org/#/zh-CN\">ElementPlus</a></td>\n<td><a href=\"https://www.gulpjs.com.cn/\">Glup</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"http://chimee.org/\">H5视频组件-chimee</a></td>\n<td><a href=\"https://timqian.com/chart.xkcd/\">手绘图表库</a></td>\n<td><a href=\"https://express-validator.github.io/docs/\">express校验中间件</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://vue-js.com/learn-vue/\">Vue源码学习</a></td>\n<td><a href=\"https://react.iamkasong.com/\">React技术揭秘</a></td>\n<td><a href=\"https://github.com/paularmstrong/normalizr\">normalizr</a></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"wordcount":420,"excerpt":"","more":"<p><strong>团队</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.chrome.com/cubelab#experiment\">GoogleCubelab</a></td>\n<td><a href=\"http://www.alloyteam.com/\">腾讯AlloyTeam</a></td>\n<td><a href=\"https://www.zoo.team/\">ZooTeam</a></td>\n</tr>\n<tr>\n<td><a href=\"https://75.team/\">奇舞团</a></td>\n<td><a href=\"https://aotu.io/\">凹凸实验室</a></td>\n<td><a href=\"https://txd.alibaba-inc.com/\">阿里TXD</a></td>\n</tr>\n<tr>\n<td><a href=\"https://isux.tencent.com/articles/\">腾讯ISUX</a></td>\n<td><a href=\"http://fex.baidu.com/\">百度FEX</a></td>\n<td><a href=\"https://blog.souche.com/\">大搜车</a></td>\n</tr>\n<tr>\n<td><a href=\"https://cdc.tencent.com/\">腾讯CDC</a></td>\n<td><a href=\"https://jdc.jd.com/\">京东JDC</a></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>博客（学习过程中对个人很有帮助的几位前辈）</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/yyx990803\">尤大</a></td>\n<td><a href=\"https://soulteary.com/\">soulteary</a></td>\n<td><a href=\"https://ewind.us/\">雪碧</a></td>\n<td><a href=\"https://jiajunhuang.com/\">jiajun的编程思想</a></td>\n</tr>\n<tr>\n<td><a href=\"https://overreacted.io/\">DanAbramov</a></td>\n<td><a href=\"https://joyeecheung.github.io/blog/\">张秋怡</a></td>\n<td><a href=\"https://weekly.75.team/\">奇舞周刊</a></td>\n<td><a href=\"https://github.com/yujiangshui?tab=repositories\">于江水</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ljianshu\">浪里行舟</a></td>\n<td><a href=\"http://www.ruanyifeng.com/blog/\">阮一峰</a></td>\n<td><a href=\"https://tonghuashuo.github.io/\">童话</a></td>\n<td><a href=\"https://ming.today/\">阴明</a></td>\n</tr>\n<tr>\n<td><a href=\"https://imnerd.org/\">公子</a></td>\n<td><a href=\"https://github.com/mqyqingfeng\">冴羽</a></td>\n<td><a href=\"https://www.zhangxinxu.com/\">张鑫旭</a></td>\n<td><a href=\"https://www.frontendjs.com/\">前端导航</a></td>\n</tr>\n</tbody></table>\n<p><strong>社区（不止技术）</strong></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://magi.com/\">Magi</a></td>\n<td><a href=\"https://codepen.io/\">codePen</a></td>\n<td><a href=\"https://segmentfault.com/\">思否</a></td>\n<td><a href=\"https://leetcode-cn.com/\">leetCode</a></td>\n<td><a href=\"https://www.infoq.cn/\">InfoQ</a></td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/\">掘金</a></td>\n<td><a href=\"https://www.v2ex.com/\">v2ex</a></td>\n<td><a href=\"https://github.com/\">Github</a></td>\n<td><a href=\"https://stackoverflow.com/\">stackoverflow</a></td>\n<td><a href=\"https://gitee.com/\">码云</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.dgtle.com/\">数字尾巴</a></td>\n<td><a href=\"https://www.chiphell.com/\">chiphell</a></td>\n<td><a href=\"https://www.zfrontier.com/\">装备前线</a></td>\n<td><a href=\"https://www.gcores.com/\">机核网</a></td>\n<td><a href=\"https://www.zcool.com.cn/\">站酷</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.doyoudo.com/resources\">doyoudo-资源导航</a></td>\n<td><a href=\"https://sspai.com/?utm_source=infinitynewtab\">少数派</a></td>\n<td><a href=\"https://du.163.com/\">网易蜗牛读书</a></td>\n<td><a href=\"https://weread.qq.com/\">微信读书</a></td>\n<td><a href=\"https://www.smzdm.com/\">值得买</a></td>\n</tr>\n</tbody></table>\n<p> <strong>常用/不错的技术文档</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th>名称</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://cn.vuejs.org/\">Vue2.x</a></td>\n<td><a href=\"https://reactjs.org/\">React</a></td>\n<td><a href=\"https://www.redux.org.cn/\">Redux</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://vue3js.cn/\">Vue3</a></td>\n<td><a href=\"https://reactrouter.com/web/guides/quick-start\">React-Router</a></td>\n<td><a href=\"https://ant.design/\">Antd</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://element.eleme.io/#/zh-CN\">Element</a></td>\n<td><a href=\"https://element-plus.org/#/zh-CN\">ElementPlus</a></td>\n<td><a href=\"https://www.gulpjs.com.cn/\">Glup</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"http://chimee.org/\">H5视频组件-chimee</a></td>\n<td><a href=\"https://timqian.com/chart.xkcd/\">手绘图表库</a></td>\n<td><a href=\"https://express-validator.github.io/docs/\">express校验中间件</a></td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://vue-js.com/learn-vue/\">Vue源码学习</a></td>\n<td><a href=\"https://react.iamkasong.com/\">React技术揭秘</a></td>\n<td><a href=\"https://github.com/paularmstrong/normalizr\">normalizr</a></td>\n</tr>\n</tbody></table>\n"},{"title":"分类","date":"2019-10-08T11:30:08.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-10-08 19:30:08\ntype: \"categories\"\n---\n","updated":"2021-12-31T12:01:59.690Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckxuciv41007gj7jf5s1y3gbg","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"title":"澳门玩具踩点-搬","date":"2021-12-31T11:51:18.000Z","tag":null,"index_img":"https://img.shuaxindiary.cn/1640951535130.png","banner_img":"https://img.shuaxindiary.cn/1640951535130.png","_content":"\n# 前文\n\n因为有去澳门玩的打算，恰好看到 **[小白哥乌拉诺斯](https://weibo.com/u/1918541453?refer_flag=0000015010_&from=feed&loc=nickname)** 的澳门玩具店踩点记录，特此搬运记录一下。\n\n## 正文\n\n澳门玩具店主要集中在两个区域，第一个是贾伯乐提督街附近，第二就是大三巴牌坊附近。\n如图一所示，贾伯乐提督街从叶挺故居开始，有新龙玩具，玩具城，海贼王道，恒利，东京都，一雄，咏濠等店，其中玩具城是比较大的，新龙的中古品比较多，一雄有漫画书，边上还新开了家一雄扭蛋。沿着提督街跟着导航吃吃逛逛两公里左右，就能到大三巴牌坊，牌坊的扶梯下面就有澳门最值得逛的玩具店，玩具王国，这家店从我十多年前去就有了，而且一度是我比较下来乐高最便宜的店，店的招牌最近也换了新的，可以看到还是玩具总动员的风格。在牌坊附近还有KZ，wetoys等几家店，详见图十。这些店用GoogleMap都可以找到，澳门玩具新品价格和淘宝闲鱼相比互有高低，但是到货快，另外中古商品价格有些还不错，大家去澳门的时候可以去看看，另外微信支付宝都可以用，有些店是实时汇率，MOP目前汇率是0.795，有的店会加一点手续费（玩具王国100澳币收1元支付宝手续费）。\n\n![](https://img.shuaxindiary.cn/1640951911971.png)\n\n![](https://img.shuaxindiary.cn/1640951960285.png)\n\n![](https://img.shuaxindiary.cn/1640952000458.png)","source":"_posts/随笔/澳门玩具踩点-搬.md","raw":"---\ntitle: 澳门玩具踩点-搬\ncategory:\n  - 随笔\ndate: 2021-12-31 19:51:18\ntag:\nindex_img: https://img.shuaxindiary.cn/1640951535130.png\nbanner_img: https://img.shuaxindiary.cn/1640951535130.png\n---\n\n# 前文\n\n因为有去澳门玩的打算，恰好看到 **[小白哥乌拉诺斯](https://weibo.com/u/1918541453?refer_flag=0000015010_&from=feed&loc=nickname)** 的澳门玩具店踩点记录，特此搬运记录一下。\n\n## 正文\n\n澳门玩具店主要集中在两个区域，第一个是贾伯乐提督街附近，第二就是大三巴牌坊附近。\n如图一所示，贾伯乐提督街从叶挺故居开始，有新龙玩具，玩具城，海贼王道，恒利，东京都，一雄，咏濠等店，其中玩具城是比较大的，新龙的中古品比较多，一雄有漫画书，边上还新开了家一雄扭蛋。沿着提督街跟着导航吃吃逛逛两公里左右，就能到大三巴牌坊，牌坊的扶梯下面就有澳门最值得逛的玩具店，玩具王国，这家店从我十多年前去就有了，而且一度是我比较下来乐高最便宜的店，店的招牌最近也换了新的，可以看到还是玩具总动员的风格。在牌坊附近还有KZ，wetoys等几家店，详见图十。这些店用GoogleMap都可以找到，澳门玩具新品价格和淘宝闲鱼相比互有高低，但是到货快，另外中古商品价格有些还不错，大家去澳门的时候可以去看看，另外微信支付宝都可以用，有些店是实时汇率，MOP目前汇率是0.795，有的店会加一点手续费（玩具王国100澳币收1元支付宝手续费）。\n\n![](https://img.shuaxindiary.cn/1640951911971.png)\n\n![](https://img.shuaxindiary.cn/1640951960285.png)\n\n![](https://img.shuaxindiary.cn/1640952000458.png)","slug":"随笔/澳门玩具踩点-搬","published":1,"updated":"2021-12-31T12:00:49.646Z","_id":"ckxuc6k2r0000j7jf167sfayg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前文\"><a href=\"#前文\" class=\"headerlink\" title=\"前文\"></a>前文</h1><p>因为有去澳门玩的打算，恰好看到 <strong><a href=\"https://weibo.com/u/1918541453?refer_flag=0000015010_&from=feed&loc=nickname\">小白哥乌拉诺斯</a></strong> 的澳门玩具店踩点记录，特此搬运记录一下。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>澳门玩具店主要集中在两个区域，第一个是贾伯乐提督街附近，第二就是大三巴牌坊附近。<br>如图一所示，贾伯乐提督街从叶挺故居开始，有新龙玩具，玩具城，海贼王道，恒利，东京都，一雄，咏濠等店，其中玩具城是比较大的，新龙的中古品比较多，一雄有漫画书，边上还新开了家一雄扭蛋。沿着提督街跟着导航吃吃逛逛两公里左右，就能到大三巴牌坊，牌坊的扶梯下面就有澳门最值得逛的玩具店，玩具王国，这家店从我十多年前去就有了，而且一度是我比较下来乐高最便宜的店，店的招牌最近也换了新的，可以看到还是玩具总动员的风格。在牌坊附近还有KZ，wetoys等几家店，详见图十。这些店用GoogleMap都可以找到，澳门玩具新品价格和淘宝闲鱼相比互有高低，但是到货快，另外中古商品价格有些还不错，大家去澳门的时候可以去看看，另外微信支付宝都可以用，有些店是实时汇率，MOP目前汇率是0.795，有的店会加一点手续费（玩具王国100澳币收1元支付宝手续费）。</p>\n<p><img src=\"https://img.shuaxindiary.cn/1640951911971.png\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/1640951960285.png\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/1640952000458.png\"></p>\n","site":{"data":{}},"wordcount":453,"excerpt":"","more":"<h1 id=\"前文\"><a href=\"#前文\" class=\"headerlink\" title=\"前文\"></a>前文</h1><p>因为有去澳门玩的打算，恰好看到 <strong><a href=\"https://weibo.com/u/1918541453?refer_flag=0000015010_&from=feed&loc=nickname\">小白哥乌拉诺斯</a></strong> 的澳门玩具店踩点记录，特此搬运记录一下。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>澳门玩具店主要集中在两个区域，第一个是贾伯乐提督街附近，第二就是大三巴牌坊附近。<br>如图一所示，贾伯乐提督街从叶挺故居开始，有新龙玩具，玩具城，海贼王道，恒利，东京都，一雄，咏濠等店，其中玩具城是比较大的，新龙的中古品比较多，一雄有漫画书，边上还新开了家一雄扭蛋。沿着提督街跟着导航吃吃逛逛两公里左右，就能到大三巴牌坊，牌坊的扶梯下面就有澳门最值得逛的玩具店，玩具王国，这家店从我十多年前去就有了，而且一度是我比较下来乐高最便宜的店，店的招牌最近也换了新的，可以看到还是玩具总动员的风格。在牌坊附近还有KZ，wetoys等几家店，详见图十。这些店用GoogleMap都可以找到，澳门玩具新品价格和淘宝闲鱼相比互有高低，但是到货快，另外中古商品价格有些还不错，大家去澳门的时候可以去看看，另外微信支付宝都可以用，有些店是实时汇率，MOP目前汇率是0.795，有的店会加一点手续费（玩具王国100澳币收1元支付宝手续费）。</p>\n<p><img src=\"https://img.shuaxindiary.cn/1640951911971.png\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/1640951960285.png\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/1640952000458.png\"></p>\n"},{"title":"vuejs基础复习2---组件/组件通信","abbrlink":47404,"date":"2019-09-26T03:26:06.000Z","_content":"\n\n# 什么是组件呢？\n>1.简单的理解，UI层组件可以是一个按钮，可以是一个轮播图等等；逻辑方面，就是可复用的代码块；\n>2.更简单粗暴的理解，因为vue做的是单页应用，意味着只有一个HTML文件，那每一个页面其实就是组成这个HTML文件的一部分，而每个页面又是通过不同的部分组成；所以一个页面可以理解成一个大的组件，页面里的每一个部分，都是一个一个小组件；\n<!-- more -->\n# 什么是组件化开发和模块化开发呢？\n>1.模块化和组件化想要达成的目的都是一样的，组件化是包含了UI和页面逻辑处理在一起；而模块化只是将可以重复使用的逻辑代码提取成一个个模块，方便随时使用；\n>2.两者都是一种开发思想，为了更好的开发效率\n<!-- more -->\n\n# 怎么在vue中创建并注册一个组件呢？(暂时不包括模块开发)\n>1.在vue中全局创建组件\n```html\n\n<!-- 第一个参数 是字符串，定义该组件名字； -->\n<!-- 第二个参数是一个对象，需要定义组件的模板，其他都是和vue实例中的一样 -->\n<!-- 这里需要注意，一个组件的 data 选项必须是一个函数；\n这样的目的，是为了让每个组件之间的数据独立；\n原理就是js函数会重新开辟一块存储空间，存储当前组件的数据\n返回一个对象就是让我们能拿到这个对象里的数据 -->\n<script>\n    Vue.component('btn',{\n        template:'<button @click=\"hint\">clickme</button>',\n        data(){\n            return{\n                name:'全局组件'\n            }\n        },\n        methods:{\n            hint:function(){\n                alert(this.name);//在页面会出现提示窗 并显示全局组件\n            }\n        }\n    });\n</script>\n// 使用该组件\n<btn></btn>\n```\n>2.创建一个局部组件\n```html\n\n// 注册后才能使用\n<div id='app'>\n    <btn></btn>\n</div>\n\n<script>\nlet btn={\n    template:'<button @click=\"hint\">clickme</button>',\n    data(){\n        return{\n            name:'局部组件'\n        }\n    },\n    methods:{\n        hint:function(){\n            alert(this.name);//在页面会出现提示窗 并显示全局组件\n        }\n    }\n};\nnew Vue({\n    le:'#app',\n    data:{\n        name:'组件练习'\n    },\n    // 注册我们的局部组件\n    components:{\n        btn:btn\n    }\n})\n</script>\n```\n>3.两种组件创建的区别：\n- 全局组件不需要注册，可以直接使用，所以可以再任意的vue实例中使用；\n- 局部组件需要在要使用它的vue实例里注册后，才能使用\n\n# 什么是组件通信？\n>在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据\n>正因为每一个组件维护属于自己的data，所以在一个组件中想要使用其他组件的data数据就需要进行组件通信\n\n# 组件通信有哪些类型呢？\n>1.父子组件之间传递\n>2.子父组件之间传递\n>3.兄弟组件之间传递\n>4.跨级组件之间传递\n\n# 关于父子组件通信\n>1.在父组件中使用子组件时，在子组件上通过v-bind(缩写为 :)绑定要传递的数据\n>2.在子组件中，使用props来接受父组件传递过来的数据\n\n***代码***\n\n```html\n\n<!-- 这里父组件就是我们的vue实例 然后创建一个子组件one -->\n<div id='app'>\n<!-- 绑定我们要传递的数据，然后传递要传递的数据 -->\n    <one v-bind:name='name'></one>\n</div>\n<script>\nlet one={\n    template:'<div>{{name}}</div>',\n    props:{\n        name:{ type:String}\n    }\n};\nnew Vue({\n    le:'#app',\n    data:{\n        name:'父组件'\n    },\n    // 注册我们的局部组件\n    components:{\n        one:one\n    }\n})\n</script>\n```\n\n# 关于子父组件通信\n>1.子组件通过$emit监听一个自定义事件，传递数据给父组件\n>2.父组件通过v-on(缩写为@)监听该自定义事件，然后该事件会触发一个函数来获取子组件传递的数据\n\n```html\n<div id=\"app\">\n    {{name}}\n    <one v-on:ok='get'></one>\n</div>\n<script>\n// 点击子组件的button 后开始传递数据\n let one={\n        template:'<div><button @click=\"start\">click</button></div>',\n        data(){\n            return{\n                name:'子组件'\n            }\n        },\n        methods:{\n            start:function(){\n                // 触发自定义ok事件\n                this.$emit('ok',this.name);\n            }\n        }\n    }\nnew Vue({\n    el:'#app',\n    data:{\n        name:'parent'\n    },\n    components:{\n        one\n    },\n    methods:{\n        get:function(e){\n            this.name=e;\n        }\n    }\n})\n</script>\n```\n\n# 使用全局事件管理中心进行跨级组件通信(父子,子父,跨级也可以用)\n>1.重新创建一个vue对象\n>2.在需要传递参数的组件内部通过$emit绑定触发一个自定义事件，并传递要传递的数据\n>3.在需要接受数据的组件通过$on绑定被emit触发的事件，然后在回调函数中接受传递过来的参数\n\n```html\n    <div id=\"app\">\n        <one></one>\n        <two></two>\n    </div>\n    <script>\n    // 创建事件管理中心对象\n    let event=new Vue();\n    // 创建两个组件\n    let one={\n        template:'<div>{{name}}<button @click=\"start\">发送</button></div>',\n        data(){\n            return{\n                name:'one'\n            }\n        },\n        methods:{\n            // 当我们点击发送按钮后执行该函数\n            start(){\n                // 触发recive这个我们自定义的事件 并传递要传递的数据\n                event.$emit('recive',this.name);\n            }\n        }\n    }\n    let two={\n        template:'<div>{{name}}</div>',\n        data(){\n            return{\n                name:'two'\n            }\n        },\n        // 官方的生命周期函数  理解为在我们的所有数据渲染在div节点内部前自动执行的一个函数\n        mounted(){\n            // 这里我们监听另一个组件触发的函数，然后接受传递过来的数据\n            event.$on('recive',(data)=>{\n                this.name=data;\n            });\n        }\n    }\n    new Vue({\n        el:'#app',\n        data:{\n            name:'event'\n        },\n        components:{\n            one,\n            two\n        }\n    })\n    </script>\n```\n\n# 跨级组件(父组件和子孙组件)通信\n***假设父组件是A，子组件是B，孙子组件是C***\n>1.A组件通过v-bind绑定要传递数据\n>2.在B中不使用props接收，而是在B组件中的C组件上通过v-bind='$attrs' 来转发A组件传递过来的数据\n>3.在C组件内部可以通过this.$attrs获取到A组件传递过来的数据(获取到的是对象格式)\n>tips:\n- 在C组件中设置inheritAttrs: false；\n- 这个属性是为了C组件在B中使用v-bind='$attrs'时，该属性不会被当做HTML的属性渲染到页面\n\n```html\n    <div id=\"app\">\n            <one :name='name'></one>\n    </div>\n    <script>\n    let two = {\n                template: '<div>{{name}}</div>',\n                data() {\n                    return {\n                        name: 'two'\n                    }\n                },\n                mounted() {\n                    // 接受传递的数据\n                    this.name = this.$attrs['name'];\n                },\n                inheritAttrs: false,\n\n    }\n    let one = {\n        // 转发父组件的数据给自己的子组件\n        template: '<div>{{msg}} <two v-bind=\"$attrs\"></two> </div>',\n        data() {\n            return {\n                msg :'one'\n            }\n        },\n        components: {\n            two\n        }\n    }\n    new Vue({\n        el: '#app',\n        data: {\n            name: 'app'\n        },\n        components: {\n            one\n        }\n    })\n    </script>\n```\n\n# 使用provide(对象/函数内部返回一个对象)和inject(数组/字符数组格式)进行跨级通信\n>1.在父组件通过provide提供要所有子组件可继承的属性\n>2.所有的子组件都可以用inject来进行继承\n```html\n    <div id=\"app\">\n            {{name}}\n            <one></one>\n    </div>\n    <script>\n        let one = {\n            template: '<div>{{msg}} </div>',\n            data() {\n                return {\n                    msg: 'one'\n                }\n            },\n            inject: ['name'],\n            mounted() {\n                console.log(this.name);\n                this.msg = '继承的'+this.name;\n            }\n        }\n        new Vue({\n            el: '#app',\n            data: {\n                name: 'app'\n            },\n            provide() {\n                // 定义一个name属性 然后把data的name的值赋值给他\n                this.name = this.name;\n                return {\n                    // 返回一个新的name变量 值为刚才定义的name属性\n                    name: this.name\n                }\n            },\n            components: {\n                one\n            }\n        })\n        </script>\n```\n\n# $parent和$childern和ref进行父子组件通信\n>获取子组件数据\n- 在子组件绑定ref='属性名'  获取时通过this.$refs.属性名 获取到该组件实例\n>获取父组件\n- this.$parent\n```html\n<div id=\"app\">\n        {{name}}\n        <one ref='one'></one>\n</div>\n<script>\n    let one = {\n        template: '<div>one</div>',\n        data() {\n            return {\n                name: 'one'\n            }\n        },\n        mounted(){\n            // 获取父组件的data\n            console.log(this.$parent.name);\n        }\n    }\n    new Vue({\n        el: '#app',\n        data: {\n            name: 'app'\n        },\n        components: {\n            one\n        },\n        mounted() {\n            // 获取子组件data\n            console.log(this.$refs.one.name);\n        }\n    })\n    </script>\n```\n","source":"_posts/vue/vuejs基础复习-2.md","raw":"---\ntitle: vuejs基础复习2---组件/组件通信\ncategory:\n  - 技术笔记\ntag:\n  - Vue\n  - 前端\nabbrlink: 47404\ndate: 2019-09-26 11:26:06\n---\n\n\n# 什么是组件呢？\n>1.简单的理解，UI层组件可以是一个按钮，可以是一个轮播图等等；逻辑方面，就是可复用的代码块；\n>2.更简单粗暴的理解，因为vue做的是单页应用，意味着只有一个HTML文件，那每一个页面其实就是组成这个HTML文件的一部分，而每个页面又是通过不同的部分组成；所以一个页面可以理解成一个大的组件，页面里的每一个部分，都是一个一个小组件；\n<!-- more -->\n# 什么是组件化开发和模块化开发呢？\n>1.模块化和组件化想要达成的目的都是一样的，组件化是包含了UI和页面逻辑处理在一起；而模块化只是将可以重复使用的逻辑代码提取成一个个模块，方便随时使用；\n>2.两者都是一种开发思想，为了更好的开发效率\n<!-- more -->\n\n# 怎么在vue中创建并注册一个组件呢？(暂时不包括模块开发)\n>1.在vue中全局创建组件\n```html\n\n<!-- 第一个参数 是字符串，定义该组件名字； -->\n<!-- 第二个参数是一个对象，需要定义组件的模板，其他都是和vue实例中的一样 -->\n<!-- 这里需要注意，一个组件的 data 选项必须是一个函数；\n这样的目的，是为了让每个组件之间的数据独立；\n原理就是js函数会重新开辟一块存储空间，存储当前组件的数据\n返回一个对象就是让我们能拿到这个对象里的数据 -->\n<script>\n    Vue.component('btn',{\n        template:'<button @click=\"hint\">clickme</button>',\n        data(){\n            return{\n                name:'全局组件'\n            }\n        },\n        methods:{\n            hint:function(){\n                alert(this.name);//在页面会出现提示窗 并显示全局组件\n            }\n        }\n    });\n</script>\n// 使用该组件\n<btn></btn>\n```\n>2.创建一个局部组件\n```html\n\n// 注册后才能使用\n<div id='app'>\n    <btn></btn>\n</div>\n\n<script>\nlet btn={\n    template:'<button @click=\"hint\">clickme</button>',\n    data(){\n        return{\n            name:'局部组件'\n        }\n    },\n    methods:{\n        hint:function(){\n            alert(this.name);//在页面会出现提示窗 并显示全局组件\n        }\n    }\n};\nnew Vue({\n    le:'#app',\n    data:{\n        name:'组件练习'\n    },\n    // 注册我们的局部组件\n    components:{\n        btn:btn\n    }\n})\n</script>\n```\n>3.两种组件创建的区别：\n- 全局组件不需要注册，可以直接使用，所以可以再任意的vue实例中使用；\n- 局部组件需要在要使用它的vue实例里注册后，才能使用\n\n# 什么是组件通信？\n>在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据\n>正因为每一个组件维护属于自己的data，所以在一个组件中想要使用其他组件的data数据就需要进行组件通信\n\n# 组件通信有哪些类型呢？\n>1.父子组件之间传递\n>2.子父组件之间传递\n>3.兄弟组件之间传递\n>4.跨级组件之间传递\n\n# 关于父子组件通信\n>1.在父组件中使用子组件时，在子组件上通过v-bind(缩写为 :)绑定要传递的数据\n>2.在子组件中，使用props来接受父组件传递过来的数据\n\n***代码***\n\n```html\n\n<!-- 这里父组件就是我们的vue实例 然后创建一个子组件one -->\n<div id='app'>\n<!-- 绑定我们要传递的数据，然后传递要传递的数据 -->\n    <one v-bind:name='name'></one>\n</div>\n<script>\nlet one={\n    template:'<div>{{name}}</div>',\n    props:{\n        name:{ type:String}\n    }\n};\nnew Vue({\n    le:'#app',\n    data:{\n        name:'父组件'\n    },\n    // 注册我们的局部组件\n    components:{\n        one:one\n    }\n})\n</script>\n```\n\n# 关于子父组件通信\n>1.子组件通过$emit监听一个自定义事件，传递数据给父组件\n>2.父组件通过v-on(缩写为@)监听该自定义事件，然后该事件会触发一个函数来获取子组件传递的数据\n\n```html\n<div id=\"app\">\n    {{name}}\n    <one v-on:ok='get'></one>\n</div>\n<script>\n// 点击子组件的button 后开始传递数据\n let one={\n        template:'<div><button @click=\"start\">click</button></div>',\n        data(){\n            return{\n                name:'子组件'\n            }\n        },\n        methods:{\n            start:function(){\n                // 触发自定义ok事件\n                this.$emit('ok',this.name);\n            }\n        }\n    }\nnew Vue({\n    el:'#app',\n    data:{\n        name:'parent'\n    },\n    components:{\n        one\n    },\n    methods:{\n        get:function(e){\n            this.name=e;\n        }\n    }\n})\n</script>\n```\n\n# 使用全局事件管理中心进行跨级组件通信(父子,子父,跨级也可以用)\n>1.重新创建一个vue对象\n>2.在需要传递参数的组件内部通过$emit绑定触发一个自定义事件，并传递要传递的数据\n>3.在需要接受数据的组件通过$on绑定被emit触发的事件，然后在回调函数中接受传递过来的参数\n\n```html\n    <div id=\"app\">\n        <one></one>\n        <two></two>\n    </div>\n    <script>\n    // 创建事件管理中心对象\n    let event=new Vue();\n    // 创建两个组件\n    let one={\n        template:'<div>{{name}}<button @click=\"start\">发送</button></div>',\n        data(){\n            return{\n                name:'one'\n            }\n        },\n        methods:{\n            // 当我们点击发送按钮后执行该函数\n            start(){\n                // 触发recive这个我们自定义的事件 并传递要传递的数据\n                event.$emit('recive',this.name);\n            }\n        }\n    }\n    let two={\n        template:'<div>{{name}}</div>',\n        data(){\n            return{\n                name:'two'\n            }\n        },\n        // 官方的生命周期函数  理解为在我们的所有数据渲染在div节点内部前自动执行的一个函数\n        mounted(){\n            // 这里我们监听另一个组件触发的函数，然后接受传递过来的数据\n            event.$on('recive',(data)=>{\n                this.name=data;\n            });\n        }\n    }\n    new Vue({\n        el:'#app',\n        data:{\n            name:'event'\n        },\n        components:{\n            one,\n            two\n        }\n    })\n    </script>\n```\n\n# 跨级组件(父组件和子孙组件)通信\n***假设父组件是A，子组件是B，孙子组件是C***\n>1.A组件通过v-bind绑定要传递数据\n>2.在B中不使用props接收，而是在B组件中的C组件上通过v-bind='$attrs' 来转发A组件传递过来的数据\n>3.在C组件内部可以通过this.$attrs获取到A组件传递过来的数据(获取到的是对象格式)\n>tips:\n- 在C组件中设置inheritAttrs: false；\n- 这个属性是为了C组件在B中使用v-bind='$attrs'时，该属性不会被当做HTML的属性渲染到页面\n\n```html\n    <div id=\"app\">\n            <one :name='name'></one>\n    </div>\n    <script>\n    let two = {\n                template: '<div>{{name}}</div>',\n                data() {\n                    return {\n                        name: 'two'\n                    }\n                },\n                mounted() {\n                    // 接受传递的数据\n                    this.name = this.$attrs['name'];\n                },\n                inheritAttrs: false,\n\n    }\n    let one = {\n        // 转发父组件的数据给自己的子组件\n        template: '<div>{{msg}} <two v-bind=\"$attrs\"></two> </div>',\n        data() {\n            return {\n                msg :'one'\n            }\n        },\n        components: {\n            two\n        }\n    }\n    new Vue({\n        el: '#app',\n        data: {\n            name: 'app'\n        },\n        components: {\n            one\n        }\n    })\n    </script>\n```\n\n# 使用provide(对象/函数内部返回一个对象)和inject(数组/字符数组格式)进行跨级通信\n>1.在父组件通过provide提供要所有子组件可继承的属性\n>2.所有的子组件都可以用inject来进行继承\n```html\n    <div id=\"app\">\n            {{name}}\n            <one></one>\n    </div>\n    <script>\n        let one = {\n            template: '<div>{{msg}} </div>',\n            data() {\n                return {\n                    msg: 'one'\n                }\n            },\n            inject: ['name'],\n            mounted() {\n                console.log(this.name);\n                this.msg = '继承的'+this.name;\n            }\n        }\n        new Vue({\n            el: '#app',\n            data: {\n                name: 'app'\n            },\n            provide() {\n                // 定义一个name属性 然后把data的name的值赋值给他\n                this.name = this.name;\n                return {\n                    // 返回一个新的name变量 值为刚才定义的name属性\n                    name: this.name\n                }\n            },\n            components: {\n                one\n            }\n        })\n        </script>\n```\n\n# $parent和$childern和ref进行父子组件通信\n>获取子组件数据\n- 在子组件绑定ref='属性名'  获取时通过this.$refs.属性名 获取到该组件实例\n>获取父组件\n- this.$parent\n```html\n<div id=\"app\">\n        {{name}}\n        <one ref='one'></one>\n</div>\n<script>\n    let one = {\n        template: '<div>one</div>',\n        data() {\n            return {\n                name: 'one'\n            }\n        },\n        mounted(){\n            // 获取父组件的data\n            console.log(this.$parent.name);\n        }\n    }\n    new Vue({\n        el: '#app',\n        data: {\n            name: 'app'\n        },\n        components: {\n            one\n        },\n        mounted() {\n            // 获取子组件data\n            console.log(this.$refs.one.name);\n        }\n    })\n    </script>\n```\n","slug":"vue/vuejs基础复习-2","published":1,"updated":"2021-12-31T12:01:59.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv110002j7jfalxy3t8d","content":"<h1 id=\"什么是组件呢？\"><a href=\"#什么是组件呢？\" class=\"headerlink\" title=\"什么是组件呢？\"></a>什么是组件呢？</h1><blockquote>\n<p>1.简单的理解，UI层组件可以是一个按钮，可以是一个轮播图等等；逻辑方面，就是可复用的代码块；<br>2.更简单粗暴的理解，因为vue做的是单页应用，意味着只有一个HTML文件，那每一个页面其实就是组成这个HTML文件的一部分，而每个页面又是通过不同的部分组成；所以一个页面可以理解成一个大的组件，页面里的每一个部分，都是一个一个小组件；</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"什么是组件化开发和模块化开发呢？\"><a href=\"#什么是组件化开发和模块化开发呢？\" class=\"headerlink\" title=\"什么是组件化开发和模块化开发呢？\"></a>什么是组件化开发和模块化开发呢？</h1><blockquote>\n<p>1.模块化和组件化想要达成的目的都是一样的，组件化是包含了UI和页面逻辑处理在一起；而模块化只是将可以重复使用的逻辑代码提取成一个个模块，方便随时使用；<br>2.两者都是一种开发思想，为了更好的开发效率</p>\n</blockquote>\n<!-- more -->\n\n<h1 id=\"怎么在vue中创建并注册一个组件呢？-暂时不包括模块开发\"><a href=\"#怎么在vue中创建并注册一个组件呢？-暂时不包括模块开发\" class=\"headerlink\" title=\"怎么在vue中创建并注册一个组件呢？(暂时不包括模块开发)\"></a>怎么在vue中创建并注册一个组件呢？(暂时不包括模块开发)</h1><blockquote>\n<p>1.在vue中全局创建组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><br><span class=\"hljs-comment\">&lt;!-- 第一个参数 是字符串，定义该组件名字； --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 第二个参数是一个对象，需要定义组件的模板，其他都是和vue实例中的一样 --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 这里需要注意，一个组件的 data 选项必须是一个函数；</span><br><span class=\"hljs-comment\">这样的目的，是为了让每个组件之间的数据独立；</span><br><span class=\"hljs-comment\">原理就是js函数会重新开辟一块存储空间，存储当前组件的数据</span><br><span class=\"hljs-comment\">返回一个对象就是让我们能拿到这个对象里的数据 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    Vue.component(<span class=\"hljs-string\">&#x27;btn&#x27;</span>,&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">        template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;hint&quot;</span>&gt;</span>clickme<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>&#x27;,</span></span><br>        data()&#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">                name:<span class=\"hljs-string\">&#x27;全局组件&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class=\"javascript\">            hint:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                alert(<span class=\"hljs-built_in\">this</span>.name);<span class=\"hljs-comment\">//在页面会出现提示窗 并显示全局组件</span></span><br>            &#125;<br>        &#125;<br>    &#125;);<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>// 使用该组件<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">btn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">btn</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>2.创建一个局部组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><br>// 注册后才能使用<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">btn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">btn</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> btn=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">    template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;hint&quot;</span>&gt;</span>clickme<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>&#x27;,</span></span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">            name:<span class=\"hljs-string\">&#x27;局部组件&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    methods:&#123;<br><span class=\"javascript\">        hint:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">            alert(<span class=\"hljs-built_in\">this</span>.name);<span class=\"hljs-comment\">//在页面会出现提示窗 并显示全局组件</span></span><br>        &#125;<br>    &#125;<br>&#125;;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    le:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class=\"javascript\">        name:<span class=\"hljs-string\">&#x27;组件练习&#x27;</span></span><br>    &#125;,<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 注册我们的局部组件</span></span><br>    components:&#123;<br>        btn:btn<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>3.两种组件创建的区别：</p>\n</blockquote>\n<ul>\n<li>全局组件不需要注册，可以直接使用，所以可以再任意的vue实例中使用；</li>\n<li>局部组件需要在要使用它的vue实例里注册后，才能使用</li>\n</ul>\n<h1 id=\"什么是组件通信？\"><a href=\"#什么是组件通信？\" class=\"headerlink\" title=\"什么是组件通信？\"></a>什么是组件通信？</h1><blockquote>\n<p>在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据<br>正因为每一个组件维护属于自己的data，所以在一个组件中想要使用其他组件的data数据就需要进行组件通信</p>\n</blockquote>\n<h1 id=\"组件通信有哪些类型呢？\"><a href=\"#组件通信有哪些类型呢？\" class=\"headerlink\" title=\"组件通信有哪些类型呢？\"></a>组件通信有哪些类型呢？</h1><blockquote>\n<p>1.父子组件之间传递<br>2.子父组件之间传递<br>3.兄弟组件之间传递<br>4.跨级组件之间传递</p>\n</blockquote>\n<h1 id=\"关于父子组件通信\"><a href=\"#关于父子组件通信\" class=\"headerlink\" title=\"关于父子组件通信\"></a>关于父子组件通信</h1><blockquote>\n<p>1.在父组件中使用子组件时，在子组件上通过v-bind(缩写为 :)绑定要传递的数据<br>2.在子组件中，使用props来接受父组件传递过来的数据</p>\n</blockquote>\n<p><strong><em>代码</em></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><br><span class=\"hljs-comment\">&lt;!-- 这里父组件就是我们的vue实例 然后创建一个子组件one --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 绑定我们要传递的数据，然后传递要传递的数据 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span> <span class=\"hljs-attr\">v-bind:name</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> one=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">    template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>    props:&#123;<br><span class=\"javascript\">        name:&#123; <span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">String</span>&#125;</span><br>    &#125;<br>&#125;;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    le:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class=\"javascript\">        name:<span class=\"hljs-string\">&#x27;父组件&#x27;</span></span><br>    &#125;,<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 注册我们的局部组件</span></span><br>    components:&#123;<br>        one:one<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"关于子父组件通信\"><a href=\"#关于子父组件通信\" class=\"headerlink\" title=\"关于子父组件通信\"></a>关于子父组件通信</h1><blockquote>\n<p>1.子组件通过$emit监听一个自定义事件，传递数据给父组件<br>2.父组件通过v-on(缩写为@)监听该自定义事件，然后该事件会触发一个函数来获取子组件传递的数据</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span> <span class=\"hljs-attr\">v-on:ok</span>=<span class=\"hljs-string\">&#x27;get&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 点击子组件的button 后开始传递数据</span></span><br><span class=\"javascript\"> <span class=\"hljs-keyword\">let</span> one=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">        template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;start&quot;</span>&gt;</span>click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>        data()&#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">                name:<span class=\"hljs-string\">&#x27;子组件&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class=\"javascript\">            start:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 触发自定义ok事件</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;ok&#x27;</span>,<span class=\"hljs-built_in\">this</span>.name);</span><br>            &#125;<br>        &#125;<br>    &#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    el:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class=\"javascript\">        name:<span class=\"hljs-string\">&#x27;parent&#x27;</span></span><br>    &#125;,<br>    components:&#123;<br>        one<br>    &#125;,<br>    methods:&#123;<br><span class=\"javascript\">        get:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name=e;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"使用全局事件管理中心进行跨级组件通信-父子-子父-跨级也可以用\"><a href=\"#使用全局事件管理中心进行跨级组件通信-父子-子父-跨级也可以用\" class=\"headerlink\" title=\"使用全局事件管理中心进行跨级组件通信(父子,子父,跨级也可以用)\"></a>使用全局事件管理中心进行跨级组件通信(父子,子父,跨级也可以用)</h1><blockquote>\n<p>1.重新创建一个vue对象<br>2.在需要传递参数的组件内部通过$emit绑定触发一个自定义事件，并传递要传递的数据<br>3.在需要接受数据的组件通过$on绑定被emit触发的事件，然后在回调函数中接受传递过来的参数</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">two</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">two</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建事件管理中心对象</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> event=<span class=\"hljs-keyword\">new</span> Vue();</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建两个组件</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> one=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">    template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;start&quot;</span>&gt;</span>发送<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">            name:<span class=\"hljs-string\">&#x27;one&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    methods:&#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 当我们点击发送按钮后执行该函数</span></span><br>        start()&#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 触发recive这个我们自定义的事件 并传递要传递的数据</span></span><br><span class=\"javascript\">            event.$emit(<span class=\"hljs-string\">&#x27;recive&#x27;</span>,<span class=\"hljs-built_in\">this</span>.name);</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> two=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">    template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">            name:<span class=\"hljs-string\">&#x27;two&#x27;</span></span><br>        &#125;<br>    &#125;,<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 官方的生命周期函数  理解为在我们的所有数据渲染在div节点内部前自动执行的一个函数</span></span><br>    mounted()&#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 这里我们监听另一个组件触发的函数，然后接受传递过来的数据</span></span><br><span class=\"javascript\">        event.$on(<span class=\"hljs-string\">&#x27;recive&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name=data;</span><br>        &#125;);<br>    &#125;<br>&#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    el:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class=\"javascript\">        name:<span class=\"hljs-string\">&#x27;event&#x27;</span></span><br>    &#125;,<br>    components:&#123;<br>        one,<br>        two<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"跨级组件-父组件和子孙组件-通信\"><a href=\"#跨级组件-父组件和子孙组件-通信\" class=\"headerlink\" title=\"跨级组件(父组件和子孙组件)通信\"></a>跨级组件(父组件和子孙组件)通信</h1><p><strong><em>假设父组件是A，子组件是B，孙子组件是C</em></strong></p>\n<blockquote>\n<p>1.A组件通过v-bind绑定要传递数据<br>2.在B中不使用props接收，而是在B组件中的C组件上通过v-bind=’$attrs’ 来转发A组件传递过来的数据<br>3.在C组件内部可以通过this.$attrs获取到A组件传递过来的数据(获取到的是对象格式)<br>tips:</p>\n</blockquote>\n<ul>\n<li>在C组件中设置inheritAttrs: false；</li>\n<li>这个属性是为了C组件在B中使用v-bind=’$attrs’时，该属性不会被当做HTML的属性渲染到页面</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span> <span class=\"hljs-attr\">:name</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> two = &#123;</span><br><span class=\"handlebars\"><span class=\"xml\">            template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>            data() &#123;<br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                    name: <span class=\"hljs-string\">&#x27;two&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            mounted() &#123;<br><span class=\"javascript\">                <span class=\"hljs-comment\">// 接受传递的数据</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-built_in\">this</span>.$attrs[<span class=\"hljs-string\">&#x27;name&#x27;</span>];</span><br>            &#125;,<br><span class=\"javascript\">            inheritAttrs: <span class=\"hljs-literal\">false</span>,</span><br><br>&#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> one = &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 转发父组件的数据给自己的子组件</span></span><br><span class=\"handlebars\"><span class=\"xml\">    template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">msg</span>&#125;&#125;</span><span class=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">two</span> <span class=\"hljs-attr\">v-bind</span>=<span class=\"hljs-string\">&quot;$attrs&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">two</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>    data() &#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">            msg :<span class=\"hljs-string\">&#x27;one&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    components: &#123;<br>        two<br>    &#125;<br>&#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data: &#123;<br><span class=\"javascript\">        name: <span class=\"hljs-string\">&#x27;app&#x27;</span></span><br>    &#125;,<br>    components: &#123;<br>        one<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"使用provide-对象-函数内部返回一个对象-和inject-数组-字符数组格式-进行跨级通信\"><a href=\"#使用provide-对象-函数内部返回一个对象-和inject-数组-字符数组格式-进行跨级通信\" class=\"headerlink\" title=\"使用provide(对象/函数内部返回一个对象)和inject(数组/字符数组格式)进行跨级通信\"></a>使用provide(对象/函数内部返回一个对象)和inject(数组/字符数组格式)进行跨级通信</h1><blockquote>\n<p>1.在父组件通过provide提供要所有子组件可继承的属性<br>2.所有的子组件都可以用inject来进行继承</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> one = &#123;</span><br><span class=\"handlebars\"><span class=\"xml\">        template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">msg</span>&#125;&#125;</span><span class=\"xml\"> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>        data() &#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                msg: <span class=\"hljs-string\">&#x27;one&#x27;</span></span><br>            &#125;<br>        &#125;,<br><span class=\"javascript\">        inject: [<span class=\"hljs-string\">&#x27;name&#x27;</span>],</span><br>        mounted() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.msg = <span class=\"hljs-string\">&#x27;继承的&#x27;</span>+<span class=\"hljs-built_in\">this</span>.name;</span><br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>        data: &#123;<br><span class=\"javascript\">            name: <span class=\"hljs-string\">&#x27;app&#x27;</span></span><br>        &#125;,<br>        provide() &#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 定义一个name属性 然后把data的name的值赋值给他</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 返回一个新的name变量 值为刚才定义的name属性</span></span><br><span class=\"javascript\">                name: <span class=\"hljs-built_in\">this</span>.name</span><br>            &#125;<br>        &#125;,<br>        components: &#123;<br>            one<br>        &#125;<br>    &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"parent和-childern和ref进行父子组件通信\"><a href=\"#parent和-childern和ref进行父子组件通信\" class=\"headerlink\" title=\"$parent和$childern和ref进行父子组件通信\"></a>$parent和$childern和ref进行父子组件通信</h1><blockquote>\n<p>获取子组件数据</p>\n</blockquote>\n<ul>\n<li>在子组件绑定ref=’属性名’  获取时通过this.$refs.属性名 获取到该组件实例<blockquote>\n<p>获取父组件</p>\n</blockquote>\n</li>\n<li>this.$parent<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#x27;one&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> one = &#123;</span><br><span class=\"handlebars\"><span class=\"xml\">        template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>one<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>        data() &#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;one&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        mounted()&#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 获取父组件的data</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$parent.name);</span><br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>        data: &#123;<br><span class=\"javascript\">            name: <span class=\"hljs-string\">&#x27;app&#x27;</span></span><br>        &#125;,<br>        components: &#123;<br>            one<br>        &#125;,<br>        mounted() &#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 获取子组件data</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$refs.one.name);</span><br>        &#125;<br>    &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":6532,"excerpt":"<h1 id=\"什么是组件呢？\"><a href=\"#什么是组件呢？\" class=\"headerlink\" title=\"什么是组件呢？\"></a>什么是组件呢？</h1><blockquote>\n<p>1.简单的理解，UI层组件可以是一个按钮，可以是一个轮播图等等；逻辑方面，就是可复用的代码块；<br>2.更简单粗暴的理解，因为vue做的是单页应用，意味着只有一个HTML文件，那每一个页面其实就是组成这个HTML文件的一部分，而每个页面又是通过不同的部分组成；所以一个页面可以理解成一个大的组件，页面里的每一个部分，都是一个一个小组件；</p>\n</blockquote>","more":"<h1 id=\"什么是组件化开发和模块化开发呢？\"><a href=\"#什么是组件化开发和模块化开发呢？\" class=\"headerlink\" title=\"什么是组件化开发和模块化开发呢？\"></a>什么是组件化开发和模块化开发呢？</h1><blockquote>\n<p>1.模块化和组件化想要达成的目的都是一样的，组件化是包含了UI和页面逻辑处理在一起；而模块化只是将可以重复使用的逻辑代码提取成一个个模块，方便随时使用；<br>2.两者都是一种开发思想，为了更好的开发效率</p>\n</blockquote>\n<!-- more -->\n\n<h1 id=\"怎么在vue中创建并注册一个组件呢？-暂时不包括模块开发\"><a href=\"#怎么在vue中创建并注册一个组件呢？-暂时不包括模块开发\" class=\"headerlink\" title=\"怎么在vue中创建并注册一个组件呢？(暂时不包括模块开发)\"></a>怎么在vue中创建并注册一个组件呢？(暂时不包括模块开发)</h1><blockquote>\n<p>1.在vue中全局创建组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><br><span class=\"hljs-comment\">&lt;!-- 第一个参数 是字符串，定义该组件名字； --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 第二个参数是一个对象，需要定义组件的模板，其他都是和vue实例中的一样 --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 这里需要注意，一个组件的 data 选项必须是一个函数；</span><br><span class=\"hljs-comment\">这样的目的，是为了让每个组件之间的数据独立；</span><br><span class=\"hljs-comment\">原理就是js函数会重新开辟一块存储空间，存储当前组件的数据</span><br><span class=\"hljs-comment\">返回一个对象就是让我们能拿到这个对象里的数据 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    Vue.component(<span class=\"hljs-string\">&#x27;btn&#x27;</span>,&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">        template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;hint&quot;</span>&gt;</span>clickme<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>&#x27;,</span></span><br>        data()&#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">                name:<span class=\"hljs-string\">&#x27;全局组件&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class=\"javascript\">            hint:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                alert(<span class=\"hljs-built_in\">this</span>.name);<span class=\"hljs-comment\">//在页面会出现提示窗 并显示全局组件</span></span><br>            &#125;<br>        &#125;<br>    &#125;);<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>// 使用该组件<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">btn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">btn</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>2.创建一个局部组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><br>// 注册后才能使用<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">btn</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">btn</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> btn=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">    template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;hint&quot;</span>&gt;</span>clickme<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>&#x27;,</span></span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">            name:<span class=\"hljs-string\">&#x27;局部组件&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    methods:&#123;<br><span class=\"javascript\">        hint:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">            alert(<span class=\"hljs-built_in\">this</span>.name);<span class=\"hljs-comment\">//在页面会出现提示窗 并显示全局组件</span></span><br>        &#125;<br>    &#125;<br>&#125;;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    le:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class=\"javascript\">        name:<span class=\"hljs-string\">&#x27;组件练习&#x27;</span></span><br>    &#125;,<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 注册我们的局部组件</span></span><br>    components:&#123;<br>        btn:btn<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>3.两种组件创建的区别：</p>\n</blockquote>\n<ul>\n<li>全局组件不需要注册，可以直接使用，所以可以再任意的vue实例中使用；</li>\n<li>局部组件需要在要使用它的vue实例里注册后，才能使用</li>\n</ul>\n<h1 id=\"什么是组件通信？\"><a href=\"#什么是组件通信？\" class=\"headerlink\" title=\"什么是组件通信？\"></a>什么是组件通信？</h1><blockquote>\n<p>在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据<br>正因为每一个组件维护属于自己的data，所以在一个组件中想要使用其他组件的data数据就需要进行组件通信</p>\n</blockquote>\n<h1 id=\"组件通信有哪些类型呢？\"><a href=\"#组件通信有哪些类型呢？\" class=\"headerlink\" title=\"组件通信有哪些类型呢？\"></a>组件通信有哪些类型呢？</h1><blockquote>\n<p>1.父子组件之间传递<br>2.子父组件之间传递<br>3.兄弟组件之间传递<br>4.跨级组件之间传递</p>\n</blockquote>\n<h1 id=\"关于父子组件通信\"><a href=\"#关于父子组件通信\" class=\"headerlink\" title=\"关于父子组件通信\"></a>关于父子组件通信</h1><blockquote>\n<p>1.在父组件中使用子组件时，在子组件上通过v-bind(缩写为 :)绑定要传递的数据<br>2.在子组件中，使用props来接受父组件传递过来的数据</p>\n</blockquote>\n<p><strong><em>代码</em></strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><br><span class=\"hljs-comment\">&lt;!-- 这里父组件就是我们的vue实例 然后创建一个子组件one --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;app&#x27;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 绑定我们要传递的数据，然后传递要传递的数据 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span> <span class=\"hljs-attr\">v-bind:name</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> one=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">    template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>    props:&#123;<br><span class=\"javascript\">        name:&#123; <span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">String</span>&#125;</span><br>    &#125;<br>&#125;;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    le:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class=\"javascript\">        name:<span class=\"hljs-string\">&#x27;父组件&#x27;</span></span><br>    &#125;,<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 注册我们的局部组件</span></span><br>    components:&#123;<br>        one:one<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"关于子父组件通信\"><a href=\"#关于子父组件通信\" class=\"headerlink\" title=\"关于子父组件通信\"></a>关于子父组件通信</h1><blockquote>\n<p>1.子组件通过$emit监听一个自定义事件，传递数据给父组件<br>2.父组件通过v-on(缩写为@)监听该自定义事件，然后该事件会触发一个函数来获取子组件传递的数据</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span> <span class=\"hljs-attr\">v-on:ok</span>=<span class=\"hljs-string\">&#x27;get&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 点击子组件的button 后开始传递数据</span></span><br><span class=\"javascript\"> <span class=\"hljs-keyword\">let</span> one=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">        template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;start&quot;</span>&gt;</span>click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>        data()&#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">                name:<span class=\"hljs-string\">&#x27;子组件&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class=\"javascript\">            start:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 触发自定义ok事件</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">this</span>.$emit(<span class=\"hljs-string\">&#x27;ok&#x27;</span>,<span class=\"hljs-built_in\">this</span>.name);</span><br>            &#125;<br>        &#125;<br>    &#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    el:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class=\"javascript\">        name:<span class=\"hljs-string\">&#x27;parent&#x27;</span></span><br>    &#125;,<br>    components:&#123;<br>        one<br>    &#125;,<br>    methods:&#123;<br><span class=\"javascript\">        get:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name=e;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"使用全局事件管理中心进行跨级组件通信-父子-子父-跨级也可以用\"><a href=\"#使用全局事件管理中心进行跨级组件通信-父子-子父-跨级也可以用\" class=\"headerlink\" title=\"使用全局事件管理中心进行跨级组件通信(父子,子父,跨级也可以用)\"></a>使用全局事件管理中心进行跨级组件通信(父子,子父,跨级也可以用)</h1><blockquote>\n<p>1.重新创建一个vue对象<br>2.在需要传递参数的组件内部通过$emit绑定触发一个自定义事件，并传递要传递的数据<br>3.在需要接受数据的组件通过$on绑定被emit触发的事件，然后在回调函数中接受传递过来的参数</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">two</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">two</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建事件管理中心对象</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> event=<span class=\"hljs-keyword\">new</span> Vue();</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 创建两个组件</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> one=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">    template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;start&quot;</span>&gt;</span>发送<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">            name:<span class=\"hljs-string\">&#x27;one&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    methods:&#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 当我们点击发送按钮后执行该函数</span></span><br>        start()&#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 触发recive这个我们自定义的事件 并传递要传递的数据</span></span><br><span class=\"javascript\">            event.$emit(<span class=\"hljs-string\">&#x27;recive&#x27;</span>,<span class=\"hljs-built_in\">this</span>.name);</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> two=&#123;</span><br><span class=\"handlebars\"><span class=\"xml\">    template:&#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">            name:<span class=\"hljs-string\">&#x27;two&#x27;</span></span><br>        &#125;<br>    &#125;,<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 官方的生命周期函数  理解为在我们的所有数据渲染在div节点内部前自动执行的一个函数</span></span><br>    mounted()&#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 这里我们监听另一个组件触发的函数，然后接受传递过来的数据</span></span><br><span class=\"javascript\">        event.$on(<span class=\"hljs-string\">&#x27;recive&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name=data;</span><br>        &#125;);<br>    &#125;<br>&#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    el:<span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class=\"javascript\">        name:<span class=\"hljs-string\">&#x27;event&#x27;</span></span><br>    &#125;,<br>    components:&#123;<br>        one,<br>        two<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"跨级组件-父组件和子孙组件-通信\"><a href=\"#跨级组件-父组件和子孙组件-通信\" class=\"headerlink\" title=\"跨级组件(父组件和子孙组件)通信\"></a>跨级组件(父组件和子孙组件)通信</h1><p><strong><em>假设父组件是A，子组件是B，孙子组件是C</em></strong></p>\n<blockquote>\n<p>1.A组件通过v-bind绑定要传递数据<br>2.在B中不使用props接收，而是在B组件中的C组件上通过v-bind=’$attrs’ 来转发A组件传递过来的数据<br>3.在C组件内部可以通过this.$attrs获取到A组件传递过来的数据(获取到的是对象格式)<br>tips:</p>\n</blockquote>\n<ul>\n<li>在C组件中设置inheritAttrs: false；</li>\n<li>这个属性是为了C组件在B中使用v-bind=’$attrs’时，该属性不会被当做HTML的属性渲染到页面</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span> <span class=\"hljs-attr\">:name</span>=<span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> two = &#123;</span><br><span class=\"handlebars\"><span class=\"xml\">            template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>            data() &#123;<br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                    name: <span class=\"hljs-string\">&#x27;two&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            mounted() &#123;<br><span class=\"javascript\">                <span class=\"hljs-comment\">// 接受传递的数据</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-built_in\">this</span>.$attrs[<span class=\"hljs-string\">&#x27;name&#x27;</span>];</span><br>            &#125;,<br><span class=\"javascript\">            inheritAttrs: <span class=\"hljs-literal\">false</span>,</span><br><br>&#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> one = &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 转发父组件的数据给自己的子组件</span></span><br><span class=\"handlebars\"><span class=\"xml\">    template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">msg</span>&#125;&#125;</span><span class=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">two</span> <span class=\"hljs-attr\">v-bind</span>=<span class=\"hljs-string\">&quot;$attrs&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">two</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>    data() &#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">            msg :<span class=\"hljs-string\">&#x27;one&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    components: &#123;<br>        two<br>    &#125;<br>&#125;<br><span class=\"javascript\"><span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">    el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>    data: &#123;<br><span class=\"javascript\">        name: <span class=\"hljs-string\">&#x27;app&#x27;</span></span><br>    &#125;,<br>    components: &#123;<br>        one<br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"使用provide-对象-函数内部返回一个对象-和inject-数组-字符数组格式-进行跨级通信\"><a href=\"#使用provide-对象-函数内部返回一个对象-和inject-数组-字符数组格式-进行跨级通信\" class=\"headerlink\" title=\"使用provide(对象/函数内部返回一个对象)和inject(数组/字符数组格式)进行跨级通信\"></a>使用provide(对象/函数内部返回一个对象)和inject(数组/字符数组格式)进行跨级通信</h1><blockquote>\n<p>1.在父组件通过provide提供要所有子组件可继承的属性<br>2.所有的子组件都可以用inject来进行继承</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> one = &#123;</span><br><span class=\"handlebars\"><span class=\"xml\">        template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">msg</span>&#125;&#125;</span><span class=\"xml\"> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>        data() &#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                msg: <span class=\"hljs-string\">&#x27;one&#x27;</span></span><br>            &#125;<br>        &#125;,<br><span class=\"javascript\">        inject: [<span class=\"hljs-string\">&#x27;name&#x27;</span>],</span><br>        mounted() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);</span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.msg = <span class=\"hljs-string\">&#x27;继承的&#x27;</span>+<span class=\"hljs-built_in\">this</span>.name;</span><br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>        data: &#123;<br><span class=\"javascript\">            name: <span class=\"hljs-string\">&#x27;app&#x27;</span></span><br>        &#125;,<br>        provide() &#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 定义一个name属性 然后把data的name的值赋值给他</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-built_in\">this</span>.name;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 返回一个新的name变量 值为刚才定义的name属性</span></span><br><span class=\"javascript\">                name: <span class=\"hljs-built_in\">this</span>.name</span><br>            &#125;<br>        &#125;,<br>        components: &#123;<br>            one<br>        &#125;<br>    &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"parent和-childern和ref进行父子组件通信\"><a href=\"#parent和-childern和ref进行父子组件通信\" class=\"headerlink\" title=\"$parent和$childern和ref进行父子组件通信\"></a>$parent和$childern和ref进行父子组件通信</h1><blockquote>\n<p>获取子组件数据</p>\n</blockquote>\n<ul>\n<li>在子组件绑定ref=’属性名’  获取时通过this.$refs.属性名 获取到该组件实例<blockquote>\n<p>获取父组件</p>\n</blockquote>\n</li>\n<li>this.$parent<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">one</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#x27;one&#x27;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">one</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> one = &#123;</span><br><span class=\"handlebars\"><span class=\"xml\">        template: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>one<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>&#x27;,</span></span><br>        data() &#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span> &#123;</span><br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;one&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        mounted()&#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 获取父组件的data</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$parent.name);</span><br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>        data: &#123;<br><span class=\"javascript\">            name: <span class=\"hljs-string\">&#x27;app&#x27;</span></span><br>        &#125;,<br>        components: &#123;<br>            one<br>        &#125;,<br>        mounted() &#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 获取子组件data</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$refs.one.name);</span><br>        &#125;<br>    &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"vuejs基础复习3---vuex","abbrlink":25776,"date":"2019-10-06T10:22:27.000Z","_content":"\n# 基本概念\n>1.在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据，整个流程就像下图一样\n![vuex1](/img/vuex1.png)\n- state相当于组件的data\n- view相当于显示data数据的html结构\n- action相当于一些事件触发的函数\n\n<!-- more -->\n>2.通过action改变state的数据，view来实时显示state中的数据\n>3.vuex就是一个所有组件一起维护的一个data\n>4.因为3，所以他是最强大的组件通信方式\n\n# 使用\n>核心概念\n- State-------相当于组件的data存放具体数据\n- Getters-----相当于组件的计算属性\n- Mutations---存放更改state中数据的事件(就是一个一个的函数)\n- Actions-----用来处理异步操作的事件\n- Module------对state数据进行模块化划分 \n![vuex2](/img/vuex2.png)\n>通过commit触发mutations的事件来改变state的数据，组件显示state的数据\n>当有异步操作时，通过dispatch触发actions内部的事件，然后传递给mutations的事件，在改变state的数据\n\n>代码演示\n- 使用vue-cli创建一个项目(目录如下图)\n![项目目录](/img/vuex3.png)\n- store中存放我们的vuex代码(store.js)\n\n>代码实现\n- store.js\n\n```javascript\nconst store=new Vuex.Store({\n    state:{},\n    getters:{},\n    mutations:{},\n    actions:{},\n    modules:{}\n})\n```\n## store使用\n>***在A组件中获取state的数据并显示*** \n- A组件($store.state.name---获取vuex的数据)\n```html\n<template>\n    <div>\n        {{$store.state.name}}\n    </div>\n</template>\n<script>\nexport default{\n    name:'A'\n}\n</script>\n```\n\n- store.js\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{},\n    mutations:{},\n    actions:{},\n    modules:{}\n})\n```\n## getters使用1\n>**获取数据后添加一段字符串在显示** \n- A组件\n```html\n<template>\n    <div>\n        {{$store.getters.addStr}}\n    </div>\n</template>\n<script>\nexport default{\n    name:'A'\n}\n```\n\n- store.js\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    // 默认参数1 state， 等同于this.state\n    // 默认参数2 getters 等同于this.getters\n    getters:{\n        addStr(state){\n            return state.name+'111';\n        }\n    },\n    mutations:{},\n    actions:{},\n    modules:{}\n})\n```\n## getters使用2\n>**获取数据后添加一段字符串在显示，添加的字符串是组件传递过去的** \n- A组件\n```html\n<template>\n    <div>\n        {{$store.getters.addStr('A组件')}}\n    </div>\n</template>\n<script>\nexport default{\n    name:'A'\n}\n```\n\n- store.js\n\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{\n        addStr(state){\n            // 通过返回一个函数 然后接受组件传递的参数\n            return function(str){\n                return state.name+str;\n            }\n        }\n    },\n    mutations:{},\n    actions:{},\n    modules:{}\n})\n```\n## mutations使用\n>**当点击按钮后，改变state中的name** \n- A组件\n```html\n<template>\n    <div>\n        {{$store.state.name}}\n    </div>\n    <button @click='change'>btn</button>\n</template>\n<script>\nexport default{\n    name:'A',\n    methods:{\n        change(){\n            // 1.通过commit(事件类型)触发mutations的事件\n            this.$store.commit('changeName');\n            // 2.通过对象类型触发\n            this.$store.commit({\n                // 触发事件类型\n                type:'changeName',\n                // 传递的参数\n                num:0\n            });\n        }\n    }\n}\n```\n\n- store.js\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{},\n    mutations:{\n        // 默认参数1.state\n        // 默认参数2.payload 这个参数是接受触发该事件时传递的参数\n        // 注:如果是以对象格式触发该事件时，payload接受到的是一个对象\n        changeName(state,payload){\n            state.name='mutations使用';\n        }\n    },\n    actions:{},\n    modules:{}\n})\n```\n## actions使用\n>**当点击按钮后，先发送actions，进行异步操作后，触发mutations的事件，在改变state的name** \n- A组件\n```html\n<template>\n    <div>\n        {{$store.state.name}}\n    </div>\n    <button @click='change'>btn</button>\n</template>\n<script>\nexport default{\n    name:'A',\n    methods:{\n        change(){\n            this.$sotre.dispatch('asyncChange');\n        }\n    }\n}\n```\n\n- store.js\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{},\n    mutations:{\n        // 默认参数1.state\n        // 默认参数2.payload 这个参数是接受触发该事件时传递的参数\n        // 注:如果是以对象格式触发该事件时，payload接受到的是一个对象\n        changeName(state,payload){\n            state.name='mutations使用';\n        }\n    },\n    actions:{\n        // 默认参数1.context 就是store对象;\n        // 默认参数2.payload为接受的参数对象\n        asyncChange(context,payload){\n            setTimeout(()=>{\n                context.commit('changeName');\n            },1000);\n        }\n    },\n    modules:{}\n})\n```\n## module的使用\n>说明\n- 用来模块化state中的数据的\n- store.js\n-  A组件\n```html\n<template>\n    <div>\n        {{$store.state.personInfo.name}}\n    </div>\n</template>\n<script>\nexport default{\n    name:'A',\n}\n```\n\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{},\n    mutations:{},\n    actions:{},\n    modules:{\n        perosonInfo:{\n            state:{\n                name:'man'\n            },\n            getters:{},\n            mutations:{},\n            // 需要注意 模块中的actions的context指向的是该模块\n            // 如果想要获取根state:  context.rootstate即可\n            actions:{},\n            modules:{\n        },\n        animalInfo:{\n            state:{\n                name:'dog'\n            },\n            getters:{},\n            mutations:{},\n            actions:{},\n            modules:{\n        }\n    }\n})\n```\n\n# 以上就是vuex基本使用，详细可以参考官方文档\n\n\n","source":"_posts/vue/vuejs基础复习-3.md","raw":"---\ntitle: vuejs基础复习3---vuex\ncategories:\n  - 技术笔记\ntag:\n  - Vue\n  - 前端\nabbrlink: 25776\ndate: 2019-10-06 18:22:27\n---\n\n# 基本概念\n>1.在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据，整个流程就像下图一样\n![vuex1](/img/vuex1.png)\n- state相当于组件的data\n- view相当于显示data数据的html结构\n- action相当于一些事件触发的函数\n\n<!-- more -->\n>2.通过action改变state的数据，view来实时显示state中的数据\n>3.vuex就是一个所有组件一起维护的一个data\n>4.因为3，所以他是最强大的组件通信方式\n\n# 使用\n>核心概念\n- State-------相当于组件的data存放具体数据\n- Getters-----相当于组件的计算属性\n- Mutations---存放更改state中数据的事件(就是一个一个的函数)\n- Actions-----用来处理异步操作的事件\n- Module------对state数据进行模块化划分 \n![vuex2](/img/vuex2.png)\n>通过commit触发mutations的事件来改变state的数据，组件显示state的数据\n>当有异步操作时，通过dispatch触发actions内部的事件，然后传递给mutations的事件，在改变state的数据\n\n>代码演示\n- 使用vue-cli创建一个项目(目录如下图)\n![项目目录](/img/vuex3.png)\n- store中存放我们的vuex代码(store.js)\n\n>代码实现\n- store.js\n\n```javascript\nconst store=new Vuex.Store({\n    state:{},\n    getters:{},\n    mutations:{},\n    actions:{},\n    modules:{}\n})\n```\n## store使用\n>***在A组件中获取state的数据并显示*** \n- A组件($store.state.name---获取vuex的数据)\n```html\n<template>\n    <div>\n        {{$store.state.name}}\n    </div>\n</template>\n<script>\nexport default{\n    name:'A'\n}\n</script>\n```\n\n- store.js\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{},\n    mutations:{},\n    actions:{},\n    modules:{}\n})\n```\n## getters使用1\n>**获取数据后添加一段字符串在显示** \n- A组件\n```html\n<template>\n    <div>\n        {{$store.getters.addStr}}\n    </div>\n</template>\n<script>\nexport default{\n    name:'A'\n}\n```\n\n- store.js\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    // 默认参数1 state， 等同于this.state\n    // 默认参数2 getters 等同于this.getters\n    getters:{\n        addStr(state){\n            return state.name+'111';\n        }\n    },\n    mutations:{},\n    actions:{},\n    modules:{}\n})\n```\n## getters使用2\n>**获取数据后添加一段字符串在显示，添加的字符串是组件传递过去的** \n- A组件\n```html\n<template>\n    <div>\n        {{$store.getters.addStr('A组件')}}\n    </div>\n</template>\n<script>\nexport default{\n    name:'A'\n}\n```\n\n- store.js\n\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{\n        addStr(state){\n            // 通过返回一个函数 然后接受组件传递的参数\n            return function(str){\n                return state.name+str;\n            }\n        }\n    },\n    mutations:{},\n    actions:{},\n    modules:{}\n})\n```\n## mutations使用\n>**当点击按钮后，改变state中的name** \n- A组件\n```html\n<template>\n    <div>\n        {{$store.state.name}}\n    </div>\n    <button @click='change'>btn</button>\n</template>\n<script>\nexport default{\n    name:'A',\n    methods:{\n        change(){\n            // 1.通过commit(事件类型)触发mutations的事件\n            this.$store.commit('changeName');\n            // 2.通过对象类型触发\n            this.$store.commit({\n                // 触发事件类型\n                type:'changeName',\n                // 传递的参数\n                num:0\n            });\n        }\n    }\n}\n```\n\n- store.js\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{},\n    mutations:{\n        // 默认参数1.state\n        // 默认参数2.payload 这个参数是接受触发该事件时传递的参数\n        // 注:如果是以对象格式触发该事件时，payload接受到的是一个对象\n        changeName(state,payload){\n            state.name='mutations使用';\n        }\n    },\n    actions:{},\n    modules:{}\n})\n```\n## actions使用\n>**当点击按钮后，先发送actions，进行异步操作后，触发mutations的事件，在改变state的name** \n- A组件\n```html\n<template>\n    <div>\n        {{$store.state.name}}\n    </div>\n    <button @click='change'>btn</button>\n</template>\n<script>\nexport default{\n    name:'A',\n    methods:{\n        change(){\n            this.$sotre.dispatch('asyncChange');\n        }\n    }\n}\n```\n\n- store.js\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{},\n    mutations:{\n        // 默认参数1.state\n        // 默认参数2.payload 这个参数是接受触发该事件时传递的参数\n        // 注:如果是以对象格式触发该事件时，payload接受到的是一个对象\n        changeName(state,payload){\n            state.name='mutations使用';\n        }\n    },\n    actions:{\n        // 默认参数1.context 就是store对象;\n        // 默认参数2.payload为接受的参数对象\n        asyncChange(context,payload){\n            setTimeout(()=>{\n                context.commit('changeName');\n            },1000);\n        }\n    },\n    modules:{}\n})\n```\n## module的使用\n>说明\n- 用来模块化state中的数据的\n- store.js\n-  A组件\n```html\n<template>\n    <div>\n        {{$store.state.personInfo.name}}\n    </div>\n</template>\n<script>\nexport default{\n    name:'A',\n}\n```\n\n```javascript\nconst store=new Vuex.Store({\n    state:{\n        name:'Vuex学习'\n    },\n    getters:{},\n    mutations:{},\n    actions:{},\n    modules:{\n        perosonInfo:{\n            state:{\n                name:'man'\n            },\n            getters:{},\n            mutations:{},\n            // 需要注意 模块中的actions的context指向的是该模块\n            // 如果想要获取根state:  context.rootstate即可\n            actions:{},\n            modules:{\n        },\n        animalInfo:{\n            state:{\n                name:'dog'\n            },\n            getters:{},\n            mutations:{},\n            actions:{},\n            modules:{\n        }\n    }\n})\n```\n\n# 以上就是vuex基本使用，详细可以参考官方文档\n\n\n","slug":"vue/vuejs基础复习-3","published":1,"updated":"2021-12-31T12:01:59.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv110003j7jf7ee74ab0","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><blockquote>\n<p>1.在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据，整个流程就像下图一样<br><img src=\"/img/vuex1.png\" alt=\"vuex1\"></p>\n</blockquote>\n<ul>\n<li>state相当于组件的data</li>\n<li>view相当于显示data数据的html结构</li>\n<li>action相当于一些事件触发的函数</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>2.通过action改变state的数据，view来实时显示state中的数据<br>3.vuex就是一个所有组件一起维护的一个data<br>4.因为3，所以他是最强大的组件通信方式</p>\n</blockquote>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><blockquote>\n<p>核心概念</p>\n</blockquote>\n<ul>\n<li>State——-相当于组件的data存放具体数据</li>\n<li>Getters—–相当于组件的计算属性</li>\n<li>Mutations—存放更改state中数据的事件(就是一个一个的函数)</li>\n<li>Actions—–用来处理异步操作的事件</li>\n<li>Module——对state数据进行模块化划分<br><img src=\"/img/vuex2.png\" alt=\"vuex2\"><blockquote>\n<p>通过commit触发mutations的事件来改变state的数据，组件显示state的数据<br>当有异步操作时，通过dispatch触发actions内部的事件，然后传递给mutations的事件，在改变state的数据</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>代码演示</p>\n</blockquote>\n<ul>\n<li>使用vue-cli创建一个项目(目录如下图)<br><img src=\"/img/vuex3.png\" alt=\"项目目录\"></li>\n<li>store中存放我们的vuex代码(store.js)</li>\n</ul>\n<blockquote>\n<p>代码实现</p>\n</blockquote>\n<ul>\n<li>store.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;&#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"store使用\"><a href=\"#store使用\" class=\"headerlink\" title=\"store使用\"></a>store使用</h2><blockquote>\n<p><strong><em>在A组件中获取state的数据并显示</em></strong> </p>\n</blockquote>\n<ul>\n<li><p>A组件($store.state.name—获取vuex的数据)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.state.name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span></span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"getters使用1\"><a href=\"#getters使用1\" class=\"headerlink\" title=\"getters使用1\"></a>getters使用1</h2><blockquote>\n<p><strong>获取数据后添加一段字符串在显示</strong> </p>\n</blockquote>\n</li>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.getters.addStr&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-comment\">// 默认参数1 state， 等同于this.state</span><br>    <span class=\"hljs-comment\">// 默认参数2 getters 等同于this.getters</span><br>    getters:&#123;<br>        addStr(state)&#123;<br>            <span class=\"hljs-keyword\">return</span> state.name+<span class=\"hljs-string\">&#x27;111&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"getters使用2\"><a href=\"#getters使用2\" class=\"headerlink\" title=\"getters使用2\"></a>getters使用2</h2><blockquote>\n<p><strong>获取数据后添加一段字符串在显示，添加的字符串是组件传递过去的</strong> </p>\n</blockquote>\n</li>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.getters.addStr(&#x27;A组件&#x27;)&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;<br>        addStr(state)&#123;<br>            <span class=\"hljs-comment\">// 通过返回一个函数 然后接受组件传递的参数</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">str</span>)</span>&#123;<br>                <span class=\"hljs-keyword\">return</span> state.name+str;<br>            &#125;<br>        &#125;<br>    &#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"mutations使用\"><a href=\"#mutations使用\" class=\"headerlink\" title=\"mutations使用\"></a>mutations使用</h2><blockquote>\n<p><strong>当点击按钮后，改变state中的name</strong> </p>\n</blockquote>\n<ul>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.state.name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;change&#x27;</span>&gt;</span>btn<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span>,</span><br>    methods:&#123;<br>        change()&#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 1.通过commit(事件类型)触发mutations的事件</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$store.commit(<span class=\"hljs-string\">&#x27;changeName&#x27;</span>);</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 2.通过对象类型触发</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$store.commit(&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 触发事件类型</span></span><br><span class=\"javascript\">                type:<span class=\"hljs-string\">&#x27;changeName&#x27;</span>,</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 传递的参数</span></span><br>                num:0<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;<br>        <span class=\"hljs-comment\">// 默认参数1.state</span><br>        <span class=\"hljs-comment\">// 默认参数2.payload 这个参数是接受触发该事件时传递的参数</span><br>        <span class=\"hljs-comment\">// 注:如果是以对象格式触发该事件时，payload接受到的是一个对象</span><br>        changeName(state,payload)&#123;<br>            state.name=<span class=\"hljs-string\">&#x27;mutations使用&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"actions使用\"><a href=\"#actions使用\" class=\"headerlink\" title=\"actions使用\"></a>actions使用</h2><blockquote>\n<p><strong>当点击按钮后，先发送actions，进行异步操作后，触发mutations的事件，在改变state的name</strong> </p>\n</blockquote>\n</li>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.state.name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;change&#x27;</span>&gt;</span>btn<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span>,</span><br>    methods:&#123;<br>        change()&#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$sotre.dispatch(<span class=\"hljs-string\">&#x27;asyncChange&#x27;</span>);</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;<br>        <span class=\"hljs-comment\">// 默认参数1.state</span><br>        <span class=\"hljs-comment\">// 默认参数2.payload 这个参数是接受触发该事件时传递的参数</span><br>        <span class=\"hljs-comment\">// 注:如果是以对象格式触发该事件时，payload接受到的是一个对象</span><br>        changeName(state,payload)&#123;<br>            state.name=<span class=\"hljs-string\">&#x27;mutations使用&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    actions:&#123;<br>        <span class=\"hljs-comment\">// 默认参数1.context 就是store对象;</span><br>        <span class=\"hljs-comment\">// 默认参数2.payload为接受的参数对象</span><br>        asyncChange(context,payload)&#123;<br>            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>                context.commit(<span class=\"hljs-string\">&#x27;changeName&#x27;</span>);<br>            &#125;,<span class=\"hljs-number\">1000</span>);<br>        &#125;<br>    &#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"module的使用\"><a href=\"#module的使用\" class=\"headerlink\" title=\"module的使用\"></a>module的使用</h2><blockquote>\n<p>说明</p>\n</blockquote>\n</li>\n<li><p>用来模块化state中的数据的</p>\n</li>\n<li><p>store.js</p>\n</li>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.state.personInfo.name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span>,</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;<br>        perosonInfo:&#123;<br>            state:&#123;<br>                name:<span class=\"hljs-string\">&#x27;man&#x27;</span><br>            &#125;,<br>            getters:&#123;&#125;,<br>            mutations:&#123;&#125;,<br>            <span class=\"hljs-comment\">// 需要注意 模块中的actions的context指向的是该模块</span><br>            <span class=\"hljs-comment\">// 如果想要获取根state:  context.rootstate即可</span><br>            actions:&#123;&#125;,<br>            modules:&#123;<br>        &#125;,<br>        animalInfo:&#123;<br>            state:&#123;<br>                name:<span class=\"hljs-string\">&#x27;dog&#x27;</span><br>            &#125;,<br>            getters:&#123;&#125;,<br>            mutations:&#123;&#125;,<br>            actions:&#123;&#125;,<br>            modules:&#123;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"以上就是vuex基本使用，详细可以参考官方文档\"><a href=\"#以上就是vuex基本使用，详细可以参考官方文档\" class=\"headerlink\" title=\"以上就是vuex基本使用，详细可以参考官方文档\"></a>以上就是vuex基本使用，详细可以参考官方文档</h1>","site":{"data":{}},"wordcount":4661,"excerpt":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><blockquote>\n<p>1.在每一个组件内部，都有一份属于该组件的data，页面显示的数据也依赖于此，我们也可以通过函数等来改变data中的数据，整个流程就像下图一样<br><img src=\"/img/vuex1.png\" alt=\"vuex1\"></p>\n</blockquote>\n<ul>\n<li>state相当于组件的data</li>\n<li>view相当于显示data数据的html结构</li>\n<li>action相当于一些事件触发的函数</li>\n</ul>","more":"<blockquote>\n<p>2.通过action改变state的数据，view来实时显示state中的数据<br>3.vuex就是一个所有组件一起维护的一个data<br>4.因为3，所以他是最强大的组件通信方式</p>\n</blockquote>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><blockquote>\n<p>核心概念</p>\n</blockquote>\n<ul>\n<li>State——-相当于组件的data存放具体数据</li>\n<li>Getters—–相当于组件的计算属性</li>\n<li>Mutations—存放更改state中数据的事件(就是一个一个的函数)</li>\n<li>Actions—–用来处理异步操作的事件</li>\n<li>Module——对state数据进行模块化划分<br><img src=\"/img/vuex2.png\" alt=\"vuex2\"><blockquote>\n<p>通过commit触发mutations的事件来改变state的数据，组件显示state的数据<br>当有异步操作时，通过dispatch触发actions内部的事件，然后传递给mutations的事件，在改变state的数据</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>代码演示</p>\n</blockquote>\n<ul>\n<li>使用vue-cli创建一个项目(目录如下图)<br><img src=\"/img/vuex3.png\" alt=\"项目目录\"></li>\n<li>store中存放我们的vuex代码(store.js)</li>\n</ul>\n<blockquote>\n<p>代码实现</p>\n</blockquote>\n<ul>\n<li>store.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;&#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"store使用\"><a href=\"#store使用\" class=\"headerlink\" title=\"store使用\"></a>store使用</h2><blockquote>\n<p><strong><em>在A组件中获取state的数据并显示</em></strong> </p>\n</blockquote>\n<ul>\n<li><p>A组件($store.state.name—获取vuex的数据)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.state.name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span></span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"getters使用1\"><a href=\"#getters使用1\" class=\"headerlink\" title=\"getters使用1\"></a>getters使用1</h2><blockquote>\n<p><strong>获取数据后添加一段字符串在显示</strong> </p>\n</blockquote>\n</li>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.getters.addStr&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span></span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    <span class=\"hljs-comment\">// 默认参数1 state， 等同于this.state</span><br>    <span class=\"hljs-comment\">// 默认参数2 getters 等同于this.getters</span><br>    getters:&#123;<br>        addStr(state)&#123;<br>            <span class=\"hljs-keyword\">return</span> state.name+<span class=\"hljs-string\">&#x27;111&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"getters使用2\"><a href=\"#getters使用2\" class=\"headerlink\" title=\"getters使用2\"></a>getters使用2</h2><blockquote>\n<p><strong>获取数据后添加一段字符串在显示，添加的字符串是组件传递过去的</strong> </p>\n</blockquote>\n</li>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.getters.addStr(&#x27;A组件&#x27;)&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span></span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;<br>        addStr(state)&#123;<br>            <span class=\"hljs-comment\">// 通过返回一个函数 然后接受组件传递的参数</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">str</span>)</span>&#123;<br>                <span class=\"hljs-keyword\">return</span> state.name+str;<br>            &#125;<br>        &#125;<br>    &#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"mutations使用\"><a href=\"#mutations使用\" class=\"headerlink\" title=\"mutations使用\"></a>mutations使用</h2><blockquote>\n<p><strong>当点击按钮后，改变state中的name</strong> </p>\n</blockquote>\n<ul>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.state.name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;change&#x27;</span>&gt;</span>btn<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span>,</span><br>    methods:&#123;<br>        change()&#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// 1.通过commit(事件类型)触发mutations的事件</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$store.commit(<span class=\"hljs-string\">&#x27;changeName&#x27;</span>);</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 2.通过对象类型触发</span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$store.commit(&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 触发事件类型</span></span><br><span class=\"javascript\">                type:<span class=\"hljs-string\">&#x27;changeName&#x27;</span>,</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 传递的参数</span></span><br>                num:0<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;<br>        <span class=\"hljs-comment\">// 默认参数1.state</span><br>        <span class=\"hljs-comment\">// 默认参数2.payload 这个参数是接受触发该事件时传递的参数</span><br>        <span class=\"hljs-comment\">// 注:如果是以对象格式触发该事件时，payload接受到的是一个对象</span><br>        changeName(state,payload)&#123;<br>            state.name=<span class=\"hljs-string\">&#x27;mutations使用&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"actions使用\"><a href=\"#actions使用\" class=\"headerlink\" title=\"actions使用\"></a>actions使用</h2><blockquote>\n<p><strong>当点击按钮后，先发送actions，进行异步操作后，触发mutations的事件，在改变state的name</strong> </p>\n</blockquote>\n</li>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.state.name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;change&#x27;</span>&gt;</span>btn<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span>,</span><br>    methods:&#123;<br>        change()&#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">this</span>.$sotre.dispatch(<span class=\"hljs-string\">&#x27;asyncChange&#x27;</span>);</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>store.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;<br>        <span class=\"hljs-comment\">// 默认参数1.state</span><br>        <span class=\"hljs-comment\">// 默认参数2.payload 这个参数是接受触发该事件时传递的参数</span><br>        <span class=\"hljs-comment\">// 注:如果是以对象格式触发该事件时，payload接受到的是一个对象</span><br>        changeName(state,payload)&#123;<br>            state.name=<span class=\"hljs-string\">&#x27;mutations使用&#x27;</span>;<br>        &#125;<br>    &#125;,<br>    actions:&#123;<br>        <span class=\"hljs-comment\">// 默认参数1.context 就是store对象;</span><br>        <span class=\"hljs-comment\">// 默认参数2.payload为接受的参数对象</span><br>        asyncChange(context,payload)&#123;<br>            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>                context.commit(<span class=\"hljs-string\">&#x27;changeName&#x27;</span>);<br>            &#125;,<span class=\"hljs-number\">1000</span>);<br>        &#125;<br>    &#125;,<br>    modules:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n<h2 id=\"module的使用\"><a href=\"#module的使用\" class=\"headerlink\" title=\"module的使用\"></a>module的使用</h2><blockquote>\n<p>说明</p>\n</blockquote>\n</li>\n<li><p>用来模块化state中的数据的</p>\n</li>\n<li><p>store.js</p>\n</li>\n<li><p>A组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        &#123;&#123;$store.state.personInfo.name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span>&#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;A&#x27;</span>,</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> store=<span class=\"hljs-keyword\">new</span> Vuex.Store(&#123;<br>    state:&#123;<br>        name:<span class=\"hljs-string\">&#x27;Vuex学习&#x27;</span><br>    &#125;,<br>    getters:&#123;&#125;,<br>    mutations:&#123;&#125;,<br>    actions:&#123;&#125;,<br>    modules:&#123;<br>        perosonInfo:&#123;<br>            state:&#123;<br>                name:<span class=\"hljs-string\">&#x27;man&#x27;</span><br>            &#125;,<br>            getters:&#123;&#125;,<br>            mutations:&#123;&#125;,<br>            <span class=\"hljs-comment\">// 需要注意 模块中的actions的context指向的是该模块</span><br>            <span class=\"hljs-comment\">// 如果想要获取根state:  context.rootstate即可</span><br>            actions:&#123;&#125;,<br>            modules:&#123;<br>        &#125;,<br>        animalInfo:&#123;<br>            state:&#123;<br>                name:<span class=\"hljs-string\">&#x27;dog&#x27;</span><br>            &#125;,<br>            getters:&#123;&#125;,<br>            mutations:&#123;&#125;,<br>            actions:&#123;&#125;,<br>            modules:&#123;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"以上就是vuex基本使用，详细可以参考官方文档\"><a href=\"#以上就是vuex基本使用，详细可以参考官方文档\" class=\"headerlink\" title=\"以上就是vuex基本使用，详细可以参考官方文档\"></a>以上就是vuex基本使用，详细可以参考官方文档</h1>"},{"title":"vuejs基础复习1---指令/基本语法","abbrlink":11937,"date":"2019-09-03T13:54:51.000Z","_content":"# vue基础复习\n<!-- more -->\n# 学习前知识储备\n1.HTML+CSS+JS肯定要会啊！！！\n2.ES6知识储备！\n\n# 一些概念解释\n\n>***什么是MVVM***\n>MVVM是一种设计模式，是Model-View-ViewMode的缩写。view就是视图层，可以认为就是HTML。Model是数据层，就是我们通过ajax请求后端接口获取到的数据。ViewMode就是vue帮我们做的，将我们的数据绑定到我们要显示的视图层上。\n\n<!-- more -->\n>***什么是数据驱动***\n>MVVM框架的特点，当数据变化时，视图层显示也会自动变化；反过来也是一样。\n\n>***为什么要用vue(或者类似的框架)？***\n>1.减少了对dom的操作,我们只需要关心我们的数据，dom操作交给框架就好\n>2.让前后端分离更彻底\n\n>***什么SPA应用？***\n>全称是单页Web应用（single page web application，SPA），只有一个HTML页面，通过访问路径不同来切换显示内容。\n>之前纯HTML+CSS的开发，通过a标签跳转的，有多个页面的就是多页应用。\n\n>***路由***\n>路由是根据不同的 url 地址展示不同的内容或页面\n\n>前后端路由区别?\n>1.前端路由完全由前端工程师控制，通过不同的URL俩决定显示区域显示的内容，页面不会刷新\n>2.后端路由是浏览器地址栏切换不同url时，每次都会给后台发送一个请求，然后后端在根据请求返回对应的页面，页面会刷新。\n\n>***什么叫组件？***\n>1.你可以把它理解成某一个页面，或者某个页面的一部分，比如一个按钮等。\n>2.我们开发中需要大量重复利用的我们就可以封装成一个共用组件，来重复使用。\n\n\n# 正篇\n\n***1.以上的概念作为了解即可，先不管什么是单页应用和组件，慢慢就会了解***\n***2.多看vue官方的教程！！！***\n\n\n>***首先学习vue的基本语法(指令)***\n>1.引入vuejs,下载或者引入cdn到你的HTML文件\n>2.创建一个vue应用\n```html\n    <div id=\"app\">\n    <!-- 使用我们的name变量  这时打开页面 hello world -->\n        {{name}}\n    </div>\n    <!-- 通过CDN的方式引入vue -->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n    <script>\n        // 书写我们的vue 应用代码\n        new Vue({\n            el:\"#app\",//绑定到我们的视图容器\n            //data对象中 存放我们的所有数据\n            data:{\n                name:\"hello world\"\n            }\n        })\n    </script>\n```\n>3.v-if,v-else条件渲染\n\n```html\n    <div id=\"app\">\n        <p v-if=\"on\">yes</p>\n        <p v-else>no</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data: {\n                on: true//on是true时，页面显示yes 反之显示no    \n            }\n        })\n    </script>\n```\n4.绑定js的原生事件，v-on:加原生js事件名称(以点击事件举例),可以缩写成@加原生js事件名\n```html\n    <div id=\"app\">\n        <button @click=\"hint\">点我</button>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            // methods中存放我们的函数\n            methods:{\n                // es6中 当键和函数名一样时 可以省略键名\n                hint(){\n                    alert(\"你好\");\n                }\n            }\n        })\n    </script>\n```\n5.当在html标签中想使用data中的数据时，用v-bind，可以缩写成 :\n```html\n    <div id=\"app\">\n       <img v-bind:src=\"src\"></img>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                src:\"图片路径\"\n            }\n        })\n    </script>\n```\n6.双向绑定数据，v-model\n```html\n    <div id=\"app\">\n       <!-- 输入的数据保存到msg -->\n        <input type=\"text\" v-model=\"msg\">\n       <!-- 显示我们msg的数据 我们可以看到当我们在input输入或删除一些文字时，p标签内容会变化 -->\n        <p>{{msg}}</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                msg:\"12132\"\n            }\n        })\n    </script>\n```\n7.动态给html绑定class\n```html\n    <style>\n        .con{\n            color:red;\n        }\n    </style>\n    <div id=\"app\">\n    <!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 -->\n       <p v-bind:class=\"{con:isActive}\">测试内容</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                isActive:true\n            }\n        })\n    </script>\n```\n8.给html绑定多个class\n```html\n    <style>\n        .con{\n            color:red;\n        }\n        .con2{\n            font-size:100px;\n        }\n    </style>\n    <div id=\"app\">\n    <!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 -->\n       <p v-bind:class=\"[one.two]\">测试内容</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                one:\"con\",\n                two:\"con2\"\n            }\n        })\n    </script>\n```\n9.computed计算属性\n>他的作用和一个函数效果是一样的，但是计算属性会缓存我们的计算结果，只有当依赖的数据(实例代码的items)发生改变时，才会重新计算，不然每次调用findSame时，都会使用第一次计算的结果\n```html\n    <div id=\"app\">\n        <!-- 应该显示 [1,1] -->\n        <p>{{findSame}}</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                items:[1,1,2]\n            },\n            computed{\n                findSame(){\n                    let arr=[];\n                    // 查找item中相同的元素，并且装入到一个新数组中并返回\n                    for(let i =0;i<this.items.length;i++){\n                        if(arr.indexOf(this.items[i])==-1){\n                            arr.push(this.items[i]);\n                        }\n                    }\n                    return arr;\n                }\n            }\n        })\n    </script>\n```","source":"_posts/vue/vuejs基础复习-1.md","raw":"---\ntitle: vuejs基础复习1---指令/基本语法\ncategory:\n  - 技术笔记\ntag:\n  - Vue\n  - 前端\nabbrlink: 11937\ndate: 2019-09-03 21:54:51\n---\n# vue基础复习\n<!-- more -->\n# 学习前知识储备\n1.HTML+CSS+JS肯定要会啊！！！\n2.ES6知识储备！\n\n# 一些概念解释\n\n>***什么是MVVM***\n>MVVM是一种设计模式，是Model-View-ViewMode的缩写。view就是视图层，可以认为就是HTML。Model是数据层，就是我们通过ajax请求后端接口获取到的数据。ViewMode就是vue帮我们做的，将我们的数据绑定到我们要显示的视图层上。\n\n<!-- more -->\n>***什么是数据驱动***\n>MVVM框架的特点，当数据变化时，视图层显示也会自动变化；反过来也是一样。\n\n>***为什么要用vue(或者类似的框架)？***\n>1.减少了对dom的操作,我们只需要关心我们的数据，dom操作交给框架就好\n>2.让前后端分离更彻底\n\n>***什么SPA应用？***\n>全称是单页Web应用（single page web application，SPA），只有一个HTML页面，通过访问路径不同来切换显示内容。\n>之前纯HTML+CSS的开发，通过a标签跳转的，有多个页面的就是多页应用。\n\n>***路由***\n>路由是根据不同的 url 地址展示不同的内容或页面\n\n>前后端路由区别?\n>1.前端路由完全由前端工程师控制，通过不同的URL俩决定显示区域显示的内容，页面不会刷新\n>2.后端路由是浏览器地址栏切换不同url时，每次都会给后台发送一个请求，然后后端在根据请求返回对应的页面，页面会刷新。\n\n>***什么叫组件？***\n>1.你可以把它理解成某一个页面，或者某个页面的一部分，比如一个按钮等。\n>2.我们开发中需要大量重复利用的我们就可以封装成一个共用组件，来重复使用。\n\n\n# 正篇\n\n***1.以上的概念作为了解即可，先不管什么是单页应用和组件，慢慢就会了解***\n***2.多看vue官方的教程！！！***\n\n\n>***首先学习vue的基本语法(指令)***\n>1.引入vuejs,下载或者引入cdn到你的HTML文件\n>2.创建一个vue应用\n```html\n    <div id=\"app\">\n    <!-- 使用我们的name变量  这时打开页面 hello world -->\n        {{name}}\n    </div>\n    <!-- 通过CDN的方式引入vue -->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n    <script>\n        // 书写我们的vue 应用代码\n        new Vue({\n            el:\"#app\",//绑定到我们的视图容器\n            //data对象中 存放我们的所有数据\n            data:{\n                name:\"hello world\"\n            }\n        })\n    </script>\n```\n>3.v-if,v-else条件渲染\n\n```html\n    <div id=\"app\">\n        <p v-if=\"on\">yes</p>\n        <p v-else>no</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data: {\n                on: true//on是true时，页面显示yes 反之显示no    \n            }\n        })\n    </script>\n```\n4.绑定js的原生事件，v-on:加原生js事件名称(以点击事件举例),可以缩写成@加原生js事件名\n```html\n    <div id=\"app\">\n        <button @click=\"hint\">点我</button>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            // methods中存放我们的函数\n            methods:{\n                // es6中 当键和函数名一样时 可以省略键名\n                hint(){\n                    alert(\"你好\");\n                }\n            }\n        })\n    </script>\n```\n5.当在html标签中想使用data中的数据时，用v-bind，可以缩写成 :\n```html\n    <div id=\"app\">\n       <img v-bind:src=\"src\"></img>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                src:\"图片路径\"\n            }\n        })\n    </script>\n```\n6.双向绑定数据，v-model\n```html\n    <div id=\"app\">\n       <!-- 输入的数据保存到msg -->\n        <input type=\"text\" v-model=\"msg\">\n       <!-- 显示我们msg的数据 我们可以看到当我们在input输入或删除一些文字时，p标签内容会变化 -->\n        <p>{{msg}}</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                msg:\"12132\"\n            }\n        })\n    </script>\n```\n7.动态给html绑定class\n```html\n    <style>\n        .con{\n            color:red;\n        }\n    </style>\n    <div id=\"app\">\n    <!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 -->\n       <p v-bind:class=\"{con:isActive}\">测试内容</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                isActive:true\n            }\n        })\n    </script>\n```\n8.给html绑定多个class\n```html\n    <style>\n        .con{\n            color:red;\n        }\n        .con2{\n            font-size:100px;\n        }\n    </style>\n    <div id=\"app\">\n    <!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 -->\n       <p v-bind:class=\"[one.two]\">测试内容</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                one:\"con\",\n                two:\"con2\"\n            }\n        })\n    </script>\n```\n9.computed计算属性\n>他的作用和一个函数效果是一样的，但是计算属性会缓存我们的计算结果，只有当依赖的数据(实例代码的items)发生改变时，才会重新计算，不然每次调用findSame时，都会使用第一次计算的结果\n```html\n    <div id=\"app\">\n        <!-- 应该显示 [1,1] -->\n        <p>{{findSame}}</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js\"></script>\n    <script>\n        new Vue({\n            el: \"#app\",\n            data:{\n                items:[1,1,2]\n            },\n            computed{\n                findSame(){\n                    let arr=[];\n                    // 查找item中相同的元素，并且装入到一个新数组中并返回\n                    for(let i =0;i<this.items.length;i++){\n                        if(arr.indexOf(this.items[i])==-1){\n                            arr.push(this.items[i]);\n                        }\n                    }\n                    return arr;\n                }\n            }\n        })\n    </script>\n```","slug":"vue/vuejs基础复习-1","published":1,"updated":"2021-12-31T12:01:59.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv120005j7jfhj2339sl","content":"<h1 id=\"vue基础复习\"><a href=\"#vue基础复习\" class=\"headerlink\" title=\"vue基础复习\"></a>vue基础复习</h1><a id=\"more\"></a>\n<h1 id=\"学习前知识储备\"><a href=\"#学习前知识储备\" class=\"headerlink\" title=\"学习前知识储备\"></a>学习前知识储备</h1><p>1.HTML+CSS+JS肯定要会啊！！！<br>2.ES6知识储备！</p>\n<h1 id=\"一些概念解释\"><a href=\"#一些概念解释\" class=\"headerlink\" title=\"一些概念解释\"></a>一些概念解释</h1><blockquote>\n<p><strong><em>什么是MVVM</em></strong><br>MVVM是一种设计模式，是Model-View-ViewMode的缩写。view就是视图层，可以认为就是HTML。Model是数据层，就是我们通过ajax请求后端接口获取到的数据。ViewMode就是vue帮我们做的，将我们的数据绑定到我们要显示的视图层上。</p>\n</blockquote>\n<!-- more -->\n<blockquote>\n<p><strong><em>什么是数据驱动</em></strong><br>MVVM框架的特点，当数据变化时，视图层显示也会自动变化；反过来也是一样。</p>\n</blockquote>\n<blockquote>\n<p><strong><em>为什么要用vue(或者类似的框架)？</em></strong><br>1.减少了对dom的操作,我们只需要关心我们的数据，dom操作交给框架就好<br>2.让前后端分离更彻底</p>\n</blockquote>\n<blockquote>\n<p><strong><em>什么SPA应用？</em></strong><br>全称是单页Web应用（single page web application，SPA），只有一个HTML页面，通过访问路径不同来切换显示内容。<br>之前纯HTML+CSS的开发，通过a标签跳转的，有多个页面的就是多页应用。</p>\n</blockquote>\n<blockquote>\n<p><strong><em>路由</em></strong><br>路由是根据不同的 url 地址展示不同的内容或页面</p>\n</blockquote>\n<blockquote>\n<p>前后端路由区别?<br>1.前端路由完全由前端工程师控制，通过不同的URL俩决定显示区域显示的内容，页面不会刷新<br>2.后端路由是浏览器地址栏切换不同url时，每次都会给后台发送一个请求，然后后端在根据请求返回对应的页面，页面会刷新。</p>\n</blockquote>\n<blockquote>\n<p><strong><em>什么叫组件？</em></strong><br>1.你可以把它理解成某一个页面，或者某个页面的一部分，比如一个按钮等。<br>2.我们开发中需要大量重复利用的我们就可以封装成一个共用组件，来重复使用。</p>\n</blockquote>\n<h1 id=\"正篇\"><a href=\"#正篇\" class=\"headerlink\" title=\"正篇\"></a>正篇</h1><p><strong><em>1.以上的概念作为了解即可，先不管什么是单页应用和组件，慢慢就会了解</em></strong><br><strong><em>2.多看vue官方的教程！！！</em></strong></p>\n<blockquote>\n<p><strong><em>首先学习vue的基本语法(指令)</em></strong><br>1.引入vuejs,下载或者引入cdn到你的HTML文件<br>2.创建一个vue应用</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 使用我们的name变量  这时打开页面 hello world --&gt;</span><br>    &#123;&#123;name&#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 通过CDN的方式引入vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 书写我们的vue 应用代码</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el:<span class=\"hljs-string\">&quot;#app&quot;</span>,<span class=\"hljs-comment\">//绑定到我们的视图容器</span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">//data对象中 存放我们的所有数据</span></span><br>        data:&#123;<br><span class=\"javascript\">            name:<span class=\"hljs-string\">&quot;hello world&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>3.v-if,v-else条件渲染</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;on&quot;</span>&gt;</span>yes<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>no<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data: &#123;<br><span class=\"javascript\">            on: <span class=\"hljs-literal\">true</span><span class=\"hljs-comment\">//on是true时，页面显示yes 反之显示no    </span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>4.绑定js的原生事件，v-on:加原生js事件名称(以点击事件举例),可以缩写成@加原生js事件名</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;hint&quot;</span>&gt;</span>点我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// methods中存放我们的函数</span></span><br>        methods:&#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// es6中 当键和函数名一样时 可以省略键名</span></span><br>            hint()&#123;<br><span class=\"javascript\">                alert(<span class=\"hljs-string\">&quot;你好&quot;</span>);</span><br>            &#125;<br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>5.当在html标签中想使用data中的数据时，用v-bind，可以缩写成 :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">v-bind:src</span>=<span class=\"hljs-string\">&quot;src&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">img</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class=\"javascript\">            src:<span class=\"hljs-string\">&quot;图片路径&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>6.双向绑定数据，v-model</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!-- 输入的数据保存到msg --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;msg&quot;</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!-- 显示我们msg的数据 我们可以看到当我们在input输入或删除一些文字时，p标签内容会变化 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class=\"javascript\">            msg:<span class=\"hljs-string\">&quot;12132&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>7.动态给html绑定class</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.con</span>&#123;</span><br><span class=\"css\">        <span class=\"hljs-selector-tag\">color</span><span class=\"hljs-selector-pseudo\">:red</span>;</span><br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;&#123;con:isActive&#125;&quot;</span>&gt;</span>测试内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class=\"javascript\">            isActive:<span class=\"hljs-literal\">true</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>8.给html绑定多个class</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.con</span>&#123;</span><br><span class=\"css\">        <span class=\"hljs-selector-tag\">color</span><span class=\"hljs-selector-pseudo\">:red</span>;</span><br>    &#125;<br><span class=\"css\">    <span class=\"hljs-selector-class\">.con2</span>&#123;</span><br><span class=\"css\">        <span class=\"hljs-selector-tag\">font-size</span><span class=\"hljs-selector-pseudo\">:100px</span>;</span><br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;[one.two]&quot;</span>&gt;</span>测试内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class=\"javascript\">            one:<span class=\"hljs-string\">&quot;con&quot;</span>,</span><br><span class=\"javascript\">            two:<span class=\"hljs-string\">&quot;con2&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>9.computed计算属性</p>\n<blockquote>\n<p>他的作用和一个函数效果是一样的，但是计算属性会缓存我们的计算结果，只有当依赖的数据(实例代码的items)发生改变时，才会重新计算，不然每次调用findSame时，都会使用第一次计算的结果</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 应该显示 [1,1] --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;findSame&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br>            items:[1,1,2]<br>        &#125;,<br>        computed&#123;<br>            findSame()&#123;<br><span class=\"javascript\">                <span class=\"hljs-keyword\">let</span> arr=[];</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 查找item中相同的元素，并且装入到一个新数组中并返回</span></span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i =<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">this</span>.items.length;i++)&#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-keyword\">if</span>(arr.indexOf(<span class=\"hljs-built_in\">this</span>.items[i])==<span class=\"hljs-number\">-1</span>)&#123;</span><br><span class=\"javascript\">                        arr.push(<span class=\"hljs-built_in\">this</span>.items[i]);</span><br>                    &#125;<br>                &#125;<br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> arr;</span><br>            &#125;<br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":4391,"excerpt":"<h1 id=\"vue基础复习\"><a href=\"#vue基础复习\" class=\"headerlink\" title=\"vue基础复习\"></a>vue基础复习</h1>","more":"<h1 id=\"学习前知识储备\"><a href=\"#学习前知识储备\" class=\"headerlink\" title=\"学习前知识储备\"></a>学习前知识储备</h1><p>1.HTML+CSS+JS肯定要会啊！！！<br>2.ES6知识储备！</p>\n<h1 id=\"一些概念解释\"><a href=\"#一些概念解释\" class=\"headerlink\" title=\"一些概念解释\"></a>一些概念解释</h1><blockquote>\n<p><strong><em>什么是MVVM</em></strong><br>MVVM是一种设计模式，是Model-View-ViewMode的缩写。view就是视图层，可以认为就是HTML。Model是数据层，就是我们通过ajax请求后端接口获取到的数据。ViewMode就是vue帮我们做的，将我们的数据绑定到我们要显示的视图层上。</p>\n</blockquote>\n<!-- more -->\n<blockquote>\n<p><strong><em>什么是数据驱动</em></strong><br>MVVM框架的特点，当数据变化时，视图层显示也会自动变化；反过来也是一样。</p>\n</blockquote>\n<blockquote>\n<p><strong><em>为什么要用vue(或者类似的框架)？</em></strong><br>1.减少了对dom的操作,我们只需要关心我们的数据，dom操作交给框架就好<br>2.让前后端分离更彻底</p>\n</blockquote>\n<blockquote>\n<p><strong><em>什么SPA应用？</em></strong><br>全称是单页Web应用（single page web application，SPA），只有一个HTML页面，通过访问路径不同来切换显示内容。<br>之前纯HTML+CSS的开发，通过a标签跳转的，有多个页面的就是多页应用。</p>\n</blockquote>\n<blockquote>\n<p><strong><em>路由</em></strong><br>路由是根据不同的 url 地址展示不同的内容或页面</p>\n</blockquote>\n<blockquote>\n<p>前后端路由区别?<br>1.前端路由完全由前端工程师控制，通过不同的URL俩决定显示区域显示的内容，页面不会刷新<br>2.后端路由是浏览器地址栏切换不同url时，每次都会给后台发送一个请求，然后后端在根据请求返回对应的页面，页面会刷新。</p>\n</blockquote>\n<blockquote>\n<p><strong><em>什么叫组件？</em></strong><br>1.你可以把它理解成某一个页面，或者某个页面的一部分，比如一个按钮等。<br>2.我们开发中需要大量重复利用的我们就可以封装成一个共用组件，来重复使用。</p>\n</blockquote>\n<h1 id=\"正篇\"><a href=\"#正篇\" class=\"headerlink\" title=\"正篇\"></a>正篇</h1><p><strong><em>1.以上的概念作为了解即可，先不管什么是单页应用和组件，慢慢就会了解</em></strong><br><strong><em>2.多看vue官方的教程！！！</em></strong></p>\n<blockquote>\n<p><strong><em>首先学习vue的基本语法(指令)</em></strong><br>1.引入vuejs,下载或者引入cdn到你的HTML文件<br>2.创建一个vue应用</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 使用我们的name变量  这时打开页面 hello world --&gt;</span><br>    &#123;&#123;name&#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 通过CDN的方式引入vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 书写我们的vue 应用代码</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el:<span class=\"hljs-string\">&quot;#app&quot;</span>,<span class=\"hljs-comment\">//绑定到我们的视图容器</span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">//data对象中 存放我们的所有数据</span></span><br>        data:&#123;<br><span class=\"javascript\">            name:<span class=\"hljs-string\">&quot;hello world&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>3.v-if,v-else条件渲染</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;on&quot;</span>&gt;</span>yes<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>no<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data: &#123;<br><span class=\"javascript\">            on: <span class=\"hljs-literal\">true</span><span class=\"hljs-comment\">//on是true时，页面显示yes 反之显示no    </span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>4.绑定js的原生事件，v-on:加原生js事件名称(以点击事件举例),可以缩写成@加原生js事件名</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;hint&quot;</span>&gt;</span>点我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// methods中存放我们的函数</span></span><br>        methods:&#123;<br><span class=\"javascript\">            <span class=\"hljs-comment\">// es6中 当键和函数名一样时 可以省略键名</span></span><br>            hint()&#123;<br><span class=\"javascript\">                alert(<span class=\"hljs-string\">&quot;你好&quot;</span>);</span><br>            &#125;<br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>5.当在html标签中想使用data中的数据时，用v-bind，可以缩写成 :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">v-bind:src</span>=<span class=\"hljs-string\">&quot;src&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">img</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class=\"javascript\">            src:<span class=\"hljs-string\">&quot;图片路径&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>6.双向绑定数据，v-model</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!-- 输入的数据保存到msg --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;msg&quot;</span>&gt;</span><br>   <span class=\"hljs-comment\">&lt;!-- 显示我们msg的数据 我们可以看到当我们在input输入或删除一些文字时，p标签内容会变化 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class=\"javascript\">            msg:<span class=\"hljs-string\">&quot;12132&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>7.动态给html绑定class</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.con</span>&#123;</span><br><span class=\"css\">        <span class=\"hljs-selector-tag\">color</span><span class=\"hljs-selector-pseudo\">:red</span>;</span><br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;&#123;con:isActive&#125;&quot;</span>&gt;</span>测试内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class=\"javascript\">            isActive:<span class=\"hljs-literal\">true</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>8.给html绑定多个class</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.con</span>&#123;</span><br><span class=\"css\">        <span class=\"hljs-selector-tag\">color</span><span class=\"hljs-selector-pseudo\">:red</span>;</span><br>    &#125;<br><span class=\"css\">    <span class=\"hljs-selector-class\">.con2</span>&#123;</span><br><span class=\"css\">        <span class=\"hljs-selector-tag\">font-size</span><span class=\"hljs-selector-pseudo\">:100px</span>;</span><br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 当isActive值为true时，给p标签绑定了一个叫con的class isActive为false时不绑定 --&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-bind:class</span>=<span class=\"hljs-string\">&quot;[one.two]&quot;</span>&gt;</span>测试内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br><span class=\"javascript\">            one:<span class=\"hljs-string\">&quot;con&quot;</span>,</span><br><span class=\"javascript\">            two:<span class=\"hljs-string\">&quot;con2&quot;</span></span><br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>9.computed计算属性</p>\n<blockquote>\n<p>他的作用和一个函数效果是一样的，但是计算属性会缓存我们的计算结果，只有当依赖的数据(实例代码的items)发生改变时，才会重新计算，不然每次调用findSame时，都会使用第一次计算的结果</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 应该显示 [1,1] --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;&#123;findSame&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.common.dev.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>        data:&#123;<br>            items:[1,1,2]<br>        &#125;,<br>        computed&#123;<br>            findSame()&#123;<br><span class=\"javascript\">                <span class=\"hljs-keyword\">let</span> arr=[];</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 查找item中相同的元素，并且装入到一个新数组中并返回</span></span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i =<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">this</span>.items.length;i++)&#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-keyword\">if</span>(arr.indexOf(<span class=\"hljs-built_in\">this</span>.items[i])==<span class=\"hljs-number\">-1</span>)&#123;</span><br><span class=\"javascript\">                        arr.push(<span class=\"hljs-built_in\">this</span>.items[i]);</span><br>                    &#125;<br>                &#125;<br><span class=\"javascript\">                <span class=\"hljs-keyword\">return</span> arr;</span><br>            &#125;<br>        &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>"},{"title":"vuejs基础复习-5","abbrlink":38099,"date":"2020-02-10T06:12:58.000Z","_content":"\n# 路由\n- 概念：\n>根据URL决定显示什么内容，这个系统就是路由系统。\n\n- 为什么需要\n>因为vue和react这些SPA框架，只有一个html页面，所以需要使用某种手段来决定当前页面显示什么内容，所以才有了前端路由系统。\n<!-- more -->\n\n# 基本使用\n- 路由配置除外，使用到的只有2个标签\n```html\n<!-- 用于进行页面的跳转 -->\n<router-link />\n<!-- 用于显示，根据url决定显示的页面 -->\n<router-view></router-view>\n```\n- 进行切换页面跳转\n>在浏览器输入http:****/home就会显示home ，输入about就会显示about\n\n```html\n<!-- Home.vue -->\n<template>\n    <div>\n        home\n    </div>\n</template>\n<script>\nexport default {\n    name:'home'\n}\n</script>\n<!-- About.vue -->\n<template>\n    <div>\n        about\n    </div>\n</template>\n<script>\nexport default {\n    name:'about'\n}\n</script>\n```\n```js\n// 在router.js中配置需要显示的页面文件\n...\nconst routes=[\n    {\n        // url的路径\n        path:'/home',\n        // home.vue文件的name\n        name:'home',\n        // 引入该文件\n        component:()=>import('Home.vue')\n    },\n    {\n        path:'/about',\n        name:'about',\n        component:()=>import('About.vue')\n    },\n]\n...\n```\n\n- 动态路由显示\n>例如一个有一个todo的列表，其中每一项内都有不同的数据，但是数据显示的样式什么都一样，我们可以用同一个组件来渲染，只需要在跳转时传递一个标识，来告诉组件加载所对应的数据就可以了\n\n```js\n// 在router.js中配置需要显示的页面文件\n...\nconst routes=[\n    {\n        // url的路径\n        path:'/home',\n        // home.vue文件的name\n        name:'home',\n        // 引入该文件\n        component:()=>import('Home.vue')\n    },\n    {\n        name:'list/:id,\n        component:'list',\n        component:()=>import('List.vue')\n    }\n]\n...\n```\n```html\n<!-- home.vue -->\n<template>\n    <div>\n        <ul>\n            <li v-for=\"(item,index) in info\" :key=\"index\">\n                <!-- 切换url来进行页面跳转，类似a标签 -->\n                <!-- 跳转时携带点击项的id -->\n                <!-- 这里也可以使用query替代params -->\n                <router-link :to=\"{name:'list',params:{id:'item'}}\">\n                    {{item.id}}\n                <router-link>\n            </li>\n        </ul>\n    </div>\n</template>\n<script>\nexport default {\n    name:'list',\n    data(){\n        return{\n            info:[\n                {\n                    id:'1'\n                },\n                {\n                    id:'2'\n                }\n            ]\n        }\n    }\n}\n</script>\n<!-- list.vue -->\n<template>\n    <div>\n        <p >\n            {{id}}\n        </p>\n    </div>\n</template>\n<script>\nexport default {\n    name:'list',\n    data(){\n        return{\n            info:''\n        }\n    },\n    mounted(){\n        // 接受从home组件传递过来的id\n        // 如果跳转那里使用的query这里的params也需要换成query\n        this.info=this.$route.params.info;\n    }\n}\n</script>\n```\n>query和的区别：query使传递的值会显示在url中，params不会，所以这也导致了假如我们没有在list后面写id，那list页面刷新后，传递过来的数据就会丢失。\n>总结：使用query可以不在路由进行配置，params时要在路由进行动态参数配置\n\n# 其他使用\n总结除过页面跳转意外，使用过的路由系统的功能。\n- 路由嵌套\n>使用场景：当一个页面下的其他页面都有相同的部分，只有小部分需要根据不同的地址来显示不同的内容时，就可以使用，比如后台管理系统，所有页面左边都有整体的菜单\n```js\n// router.js配置\n...\nconst routes=[\n    {\n        // url的路径\n        path:'/home',\n        // home.vue文件的name\n        name:'home',\n        // 引入该文件\n        component:()=>import('Home.vue'),\n        // 配置 子路由\n        children:[\n            {\n                path:'/one',\n                name:'one',\n                component:()=>import('One.vue'),\n            },\n            {\n                path:'/two',\n                name:'two',\n                component:()=>import('Two.vue'),\n            },\n            ...\n        ]\n    }\n]\n...\n```\n```html\n<!-- home.vue使用 -->\n<template>\n    <div>\n        <p >\n            菜单\n        </p>\n        <!-- 根据url的不同来显示one，two -->\n        <router-view />\n    </div>\n</template>\n<script>\nexport default {\n    name:'home',\n}\n</script>\n```\n\n- 路由导航守卫\n\n>作用\n>- 在页面进入前后进行一些操作，比如重定向，数据操作等等\n\n>使用场景\n>- 在页面进入前验证token是否过期、验证用户是否还有权限访问该页、根据需要不一样，重新导向用户的访问页面\n\n>分类:\n>>全局：作用在所有路由\n>>路由独享：只作用在配置的路由\n>组件内：只作用在配置的组件\n","source":"_posts/vue/vuejs基础复习-5.md","raw":"---\ntitle: vuejs基础复习-5\ncategories:\n  - 技术笔记\ntag:\n  - Vue\n  - 前端\nabbrlink: 38099\ndate: 2020-02-10 14:12:58\n---\n\n# 路由\n- 概念：\n>根据URL决定显示什么内容，这个系统就是路由系统。\n\n- 为什么需要\n>因为vue和react这些SPA框架，只有一个html页面，所以需要使用某种手段来决定当前页面显示什么内容，所以才有了前端路由系统。\n<!-- more -->\n\n# 基本使用\n- 路由配置除外，使用到的只有2个标签\n```html\n<!-- 用于进行页面的跳转 -->\n<router-link />\n<!-- 用于显示，根据url决定显示的页面 -->\n<router-view></router-view>\n```\n- 进行切换页面跳转\n>在浏览器输入http:****/home就会显示home ，输入about就会显示about\n\n```html\n<!-- Home.vue -->\n<template>\n    <div>\n        home\n    </div>\n</template>\n<script>\nexport default {\n    name:'home'\n}\n</script>\n<!-- About.vue -->\n<template>\n    <div>\n        about\n    </div>\n</template>\n<script>\nexport default {\n    name:'about'\n}\n</script>\n```\n```js\n// 在router.js中配置需要显示的页面文件\n...\nconst routes=[\n    {\n        // url的路径\n        path:'/home',\n        // home.vue文件的name\n        name:'home',\n        // 引入该文件\n        component:()=>import('Home.vue')\n    },\n    {\n        path:'/about',\n        name:'about',\n        component:()=>import('About.vue')\n    },\n]\n...\n```\n\n- 动态路由显示\n>例如一个有一个todo的列表，其中每一项内都有不同的数据，但是数据显示的样式什么都一样，我们可以用同一个组件来渲染，只需要在跳转时传递一个标识，来告诉组件加载所对应的数据就可以了\n\n```js\n// 在router.js中配置需要显示的页面文件\n...\nconst routes=[\n    {\n        // url的路径\n        path:'/home',\n        // home.vue文件的name\n        name:'home',\n        // 引入该文件\n        component:()=>import('Home.vue')\n    },\n    {\n        name:'list/:id,\n        component:'list',\n        component:()=>import('List.vue')\n    }\n]\n...\n```\n```html\n<!-- home.vue -->\n<template>\n    <div>\n        <ul>\n            <li v-for=\"(item,index) in info\" :key=\"index\">\n                <!-- 切换url来进行页面跳转，类似a标签 -->\n                <!-- 跳转时携带点击项的id -->\n                <!-- 这里也可以使用query替代params -->\n                <router-link :to=\"{name:'list',params:{id:'item'}}\">\n                    {{item.id}}\n                <router-link>\n            </li>\n        </ul>\n    </div>\n</template>\n<script>\nexport default {\n    name:'list',\n    data(){\n        return{\n            info:[\n                {\n                    id:'1'\n                },\n                {\n                    id:'2'\n                }\n            ]\n        }\n    }\n}\n</script>\n<!-- list.vue -->\n<template>\n    <div>\n        <p >\n            {{id}}\n        </p>\n    </div>\n</template>\n<script>\nexport default {\n    name:'list',\n    data(){\n        return{\n            info:''\n        }\n    },\n    mounted(){\n        // 接受从home组件传递过来的id\n        // 如果跳转那里使用的query这里的params也需要换成query\n        this.info=this.$route.params.info;\n    }\n}\n</script>\n```\n>query和的区别：query使传递的值会显示在url中，params不会，所以这也导致了假如我们没有在list后面写id，那list页面刷新后，传递过来的数据就会丢失。\n>总结：使用query可以不在路由进行配置，params时要在路由进行动态参数配置\n\n# 其他使用\n总结除过页面跳转意外，使用过的路由系统的功能。\n- 路由嵌套\n>使用场景：当一个页面下的其他页面都有相同的部分，只有小部分需要根据不同的地址来显示不同的内容时，就可以使用，比如后台管理系统，所有页面左边都有整体的菜单\n```js\n// router.js配置\n...\nconst routes=[\n    {\n        // url的路径\n        path:'/home',\n        // home.vue文件的name\n        name:'home',\n        // 引入该文件\n        component:()=>import('Home.vue'),\n        // 配置 子路由\n        children:[\n            {\n                path:'/one',\n                name:'one',\n                component:()=>import('One.vue'),\n            },\n            {\n                path:'/two',\n                name:'two',\n                component:()=>import('Two.vue'),\n            },\n            ...\n        ]\n    }\n]\n...\n```\n```html\n<!-- home.vue使用 -->\n<template>\n    <div>\n        <p >\n            菜单\n        </p>\n        <!-- 根据url的不同来显示one，two -->\n        <router-view />\n    </div>\n</template>\n<script>\nexport default {\n    name:'home',\n}\n</script>\n```\n\n- 路由导航守卫\n\n>作用\n>- 在页面进入前后进行一些操作，比如重定向，数据操作等等\n\n>使用场景\n>- 在页面进入前验证token是否过期、验证用户是否还有权限访问该页、根据需要不一样，重新导向用户的访问页面\n\n>分类:\n>>全局：作用在所有路由\n>>路由独享：只作用在配置的路由\n>组件内：只作用在配置的组件\n","slug":"vue/vuejs基础复习-5","published":1,"updated":"2021-12-31T12:01:59.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv120007j7jf4twbaknd","content":"<h1 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h1><ul>\n<li><p>概念：</p>\n<blockquote>\n<p>根据URL决定显示什么内容，这个系统就是路由系统。</p>\n</blockquote>\n</li>\n<li><p>为什么需要</p>\n<blockquote>\n<p>因为vue和react这些SPA框架，只有一个html页面，所以需要使用某种手段来决定当前页面显示什么内容，所以才有了前端路由系统。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><ul>\n<li>路由配置除外，使用到的只有2个标签<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于进行页面的跳转 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> /&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 用于显示，根据url决定显示的页面 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>\n<li>进行切换页面跳转<blockquote>\n<p>在浏览器输入http:****/home就会显示home ，输入about就会显示about</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Home.vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        home<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;home&#x27;</span></span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- About.vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        about<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;about&#x27;</span></span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在router.js中配置需要显示的页面文件</span><br>...<br><span class=\"hljs-keyword\">const</span> routes=[<br>    &#123;<br>        <span class=\"hljs-comment\">// url的路径</span><br>        path:<span class=\"hljs-string\">&#x27;/home&#x27;</span>,<br>        <span class=\"hljs-comment\">// home.vue文件的name</span><br>        name:<span class=\"hljs-string\">&#x27;home&#x27;</span>,<br>        <span class=\"hljs-comment\">// 引入该文件</span><br>        component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;Home.vue&#x27;</span>)<br>    &#125;,<br>    &#123;<br>        path:<span class=\"hljs-string\">&#x27;/about&#x27;</span>,<br>        name:<span class=\"hljs-string\">&#x27;about&#x27;</span>,<br>        component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;About.vue&#x27;</span>)<br>    &#125;,<br>]<br>...<br></code></pre></div></td></tr></table></figure>\n\n<ul>\n<li>动态路由显示<blockquote>\n<p>例如一个有一个todo的列表，其中每一项内都有不同的数据，但是数据显示的样式什么都一样，我们可以用同一个组件来渲染，只需要在跳转时传递一个标识，来告诉组件加载所对应的数据就可以了</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在router.js中配置需要显示的页面文件</span><br>...<br><span class=\"hljs-keyword\">const</span> routes=[<br>    &#123;<br>        <span class=\"hljs-comment\">// url的路径</span><br>        path:<span class=\"hljs-string\">&#x27;/home&#x27;</span>,<br>        <span class=\"hljs-comment\">// home.vue文件的name</span><br>        name:<span class=\"hljs-string\">&#x27;home&#x27;</span>,<br>        <span class=\"hljs-comment\">// 引入该文件</span><br>        component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;Home.vue&#x27;</span>)<br>    &#125;,<br>    &#123;<br>        name:<span class=\"hljs-string\">&#x27;list/:id,</span><br><span class=\"hljs-string\">        component:&#x27;</span>list<span class=\"hljs-string\">&#x27;,</span><br><span class=\"hljs-string\">        component:()=&gt;import(&#x27;</span>List.vue<span class=\"hljs-string\">&#x27;)</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">]</span><br><span class=\"hljs-string\">...</span><br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- home.vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(item,index) in info&quot;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- 切换url来进行页面跳转，类似a标签 --&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- 跳转时携带点击项的id --&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- 这里也可以使用query替代params --&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#123;name:&#x27;list&#x27;,params:&#123;id:&#x27;item&#x27;&#125;&#125;&quot;</span>&gt;</span><br>                    &#123;&#123;item.id&#125;&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;list&#x27;</span>,</span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br>            info:[<br>                &#123;<br><span class=\"javascript\">                    id:<span class=\"hljs-string\">&#x27;1&#x27;</span></span><br>                &#125;,<br>                &#123;<br><span class=\"javascript\">                    id:<span class=\"hljs-string\">&#x27;2&#x27;</span></span><br>                &#125;<br>            ]<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- list.vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> &gt;</span><br>            &#123;&#123;id&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;list&#x27;</span>,</span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">            info:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    mounted()&#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 接受从home组件传递过来的id</span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 如果跳转那里使用的query这里的params也需要换成query</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.info=<span class=\"hljs-built_in\">this</span>.$route.params.info;</span><br>    &#125;<br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>query和的区别：query使传递的值会显示在url中，params不会，所以这也导致了假如我们没有在list后面写id，那list页面刷新后，传递过来的数据就会丢失。<br>总结：使用query可以不在路由进行配置，params时要在路由进行动态参数配置</p>\n</blockquote>\n<h1 id=\"其他使用\"><a href=\"#其他使用\" class=\"headerlink\" title=\"其他使用\"></a>其他使用</h1><p>总结除过页面跳转意外，使用过的路由系统的功能。</p>\n<ul>\n<li><p>路由嵌套</p>\n<blockquote>\n<p>使用场景：当一个页面下的其他页面都有相同的部分，只有小部分需要根据不同的地址来显示不同的内容时，就可以使用，比如后台管理系统，所有页面左边都有整体的菜单</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// router.js配置</span><br>...<br><span class=\"hljs-keyword\">const</span> routes=[<br>    &#123;<br>        <span class=\"hljs-comment\">// url的路径</span><br>        path:<span class=\"hljs-string\">&#x27;/home&#x27;</span>,<br>        <span class=\"hljs-comment\">// home.vue文件的name</span><br>        name:<span class=\"hljs-string\">&#x27;home&#x27;</span>,<br>        <span class=\"hljs-comment\">// 引入该文件</span><br>        component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;Home.vue&#x27;</span>),<br>        <span class=\"hljs-comment\">// 配置 子路由</span><br>        children:[<br>            &#123;<br>                path:<span class=\"hljs-string\">&#x27;/one&#x27;</span>,<br>                name:<span class=\"hljs-string\">&#x27;one&#x27;</span>,<br>                component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;One.vue&#x27;</span>),<br>            &#125;,<br>            &#123;<br>                path:<span class=\"hljs-string\">&#x27;/two&#x27;</span>,<br>                name:<span class=\"hljs-string\">&#x27;two&#x27;</span>,<br>                component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;Two.vue&#x27;</span>),<br>            &#125;,<br>            ...<br>        ]<br>    &#125;<br>]<br>...<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- home.vue使用 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> &gt;</span><br>            菜单<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 根据url的不同来显示one，two --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;home&#x27;</span>,</span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p>路由导航守卫</p>\n</li>\n</ul>\n<blockquote>\n<p>作用</p>\n<ul>\n<li>在页面进入前后进行一些操作，比如重定向，数据操作等等</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>使用场景</p>\n<ul>\n<li>在页面进入前验证token是否过期、验证用户是否还有权限访问该页、根据需要不一样，重新导向用户的访问页面</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>分类:</p>\n<blockquote>\n<p>全局：作用在所有路由<br>路由独享：只作用在配置的路由<br>组件内：只作用在配置的组件</p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"wordcount":3462,"excerpt":"<h1 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h1><ul>\n<li><p>概念：</p>\n<blockquote>\n<p>根据URL决定显示什么内容，这个系统就是路由系统。</p>\n</blockquote>\n</li>\n<li><p>为什么需要</p>\n<blockquote>\n<p>因为vue和react这些SPA框架，只有一个html页面，所以需要使用某种手段来决定当前页面显示什么内容，所以才有了前端路由系统。</p>\n</blockquote>","more":"</li>\n</ul>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><ul>\n<li>路由配置除外，使用到的只有2个标签<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于进行页面的跳转 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> /&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 用于显示，根据url决定显示的页面 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li>进行切换页面跳转<blockquote>\n<p>在浏览器输入http:****/home就会显示home ，输入about就会显示about</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Home.vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        home<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;home&#x27;</span></span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- About.vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        about<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;about&#x27;</span></span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在router.js中配置需要显示的页面文件</span><br>...<br><span class=\"hljs-keyword\">const</span> routes=[<br>    &#123;<br>        <span class=\"hljs-comment\">// url的路径</span><br>        path:<span class=\"hljs-string\">&#x27;/home&#x27;</span>,<br>        <span class=\"hljs-comment\">// home.vue文件的name</span><br>        name:<span class=\"hljs-string\">&#x27;home&#x27;</span>,<br>        <span class=\"hljs-comment\">// 引入该文件</span><br>        component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;Home.vue&#x27;</span>)<br>    &#125;,<br>    &#123;<br>        path:<span class=\"hljs-string\">&#x27;/about&#x27;</span>,<br>        name:<span class=\"hljs-string\">&#x27;about&#x27;</span>,<br>        component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;About.vue&#x27;</span>)<br>    &#125;,<br>]<br>...<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>动态路由显示<blockquote>\n<p>例如一个有一个todo的列表，其中每一项内都有不同的数据，但是数据显示的样式什么都一样，我们可以用同一个组件来渲染，只需要在跳转时传递一个标识，来告诉组件加载所对应的数据就可以了</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在router.js中配置需要显示的页面文件</span><br>...<br><span class=\"hljs-keyword\">const</span> routes=[<br>    &#123;<br>        <span class=\"hljs-comment\">// url的路径</span><br>        path:<span class=\"hljs-string\">&#x27;/home&#x27;</span>,<br>        <span class=\"hljs-comment\">// home.vue文件的name</span><br>        name:<span class=\"hljs-string\">&#x27;home&#x27;</span>,<br>        <span class=\"hljs-comment\">// 引入该文件</span><br>        component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;Home.vue&#x27;</span>)<br>    &#125;,<br>    &#123;<br>        name:<span class=\"hljs-string\">&#x27;list/:id,</span><br><span class=\"hljs-string\">        component:&#x27;</span>list<span class=\"hljs-string\">&#x27;,</span><br><span class=\"hljs-string\">        component:()=&gt;import(&#x27;</span>List.vue<span class=\"hljs-string\">&#x27;)</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">]</span><br><span class=\"hljs-string\">...</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- home.vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;(item,index) in info&quot;</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- 切换url来进行页面跳转，类似a标签 --&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- 跳转时携带点击项的id --&gt;</span><br>                <span class=\"hljs-comment\">&lt;!-- 这里也可以使用query替代params --&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">&quot;&#123;name:&#x27;list&#x27;,params:&#123;id:&#x27;item&#x27;&#125;&#125;&quot;</span>&gt;</span><br>                    &#123;&#123;item.id&#125;&#125;<br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;list&#x27;</span>,</span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br>            info:[<br>                &#123;<br><span class=\"javascript\">                    id:<span class=\"hljs-string\">&#x27;1&#x27;</span></span><br>                &#125;,<br>                &#123;<br><span class=\"javascript\">                    id:<span class=\"hljs-string\">&#x27;2&#x27;</span></span><br>                &#125;<br>            ]<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- list.vue --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> &gt;</span><br>            &#123;&#123;id&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;list&#x27;</span>,</span><br>    data()&#123;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">return</span>&#123;</span><br><span class=\"javascript\">            info:<span class=\"hljs-string\">&#x27;&#x27;</span></span><br>        &#125;<br>    &#125;,<br>    mounted()&#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 接受从home组件传递过来的id</span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 如果跳转那里使用的query这里的params也需要换成query</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.info=<span class=\"hljs-built_in\">this</span>.$route.params.info;</span><br>    &#125;<br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>query和的区别：query使传递的值会显示在url中，params不会，所以这也导致了假如我们没有在list后面写id，那list页面刷新后，传递过来的数据就会丢失。<br>总结：使用query可以不在路由进行配置，params时要在路由进行动态参数配置</p>\n</blockquote>\n<h1 id=\"其他使用\"><a href=\"#其他使用\" class=\"headerlink\" title=\"其他使用\"></a>其他使用</h1><p>总结除过页面跳转意外，使用过的路由系统的功能。</p>\n<ul>\n<li><p>路由嵌套</p>\n<blockquote>\n<p>使用场景：当一个页面下的其他页面都有相同的部分，只有小部分需要根据不同的地址来显示不同的内容时，就可以使用，比如后台管理系统，所有页面左边都有整体的菜单</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// router.js配置</span><br>...<br><span class=\"hljs-keyword\">const</span> routes=[<br>    &#123;<br>        <span class=\"hljs-comment\">// url的路径</span><br>        path:<span class=\"hljs-string\">&#x27;/home&#x27;</span>,<br>        <span class=\"hljs-comment\">// home.vue文件的name</span><br>        name:<span class=\"hljs-string\">&#x27;home&#x27;</span>,<br>        <span class=\"hljs-comment\">// 引入该文件</span><br>        component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;Home.vue&#x27;</span>),<br>        <span class=\"hljs-comment\">// 配置 子路由</span><br>        children:[<br>            &#123;<br>                path:<span class=\"hljs-string\">&#x27;/one&#x27;</span>,<br>                name:<span class=\"hljs-string\">&#x27;one&#x27;</span>,<br>                component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;One.vue&#x27;</span>),<br>            &#125;,<br>            &#123;<br>                path:<span class=\"hljs-string\">&#x27;/two&#x27;</span>,<br>                name:<span class=\"hljs-string\">&#x27;two&#x27;</span>,<br>                component:<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&#x27;Two.vue&#x27;</span>),<br>            &#125;,<br>            ...<br>        ]<br>    &#125;<br>]<br>...<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- home.vue使用 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> &gt;</span><br>            菜单<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 根据url的不同来显示one，two --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;</span><br><span class=\"javascript\">    name:<span class=\"hljs-string\">&#x27;home&#x27;</span>,</span><br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>路由导航守卫</p>\n</li>\n</ul>\n<blockquote>\n<p>作用</p>\n<ul>\n<li>在页面进入前后进行一些操作，比如重定向，数据操作等等</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>使用场景</p>\n<ul>\n<li>在页面进入前验证token是否过期、验证用户是否还有权限访问该页、根据需要不一样，重新导向用户的访问页面</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>分类:</p>\n<blockquote>\n<p>全局：作用在所有路由<br>路由独享：只作用在配置的路由<br>组件内：只作用在配置的组件</p>\n</blockquote>\n</blockquote>"},{"title":"vuejs基础复习4---生命周期函数","abbrlink":50867,"date":"2019-10-31T10:35:16.000Z","_content":"# 生命周期函数\nvue框架内部提供的一系列函数，主要用于vue创建的实例在挂载到页面以及从页面销毁这一过程中，我们要进行一些操作时所使用的函数。\n<!-- more -->\n\n# 所有生命周期函数\nbeforeCreate\n>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用\n```html\n...\n<body>\n    <div id=\"app\">\n        {{name}}\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            mthods:{\n                sayHi(){\n                    console.log('hi');\n                }\n            },\n            beforeCreate() {\n                console.log(this.sayHi);// undefined\n                console.log(this.name);// undefined\n                console.log('beforeCreate');\n            }\n        })\n    </script>\n</body>\n...\n```\ncreated\n>在实例创建完成后被立即调用。已经可以获取实例的data、methods、watch。但是不能获取实例根节点\n```html\n...\n<body>\n    <div id=\"app\">\n        {{name}}\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                sayHi() {\n                    return 'hi'\n                }\n            },\n            created() {\n                console.log(this.name); // 生命周期函数\n                console.log(this.$el);// undefind\n                console.log(this.sayHi());// hi\n            }\n        })\n    </script>\n</body>\n...\n```\n\nbeforeMount\n>这一步生成虚拟dom，准备将其渲染到页面,但还未渲染\n```html\n<body>\n    <div id=\"app\">\n        {{name}}\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                sayHi() {\n                    return 'hi'\n                }\n            },\n            beforeMount() {\n                console.log(this.name); // 生命周期函数\n                console.log(this.$el);\n                /*  \n                    <div id=\"app\">\n                        {{name}}\n                    </div>\n                */\n                console.log(this.sayHi()); // hi\n                console.log(this.$refs.demo);// undefind\n            }\n        })\n    </script>\n</body>\n```\n\nmounted\n>将虚拟DOM根据el挂载到对应HTML中，将虚拟dom渲染到页面，已经完成\n```html\n<body>\n    <div id=\"app\">\n        {{name}}\n        <p>dmeo</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                sayHi() {\n                    return 'hi'\n                }\n            },\n            mounted() {\n                console.log(this.name); // 生命周期函数\n                console.log(this.$el);\n                /*  \n                    <div id=\"app\">\n                        {{name}}\n                    </div>\n                */\n                console.log(this.sayHi()); // hi\n                console.log(this.$refs.demo);// <p>dmeo</p>\n            }\n        })\n    </script>\n</body>\n```\nbeforeUpdate\n>当data中的数据更新后，虚拟DOM更新前\n```html\n<body>\n    <div id=\"app\">\n        <p id=\"p\">\n            {{name}}\n        </p>\n        <button @click='update'>更新</button>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                update() {\n                    this.name = 'update';\n                }\n            },\n            beforeUpdate() {\n                console.log(document.getElementById('p').innerText); //生命周期函数\n                console.log(1);\n            }\n        })\n    </script>\n</body>\n```\n\nupdated\n>数据更新完毕，且虚拟dom完成在页面的渲染之后执行\n```html\n<body>\n    <div id=\"app\">\n        <p id=\"p\">\n            {{name}}\n        </p>\n        <button @click='update'>更新</button>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                update() {\n                    this.name = 'update';\n                }\n            },\n            updated() {\n                console.log(document.getElementById('p').innerText); //update\n                console.log(1);\n            }\n        })\n    </script>\n</body>\n```\nbdeforeDestroy\n>当调用vm.$destroy()销毁组件时,销毁前使用,这时data、methods、虚拟dom都可以使用\n```html\n\n<body>\n    <div id=\"app\">\n        <p id=\"p\">\n            {{name}}\n        </p>\n        <button @click='update'>卸载</button>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                update() {\n                    this.$destroy();\n                }\n            },\n            beforeDestroy() {\n                console.log(this.name);//生命周期函数\n                console.log(this.$el);//<div id=​\"app\">​…​</div>​\n                console.log(this.update);\n               /* ƒ update() {\n                    this.$destroy();\n                }*/\n            }\n        })\n    </script>\n</body>\n```\ndestroyed\n>彻底销毁完毕时使用\n\n# 小结\n上述就是官方规定的生命周期函数，但大体来看生命周期函数的特点就是会在实例的某个阶段自动调用，这样看watch，computed也应该算。\n\n# 常见使用场景\n个人使用过的\n>created\n- ajax请求\n\n>mounted\n- 挂载元素内dom节点的获取\n\n>updated\n- 任何数据的更新，如果要做统一的业务逻辑处理\n\n","source":"_posts/vue/vuejs基础复习-4.md","raw":"---\ntitle: vuejs基础复习4---生命周期函数\ncategories:\n  - 技术笔记\ntag:\n  - Vue\n  - 前端\nabbrlink: 50867\ndate: 2019-10-31 18:35:16\n---\n# 生命周期函数\nvue框架内部提供的一系列函数，主要用于vue创建的实例在挂载到页面以及从页面销毁这一过程中，我们要进行一些操作时所使用的函数。\n<!-- more -->\n\n# 所有生命周期函数\nbeforeCreate\n>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用\n```html\n...\n<body>\n    <div id=\"app\">\n        {{name}}\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            mthods:{\n                sayHi(){\n                    console.log('hi');\n                }\n            },\n            beforeCreate() {\n                console.log(this.sayHi);// undefined\n                console.log(this.name);// undefined\n                console.log('beforeCreate');\n            }\n        })\n    </script>\n</body>\n...\n```\ncreated\n>在实例创建完成后被立即调用。已经可以获取实例的data、methods、watch。但是不能获取实例根节点\n```html\n...\n<body>\n    <div id=\"app\">\n        {{name}}\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                sayHi() {\n                    return 'hi'\n                }\n            },\n            created() {\n                console.log(this.name); // 生命周期函数\n                console.log(this.$el);// undefind\n                console.log(this.sayHi());// hi\n            }\n        })\n    </script>\n</body>\n...\n```\n\nbeforeMount\n>这一步生成虚拟dom，准备将其渲染到页面,但还未渲染\n```html\n<body>\n    <div id=\"app\">\n        {{name}}\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                sayHi() {\n                    return 'hi'\n                }\n            },\n            beforeMount() {\n                console.log(this.name); // 生命周期函数\n                console.log(this.$el);\n                /*  \n                    <div id=\"app\">\n                        {{name}}\n                    </div>\n                */\n                console.log(this.sayHi()); // hi\n                console.log(this.$refs.demo);// undefind\n            }\n        })\n    </script>\n</body>\n```\n\nmounted\n>将虚拟DOM根据el挂载到对应HTML中，将虚拟dom渲染到页面，已经完成\n```html\n<body>\n    <div id=\"app\">\n        {{name}}\n        <p>dmeo</p>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                sayHi() {\n                    return 'hi'\n                }\n            },\n            mounted() {\n                console.log(this.name); // 生命周期函数\n                console.log(this.$el);\n                /*  \n                    <div id=\"app\">\n                        {{name}}\n                    </div>\n                */\n                console.log(this.sayHi()); // hi\n                console.log(this.$refs.demo);// <p>dmeo</p>\n            }\n        })\n    </script>\n</body>\n```\nbeforeUpdate\n>当data中的数据更新后，虚拟DOM更新前\n```html\n<body>\n    <div id=\"app\">\n        <p id=\"p\">\n            {{name}}\n        </p>\n        <button @click='update'>更新</button>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                update() {\n                    this.name = 'update';\n                }\n            },\n            beforeUpdate() {\n                console.log(document.getElementById('p').innerText); //生命周期函数\n                console.log(1);\n            }\n        })\n    </script>\n</body>\n```\n\nupdated\n>数据更新完毕，且虚拟dom完成在页面的渲染之后执行\n```html\n<body>\n    <div id=\"app\">\n        <p id=\"p\">\n            {{name}}\n        </p>\n        <button @click='update'>更新</button>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                update() {\n                    this.name = 'update';\n                }\n            },\n            updated() {\n                console.log(document.getElementById('p').innerText); //update\n                console.log(1);\n            }\n        })\n    </script>\n</body>\n```\nbdeforeDestroy\n>当调用vm.$destroy()销毁组件时,销毁前使用,这时data、methods、虚拟dom都可以使用\n```html\n\n<body>\n    <div id=\"app\">\n        <p id=\"p\">\n            {{name}}\n        </p>\n        <button @click='update'>卸载</button>\n    </div>\n    <script src=\"https://cdn.bootcss.com/vue/2.6.10/vue.js\"></script>\n    <script>\n        let app = new Vue({\n            el: '#app',\n            data: {\n                name: '生命周期函数'\n            },\n            methods: {\n                update() {\n                    this.$destroy();\n                }\n            },\n            beforeDestroy() {\n                console.log(this.name);//生命周期函数\n                console.log(this.$el);//<div id=​\"app\">​…​</div>​\n                console.log(this.update);\n               /* ƒ update() {\n                    this.$destroy();\n                }*/\n            }\n        })\n    </script>\n</body>\n```\ndestroyed\n>彻底销毁完毕时使用\n\n# 小结\n上述就是官方规定的生命周期函数，但大体来看生命周期函数的特点就是会在实例的某个阶段自动调用，这样看watch，computed也应该算。\n\n# 常见使用场景\n个人使用过的\n>created\n- ajax请求\n\n>mounted\n- 挂载元素内dom节点的获取\n\n>updated\n- 任何数据的更新，如果要做统一的业务逻辑处理\n\n","slug":"vue/vuejs基础复习-4","published":1,"updated":"2021-12-31T12:01:59.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv13000aj7jfe9tvf7cw","content":"<h1 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h1><p>vue框架内部提供的一系列函数，主要用于vue创建的实例在挂载到页面以及从页面销毁这一过程中，我们要进行一些操作时所使用的函数。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"所有生命周期函数\"><a href=\"#所有生命周期函数\" class=\"headerlink\" title=\"所有生命周期函数\"></a>所有生命周期函数</h1><p>beforeCreate</p>\n<blockquote>\n<p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            mthods:&#123;<br>                sayHi()&#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hi&#x27;</span>);</span><br>                &#125;<br>            &#125;,<br>            beforeCreate() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.sayHi);<span class=\"hljs-comment\">// undefined</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);<span class=\"hljs-comment\">// undefined</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;beforeCreate&#x27;</span>);</span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure>\n<p>created</p>\n<blockquote>\n<p>在实例创建完成后被立即调用。已经可以获取实例的data、methods、watch。但是不能获取实例根节点</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                sayHi() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hi&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            created() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name); <span class=\"hljs-comment\">// 生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$el);<span class=\"hljs-comment\">// undefind</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.sayHi());<span class=\"hljs-comment\">// hi</span></span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure>\n\n<p>beforeMount</p>\n<blockquote>\n<p>这一步生成虚拟dom，准备将其渲染到页面,但还未渲染</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                sayHi() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hi&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            beforeMount() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name); <span class=\"hljs-comment\">// 生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$el);</span><br>                /*  <br><span class=\"handlebars\"><span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"handlebars\"><span class=\"xml\">                        </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span></span><br><span class=\"handlebars\"><span class=\"xml\">                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br>                */<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.sayHi()); <span class=\"hljs-comment\">// hi</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$refs.demo);<span class=\"hljs-comment\">// undefind</span></span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<p>mounted</p>\n<blockquote>\n<p>将虚拟DOM根据el挂载到对应HTML中，将虚拟dom渲染到页面，已经完成</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>dmeo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                sayHi() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hi&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            mounted() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name); <span class=\"hljs-comment\">// 生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$el);</span><br>                /*  <br><span class=\"handlebars\"><span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"handlebars\"><span class=\"xml\">                        </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span></span><br><span class=\"handlebars\"><span class=\"xml\">                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br>                */<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.sayHi()); <span class=\"hljs-comment\">// hi</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$refs.demo);<span class=\"hljs-comment\">// &lt;p&gt;dmeo&lt;/p&gt;</span></span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>beforeUpdate</p>\n<blockquote>\n<p>当data中的数据更新后，虚拟DOM更新前</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p&quot;</span>&gt;</span><br>            &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;update&#x27;</span>&gt;</span>更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                update() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;update&#x27;</span>;</span><br>                &#125;<br>            &#125;,<br>            beforeUpdate() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;p&#x27;</span>).innerText); <span class=\"hljs-comment\">//生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);</span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<p>updated</p>\n<blockquote>\n<p>数据更新完毕，且虚拟dom完成在页面的渲染之后执行</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p&quot;</span>&gt;</span><br>            &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;update&#x27;</span>&gt;</span>更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                update() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;update&#x27;</span>;</span><br>                &#125;<br>            &#125;,<br>            updated() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;p&#x27;</span>).innerText); <span class=\"hljs-comment\">//update</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);</span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>bdeforeDestroy</p>\n<blockquote>\n<p>当调用vm.$destroy()销毁组件时,销毁前使用,这时data、methods、虚拟dom都可以使用</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p&quot;</span>&gt;</span><br>            &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;update&#x27;</span>&gt;</span>卸载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                update() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.$destroy();</span><br>                &#125;<br>            &#125;,<br>            beforeDestroy() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);<span class=\"hljs-comment\">//生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$el);<span class=\"hljs-comment\">//&lt;div id=​&quot;app&quot;&gt;​…​&lt;/div&gt;​</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.update);</span><br>               /* ƒ update() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.$destroy();</span><br>                &#125;*/<br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>destroyed</p>\n<blockquote>\n<p>彻底销毁完毕时使用</p>\n</blockquote>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>上述就是官方规定的生命周期函数，但大体来看生命周期函数的特点就是会在实例的某个阶段自动调用，这样看watch，computed也应该算。</p>\n<h1 id=\"常见使用场景\"><a href=\"#常见使用场景\" class=\"headerlink\" title=\"常见使用场景\"></a>常见使用场景</h1><p>个人使用过的</p>\n<blockquote>\n<p>created</p>\n</blockquote>\n<ul>\n<li>ajax请求</li>\n</ul>\n<blockquote>\n<p>mounted</p>\n</blockquote>\n<ul>\n<li>挂载元素内dom节点的获取</li>\n</ul>\n<blockquote>\n<p>updated</p>\n</blockquote>\n<ul>\n<li>任何数据的更新，如果要做统一的业务逻辑处理</li>\n</ul>\n","site":{"data":{}},"wordcount":4843,"excerpt":"<h1 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h1><p>vue框架内部提供的一系列函数，主要用于vue创建的实例在挂载到页面以及从页面销毁这一过程中，我们要进行一些操作时所使用的函数。</p>","more":"<h1 id=\"所有生命周期函数\"><a href=\"#所有生命周期函数\" class=\"headerlink\" title=\"所有生命周期函数\"></a>所有生命周期函数</h1><p>beforeCreate</p>\n<blockquote>\n<p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            mthods:&#123;<br>                sayHi()&#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hi&#x27;</span>);</span><br>                &#125;<br>            &#125;,<br>            beforeCreate() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.sayHi);<span class=\"hljs-comment\">// undefined</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);<span class=\"hljs-comment\">// undefined</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;beforeCreate&#x27;</span>);</span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure>\n<p>created</p>\n<blockquote>\n<p>在实例创建完成后被立即调用。已经可以获取实例的data、methods、watch。但是不能获取实例根节点</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                sayHi() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hi&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            created() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name); <span class=\"hljs-comment\">// 生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$el);<span class=\"hljs-comment\">// undefind</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.sayHi());<span class=\"hljs-comment\">// hi</span></span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure>\n\n<p>beforeMount</p>\n<blockquote>\n<p>这一步生成虚拟dom，准备将其渲染到页面,但还未渲染</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                sayHi() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hi&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            beforeMount() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name); <span class=\"hljs-comment\">// 生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$el);</span><br>                /*  <br><span class=\"handlebars\"><span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"handlebars\"><span class=\"xml\">                        </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span></span><br><span class=\"handlebars\"><span class=\"xml\">                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br>                */<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.sayHi()); <span class=\"hljs-comment\">// hi</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$refs.demo);<span class=\"hljs-comment\">// undefind</span></span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>mounted</p>\n<blockquote>\n<p>将虚拟DOM根据el挂载到对应HTML中，将虚拟dom渲染到页面，已经完成</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>dmeo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                sayHi() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;hi&#x27;</span></span><br>                &#125;<br>            &#125;,<br>            mounted() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name); <span class=\"hljs-comment\">// 生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$el);</span><br>                /*  <br><span class=\"handlebars\"><span class=\"xml\">                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span></span><br><span class=\"handlebars\"><span class=\"xml\">                        </span><span class=\"hljs-template-variable\">&#123;&#123;<span class=\"hljs-name\">name</span>&#125;&#125;</span></span><br><span class=\"handlebars\"><span class=\"xml\">                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span><br>                */<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.sayHi()); <span class=\"hljs-comment\">// hi</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$refs.demo);<span class=\"hljs-comment\">// &lt;p&gt;dmeo&lt;/p&gt;</span></span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>beforeUpdate</p>\n<blockquote>\n<p>当data中的数据更新后，虚拟DOM更新前</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p&quot;</span>&gt;</span><br>            &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;update&#x27;</span>&gt;</span>更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                update() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;update&#x27;</span>;</span><br>                &#125;<br>            &#125;,<br>            beforeUpdate() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;p&#x27;</span>).innerText); <span class=\"hljs-comment\">//生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);</span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>updated</p>\n<blockquote>\n<p>数据更新完毕，且虚拟dom完成在页面的渲染之后执行</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p&quot;</span>&gt;</span><br>            &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;update&#x27;</span>&gt;</span>更新<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                update() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;update&#x27;</span>;</span><br>                &#125;<br>            &#125;,<br>            updated() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">&#x27;p&#x27;</span>).innerText); <span class=\"hljs-comment\">//update</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);</span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>bdeforeDestroy</p>\n<blockquote>\n<p>当调用vm.$destroy()销毁组件时,销毁前使用,这时data、methods、虚拟dom都可以使用</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p&quot;</span>&gt;</span><br>            &#123;&#123;name&#125;&#125;<br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&#x27;update&#x27;</span>&gt;</span>卸载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el: <span class=\"hljs-string\">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class=\"javascript\">                name: <span class=\"hljs-string\">&#x27;生命周期函数&#x27;</span></span><br>            &#125;,<br>            methods: &#123;<br>                update() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.$destroy();</span><br>                &#125;<br>            &#125;,<br>            beforeDestroy() &#123;<br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name);<span class=\"hljs-comment\">//生命周期函数</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.$el);<span class=\"hljs-comment\">//&lt;div id=​&quot;app&quot;&gt;​…​&lt;/div&gt;​</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.update);</span><br>               /* ƒ update() &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">this</span>.$destroy();</span><br>                &#125;*/<br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>destroyed</p>\n<blockquote>\n<p>彻底销毁完毕时使用</p>\n</blockquote>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>上述就是官方规定的生命周期函数，但大体来看生命周期函数的特点就是会在实例的某个阶段自动调用，这样看watch，computed也应该算。</p>\n<h1 id=\"常见使用场景\"><a href=\"#常见使用场景\" class=\"headerlink\" title=\"常见使用场景\"></a>常见使用场景</h1><p>个人使用过的</p>\n<blockquote>\n<p>created</p>\n</blockquote>\n<ul>\n<li>ajax请求</li>\n</ul>\n<blockquote>\n<p>mounted</p>\n</blockquote>\n<ul>\n<li>挂载元素内dom节点的获取</li>\n</ul>\n<blockquote>\n<p>updated</p>\n</blockquote>\n<ul>\n<li>任何数据的更新，如果要做统一的业务逻辑处理</li>\n</ul>"},{"title":"vue原理学习1-响应式","abbrlink":309,"date":"2020-05-02T03:01:38.000Z","_content":"\n# 开头\n- 前几天看到vue3.0的beta版本出来了，觉得在正式版出来之前，还是得把2.x版本的原理过一遍，让脑子有个印象。\n- 大概了分了这么几个部分：响应式系统、观察者模式、模板编译、virtual dom、路由、vuex、vue插件开发\n\n<!-- more -->\n\n# 响应式\n>概念\n- 针对某个参照物，进行相对变化。\n\n>解释\n- vue这类框架的响应式和bootstrap的响应式表现形式不一样，但是意思都是一样的，基于某个参考物进行相对变化。\n- bootstrap是针对显示设备的大小来对布局进行自动的调整；vue是针对数据，对视图进行自动的更新，所以vue也是数据驱动型框架\n- 举个例子：当前有个标签显示的内容是：***刷新*** ，换jq时代我们需要去手动获取该标签，然后把值为 ***刷新*** 的这个变量插入进去；假设现在我们改变了这个变量的值，我们需要让页面同步变化，就需要重复上面操作,代码如下\n```html\n...\n<body>\n    <div id=\"name\"></div>\n    <script>\n        let div = document.querySelector('#name')\n        let name = \"刷新\"\n        // 渲染数据到页面\n        let render = (dom, val) => {\n            dom['textContent'] = val\n        }\n        // 初始化\n        render(div, name)\n        // 修改name后再次渲染\n        name = \"shuaxin\"\n        render(div, name)\n    </script>\n</body>\n...\n```\n- 上述代码在要操作的dom变多的时候，维护起来就会很麻烦，而换到vue这边，就简单的多，只需要告诉vue数据显示在哪里即可，至于怎么去显示到对应的dom里，以及数据发生变化后的更新页面显示，都是由vue来完成的\n```html\n...\n<body>\n    <div id=\"app\">\n        {{name}}\n    </div>\n    <script src=\"./vue.js\"></script>\n    <script>\n        let app=new Vue({\n            el:\"#app\",\n            data:{\n                name:\"刷新\"\n            }\n        })\n    </script>\n</body>\n...\n```\n\n# 关于vue的工作流程\n在通过Vue构造函数实例化对象的过程中，vue同时做了2件事\n\n>1.数据拦截\n- 对用户传入的数据，即data的所有属性进行拦截，以此来实现vue的响应式\n\n>2.编译\n- 对用户指定的目标节点下的内容进行解析，解析出普通节点、包含指令的节点、含有表达式的节点；\n- 编译的目的，是为了生成虚拟dom，即用js对象来描述dom节点，以此来优化操作dom时带来的性能问题\n- 具体流程为：在每次编译完后，vue都会生成一棵由vdom组成的dom树，然后来和上一次的dom树进行对比，找出其中的不同，然后只更新其中不同的地方到页面\n\n>数据驱动\n- 在完成1，2后， vue会通过观察者模式，来链接数据和编译；达到每次更新数据后，自动去更新页面的效果\n- 具体流程是，为拦截的每个数据创建一个容器，负责装载用到该数据时创建的watcher，这个watcher负责去执行更新页面的操作；然后当每次数据发生改变的时候，就会去遍历该数据的watcher容器，执行里面每一个watcher更新页面的操作\n\n# 关于响应式的原理\n- 对对象：vue2.x通过数据拦截api（Object.defineProperty）来实现这一功能\n- 对数组：数据拦截是object的api，所以对数组那些操作数组本身内容的api就没什么用了，vue的做法是对数组的这些api进行一层封装，在里面执行数据依赖的一些操作和该api本身的操作\n\n# 代码实现\n\n```js\n// 可以操作数组本身内容的api\nconst methodsToPatch = [\n            'push',\n            'pop',\n            'shift',\n            'unshift',\n            'splice',\n            'sort',\n            'reverse'\n]\n// 创建一个新的数组对象，继承Array\nlet newArr = Object.create(Array.prototype)\n// 遍历methodsToPatch，拦截每一个方法\nmethodsToPatch.forEach((method) => {\n    // 保存的是原Array的对应调用的方法\n    let oldMethod = newArr[method]\n    Object.defineProperty(newArr, method, {\n        // 不可以枚举，不可被for in循环到\n        enumerable: false,\n        // 可以被删除\n        configurable: true,\n        // 可被重写\n        writable: true,\n        // 将访问的元素换成函数，在这里执行通知watcher更新视图的操作\n        value: function mutator(...rest) {\n            // (3) [1, 2, 3]  4\n            console.log(this, ...rest)\n            // 将函数的this指向绑定到当前操作的数组上，然后把调用该函数的参数一并传递过去\n            let res = oldMethod.apply(this, rest)\n            return res\n        }\n    })\n})\n// 测试\nlet data = {\n    name: \"vuejs\",\n    sx: {\n        sex: '男',\n        name: \"shuaxin\"\n    },\n    arr: [1, 2, 3]\n}\n// 实现对数据的拦截\nlet defineReactive = (obj, key, value) => {\n    Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        get() {\n            // 下面代码替代增加watcher操作\n            console.warn(\"get\");\n            return value\n        },\n        set(newVal) {\n            // 以下代替通知watcher更新视图操作\n            console.warn(\"set\");\n            value = newVal\n        }\n    })\n}\n// 判断传递的data的每个属性的类型\n// 这里会有三种类型:对象,基本数据类型,数组\nlet observe = (obj) => {\n    if (!obj || (typeof obj !== 'object')) {\n        return\n    }\n    Object.keys(obj).forEach((key) => {\n        // 还是一个对象，递归调用该函数\n        if (typeof obj[key] === 'object' && (obj[key] instanceof Array) !== true) {\n            console.warn(\"对象\");\n            observe(obj[key])\n        } else if (obj[key] instanceof Array) {\n            // 是数组的话，改变数组原型为我们新创建的数组对象newArr\n            console.warn(\"数组\");\n            obj[key].__proto__ = newArr\n            // 对内部的元素执行拦截\n            defineReactive(obj, key, obj[key])\n        } else {\n            // 基本数据直接进行拦截\n            console.warn(\"基本数据类型\");\n            defineReactive(obj, key, obj[key])\n        }\n    })\n}\n// 初始化\nobserve(data)\n// 执行该操作的时候，控制台会打印 get\ndata.arr.push(4)\nconsole.log(data.arr);\n```","source":"_posts/vue/vue原理学习1.md","raw":"---\ntitle: vue原理学习1-响应式\ncategory:\n  - 技术笔记\ntag:\n  - Vue\n  - 前端\nabbrlink: 309\ndate: 2020-05-02 11:01:38\n---\n\n# 开头\n- 前几天看到vue3.0的beta版本出来了，觉得在正式版出来之前，还是得把2.x版本的原理过一遍，让脑子有个印象。\n- 大概了分了这么几个部分：响应式系统、观察者模式、模板编译、virtual dom、路由、vuex、vue插件开发\n\n<!-- more -->\n\n# 响应式\n>概念\n- 针对某个参照物，进行相对变化。\n\n>解释\n- vue这类框架的响应式和bootstrap的响应式表现形式不一样，但是意思都是一样的，基于某个参考物进行相对变化。\n- bootstrap是针对显示设备的大小来对布局进行自动的调整；vue是针对数据，对视图进行自动的更新，所以vue也是数据驱动型框架\n- 举个例子：当前有个标签显示的内容是：***刷新*** ，换jq时代我们需要去手动获取该标签，然后把值为 ***刷新*** 的这个变量插入进去；假设现在我们改变了这个变量的值，我们需要让页面同步变化，就需要重复上面操作,代码如下\n```html\n...\n<body>\n    <div id=\"name\"></div>\n    <script>\n        let div = document.querySelector('#name')\n        let name = \"刷新\"\n        // 渲染数据到页面\n        let render = (dom, val) => {\n            dom['textContent'] = val\n        }\n        // 初始化\n        render(div, name)\n        // 修改name后再次渲染\n        name = \"shuaxin\"\n        render(div, name)\n    </script>\n</body>\n...\n```\n- 上述代码在要操作的dom变多的时候，维护起来就会很麻烦，而换到vue这边，就简单的多，只需要告诉vue数据显示在哪里即可，至于怎么去显示到对应的dom里，以及数据发生变化后的更新页面显示，都是由vue来完成的\n```html\n...\n<body>\n    <div id=\"app\">\n        {{name}}\n    </div>\n    <script src=\"./vue.js\"></script>\n    <script>\n        let app=new Vue({\n            el:\"#app\",\n            data:{\n                name:\"刷新\"\n            }\n        })\n    </script>\n</body>\n...\n```\n\n# 关于vue的工作流程\n在通过Vue构造函数实例化对象的过程中，vue同时做了2件事\n\n>1.数据拦截\n- 对用户传入的数据，即data的所有属性进行拦截，以此来实现vue的响应式\n\n>2.编译\n- 对用户指定的目标节点下的内容进行解析，解析出普通节点、包含指令的节点、含有表达式的节点；\n- 编译的目的，是为了生成虚拟dom，即用js对象来描述dom节点，以此来优化操作dom时带来的性能问题\n- 具体流程为：在每次编译完后，vue都会生成一棵由vdom组成的dom树，然后来和上一次的dom树进行对比，找出其中的不同，然后只更新其中不同的地方到页面\n\n>数据驱动\n- 在完成1，2后， vue会通过观察者模式，来链接数据和编译；达到每次更新数据后，自动去更新页面的效果\n- 具体流程是，为拦截的每个数据创建一个容器，负责装载用到该数据时创建的watcher，这个watcher负责去执行更新页面的操作；然后当每次数据发生改变的时候，就会去遍历该数据的watcher容器，执行里面每一个watcher更新页面的操作\n\n# 关于响应式的原理\n- 对对象：vue2.x通过数据拦截api（Object.defineProperty）来实现这一功能\n- 对数组：数据拦截是object的api，所以对数组那些操作数组本身内容的api就没什么用了，vue的做法是对数组的这些api进行一层封装，在里面执行数据依赖的一些操作和该api本身的操作\n\n# 代码实现\n\n```js\n// 可以操作数组本身内容的api\nconst methodsToPatch = [\n            'push',\n            'pop',\n            'shift',\n            'unshift',\n            'splice',\n            'sort',\n            'reverse'\n]\n// 创建一个新的数组对象，继承Array\nlet newArr = Object.create(Array.prototype)\n// 遍历methodsToPatch，拦截每一个方法\nmethodsToPatch.forEach((method) => {\n    // 保存的是原Array的对应调用的方法\n    let oldMethod = newArr[method]\n    Object.defineProperty(newArr, method, {\n        // 不可以枚举，不可被for in循环到\n        enumerable: false,\n        // 可以被删除\n        configurable: true,\n        // 可被重写\n        writable: true,\n        // 将访问的元素换成函数，在这里执行通知watcher更新视图的操作\n        value: function mutator(...rest) {\n            // (3) [1, 2, 3]  4\n            console.log(this, ...rest)\n            // 将函数的this指向绑定到当前操作的数组上，然后把调用该函数的参数一并传递过去\n            let res = oldMethod.apply(this, rest)\n            return res\n        }\n    })\n})\n// 测试\nlet data = {\n    name: \"vuejs\",\n    sx: {\n        sex: '男',\n        name: \"shuaxin\"\n    },\n    arr: [1, 2, 3]\n}\n// 实现对数据的拦截\nlet defineReactive = (obj, key, value) => {\n    Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        get() {\n            // 下面代码替代增加watcher操作\n            console.warn(\"get\");\n            return value\n        },\n        set(newVal) {\n            // 以下代替通知watcher更新视图操作\n            console.warn(\"set\");\n            value = newVal\n        }\n    })\n}\n// 判断传递的data的每个属性的类型\n// 这里会有三种类型:对象,基本数据类型,数组\nlet observe = (obj) => {\n    if (!obj || (typeof obj !== 'object')) {\n        return\n    }\n    Object.keys(obj).forEach((key) => {\n        // 还是一个对象，递归调用该函数\n        if (typeof obj[key] === 'object' && (obj[key] instanceof Array) !== true) {\n            console.warn(\"对象\");\n            observe(obj[key])\n        } else if (obj[key] instanceof Array) {\n            // 是数组的话，改变数组原型为我们新创建的数组对象newArr\n            console.warn(\"数组\");\n            obj[key].__proto__ = newArr\n            // 对内部的元素执行拦截\n            defineReactive(obj, key, obj[key])\n        } else {\n            // 基本数据直接进行拦截\n            console.warn(\"基本数据类型\");\n            defineReactive(obj, key, obj[key])\n        }\n    })\n}\n// 初始化\nobserve(data)\n// 执行该操作的时候，控制台会打印 get\ndata.arr.push(4)\nconsole.log(data.arr);\n```","slug":"vue/vue原理学习1","published":1,"updated":"2021-12-31T12:01:59.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv14000dj7jf0eo815jz","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><ul>\n<li>前几天看到vue3.0的beta版本出来了，觉得在正式版出来之前，还是得把2.x版本的原理过一遍，让脑子有个印象。</li>\n<li>大概了分了这么几个部分：响应式系统、观察者模式、模板编译、virtual dom、路由、vuex、vue插件开发</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h1><blockquote>\n<p>概念</p>\n</blockquote>\n<ul>\n<li>针对某个参照物，进行相对变化。</li>\n</ul>\n<blockquote>\n<p>解释</p>\n</blockquote>\n<ul>\n<li>vue这类框架的响应式和bootstrap的响应式表现形式不一样，但是意思都是一样的，基于某个参考物进行相对变化。</li>\n<li>bootstrap是针对显示设备的大小来对布局进行自动的调整；vue是针对数据，对视图进行自动的更新，所以vue也是数据驱动型框架</li>\n<li>举个例子：当前有个标签显示的内容是：*<strong>刷新*** ，换jq时代我们需要去手动获取该标签，然后把值为 *</strong>刷新*** 的这个变量插入进去；假设现在我们改变了这个变量的值，我们需要让页面同步变化，就需要重复上面操作,代码如下<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#name&#x27;</span>)</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">&quot;刷新&quot;</span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 渲染数据到页面</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> render = <span class=\"hljs-function\">(<span class=\"hljs-params\">dom, val</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">            dom[<span class=\"hljs-string\">&#x27;textContent&#x27;</span>] = val</span><br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 初始化</span></span><br>        render(div, name)<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 修改name后再次渲染</span></span><br><span class=\"javascript\">        name = <span class=\"hljs-string\">&quot;shuaxin&quot;</span></span><br>        render(div, name)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure></li>\n<li>上述代码在要操作的dom变多的时候，维护起来就会很麻烦，而换到vue这边，就简单的多，只需要告诉vue数据显示在哪里即可，至于怎么去显示到对应的dom里，以及数据发生变化后的更新页面显示，都是由vue来完成的<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app=<span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>            data:&#123;<br><span class=\"javascript\">                name:<span class=\"hljs-string\">&quot;刷新&quot;</span></span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"关于vue的工作流程\"><a href=\"#关于vue的工作流程\" class=\"headerlink\" title=\"关于vue的工作流程\"></a>关于vue的工作流程</h1><p>在通过Vue构造函数实例化对象的过程中，vue同时做了2件事</p>\n<blockquote>\n<p>1.数据拦截</p>\n</blockquote>\n<ul>\n<li>对用户传入的数据，即data的所有属性进行拦截，以此来实现vue的响应式</li>\n</ul>\n<blockquote>\n<p>2.编译</p>\n</blockquote>\n<ul>\n<li>对用户指定的目标节点下的内容进行解析，解析出普通节点、包含指令的节点、含有表达式的节点；</li>\n<li>编译的目的，是为了生成虚拟dom，即用js对象来描述dom节点，以此来优化操作dom时带来的性能问题</li>\n<li>具体流程为：在每次编译完后，vue都会生成一棵由vdom组成的dom树，然后来和上一次的dom树进行对比，找出其中的不同，然后只更新其中不同的地方到页面</li>\n</ul>\n<blockquote>\n<p>数据驱动</p>\n</blockquote>\n<ul>\n<li>在完成1，2后， vue会通过观察者模式，来链接数据和编译；达到每次更新数据后，自动去更新页面的效果</li>\n<li>具体流程是，为拦截的每个数据创建一个容器，负责装载用到该数据时创建的watcher，这个watcher负责去执行更新页面的操作；然后当每次数据发生改变的时候，就会去遍历该数据的watcher容器，执行里面每一个watcher更新页面的操作</li>\n</ul>\n<h1 id=\"关于响应式的原理\"><a href=\"#关于响应式的原理\" class=\"headerlink\" title=\"关于响应式的原理\"></a>关于响应式的原理</h1><ul>\n<li>对对象：vue2.x通过数据拦截api（Object.defineProperty）来实现这一功能</li>\n<li>对数组：数据拦截是object的api，所以对数组那些操作数组本身内容的api就没什么用了，vue的做法是对数组的这些api进行一层封装，在里面执行数据依赖的一些操作和该api本身的操作</li>\n</ul>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 可以操作数组本身内容的api</span><br><span class=\"hljs-keyword\">const</span> methodsToPatch = [<br>            <span class=\"hljs-string\">&#x27;push&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;pop&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;shift&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;unshift&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;splice&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;sort&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;reverse&#x27;</span><br>]<br><span class=\"hljs-comment\">// 创建一个新的数组对象，继承Array</span><br><span class=\"hljs-keyword\">let</span> newArr = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-built_in\">Array</span>.prototype)<br><span class=\"hljs-comment\">// 遍历methodsToPatch，拦截每一个方法</span><br>methodsToPatch.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">method</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// 保存的是原Array的对应调用的方法</span><br>    <span class=\"hljs-keyword\">let</span> oldMethod = newArr[method]<br>    <span class=\"hljs-built_in\">Object</span>.defineProperty(newArr, method, &#123;<br>        <span class=\"hljs-comment\">// 不可以枚举，不可被for in循环到</span><br>        enumerable: <span class=\"hljs-literal\">false</span>,<br>        <span class=\"hljs-comment\">// 可以被删除</span><br>        configurable: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-comment\">// 可被重写</span><br>        writable: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-comment\">// 将访问的元素换成函数，在这里执行通知watcher更新视图的操作</span><br>        value: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mutator</span>(<span class=\"hljs-params\">...rest</span>) </span>&#123;<br>            <span class=\"hljs-comment\">// (3) [1, 2, 3]  4</span><br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>, ...rest)<br>            <span class=\"hljs-comment\">// 将函数的this指向绑定到当前操作的数组上，然后把调用该函数的参数一并传递过去</span><br>            <span class=\"hljs-keyword\">let</span> res = oldMethod.apply(<span class=\"hljs-built_in\">this</span>, rest)<br>            <span class=\"hljs-keyword\">return</span> res<br>        &#125;<br>    &#125;)<br>&#125;)<br><span class=\"hljs-comment\">// 测试</span><br><span class=\"hljs-keyword\">let</span> data = &#123;<br>    name: <span class=\"hljs-string\">&quot;vuejs&quot;</span>,<br>    sx: &#123;<br>        sex: <span class=\"hljs-string\">&#x27;男&#x27;</span>,<br>        name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>    &#125;,<br>    arr: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]<br>&#125;<br><span class=\"hljs-comment\">// 实现对数据的拦截</span><br><span class=\"hljs-keyword\">let</span> defineReactive = <span class=\"hljs-function\">(<span class=\"hljs-params\">obj, key, value</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">Object</span>.defineProperty(obj, key, &#123;<br>        enumerable: <span class=\"hljs-literal\">true</span>,<br>        configurable: <span class=\"hljs-literal\">true</span>,<br>        get() &#123;<br>            <span class=\"hljs-comment\">// 下面代码替代增加watcher操作</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;get&quot;</span>);<br>            <span class=\"hljs-keyword\">return</span> value<br>        &#125;,<br>        set(newVal) &#123;<br>            <span class=\"hljs-comment\">// 以下代替通知watcher更新视图操作</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;set&quot;</span>);<br>            value = newVal<br>        &#125;<br>    &#125;)<br>&#125;<br><span class=\"hljs-comment\">// 判断传递的data的每个属性的类型</span><br><span class=\"hljs-comment\">// 这里会有三种类型:对象,基本数据类型,数组</span><br><span class=\"hljs-keyword\">let</span> observe = <span class=\"hljs-function\">(<span class=\"hljs-params\">obj</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (!obj || (<span class=\"hljs-keyword\">typeof</span> obj !== <span class=\"hljs-string\">&#x27;object&#x27;</span>)) &#123;<br>        <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-built_in\">Object</span>.keys(obj).forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">key</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 还是一个对象，递归调用该函数</span><br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj[key] === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp; (obj[key] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) !== <span class=\"hljs-literal\">true</span>) &#123;<br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;对象&quot;</span>);<br>            observe(obj[key])<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (obj[key] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) &#123;<br>            <span class=\"hljs-comment\">// 是数组的话，改变数组原型为我们新创建的数组对象newArr</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;数组&quot;</span>);<br>            obj[key].__proto__ = newArr<br>            <span class=\"hljs-comment\">// 对内部的元素执行拦截</span><br>            defineReactive(obj, key, obj[key])<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 基本数据直接进行拦截</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;基本数据类型&quot;</span>);<br>            defineReactive(obj, key, obj[key])<br>        &#125;<br>    &#125;)<br>&#125;<br><span class=\"hljs-comment\">// 初始化</span><br>observe(data)<br><span class=\"hljs-comment\">// 执行该操作的时候，控制台会打印 get</span><br>data.arr.push(<span class=\"hljs-number\">4</span>)<br><span class=\"hljs-built_in\">console</span>.log(data.arr);<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":3624,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><ul>\n<li>前几天看到vue3.0的beta版本出来了，觉得在正式版出来之前，还是得把2.x版本的原理过一遍，让脑子有个印象。</li>\n<li>大概了分了这么几个部分：响应式系统、观察者模式、模板编译、virtual dom、路由、vuex、vue插件开发</li>\n</ul>","more":"<h1 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h1><blockquote>\n<p>概念</p>\n</blockquote>\n<ul>\n<li>针对某个参照物，进行相对变化。</li>\n</ul>\n<blockquote>\n<p>解释</p>\n</blockquote>\n<ul>\n<li>vue这类框架的响应式和bootstrap的响应式表现形式不一样，但是意思都是一样的，基于某个参考物进行相对变化。</li>\n<li>bootstrap是针对显示设备的大小来对布局进行自动的调整；vue是针对数据，对视图进行自动的更新，所以vue也是数据驱动型框架</li>\n<li>举个例子：当前有个标签显示的内容是：*<strong>刷新*** ，换jq时代我们需要去手动获取该标签，然后把值为 *</strong>刷新*** 的这个变量插入进去；假设现在我们改变了这个变量的值，我们需要让页面同步变化，就需要重复上面操作,代码如下<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#name&#x27;</span>)</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">&quot;刷新&quot;</span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 渲染数据到页面</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> render = <span class=\"hljs-function\">(<span class=\"hljs-params\">dom, val</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">            dom[<span class=\"hljs-string\">&#x27;textContent&#x27;</span>] = val</span><br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 初始化</span></span><br>        render(div, name)<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 修改name后再次渲染</span></span><br><span class=\"javascript\">        name = <span class=\"hljs-string\">&quot;shuaxin&quot;</span></span><br>        render(div, name)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure></li>\n<li>上述代码在要操作的dom变多的时候，维护起来就会很麻烦，而换到vue这边，就简单的多，只需要告诉vue数据显示在哪里即可，至于怎么去显示到对应的dom里，以及数据发生变化后的更新页面显示，都是由vue来完成的<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;name&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./vue.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> app=<span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">            el:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br>            data:&#123;<br><span class=\"javascript\">                name:<span class=\"hljs-string\">&quot;刷新&quot;</span></span><br>            &#125;<br>        &#125;)<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"关于vue的工作流程\"><a href=\"#关于vue的工作流程\" class=\"headerlink\" title=\"关于vue的工作流程\"></a>关于vue的工作流程</h1><p>在通过Vue构造函数实例化对象的过程中，vue同时做了2件事</p>\n<blockquote>\n<p>1.数据拦截</p>\n</blockquote>\n<ul>\n<li>对用户传入的数据，即data的所有属性进行拦截，以此来实现vue的响应式</li>\n</ul>\n<blockquote>\n<p>2.编译</p>\n</blockquote>\n<ul>\n<li>对用户指定的目标节点下的内容进行解析，解析出普通节点、包含指令的节点、含有表达式的节点；</li>\n<li>编译的目的，是为了生成虚拟dom，即用js对象来描述dom节点，以此来优化操作dom时带来的性能问题</li>\n<li>具体流程为：在每次编译完后，vue都会生成一棵由vdom组成的dom树，然后来和上一次的dom树进行对比，找出其中的不同，然后只更新其中不同的地方到页面</li>\n</ul>\n<blockquote>\n<p>数据驱动</p>\n</blockquote>\n<ul>\n<li>在完成1，2后， vue会通过观察者模式，来链接数据和编译；达到每次更新数据后，自动去更新页面的效果</li>\n<li>具体流程是，为拦截的每个数据创建一个容器，负责装载用到该数据时创建的watcher，这个watcher负责去执行更新页面的操作；然后当每次数据发生改变的时候，就会去遍历该数据的watcher容器，执行里面每一个watcher更新页面的操作</li>\n</ul>\n<h1 id=\"关于响应式的原理\"><a href=\"#关于响应式的原理\" class=\"headerlink\" title=\"关于响应式的原理\"></a>关于响应式的原理</h1><ul>\n<li>对对象：vue2.x通过数据拦截api（Object.defineProperty）来实现这一功能</li>\n<li>对数组：数据拦截是object的api，所以对数组那些操作数组本身内容的api就没什么用了，vue的做法是对数组的这些api进行一层封装，在里面执行数据依赖的一些操作和该api本身的操作</li>\n</ul>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 可以操作数组本身内容的api</span><br><span class=\"hljs-keyword\">const</span> methodsToPatch = [<br>            <span class=\"hljs-string\">&#x27;push&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;pop&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;shift&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;unshift&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;splice&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;sort&#x27;</span>,<br>            <span class=\"hljs-string\">&#x27;reverse&#x27;</span><br>]<br><span class=\"hljs-comment\">// 创建一个新的数组对象，继承Array</span><br><span class=\"hljs-keyword\">let</span> newArr = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-built_in\">Array</span>.prototype)<br><span class=\"hljs-comment\">// 遍历methodsToPatch，拦截每一个方法</span><br>methodsToPatch.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">method</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// 保存的是原Array的对应调用的方法</span><br>    <span class=\"hljs-keyword\">let</span> oldMethod = newArr[method]<br>    <span class=\"hljs-built_in\">Object</span>.defineProperty(newArr, method, &#123;<br>        <span class=\"hljs-comment\">// 不可以枚举，不可被for in循环到</span><br>        enumerable: <span class=\"hljs-literal\">false</span>,<br>        <span class=\"hljs-comment\">// 可以被删除</span><br>        configurable: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-comment\">// 可被重写</span><br>        writable: <span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-comment\">// 将访问的元素换成函数，在这里执行通知watcher更新视图的操作</span><br>        value: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mutator</span>(<span class=\"hljs-params\">...rest</span>) </span>&#123;<br>            <span class=\"hljs-comment\">// (3) [1, 2, 3]  4</span><br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>, ...rest)<br>            <span class=\"hljs-comment\">// 将函数的this指向绑定到当前操作的数组上，然后把调用该函数的参数一并传递过去</span><br>            <span class=\"hljs-keyword\">let</span> res = oldMethod.apply(<span class=\"hljs-built_in\">this</span>, rest)<br>            <span class=\"hljs-keyword\">return</span> res<br>        &#125;<br>    &#125;)<br>&#125;)<br><span class=\"hljs-comment\">// 测试</span><br><span class=\"hljs-keyword\">let</span> data = &#123;<br>    name: <span class=\"hljs-string\">&quot;vuejs&quot;</span>,<br>    sx: &#123;<br>        sex: <span class=\"hljs-string\">&#x27;男&#x27;</span>,<br>        name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>    &#125;,<br>    arr: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]<br>&#125;<br><span class=\"hljs-comment\">// 实现对数据的拦截</span><br><span class=\"hljs-keyword\">let</span> defineReactive = <span class=\"hljs-function\">(<span class=\"hljs-params\">obj, key, value</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">Object</span>.defineProperty(obj, key, &#123;<br>        enumerable: <span class=\"hljs-literal\">true</span>,<br>        configurable: <span class=\"hljs-literal\">true</span>,<br>        get() &#123;<br>            <span class=\"hljs-comment\">// 下面代码替代增加watcher操作</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;get&quot;</span>);<br>            <span class=\"hljs-keyword\">return</span> value<br>        &#125;,<br>        set(newVal) &#123;<br>            <span class=\"hljs-comment\">// 以下代替通知watcher更新视图操作</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;set&quot;</span>);<br>            value = newVal<br>        &#125;<br>    &#125;)<br>&#125;<br><span class=\"hljs-comment\">// 判断传递的data的每个属性的类型</span><br><span class=\"hljs-comment\">// 这里会有三种类型:对象,基本数据类型,数组</span><br><span class=\"hljs-keyword\">let</span> observe = <span class=\"hljs-function\">(<span class=\"hljs-params\">obj</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (!obj || (<span class=\"hljs-keyword\">typeof</span> obj !== <span class=\"hljs-string\">&#x27;object&#x27;</span>)) &#123;<br>        <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-built_in\">Object</span>.keys(obj).forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">key</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 还是一个对象，递归调用该函数</span><br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj[key] === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp; (obj[key] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) !== <span class=\"hljs-literal\">true</span>) &#123;<br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;对象&quot;</span>);<br>            observe(obj[key])<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (obj[key] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) &#123;<br>            <span class=\"hljs-comment\">// 是数组的话，改变数组原型为我们新创建的数组对象newArr</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;数组&quot;</span>);<br>            obj[key].__proto__ = newArr<br>            <span class=\"hljs-comment\">// 对内部的元素执行拦截</span><br>            defineReactive(obj, key, obj[key])<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 基本数据直接进行拦截</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;基本数据类型&quot;</span>);<br>            defineReactive(obj, key, obj[key])<br>        &#125;<br>    &#125;)<br>&#125;<br><span class=\"hljs-comment\">// 初始化</span><br>observe(data)<br><span class=\"hljs-comment\">// 执行该操作的时候，控制台会打印 get</span><br>data.arr.push(<span class=\"hljs-number\">4</span>)<br><span class=\"hljs-built_in\">console</span>.log(data.arr);<br></code></pre></td></tr></table></figure>"},{"title":"FLIP做卡片弹窗动画","abbrlink":11009,"date":"2019-11-08T10:29:49.000Z","_content":"\n# 惯例BB\n最近在做一个卡片弹窗的动画，怎么做都达不到想要的效果，查了查资料，发现通过一种叫FLIP的技术(也不算新技术，一种思路？)，可以比较好的实现这个效果，而且这个过程中，也了解到了一些关于动画性能相关的知识，所以记录一下。\n<!-- more -->\n\n[类似效果](https://user-gold-cdn.xitu.io/2019/4/27/16a5dfd7c4d0f639?imageslim)\n\n# 关于FLIP\nFLIP是First、Last、Invert和Play四个单词首字母的缩写。\n>简单解释下这四个单词在实现思路中对应的意思\n- first：指在过度效果发生前，目标对象的位置、大小\n- last：指过度效果发生后，目标对象的位置、大小\n- invert：目标对象过度前后的位置、大小差\n- play：通过invert得到的差值，来作为transform的参数进行动画\n\n# 实现思路\n1.动画前后的效果，用两个div写好\n\n2.获取这两个div的大小比例和位置差\n\n3.通过translate将动画后的div变成动画前的大小和移动到对应的位置\n\n4.通过取消3中的translate和重新设置，加上过度就可以实现动画效果啦\n\n\n# 手撕代码前\n代码使用到的API\n>transform:translate/scale\n- 偏移/缩放\n\n>getBoundingClientRect\n- 获取dom元素的位置和大小\n\n# 关于性能\n![浏览器渲染过程](/img/flip.png)\n上图中的layout和paint是非常影响性能的，比如position和display控制显示隐藏，都会触发这两步，所以在动画过程实现中，位置用transform的translate、显示隐藏用visibility/opacity 来做。因为他们只会触发最后一步。\n\n# 代码演示\n```html\n...\n<style>\nbody {\n    margin: 0;\n    position: relative;\n}\n\ndiv {\n    text-align: center;\n    background-color: rgb(139, 206, 248);\n}\n\n.before {\n    width: 300px;\n    height: 300px;\n    line-height: 300px;\n    margin: 0 auto;\n    transition: all 1s;\n}\n\n.after {\n    width: 100vw;\n    height: 100vh;\n    line-height: 100vh;\n    position: absolute;\n    top: 0;\n}\n</style>\n...\n<body>\n    <div class=\"before\"></div>\n    <div class=\"after\"></div>\n</body>\n<script>\nlet before = document.querySelector('#before');\nlet after = document.querySelector('#after');\n// 获取过度前 位置大小\nlet first = before.getBoundingClientRect();\n// 获取过度后 位置大小\nlet last = after.getBoundingClientRect();\nconsole.log(first);\nconsole.log(last);\n\n// 记录前后大小位置差\nlet invert = {\n    left: first.left - last.left,\n    top: first.top - last.top,\n    width: first.width / last.width,\n    height: first.height / last.height,\n};\n// 让after通过transform变成before的大小，以及移动到before的位置\nafter.style.visibility='hidden';\nafter.style.transformOrigin = 'top left';\nafter.style.transform = `translate(${invert.left}px,${invert.top}px) scale(${invert.width},${invert.height})`;\n// 放大\nbefore.addEventListener('click', function () {\n    after.style.transform = '';\n    after.style.transition = ' all 1s';\n    after.style.visibility='visible';\n\n});\n// 缩小\nafter.addEventListener('click', function () {\n    after.style.visibility='hidden';\n    after.style.transition = ' all 1s';\n    after.style.transform =\n        `translate(${invert.left}px,${invert.top}px) scale(${invert.width},${invert.height})`;\n});\n</script>\n...\n```\n\n# 参考链接\n[浏览器渲染原理](https://segmentfault.com/a/1190000019713766#articleHeader5)\n[前端动画之FLIP技术](https://juejin.im/post/5da689b76fb9a04e143dbebc)\n\n","source":"_posts/css/FLIP做卡片弹窗动画.md","raw":"---\ntitle: FLIP做卡片弹窗动画\ntag:\n  - CSS&HTML\n  - JavaScript\nabbrlink: 11009\ndate: 2019-11-08 18:29:49\ncategory:\n    - 技术笔记\n---\n\n# 惯例BB\n最近在做一个卡片弹窗的动画，怎么做都达不到想要的效果，查了查资料，发现通过一种叫FLIP的技术(也不算新技术，一种思路？)，可以比较好的实现这个效果，而且这个过程中，也了解到了一些关于动画性能相关的知识，所以记录一下。\n<!-- more -->\n\n[类似效果](https://user-gold-cdn.xitu.io/2019/4/27/16a5dfd7c4d0f639?imageslim)\n\n# 关于FLIP\nFLIP是First、Last、Invert和Play四个单词首字母的缩写。\n>简单解释下这四个单词在实现思路中对应的意思\n- first：指在过度效果发生前，目标对象的位置、大小\n- last：指过度效果发生后，目标对象的位置、大小\n- invert：目标对象过度前后的位置、大小差\n- play：通过invert得到的差值，来作为transform的参数进行动画\n\n# 实现思路\n1.动画前后的效果，用两个div写好\n\n2.获取这两个div的大小比例和位置差\n\n3.通过translate将动画后的div变成动画前的大小和移动到对应的位置\n\n4.通过取消3中的translate和重新设置，加上过度就可以实现动画效果啦\n\n\n# 手撕代码前\n代码使用到的API\n>transform:translate/scale\n- 偏移/缩放\n\n>getBoundingClientRect\n- 获取dom元素的位置和大小\n\n# 关于性能\n![浏览器渲染过程](/img/flip.png)\n上图中的layout和paint是非常影响性能的，比如position和display控制显示隐藏，都会触发这两步，所以在动画过程实现中，位置用transform的translate、显示隐藏用visibility/opacity 来做。因为他们只会触发最后一步。\n\n# 代码演示\n```html\n...\n<style>\nbody {\n    margin: 0;\n    position: relative;\n}\n\ndiv {\n    text-align: center;\n    background-color: rgb(139, 206, 248);\n}\n\n.before {\n    width: 300px;\n    height: 300px;\n    line-height: 300px;\n    margin: 0 auto;\n    transition: all 1s;\n}\n\n.after {\n    width: 100vw;\n    height: 100vh;\n    line-height: 100vh;\n    position: absolute;\n    top: 0;\n}\n</style>\n...\n<body>\n    <div class=\"before\"></div>\n    <div class=\"after\"></div>\n</body>\n<script>\nlet before = document.querySelector('#before');\nlet after = document.querySelector('#after');\n// 获取过度前 位置大小\nlet first = before.getBoundingClientRect();\n// 获取过度后 位置大小\nlet last = after.getBoundingClientRect();\nconsole.log(first);\nconsole.log(last);\n\n// 记录前后大小位置差\nlet invert = {\n    left: first.left - last.left,\n    top: first.top - last.top,\n    width: first.width / last.width,\n    height: first.height / last.height,\n};\n// 让after通过transform变成before的大小，以及移动到before的位置\nafter.style.visibility='hidden';\nafter.style.transformOrigin = 'top left';\nafter.style.transform = `translate(${invert.left}px,${invert.top}px) scale(${invert.width},${invert.height})`;\n// 放大\nbefore.addEventListener('click', function () {\n    after.style.transform = '';\n    after.style.transition = ' all 1s';\n    after.style.visibility='visible';\n\n});\n// 缩小\nafter.addEventListener('click', function () {\n    after.style.visibility='hidden';\n    after.style.transition = ' all 1s';\n    after.style.transform =\n        `translate(${invert.left}px,${invert.top}px) scale(${invert.width},${invert.height})`;\n});\n</script>\n...\n```\n\n# 参考链接\n[浏览器渲染原理](https://segmentfault.com/a/1190000019713766#articleHeader5)\n[前端动画之FLIP技术](https://juejin.im/post/5da689b76fb9a04e143dbebc)\n\n","slug":"css/FLIP做卡片弹窗动画","published":1,"updated":"2021-12-31T12:01:59.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv14000gj7jf45s78l3a","content":"<h1 id=\"惯例BB\"><a href=\"#惯例BB\" class=\"headerlink\" title=\"惯例BB\"></a>惯例BB</h1><p>最近在做一个卡片弹窗的动画，怎么做都达不到想要的效果，查了查资料，发现通过一种叫FLIP的技术(也不算新技术，一种思路？)，可以比较好的实现这个效果，而且这个过程中，也了解到了一些关于动画性能相关的知识，所以记录一下。</p>\n<a id=\"more\"></a>\n\n<p><a href=\"https://user-gold-cdn.xitu.io/2019/4/27/16a5dfd7c4d0f639?imageslim\">类似效果</a></p>\n<h1 id=\"关于FLIP\"><a href=\"#关于FLIP\" class=\"headerlink\" title=\"关于FLIP\"></a>关于FLIP</h1><p>FLIP是First、Last、Invert和Play四个单词首字母的缩写。</p>\n<blockquote>\n<p>简单解释下这四个单词在实现思路中对应的意思</p>\n</blockquote>\n<ul>\n<li>first：指在过度效果发生前，目标对象的位置、大小</li>\n<li>last：指过度效果发生后，目标对象的位置、大小</li>\n<li>invert：目标对象过度前后的位置、大小差</li>\n<li>play：通过invert得到的差值，来作为transform的参数进行动画</li>\n</ul>\n<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><p>1.动画前后的效果，用两个div写好</p>\n<p>2.获取这两个div的大小比例和位置差</p>\n<p>3.通过translate将动画后的div变成动画前的大小和移动到对应的位置</p>\n<p>4.通过取消3中的translate和重新设置，加上过度就可以实现动画效果啦</p>\n<h1 id=\"手撕代码前\"><a href=\"#手撕代码前\" class=\"headerlink\" title=\"手撕代码前\"></a>手撕代码前</h1><p>代码使用到的API</p>\n<blockquote>\n<p>transform:translate/scale</p>\n</blockquote>\n<ul>\n<li>偏移/缩放</li>\n</ul>\n<blockquote>\n<p>getBoundingClientRect</p>\n</blockquote>\n<ul>\n<li>获取dom元素的位置和大小</li>\n</ul>\n<h1 id=\"关于性能\"><a href=\"#关于性能\" class=\"headerlink\" title=\"关于性能\"></a>关于性能</h1><p><img src=\"/img/flip.png\" alt=\"浏览器渲染过程\"><br>上图中的layout和paint是非常影响性能的，比如position和display控制显示隐藏，都会触发这两步，所以在动画过程实现中，位置用transform的translate、显示隐藏用visibility/opacity 来做。因为他们只会触发最后一步。</p>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br>body &#123;<br>    margin: 0;<br>    position: relative;<br>&#125;<br><br>div &#123;<br>    text-align: center;<br>    background-color: rgb(139, 206, 248);<br>&#125;<br><br><span class=\"css\"><span class=\"hljs-selector-class\">.before</span> &#123;</span><br>    width: 300px;<br>    height: 300px;<br>    line-height: 300px;<br>    margin: 0 auto;<br>    transition: all 1s;<br>&#125;<br><br><span class=\"css\"><span class=\"hljs-selector-class\">.after</span> &#123;</span><br>    width: 100vw;<br>    height: 100vh;<br>    line-height: 100vh;<br>    position: absolute;<br>    top: 0;<br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;before&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;after&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> before = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#before&#x27;</span>);</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> after = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#after&#x27;</span>);</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 获取过度前 位置大小</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> first = before.getBoundingClientRect();</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 获取过度后 位置大小</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> last = after.getBoundingClientRect();</span><br><span class=\"javascript\"><span class=\"hljs-built_in\">console</span>.log(first);</span><br><span class=\"javascript\"><span class=\"hljs-built_in\">console</span>.log(last);</span><br><br><span class=\"javascript\"><span class=\"hljs-comment\">// 记录前后大小位置差</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> invert = &#123;</span><br>    left: first.left - last.left,<br>    top: first.top - last.top,<br>    width: first.width / last.width,<br>    height: first.height / last.height,<br>&#125;;<br><span class=\"javascript\"><span class=\"hljs-comment\">// 让after通过transform变成before的大小，以及移动到before的位置</span></span><br><span class=\"javascript\">after.style.visibility=<span class=\"hljs-string\">&#x27;hidden&#x27;</span>;</span><br><span class=\"javascript\">after.style.transformOrigin = <span class=\"hljs-string\">&#x27;top left&#x27;</span>;</span><br><span class=\"javascript\">after.style.transform = <span class=\"hljs-string\">`translate(<span class=\"hljs-subst\">$&#123;invert.left&#125;</span>px,<span class=\"hljs-subst\">$&#123;invert.top&#125;</span>px) scale(<span class=\"hljs-subst\">$&#123;invert.width&#125;</span>,<span class=\"hljs-subst\">$&#123;invert.height&#125;</span>)`</span>;</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 放大</span></span><br><span class=\"javascript\">before.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">    after.style.transform = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">    after.style.transition = <span class=\"hljs-string\">&#x27; all 1s&#x27;</span>;</span><br><span class=\"javascript\">    after.style.visibility=<span class=\"hljs-string\">&#x27;visible&#x27;</span>;</span><br><br>&#125;);<br><span class=\"javascript\"><span class=\"hljs-comment\">// 缩小</span></span><br><span class=\"javascript\">after.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">    after.style.visibility=<span class=\"hljs-string\">&#x27;hidden&#x27;</span>;</span><br><span class=\"javascript\">    after.style.transition = <span class=\"hljs-string\">&#x27; all 1s&#x27;</span>;</span><br>    after.style.transform =<br><span class=\"javascript\">        <span class=\"hljs-string\">`translate(<span class=\"hljs-subst\">$&#123;invert.left&#125;</span>px,<span class=\"hljs-subst\">$&#123;invert.top&#125;</span>px) scale(<span class=\"hljs-subst\">$&#123;invert.width&#125;</span>,<span class=\"hljs-subst\">$&#123;invert.height&#125;</span>)`</span>;</span><br>&#125;);<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://segmentfault.com/a/1190000019713766#articleHeader5\">浏览器渲染原理</a><br><a href=\"https://juejin.im/post/5da689b76fb9a04e143dbebc\">前端动画之FLIP技术</a></p>\n","site":{"data":{}},"wordcount":2406,"excerpt":"<h1 id=\"惯例BB\"><a href=\"#惯例BB\" class=\"headerlink\" title=\"惯例BB\"></a>惯例BB</h1><p>最近在做一个卡片弹窗的动画，怎么做都达不到想要的效果，查了查资料，发现通过一种叫FLIP的技术(也不算新技术，一种思路？)，可以比较好的实现这个效果，而且这个过程中，也了解到了一些关于动画性能相关的知识，所以记录一下。</p>","more":"<p><a href=\"https://user-gold-cdn.xitu.io/2019/4/27/16a5dfd7c4d0f639?imageslim\">类似效果</a></p>\n<h1 id=\"关于FLIP\"><a href=\"#关于FLIP\" class=\"headerlink\" title=\"关于FLIP\"></a>关于FLIP</h1><p>FLIP是First、Last、Invert和Play四个单词首字母的缩写。</p>\n<blockquote>\n<p>简单解释下这四个单词在实现思路中对应的意思</p>\n</blockquote>\n<ul>\n<li>first：指在过度效果发生前，目标对象的位置、大小</li>\n<li>last：指过度效果发生后，目标对象的位置、大小</li>\n<li>invert：目标对象过度前后的位置、大小差</li>\n<li>play：通过invert得到的差值，来作为transform的参数进行动画</li>\n</ul>\n<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><p>1.动画前后的效果，用两个div写好</p>\n<p>2.获取这两个div的大小比例和位置差</p>\n<p>3.通过translate将动画后的div变成动画前的大小和移动到对应的位置</p>\n<p>4.通过取消3中的translate和重新设置，加上过度就可以实现动画效果啦</p>\n<h1 id=\"手撕代码前\"><a href=\"#手撕代码前\" class=\"headerlink\" title=\"手撕代码前\"></a>手撕代码前</h1><p>代码使用到的API</p>\n<blockquote>\n<p>transform:translate/scale</p>\n</blockquote>\n<ul>\n<li>偏移/缩放</li>\n</ul>\n<blockquote>\n<p>getBoundingClientRect</p>\n</blockquote>\n<ul>\n<li>获取dom元素的位置和大小</li>\n</ul>\n<h1 id=\"关于性能\"><a href=\"#关于性能\" class=\"headerlink\" title=\"关于性能\"></a>关于性能</h1><p><img src=\"/img/flip.png\" alt=\"浏览器渲染过程\"><br>上图中的layout和paint是非常影响性能的，比如position和display控制显示隐藏，都会触发这两步，所以在动画过程实现中，位置用transform的translate、显示隐藏用visibility/opacity 来做。因为他们只会触发最后一步。</p>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br>body &#123;<br>    margin: 0;<br>    position: relative;<br>&#125;<br><br>div &#123;<br>    text-align: center;<br>    background-color: rgb(139, 206, 248);<br>&#125;<br><br><span class=\"css\"><span class=\"hljs-selector-class\">.before</span> &#123;</span><br>    width: 300px;<br>    height: 300px;<br>    line-height: 300px;<br>    margin: 0 auto;<br>    transition: all 1s;<br>&#125;<br><br><span class=\"css\"><span class=\"hljs-selector-class\">.after</span> &#123;</span><br>    width: 100vw;<br>    height: 100vh;<br>    line-height: 100vh;<br>    position: absolute;<br>    top: 0;<br>&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;before&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;after&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> before = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#before&#x27;</span>);</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> after = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#after&#x27;</span>);</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 获取过度前 位置大小</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> first = before.getBoundingClientRect();</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 获取过度后 位置大小</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> last = after.getBoundingClientRect();</span><br><span class=\"javascript\"><span class=\"hljs-built_in\">console</span>.log(first);</span><br><span class=\"javascript\"><span class=\"hljs-built_in\">console</span>.log(last);</span><br><br><span class=\"javascript\"><span class=\"hljs-comment\">// 记录前后大小位置差</span></span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> invert = &#123;</span><br>    left: first.left - last.left,<br>    top: first.top - last.top,<br>    width: first.width / last.width,<br>    height: first.height / last.height,<br>&#125;;<br><span class=\"javascript\"><span class=\"hljs-comment\">// 让after通过transform变成before的大小，以及移动到before的位置</span></span><br><span class=\"javascript\">after.style.visibility=<span class=\"hljs-string\">&#x27;hidden&#x27;</span>;</span><br><span class=\"javascript\">after.style.transformOrigin = <span class=\"hljs-string\">&#x27;top left&#x27;</span>;</span><br><span class=\"javascript\">after.style.transform = <span class=\"hljs-string\">`translate(<span class=\"hljs-subst\">$&#123;invert.left&#125;</span>px,<span class=\"hljs-subst\">$&#123;invert.top&#125;</span>px) scale(<span class=\"hljs-subst\">$&#123;invert.width&#125;</span>,<span class=\"hljs-subst\">$&#123;invert.height&#125;</span>)`</span>;</span><br><span class=\"javascript\"><span class=\"hljs-comment\">// 放大</span></span><br><span class=\"javascript\">before.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">    after.style.transform = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">    after.style.transition = <span class=\"hljs-string\">&#x27; all 1s&#x27;</span>;</span><br><span class=\"javascript\">    after.style.visibility=<span class=\"hljs-string\">&#x27;visible&#x27;</span>;</span><br><br>&#125;);<br><span class=\"javascript\"><span class=\"hljs-comment\">// 缩小</span></span><br><span class=\"javascript\">after.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br><span class=\"javascript\">    after.style.visibility=<span class=\"hljs-string\">&#x27;hidden&#x27;</span>;</span><br><span class=\"javascript\">    after.style.transition = <span class=\"hljs-string\">&#x27; all 1s&#x27;</span>;</span><br>    after.style.transform =<br><span class=\"javascript\">        <span class=\"hljs-string\">`translate(<span class=\"hljs-subst\">$&#123;invert.left&#125;</span>px,<span class=\"hljs-subst\">$&#123;invert.top&#125;</span>px) scale(<span class=\"hljs-subst\">$&#123;invert.width&#125;</span>,<span class=\"hljs-subst\">$&#123;invert.height&#125;</span>)`</span>;</span><br>&#125;);<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://segmentfault.com/a/1190000019713766#articleHeader5\">浏览器渲染原理</a><br><a href=\"https://juejin.im/post/5da689b76fb9a04e143dbebc\">前端动画之FLIP技术</a></p>"},{"title":"浮动功能栏","abbrlink":56186,"date":"2019-11-18T14:05:33.000Z","_content":"\n# 关于命名\n我也不知道这个具体的名字叫什么，就按照它的功能起了这么个简单的名字，防止说不清楚，大概解释一下是什么东西。就是在很多网页，我们往下滑时，会在页面的固定位置出现一个(一栏、一片等！)按钮，里面有帮助回到网页顶部的，还有联系网站客服等等的操作。\n\n像这样\n![掘金](/img/juejin.png)\n<!-- more -->\n# 分析\n>**问题**\n- 首先就是根据喜好做一排这样的区域(自行发挥)\n- 其次就是确定它要出现的位置(<font color='red'> *重点*</font> )即可。\n- 还有几个小细节，就是当回到页面顶部时，这一部分区域会隐藏，当再次滑动到页面非顶部的位置是，又会再一次出现。\n\n>**解决**\n- 固定位置：通过position的fixed固定\n- 通过opacity控制显示显示/隐藏\n- 判断何时显示/隐藏:通过获取滚动条滚动的height判断\n\n## 用到的知识\ncss\n>[position](https://www.runoob.com/cssref/pr-class-position.html)\n\njs\n>[scrollTop](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop)\n- 获取滚动条滚动过的height\n\n>[scrollTo](https://www.runoob.com/jsref/met-win-scrollto.html)\n- scrollTo() 方法可把内容滚动到指定的坐标。\n\n>[onwheel](https://www.runoob.com/jsref/event-onwheel.html)\n- 鼠标滑轮滚动事件\n- onmousewheel注意，有些文章是写的这个事件，该事件已经废弃(但是有的环境还是可以用)，换成了onwheel\n\n## 代码\nCSS\n```css\n...\n/* 页面主要内容 */\n.con {\n    width: 100vw;\n    /* 让页面出现滚动条 */\n    height: 1100vh;\n    background-color: lightcoral;\n}\n/* 浮动功能栏样式  */\n.float {\n    padding: 0;\n    margin: 0;\n    position: fixed;\n    top: 70vh;\n    right: 5vw;\n    /* 默认不显示 */\n    opacity: 0;\n    z-index: 0;\n    transition: all 0.5s;\n}\n/* 其他样式 */\nli {\n    width: 100px;\n    height: 100px;\n    text-align: center;\n    line-height: 100px;\n    list-style: none;\n    background-color: #ffffff;\n    border-radius: 50%;\n    cursor: pointer;\n}\n```\nHTML\n```html\n    <div class=\"con\" id=\"con\">\n\n    </div>\n    <ul class=\"float\" id=\"float\">\n        <li id=\"backtop\">BACK</li>\n    </ul>\n```\nJS\n```js\n    let con = document.querySelector('#con');\n    let float = document.querySelector('#float');\n    let backtop = document.querySelector('#backtop');\n    // des:设置浮动功能栏的显示/隐藏\n    let set = function (op, zi) {\n        float.style.opacity = op;\n        float.style.zIndex = zi;\n    }\n    // 点击back返回顶部\n    backtop.addEventListener('click', function () {\n        // 1.document.documentElement.scrollTop = 0;\n        // 2.scrollTo返回\n        scrollTo(0, 0);\n        // 返回后隐藏\n        set(0, 0);\n    });\n    // 这里更好的效果是换成window的滚动条事件,这样无论是鼠标滑轮还是，键盘翻页键，还是点击滚动条都可以触发\n    // window.addEventListener(\"scroll\",***)\n    con.addEventListener('wheel', function () {\n        // 获取可视区域宽高\n        let viewHeight = document.documentElement.clientHeight;\n        // 获取已经滚动条滚动了的高度\n        let scrowHeight = document.documentElement.scrollTop;\n        // 获取文档高\n        let documentHeight = document.body.clientHeight;\n        if (scrowHeight === 0) {\n            // 隐藏按钮\n            set(0, 0);\n        } else {\n            // 显示按钮\n            set(10, 99);\n        }\n    });\n```\n","source":"_posts/css/浮动功能栏.md","raw":"---\ntitle: 浮动功能栏\ntag:\n  - CSS&HTML\n  - JavaScript\nabbrlink: 56186\ndate: 2019-11-18 22:05:33\ncategory:\n    - 技术笔记\n---\n\n# 关于命名\n我也不知道这个具体的名字叫什么，就按照它的功能起了这么个简单的名字，防止说不清楚，大概解释一下是什么东西。就是在很多网页，我们往下滑时，会在页面的固定位置出现一个(一栏、一片等！)按钮，里面有帮助回到网页顶部的，还有联系网站客服等等的操作。\n\n像这样\n![掘金](/img/juejin.png)\n<!-- more -->\n# 分析\n>**问题**\n- 首先就是根据喜好做一排这样的区域(自行发挥)\n- 其次就是确定它要出现的位置(<font color='red'> *重点*</font> )即可。\n- 还有几个小细节，就是当回到页面顶部时，这一部分区域会隐藏，当再次滑动到页面非顶部的位置是，又会再一次出现。\n\n>**解决**\n- 固定位置：通过position的fixed固定\n- 通过opacity控制显示显示/隐藏\n- 判断何时显示/隐藏:通过获取滚动条滚动的height判断\n\n## 用到的知识\ncss\n>[position](https://www.runoob.com/cssref/pr-class-position.html)\n\njs\n>[scrollTop](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop)\n- 获取滚动条滚动过的height\n\n>[scrollTo](https://www.runoob.com/jsref/met-win-scrollto.html)\n- scrollTo() 方法可把内容滚动到指定的坐标。\n\n>[onwheel](https://www.runoob.com/jsref/event-onwheel.html)\n- 鼠标滑轮滚动事件\n- onmousewheel注意，有些文章是写的这个事件，该事件已经废弃(但是有的环境还是可以用)，换成了onwheel\n\n## 代码\nCSS\n```css\n...\n/* 页面主要内容 */\n.con {\n    width: 100vw;\n    /* 让页面出现滚动条 */\n    height: 1100vh;\n    background-color: lightcoral;\n}\n/* 浮动功能栏样式  */\n.float {\n    padding: 0;\n    margin: 0;\n    position: fixed;\n    top: 70vh;\n    right: 5vw;\n    /* 默认不显示 */\n    opacity: 0;\n    z-index: 0;\n    transition: all 0.5s;\n}\n/* 其他样式 */\nli {\n    width: 100px;\n    height: 100px;\n    text-align: center;\n    line-height: 100px;\n    list-style: none;\n    background-color: #ffffff;\n    border-radius: 50%;\n    cursor: pointer;\n}\n```\nHTML\n```html\n    <div class=\"con\" id=\"con\">\n\n    </div>\n    <ul class=\"float\" id=\"float\">\n        <li id=\"backtop\">BACK</li>\n    </ul>\n```\nJS\n```js\n    let con = document.querySelector('#con');\n    let float = document.querySelector('#float');\n    let backtop = document.querySelector('#backtop');\n    // des:设置浮动功能栏的显示/隐藏\n    let set = function (op, zi) {\n        float.style.opacity = op;\n        float.style.zIndex = zi;\n    }\n    // 点击back返回顶部\n    backtop.addEventListener('click', function () {\n        // 1.document.documentElement.scrollTop = 0;\n        // 2.scrollTo返回\n        scrollTo(0, 0);\n        // 返回后隐藏\n        set(0, 0);\n    });\n    // 这里更好的效果是换成window的滚动条事件,这样无论是鼠标滑轮还是，键盘翻页键，还是点击滚动条都可以触发\n    // window.addEventListener(\"scroll\",***)\n    con.addEventListener('wheel', function () {\n        // 获取可视区域宽高\n        let viewHeight = document.documentElement.clientHeight;\n        // 获取已经滚动条滚动了的高度\n        let scrowHeight = document.documentElement.scrollTop;\n        // 获取文档高\n        let documentHeight = document.body.clientHeight;\n        if (scrowHeight === 0) {\n            // 隐藏按钮\n            set(0, 0);\n        } else {\n            // 显示按钮\n            set(10, 99);\n        }\n    });\n```\n","slug":"css/浮动功能栏","published":1,"updated":"2021-12-31T12:01:59.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv15000jj7jfgx84gosi","content":"<h1 id=\"关于命名\"><a href=\"#关于命名\" class=\"headerlink\" title=\"关于命名\"></a>关于命名</h1><p>我也不知道这个具体的名字叫什么，就按照它的功能起了这么个简单的名字，防止说不清楚，大概解释一下是什么东西。就是在很多网页，我们往下滑时，会在页面的固定位置出现一个(一栏、一片等！)按钮，里面有帮助回到网页顶部的，还有联系网站客服等等的操作。</p>\n<p>像这样<br><img src=\"/img/juejin.png\" alt=\"掘金\"></p>\n<a id=\"more\"></a>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><blockquote>\n<p><strong>问题</strong></p>\n</blockquote>\n<ul>\n<li>首先就是根据喜好做一排这样的区域(自行发挥)</li>\n<li>其次就是确定它要出现的位置(<font color='red'> <em>重点</em></font> )即可。</li>\n<li>还有几个小细节，就是当回到页面顶部时，这一部分区域会隐藏，当再次滑动到页面非顶部的位置是，又会再一次出现。</li>\n</ul>\n<blockquote>\n<p><strong>解决</strong></p>\n</blockquote>\n<ul>\n<li>固定位置：通过position的fixed固定</li>\n<li>通过opacity控制显示显示/隐藏</li>\n<li>判断何时显示/隐藏:通过获取滚动条滚动的height判断</li>\n</ul>\n<h2 id=\"用到的知识\"><a href=\"#用到的知识\" class=\"headerlink\" title=\"用到的知识\"></a>用到的知识</h2><p>css</p>\n<blockquote>\n<p><a href=\"https://www.runoob.com/cssref/pr-class-position.html\">position</a></p>\n</blockquote>\n<p>js</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop\">scrollTop</a></p>\n</blockquote>\n<ul>\n<li>获取滚动条滚动过的height</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/jsref/met-win-scrollto.html\">scrollTo</a></p>\n</blockquote>\n<ul>\n<li>scrollTo() 方法可把内容滚动到指定的坐标。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/jsref/event-onwheel.html\">onwheel</a></p>\n</blockquote>\n<ul>\n<li>鼠标滑轮滚动事件</li>\n<li>onmousewheel注意，有些文章是写的这个事件，该事件已经废弃(但是有的环境还是可以用)，换成了onwheel</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs css\">...<br><span class=\"hljs-comment\">/* 页面主要内容 */</span><br><span class=\"hljs-selector-class\">.con</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>    <span class=\"hljs-comment\">/* 让页面出现滚动条 */</span><br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">1100vh</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: lightcoral;<br>&#125;<br><span class=\"hljs-comment\">/* 浮动功能栏样式  */</span><br><span class=\"hljs-selector-class\">.float</span> &#123;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">position</span>: fixed;<br>    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">70vh</span>;<br>    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">5vw</span>;<br>    <span class=\"hljs-comment\">/* 默认不显示 */</span><br>    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">0.5s</span>;<br>&#125;<br><span class=\"hljs-comment\">/* 其他样式 */</span><br><span class=\"hljs-selector-tag\">li</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">text-align</span>: center;<br>    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">list-style</span>: none;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ffffff</span>;<br>    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;<br>    <span class=\"hljs-attribute\">cursor</span>: pointer;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;con&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;con&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;float&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;backtop&quot;</span>&gt;</span>BACK<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> con = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#con&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> float = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#float&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> backtop = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#backtop&#x27;</span>);<br><span class=\"hljs-comment\">// des:设置浮动功能栏的显示/隐藏</span><br><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">op, zi</span>) </span>&#123;<br>    float.style.opacity = op;<br>    float.style.zIndex = zi;<br>&#125;<br><span class=\"hljs-comment\">// 点击back返回顶部</span><br>backtop.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 1.document.documentElement.scrollTop = 0;</span><br>    <span class=\"hljs-comment\">// 2.scrollTo返回</span><br>    scrollTo(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-comment\">// 返回后隐藏</span><br>    set(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>&#125;);<br><span class=\"hljs-comment\">// 这里更好的效果是换成window的滚动条事件,这样无论是鼠标滑轮还是，键盘翻页键，还是点击滚动条都可以触发</span><br><span class=\"hljs-comment\">// window.addEventListener(&quot;scroll&quot;,***)</span><br>con.addEventListener(<span class=\"hljs-string\">&#x27;wheel&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 获取可视区域宽高</span><br>    <span class=\"hljs-keyword\">let</span> viewHeight = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;<br>    <span class=\"hljs-comment\">// 获取已经滚动条滚动了的高度</span><br>    <span class=\"hljs-keyword\">let</span> scrowHeight = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop;<br>    <span class=\"hljs-comment\">// 获取文档高</span><br>    <span class=\"hljs-keyword\">let</span> documentHeight = <span class=\"hljs-built_in\">document</span>.body.clientHeight;<br>    <span class=\"hljs-keyword\">if</span> (scrowHeight === <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 隐藏按钮</span><br>        set(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 显示按钮</span><br>        set(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">99</span>);<br>    &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1970,"excerpt":"<h1 id=\"关于命名\"><a href=\"#关于命名\" class=\"headerlink\" title=\"关于命名\"></a>关于命名</h1><p>我也不知道这个具体的名字叫什么，就按照它的功能起了这么个简单的名字，防止说不清楚，大概解释一下是什么东西。就是在很多网页，我们往下滑时，会在页面的固定位置出现一个(一栏、一片等！)按钮，里面有帮助回到网页顶部的，还有联系网站客服等等的操作。</p>\n<p>像这样<br><img src=\"/img/juejin.png\" alt=\"掘金\"></p>","more":"<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><blockquote>\n<p><strong>问题</strong></p>\n</blockquote>\n<ul>\n<li>首先就是根据喜好做一排这样的区域(自行发挥)</li>\n<li>其次就是确定它要出现的位置(<font color='red'> <em>重点</em></font> )即可。</li>\n<li>还有几个小细节，就是当回到页面顶部时，这一部分区域会隐藏，当再次滑动到页面非顶部的位置是，又会再一次出现。</li>\n</ul>\n<blockquote>\n<p><strong>解决</strong></p>\n</blockquote>\n<ul>\n<li>固定位置：通过position的fixed固定</li>\n<li>通过opacity控制显示显示/隐藏</li>\n<li>判断何时显示/隐藏:通过获取滚动条滚动的height判断</li>\n</ul>\n<h2 id=\"用到的知识\"><a href=\"#用到的知识\" class=\"headerlink\" title=\"用到的知识\"></a>用到的知识</h2><p>css</p>\n<blockquote>\n<p><a href=\"https://www.runoob.com/cssref/pr-class-position.html\">position</a></p>\n</blockquote>\n<p>js</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop\">scrollTop</a></p>\n</blockquote>\n<ul>\n<li>获取滚动条滚动过的height</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/jsref/met-win-scrollto.html\">scrollTo</a></p>\n</blockquote>\n<ul>\n<li>scrollTo() 方法可把内容滚动到指定的坐标。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/jsref/event-onwheel.html\">onwheel</a></p>\n</blockquote>\n<ul>\n<li>鼠标滑轮滚动事件</li>\n<li>onmousewheel注意，有些文章是写的这个事件，该事件已经废弃(但是有的环境还是可以用)，换成了onwheel</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">...<br><span class=\"hljs-comment\">/* 页面主要内容 */</span><br><span class=\"hljs-selector-class\">.con</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>    <span class=\"hljs-comment\">/* 让页面出现滚动条 */</span><br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">1100vh</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: lightcoral;<br>&#125;<br><span class=\"hljs-comment\">/* 浮动功能栏样式  */</span><br><span class=\"hljs-selector-class\">.float</span> &#123;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">position</span>: fixed;<br>    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">70vh</span>;<br>    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">5vw</span>;<br>    <span class=\"hljs-comment\">/* 默认不显示 */</span><br>    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">0.5s</span>;<br>&#125;<br><span class=\"hljs-comment\">/* 其他样式 */</span><br><span class=\"hljs-selector-tag\">li</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">text-align</span>: center;<br>    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">list-style</span>: none;<br>    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ffffff</span>;<br>    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;<br>    <span class=\"hljs-attribute\">cursor</span>: pointer;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;con&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;con&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;float&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;backtop&quot;</span>&gt;</span>BACK<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> con = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#con&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> float = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#float&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> backtop = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#backtop&#x27;</span>);<br><span class=\"hljs-comment\">// des:设置浮动功能栏的显示/隐藏</span><br><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">op, zi</span>) </span>&#123;<br>    float.style.opacity = op;<br>    float.style.zIndex = zi;<br>&#125;<br><span class=\"hljs-comment\">// 点击back返回顶部</span><br>backtop.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 1.document.documentElement.scrollTop = 0;</span><br>    <span class=\"hljs-comment\">// 2.scrollTo返回</span><br>    scrollTo(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-comment\">// 返回后隐藏</span><br>    set(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>&#125;);<br><span class=\"hljs-comment\">// 这里更好的效果是换成window的滚动条事件,这样无论是鼠标滑轮还是，键盘翻页键，还是点击滚动条都可以触发</span><br><span class=\"hljs-comment\">// window.addEventListener(&quot;scroll&quot;,***)</span><br>con.addEventListener(<span class=\"hljs-string\">&#x27;wheel&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 获取可视区域宽高</span><br>    <span class=\"hljs-keyword\">let</span> viewHeight = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;<br>    <span class=\"hljs-comment\">// 获取已经滚动条滚动了的高度</span><br>    <span class=\"hljs-keyword\">let</span> scrowHeight = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop;<br>    <span class=\"hljs-comment\">// 获取文档高</span><br>    <span class=\"hljs-keyword\">let</span> documentHeight = <span class=\"hljs-built_in\">document</span>.body.clientHeight;<br>    <span class=\"hljs-keyword\">if</span> (scrowHeight === <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 隐藏按钮</span><br>        set(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 显示按钮</span><br>        set(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">99</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>"},{"title":"网页浏览进度条","abbrlink":55282,"date":"2019-11-19T12:48:17.000Z","_content":"\n# 网页浏览进度条\n在很多网站都能看到网站的顶部，有一条会随着页面滚动条的滑动，边长变短的一栏区域，这个可以有效的让用户看到，自己已经浏览了这个文章内容的多少。虽然网站右边都有一个滚动条了，干嘛还要这个东西呢，大概就是为了好看吧！今天来实现这个小demo！\n<!-- more -->\n\n## 用到的知识\ncss\n>[position:fixed](https://www.runoob.com/cssref/pr-class-position.html)\n- 固定div在某个位置\n\njs\n>[document.documentElement.scrollTop](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop)\n- 获取滚动条滚动过的height(width)\n\n>[document.body.clientHeight](https://www.runoob.com/js/js-window.html)\n- 获取当前文档的height(width)\n\n>[document.documentElement.clientHeight](https://www.runoob.com/js/js-window.html)\n- 获取当前可视窗口的height(width)\n\n>[scroll](https://www.runoob.com/jsref/event-onscroll.html)\n- 当页面滚动条发生移动时，触发\n\n## 分析\n>问题\n- 固定我们的进度条在页面的顶部\n- 如何让进度条在每次滚动条滚动时，发生变化\n- 变化时，变化多少\n\n>解决\n- 通过设置position:fixed;top:0;固定位置\n- 通过给window绑定scoll事件来实时改变进度条长度\n- 变化多少：设置进度条初始长度为100vw，这样在什么显示器，宽度都会占满显示器，其次在获取当前可视窗口的height和当前网页的总height；之后通过 (文档总长-屏幕可视窗口height)/当前屏width；计算出进度条和文档长的比例关系。来控制每次进度条应该变化多少。\n\n![实例](/img/19-11-19.jpg)\n\n## 代码\nCSS\n```css\nbody {\n    margin: 0 auto;\n    padding: 0;\n    overflow-x: hidden;\n    position: relative;\n}\n\n.con {\n    width: 100vw;\n    /* 让页面出现滚动条 */\n    height: 1000vh;\n    background-color: lightblue;\n}\n\n.top {\n    position: fixed;\n    top: 0;\n    width: 100vw;\n    height: 5px;\n    background-color: lightcoral;\n}\n\n```\nHTML\n```html\n<!-- 进度条 -->\n<div class=\"top\" id=\"top\"></div>\n<!-- 网站内容 -->\n<div class=\"con\" id=\"con\"></div>\n```\nJS\n```js\nlet slip = document.querySelector('#top');\nlet con = document.querySelector('#con');\nlet viewHeight = document.documentElement.clientHeight;\n// 获取当前屏宽\nlet slipWidth = slip.clientWidth;\n// 获取文档总长\nlet documentHeight = document.body.clientHeight;\n// (文档总长-屏幕可视窗口height)/当前屏width\nlet prop = slipWidth / (documentHeight - viewHeight);\n// 初始化 让top宽度变为0\nslip.style.width = 0;\n// 设置宽度\nlet setWith = (dom, h) => {\n    dom.style.width = `${h}px`;\n    dom.style.transition = \"width 0.5s\";\n};\nwindow.addEventListener(\"scroll\", () => {\n    // 实时获取滑动的高度\n    let scroHeight = document.documentElement.scrollTop;\n    setWith(slip, scroHeight * prop);\n});\n```\n","source":"_posts/css/网页浏览进度.md","raw":"---\ntitle: 网页浏览进度条\ntag:\n  - CSS&HTML\n  - JavaScript\nabbrlink: 55282\ndate: 2019-11-19 20:48:17\ncategory:\n    - 技术笔记\n---\n\n# 网页浏览进度条\n在很多网站都能看到网站的顶部，有一条会随着页面滚动条的滑动，边长变短的一栏区域，这个可以有效的让用户看到，自己已经浏览了这个文章内容的多少。虽然网站右边都有一个滚动条了，干嘛还要这个东西呢，大概就是为了好看吧！今天来实现这个小demo！\n<!-- more -->\n\n## 用到的知识\ncss\n>[position:fixed](https://www.runoob.com/cssref/pr-class-position.html)\n- 固定div在某个位置\n\njs\n>[document.documentElement.scrollTop](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop)\n- 获取滚动条滚动过的height(width)\n\n>[document.body.clientHeight](https://www.runoob.com/js/js-window.html)\n- 获取当前文档的height(width)\n\n>[document.documentElement.clientHeight](https://www.runoob.com/js/js-window.html)\n- 获取当前可视窗口的height(width)\n\n>[scroll](https://www.runoob.com/jsref/event-onscroll.html)\n- 当页面滚动条发生移动时，触发\n\n## 分析\n>问题\n- 固定我们的进度条在页面的顶部\n- 如何让进度条在每次滚动条滚动时，发生变化\n- 变化时，变化多少\n\n>解决\n- 通过设置position:fixed;top:0;固定位置\n- 通过给window绑定scoll事件来实时改变进度条长度\n- 变化多少：设置进度条初始长度为100vw，这样在什么显示器，宽度都会占满显示器，其次在获取当前可视窗口的height和当前网页的总height；之后通过 (文档总长-屏幕可视窗口height)/当前屏width；计算出进度条和文档长的比例关系。来控制每次进度条应该变化多少。\n\n![实例](/img/19-11-19.jpg)\n\n## 代码\nCSS\n```css\nbody {\n    margin: 0 auto;\n    padding: 0;\n    overflow-x: hidden;\n    position: relative;\n}\n\n.con {\n    width: 100vw;\n    /* 让页面出现滚动条 */\n    height: 1000vh;\n    background-color: lightblue;\n}\n\n.top {\n    position: fixed;\n    top: 0;\n    width: 100vw;\n    height: 5px;\n    background-color: lightcoral;\n}\n\n```\nHTML\n```html\n<!-- 进度条 -->\n<div class=\"top\" id=\"top\"></div>\n<!-- 网站内容 -->\n<div class=\"con\" id=\"con\"></div>\n```\nJS\n```js\nlet slip = document.querySelector('#top');\nlet con = document.querySelector('#con');\nlet viewHeight = document.documentElement.clientHeight;\n// 获取当前屏宽\nlet slipWidth = slip.clientWidth;\n// 获取文档总长\nlet documentHeight = document.body.clientHeight;\n// (文档总长-屏幕可视窗口height)/当前屏width\nlet prop = slipWidth / (documentHeight - viewHeight);\n// 初始化 让top宽度变为0\nslip.style.width = 0;\n// 设置宽度\nlet setWith = (dom, h) => {\n    dom.style.width = `${h}px`;\n    dom.style.transition = \"width 0.5s\";\n};\nwindow.addEventListener(\"scroll\", () => {\n    // 实时获取滑动的高度\n    let scroHeight = document.documentElement.scrollTop;\n    setWith(slip, scroHeight * prop);\n});\n```\n","slug":"css/网页浏览进度","published":1,"updated":"2021-12-31T12:01:59.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv15000mj7jf47wafyoa","content":"<h1 id=\"网页浏览进度条\"><a href=\"#网页浏览进度条\" class=\"headerlink\" title=\"网页浏览进度条\"></a>网页浏览进度条</h1><p>在很多网站都能看到网站的顶部，有一条会随着页面滚动条的滑动，边长变短的一栏区域，这个可以有效的让用户看到，自己已经浏览了这个文章内容的多少。虽然网站右边都有一个滚动条了，干嘛还要这个东西呢，大概就是为了好看吧！今天来实现这个小demo！</p>\n<a id=\"more\"></a>\n\n<h2 id=\"用到的知识\"><a href=\"#用到的知识\" class=\"headerlink\" title=\"用到的知识\"></a>用到的知识</h2><p>css</p>\n<blockquote>\n<p><a href=\"https://www.runoob.com/cssref/pr-class-position.html\">position:fixed</a></p>\n</blockquote>\n<ul>\n<li>固定div在某个位置</li>\n</ul>\n<p>js</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop\">document.documentElement.scrollTop</a></p>\n</blockquote>\n<ul>\n<li>获取滚动条滚动过的height(width)</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/js/js-window.html\">document.body.clientHeight</a></p>\n</blockquote>\n<ul>\n<li>获取当前文档的height(width)</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/js/js-window.html\">document.documentElement.clientHeight</a></p>\n</blockquote>\n<ul>\n<li>获取当前可视窗口的height(width)</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/jsref/event-onscroll.html\">scroll</a></p>\n</blockquote>\n<ul>\n<li>当页面滚动条发生移动时，触发</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>问题</p>\n</blockquote>\n<ul>\n<li>固定我们的进度条在页面的顶部</li>\n<li>如何让进度条在每次滚动条滚动时，发生变化</li>\n<li>变化时，变化多少</li>\n</ul>\n<blockquote>\n<p>解决</p>\n</blockquote>\n<ul>\n<li>通过设置position:fixed;top:0;固定位置</li>\n<li>通过给window绑定scoll事件来实时改变进度条长度</li>\n<li>变化多少：设置进度条初始长度为100vw，这样在什么显示器，宽度都会占满显示器，其次在获取当前可视窗口的height和当前网页的总height；之后通过 (文档总长-屏幕可视窗口height)/当前屏width；计算出进度条和文档长的比例关系。来控制每次进度条应该变化多少。</li>\n</ul>\n<p><img src=\"/img/19-11-19.jpg\" alt=\"实例\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span> &#123;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">overflow-x</span>: hidden;<br>    <span class=\"hljs-attribute\">position</span>: relative;<br>&#125;<br><br><span class=\"hljs-selector-class\">.con</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>    <span class=\"hljs-comment\">/* 让页面出现滚动条 */</span><br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">1000vh</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: lightblue;<br>&#125;<br><br><span class=\"hljs-selector-class\">.top</span> &#123;<br>    <span class=\"hljs-attribute\">position</span>: fixed;<br>    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">5px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: lightcoral;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 进度条 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;top&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;top&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 网站内容 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;con&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;con&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> slip = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#top&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> con = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#con&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> viewHeight = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;<br><span class=\"hljs-comment\">// 获取当前屏宽</span><br><span class=\"hljs-keyword\">let</span> slipWidth = slip.clientWidth;<br><span class=\"hljs-comment\">// 获取文档总长</span><br><span class=\"hljs-keyword\">let</span> documentHeight = <span class=\"hljs-built_in\">document</span>.body.clientHeight;<br><span class=\"hljs-comment\">// (文档总长-屏幕可视窗口height)/当前屏width</span><br><span class=\"hljs-keyword\">let</span> prop = slipWidth / (documentHeight - viewHeight);<br><span class=\"hljs-comment\">// 初始化 让top宽度变为0</span><br>slip.style.width = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">// 设置宽度</span><br><span class=\"hljs-keyword\">let</span> setWith = <span class=\"hljs-function\">(<span class=\"hljs-params\">dom, h</span>) =&gt;</span> &#123;<br>    dom.style.width = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;h&#125;</span>px`</span>;<br>    dom.style.transition = <span class=\"hljs-string\">&quot;width 0.5s&quot;</span>;<br>&#125;;<br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&quot;scroll&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// 实时获取滑动的高度</span><br>    <span class=\"hljs-keyword\">let</span> scroHeight = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop;<br>    setWith(slip, scroHeight * prop);<br>&#125;);<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1688,"excerpt":"<h1 id=\"网页浏览进度条\"><a href=\"#网页浏览进度条\" class=\"headerlink\" title=\"网页浏览进度条\"></a>网页浏览进度条</h1><p>在很多网站都能看到网站的顶部，有一条会随着页面滚动条的滑动，边长变短的一栏区域，这个可以有效的让用户看到，自己已经浏览了这个文章内容的多少。虽然网站右边都有一个滚动条了，干嘛还要这个东西呢，大概就是为了好看吧！今天来实现这个小demo！</p>","more":"<h2 id=\"用到的知识\"><a href=\"#用到的知识\" class=\"headerlink\" title=\"用到的知识\"></a>用到的知识</h2><p>css</p>\n<blockquote>\n<p><a href=\"https://www.runoob.com/cssref/pr-class-position.html\">position:fixed</a></p>\n</blockquote>\n<ul>\n<li>固定div在某个位置</li>\n</ul>\n<p>js</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop\">document.documentElement.scrollTop</a></p>\n</blockquote>\n<ul>\n<li>获取滚动条滚动过的height(width)</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/js/js-window.html\">document.body.clientHeight</a></p>\n</blockquote>\n<ul>\n<li>获取当前文档的height(width)</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/js/js-window.html\">document.documentElement.clientHeight</a></p>\n</blockquote>\n<ul>\n<li>获取当前可视窗口的height(width)</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.runoob.com/jsref/event-onscroll.html\">scroll</a></p>\n</blockquote>\n<ul>\n<li>当页面滚动条发生移动时，触发</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>问题</p>\n</blockquote>\n<ul>\n<li>固定我们的进度条在页面的顶部</li>\n<li>如何让进度条在每次滚动条滚动时，发生变化</li>\n<li>变化时，变化多少</li>\n</ul>\n<blockquote>\n<p>解决</p>\n</blockquote>\n<ul>\n<li>通过设置position:fixed;top:0;固定位置</li>\n<li>通过给window绑定scoll事件来实时改变进度条长度</li>\n<li>变化多少：设置进度条初始长度为100vw，这样在什么显示器，宽度都会占满显示器，其次在获取当前可视窗口的height和当前网页的总height；之后通过 (文档总长-屏幕可视窗口height)/当前屏width；计算出进度条和文档长的比例关系。来控制每次进度条应该变化多少。</li>\n</ul>\n<p><img src=\"/img/19-11-19.jpg\" alt=\"实例\"></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span> &#123;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">overflow-x</span>: hidden;<br>    <span class=\"hljs-attribute\">position</span>: relative;<br>&#125;<br><br><span class=\"hljs-selector-class\">.con</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>    <span class=\"hljs-comment\">/* 让页面出现滚动条 */</span><br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">1000vh</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: lightblue;<br>&#125;<br><br><span class=\"hljs-selector-class\">.top</span> &#123;<br>    <span class=\"hljs-attribute\">position</span>: fixed;<br>    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">5px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: lightcoral;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 进度条 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;top&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;top&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 网站内容 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;con&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;con&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> slip = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#top&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> con = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#con&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> viewHeight = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;<br><span class=\"hljs-comment\">// 获取当前屏宽</span><br><span class=\"hljs-keyword\">let</span> slipWidth = slip.clientWidth;<br><span class=\"hljs-comment\">// 获取文档总长</span><br><span class=\"hljs-keyword\">let</span> documentHeight = <span class=\"hljs-built_in\">document</span>.body.clientHeight;<br><span class=\"hljs-comment\">// (文档总长-屏幕可视窗口height)/当前屏width</span><br><span class=\"hljs-keyword\">let</span> prop = slipWidth / (documentHeight - viewHeight);<br><span class=\"hljs-comment\">// 初始化 让top宽度变为0</span><br>slip.style.width = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">// 设置宽度</span><br><span class=\"hljs-keyword\">let</span> setWith = <span class=\"hljs-function\">(<span class=\"hljs-params\">dom, h</span>) =&gt;</span> &#123;<br>    dom.style.width = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;h&#125;</span>px`</span>;<br>    dom.style.transition = <span class=\"hljs-string\">&quot;width 0.5s&quot;</span>;<br>&#125;;<br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&quot;scroll&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">// 实时获取滑动的高度</span><br>    <span class=\"hljs-keyword\">let</span> scroHeight = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop;<br>    setWith(slip, scroHeight * prop);<br>&#125;);<br></code></pre></td></tr></table></figure>"},{"title":"动态设置背景图容器大小","abbrlink":37475,"date":"2019-11-18T13:11:49.000Z","_content":"\n# 起因\n最近在做一个官网的效果的时候，出现了背景图过大，导致不同显示器显示的图片大小不一样，和影响下面内容的布局问题。所以记录一下这个坑。\n\n<!-- more -->\n## 用到的知识\ncss3\n>[background-position](https://www.runoob.com/cssref/pr-background-position.html):指定背景图像位置\n>[background-size](https://www.runoob.com/cssref/css3-pr-background-size.html):指定背景图像的大小\n\njs\n> [onresize](https://www.runoob.com/jsref/event-onresize.html):当窗口大小发生变化时触发某一段代码\n\n## 分析\n>***问题***\n- 遇到的问题是，1.图片不能根据不同的显示器(不同的窗口大小)，调整最佳的大小而显示。2.背景图的容器不能根据不同的显示器(不同的窗口大小)，调整自身大小，导致影响下面内容的布局。\n\n>***解决***\n- 第一个问题可以通过上述提到的两个css的属性来做，第二个问题通过获取背景容器的宽度，再根据图片的比例，来计算适合的高度即可。\n\n## 代码演示\nCSS\n```css\n/* 设置背景容器样式 */\n.banner {\n    width: 100vw;\n    /* 最大宽度为图片本身宽度 */\n    max-height: 520px;\n    /* 最大高度为图片最大高度 */\n    max-width: 1920px;\n    background: url('./banner1.png') no-repeat;\n    /* 设置图片位置 为容器 居中 顶部 */\n    background-position: center top;\n    /* 设置图片一直以合适的比例在容器中显示 */\n    background-size: contain;\n}\n```\nHTML\n```html\n<div class=\"banner\" id=\"banner\">\n</div>\n```\nJS\n```js\nlet changeH = function () {\n    let banner = document.querySelector('#banner');\n    // 获取banner的宽度\n    let width = banner.clientWidth;\n    // 计算图片宽高比例\n    let prop = parseInt(1920 / 520);\n    // 获取当前宽度下合适的高度\n    let height = parseInt(width / prop);\n    // 设置容器高度\n    banner.style.height = height + 'px';\n};\n// 初始化容器高度\nlet init = function () {\n    changeH();\n};\ninit();\n// 监听窗口大小变化 一旦变化就触发内部的函数\nwindow.onresize = function () {\n    changeH();\n}\n```\n\n## 在Vue中使用\n可以在组件的mounted中使用onresize事件，在通过this.$refs来获取到你的容器，然后操作就是一样了\n\n","source":"_posts/css/动态设置背景图容器大小.md","raw":"---\ntitle: 动态设置背景图容器大小\ntag:\n  - CSS&HTML\n  - JavaScript\nabbrlink: 37475\ndate: 2019-11-18 21:11:49\ncategory:\n    - 技术笔记\n---\n\n# 起因\n最近在做一个官网的效果的时候，出现了背景图过大，导致不同显示器显示的图片大小不一样，和影响下面内容的布局问题。所以记录一下这个坑。\n\n<!-- more -->\n## 用到的知识\ncss3\n>[background-position](https://www.runoob.com/cssref/pr-background-position.html):指定背景图像位置\n>[background-size](https://www.runoob.com/cssref/css3-pr-background-size.html):指定背景图像的大小\n\njs\n> [onresize](https://www.runoob.com/jsref/event-onresize.html):当窗口大小发生变化时触发某一段代码\n\n## 分析\n>***问题***\n- 遇到的问题是，1.图片不能根据不同的显示器(不同的窗口大小)，调整最佳的大小而显示。2.背景图的容器不能根据不同的显示器(不同的窗口大小)，调整自身大小，导致影响下面内容的布局。\n\n>***解决***\n- 第一个问题可以通过上述提到的两个css的属性来做，第二个问题通过获取背景容器的宽度，再根据图片的比例，来计算适合的高度即可。\n\n## 代码演示\nCSS\n```css\n/* 设置背景容器样式 */\n.banner {\n    width: 100vw;\n    /* 最大宽度为图片本身宽度 */\n    max-height: 520px;\n    /* 最大高度为图片最大高度 */\n    max-width: 1920px;\n    background: url('./banner1.png') no-repeat;\n    /* 设置图片位置 为容器 居中 顶部 */\n    background-position: center top;\n    /* 设置图片一直以合适的比例在容器中显示 */\n    background-size: contain;\n}\n```\nHTML\n```html\n<div class=\"banner\" id=\"banner\">\n</div>\n```\nJS\n```js\nlet changeH = function () {\n    let banner = document.querySelector('#banner');\n    // 获取banner的宽度\n    let width = banner.clientWidth;\n    // 计算图片宽高比例\n    let prop = parseInt(1920 / 520);\n    // 获取当前宽度下合适的高度\n    let height = parseInt(width / prop);\n    // 设置容器高度\n    banner.style.height = height + 'px';\n};\n// 初始化容器高度\nlet init = function () {\n    changeH();\n};\ninit();\n// 监听窗口大小变化 一旦变化就触发内部的函数\nwindow.onresize = function () {\n    changeH();\n}\n```\n\n## 在Vue中使用\n可以在组件的mounted中使用onresize事件，在通过this.$refs来获取到你的容器，然后操作就是一样了\n\n","slug":"css/动态设置背景图容器大小","published":1,"updated":"2021-12-31T12:01:59.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv16000pj7jf9k974aob","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>最近在做一个官网的效果的时候，出现了背景图过大，导致不同显示器显示的图片大小不一样，和影响下面内容的布局问题。所以记录一下这个坑。</p>\n<a id=\"more\"></a>\n<h2 id=\"用到的知识\"><a href=\"#用到的知识\" class=\"headerlink\" title=\"用到的知识\"></a>用到的知识</h2><p>css3</p>\n<blockquote>\n<p><a href=\"https://www.runoob.com/cssref/pr-background-position.html\">background-position</a>:指定背景图像位置<br><a href=\"https://www.runoob.com/cssref/css3-pr-background-size.html\">background-size</a>:指定背景图像的大小</p>\n</blockquote>\n<p>js</p>\n<blockquote>\n<p><a href=\"https://www.runoob.com/jsref/event-onresize.html\">onresize</a>:当窗口大小发生变化时触发某一段代码</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p><strong><em>问题</em></strong></p>\n</blockquote>\n<ul>\n<li>遇到的问题是，1.图片不能根据不同的显示器(不同的窗口大小)，调整最佳的大小而显示。2.背景图的容器不能根据不同的显示器(不同的窗口大小)，调整自身大小，导致影响下面内容的布局。</li>\n</ul>\n<blockquote>\n<p><strong><em>解决</em></strong></p>\n</blockquote>\n<ul>\n<li>第一个问题可以通过上述提到的两个css的属性来做，第二个问题通过获取背景容器的宽度，再根据图片的比例，来计算适合的高度即可。</li>\n</ul>\n<h2 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h2><p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 设置背景容器样式 */</span><br><span class=\"hljs-selector-class\">.banner</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>    <span class=\"hljs-comment\">/* 最大宽度为图片本身宽度 */</span><br>    <span class=\"hljs-attribute\">max-height</span>: <span class=\"hljs-number\">520px</span>;<br>    <span class=\"hljs-comment\">/* 最大高度为图片最大高度 */</span><br>    <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">1920px</span>;<br>    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">&#x27;./banner1.png&#x27;</span>) no-repeat;<br>    <span class=\"hljs-comment\">/* 设置图片位置 为容器 居中 顶部 */</span><br>    <span class=\"hljs-attribute\">background-position</span>: center top;<br>    <span class=\"hljs-comment\">/* 设置图片一直以合适的比例在容器中显示 */</span><br>    <span class=\"hljs-attribute\">background-size</span>: contain;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;banner&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;banner&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> changeH = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> banner = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#banner&#x27;</span>);<br>    <span class=\"hljs-comment\">// 获取banner的宽度</span><br>    <span class=\"hljs-keyword\">let</span> width = banner.clientWidth;<br>    <span class=\"hljs-comment\">// 计算图片宽高比例</span><br>    <span class=\"hljs-keyword\">let</span> prop = <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-number\">1920</span> / <span class=\"hljs-number\">520</span>);<br>    <span class=\"hljs-comment\">// 获取当前宽度下合适的高度</span><br>    <span class=\"hljs-keyword\">let</span> height = <span class=\"hljs-built_in\">parseInt</span>(width / prop);<br>    <span class=\"hljs-comment\">// 设置容器高度</span><br>    banner.style.height = height + <span class=\"hljs-string\">&#x27;px&#x27;</span>;<br>&#125;;<br><span class=\"hljs-comment\">// 初始化容器高度</span><br><span class=\"hljs-keyword\">let</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    changeH();<br>&#125;;<br>init();<br><span class=\"hljs-comment\">// 监听窗口大小变化 一旦变化就触发内部的函数</span><br><span class=\"hljs-built_in\">window</span>.onresize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    changeH();<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"在Vue中使用\"><a href=\"#在Vue中使用\" class=\"headerlink\" title=\"在Vue中使用\"></a>在Vue中使用</h2><p>可以在组件的mounted中使用onresize事件，在通过this.$refs来获取到你的容器，然后操作就是一样了</p>\n","site":{"data":{}},"wordcount":1149,"excerpt":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>最近在做一个官网的效果的时候，出现了背景图过大，导致不同显示器显示的图片大小不一样，和影响下面内容的布局问题。所以记录一下这个坑。</p>","more":"<h2 id=\"用到的知识\"><a href=\"#用到的知识\" class=\"headerlink\" title=\"用到的知识\"></a>用到的知识</h2><p>css3</p>\n<blockquote>\n<p><a href=\"https://www.runoob.com/cssref/pr-background-position.html\">background-position</a>:指定背景图像位置<br><a href=\"https://www.runoob.com/cssref/css3-pr-background-size.html\">background-size</a>:指定背景图像的大小</p>\n</blockquote>\n<p>js</p>\n<blockquote>\n<p><a href=\"https://www.runoob.com/jsref/event-onresize.html\">onresize</a>:当窗口大小发生变化时触发某一段代码</p>\n</blockquote>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p><strong><em>问题</em></strong></p>\n</blockquote>\n<ul>\n<li>遇到的问题是，1.图片不能根据不同的显示器(不同的窗口大小)，调整最佳的大小而显示。2.背景图的容器不能根据不同的显示器(不同的窗口大小)，调整自身大小，导致影响下面内容的布局。</li>\n</ul>\n<blockquote>\n<p><strong><em>解决</em></strong></p>\n</blockquote>\n<ul>\n<li>第一个问题可以通过上述提到的两个css的属性来做，第二个问题通过获取背景容器的宽度，再根据图片的比例，来计算适合的高度即可。</li>\n</ul>\n<h2 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h2><p>CSS</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 设置背景容器样式 */</span><br><span class=\"hljs-selector-class\">.banner</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100vw</span>;<br>    <span class=\"hljs-comment\">/* 最大宽度为图片本身宽度 */</span><br>    <span class=\"hljs-attribute\">max-height</span>: <span class=\"hljs-number\">520px</span>;<br>    <span class=\"hljs-comment\">/* 最大高度为图片最大高度 */</span><br>    <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">1920px</span>;<br>    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">&#x27;./banner1.png&#x27;</span>) no-repeat;<br>    <span class=\"hljs-comment\">/* 设置图片位置 为容器 居中 顶部 */</span><br>    <span class=\"hljs-attribute\">background-position</span>: center top;<br>    <span class=\"hljs-comment\">/* 设置图片一直以合适的比例在容器中显示 */</span><br>    <span class=\"hljs-attribute\">background-size</span>: contain;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;banner&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;banner&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>JS</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> changeH = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> banner = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#banner&#x27;</span>);<br>    <span class=\"hljs-comment\">// 获取banner的宽度</span><br>    <span class=\"hljs-keyword\">let</span> width = banner.clientWidth;<br>    <span class=\"hljs-comment\">// 计算图片宽高比例</span><br>    <span class=\"hljs-keyword\">let</span> prop = <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-number\">1920</span> / <span class=\"hljs-number\">520</span>);<br>    <span class=\"hljs-comment\">// 获取当前宽度下合适的高度</span><br>    <span class=\"hljs-keyword\">let</span> height = <span class=\"hljs-built_in\">parseInt</span>(width / prop);<br>    <span class=\"hljs-comment\">// 设置容器高度</span><br>    banner.style.height = height + <span class=\"hljs-string\">&#x27;px&#x27;</span>;<br>&#125;;<br><span class=\"hljs-comment\">// 初始化容器高度</span><br><span class=\"hljs-keyword\">let</span> init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    changeH();<br>&#125;;<br>init();<br><span class=\"hljs-comment\">// 监听窗口大小变化 一旦变化就触发内部的函数</span><br><span class=\"hljs-built_in\">window</span>.onresize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    changeH();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"在Vue中使用\"><a href=\"#在Vue中使用\" class=\"headerlink\" title=\"在Vue中使用\"></a>在Vue中使用</h2><p>可以在组件的mounted中使用onresize事件，在通过this.$refs来获取到你的容器，然后操作就是一样了</p>"},{"title":"网格布局","date":"2020-11-01T03:36:38.000Z","_content":"\n最近看[张鑫旭](https://www.zhangxinxu.com/)前辈的博客，感觉又找回最开始学习HTML&CSS时候的感觉，好玩有趣；然后就想起了一直听过但没写过的网格布局，记录一下。\n\n<!-- more -->\n\n# [网格布局](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)\n- 和弹性盒子（flex）一样官方提供的方便布局的新属性 display:grid\n- 如名字一样，开启该属性后会将目标dom设置成由一个一个单元格组成的一个布局容器\n\n# 基本概念\n- 容器：开启了grid的dom；内部由数个单元格组成\n- 行：单元格水平排列\n- 列：单元格纵向排列\n- 网格线：容器下的每个项目都分布在每个单元格中，开发这模式可以看到该线![](http://img.shuaxindiary.cn/grid-line.png)\n\n# 基本使用\n\n### demo1\n- 效果：![](http://img.shuaxindiary.cn/grid-demo1.png)\n- 说明：特殊的布局\n```html\n<style>\n    #app {\n        width: 500px;\n        height: 500px;\n        margin: 0 auto;\n        /* 开启网格布其 */\n        display: grid;\n        /* 定义单元格名称以及在容器中的分布 */\n        grid-template-areas: 'a a b''a a c''d e c';\n    }\n    #app>div:nth-child(1) {\n        /* 定义当前单元格在容器中的分布区域 */\n        grid-area: a;\n    }\n\n    #app>div:nth-child(2) {\n        grid-area: b;\n    }\n\n    #app>div:nth-child(3) {\n        grid-area: c;\n    }\n\n    #app>div:nth-child(4) {\n        grid-area: d;\n    }\n\n    #app>div:nth-child(5) {\n        grid-area: e;\n    }\n</style>\n<body>\n    <div id=\"app\">\n        <div style=\"background-color: lightblue;\">1</div>\n        <div style=\"background-color: lightcoral;\">2</div>\n        <div style=\"background-color: lightgoldenrodyellow;\">3</div>\n        <div style=\"background-color: lightgrey;\">4</div>\n        <div style=\"background-color: lightsalmon;\">5</div>\n    </div>\n</body>\n```\n\n### demo2\n- 效果：![](http://img.shuaxindiary.cn/grid-demo2.png)\n- 说明：一个九宫格，里面每个单元格之间的间距都是一样的\n```html\n<style>\n    #app {\n        width: 420px;\n        height: 420px;\n        padding: 20px;\n        margin: 0 auto;\n        /* 开启grid */\n        display: grid;\n        /* 设置有几行 每一行的宽度 */\n        /* repeat是提供的一个方便书写的函数 第一个参数为设置几行（列）第二个参数为具体的值 */\n        grid-template-rows: repeat(3, 140px);\n        /* 同理 列 */\n        grid-template-columns: repeat(3, 140px);\n        /* 设置单元格内的元素排列方式 和flex类似 */\n        align-items: center;\n        border: 1px solid lightsalmon;\n    }\n\n    #app>div {\n        width: 100px;\n        height: 100px;\n        margin: 0 auto;\n        background-color: lightsalmon;\n    }\n</style>\n<body>\n    <div id=\"app\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n</body>\n```\n\n","source":"_posts/css/网格布局.md","raw":"---\ntitle: 网格布局\ndate: 2020-11-01 11:36:38\ntag:\n  - CSS&HTML\ncategory:\n  - 技术笔记\n---\n\n最近看[张鑫旭](https://www.zhangxinxu.com/)前辈的博客，感觉又找回最开始学习HTML&CSS时候的感觉，好玩有趣；然后就想起了一直听过但没写过的网格布局，记录一下。\n\n<!-- more -->\n\n# [网格布局](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)\n- 和弹性盒子（flex）一样官方提供的方便布局的新属性 display:grid\n- 如名字一样，开启该属性后会将目标dom设置成由一个一个单元格组成的一个布局容器\n\n# 基本概念\n- 容器：开启了grid的dom；内部由数个单元格组成\n- 行：单元格水平排列\n- 列：单元格纵向排列\n- 网格线：容器下的每个项目都分布在每个单元格中，开发这模式可以看到该线![](http://img.shuaxindiary.cn/grid-line.png)\n\n# 基本使用\n\n### demo1\n- 效果：![](http://img.shuaxindiary.cn/grid-demo1.png)\n- 说明：特殊的布局\n```html\n<style>\n    #app {\n        width: 500px;\n        height: 500px;\n        margin: 0 auto;\n        /* 开启网格布其 */\n        display: grid;\n        /* 定义单元格名称以及在容器中的分布 */\n        grid-template-areas: 'a a b''a a c''d e c';\n    }\n    #app>div:nth-child(1) {\n        /* 定义当前单元格在容器中的分布区域 */\n        grid-area: a;\n    }\n\n    #app>div:nth-child(2) {\n        grid-area: b;\n    }\n\n    #app>div:nth-child(3) {\n        grid-area: c;\n    }\n\n    #app>div:nth-child(4) {\n        grid-area: d;\n    }\n\n    #app>div:nth-child(5) {\n        grid-area: e;\n    }\n</style>\n<body>\n    <div id=\"app\">\n        <div style=\"background-color: lightblue;\">1</div>\n        <div style=\"background-color: lightcoral;\">2</div>\n        <div style=\"background-color: lightgoldenrodyellow;\">3</div>\n        <div style=\"background-color: lightgrey;\">4</div>\n        <div style=\"background-color: lightsalmon;\">5</div>\n    </div>\n</body>\n```\n\n### demo2\n- 效果：![](http://img.shuaxindiary.cn/grid-demo2.png)\n- 说明：一个九宫格，里面每个单元格之间的间距都是一样的\n```html\n<style>\n    #app {\n        width: 420px;\n        height: 420px;\n        padding: 20px;\n        margin: 0 auto;\n        /* 开启grid */\n        display: grid;\n        /* 设置有几行 每一行的宽度 */\n        /* repeat是提供的一个方便书写的函数 第一个参数为设置几行（列）第二个参数为具体的值 */\n        grid-template-rows: repeat(3, 140px);\n        /* 同理 列 */\n        grid-template-columns: repeat(3, 140px);\n        /* 设置单元格内的元素排列方式 和flex类似 */\n        align-items: center;\n        border: 1px solid lightsalmon;\n    }\n\n    #app>div {\n        width: 100px;\n        height: 100px;\n        margin: 0 auto;\n        background-color: lightsalmon;\n    }\n</style>\n<body>\n    <div id=\"app\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n</body>\n```\n\n","slug":"css/网格布局","published":1,"updated":"2021-12-31T12:01:59.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv16000sj7jf3qhb8r6h","content":"<p>最近看<a href=\"https://www.zhangxinxu.com/\">张鑫旭</a>前辈的博客，感觉又找回最开始学习HTML&amp;CSS时候的感觉，好玩有趣；然后就想起了一直听过但没写过的网格布局，记录一下。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"网格布局\"><a href=\"#网格布局\" class=\"headerlink\" title=\"网格布局\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\">网格布局</a></h1><ul>\n<li>和弹性盒子（flex）一样官方提供的方便布局的新属性 display:grid</li>\n<li>如名字一样，开启该属性后会将目标dom设置成由一个一个单元格组成的一个布局容器</li>\n</ul>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>容器：开启了grid的dom；内部由数个单元格组成</li>\n<li>行：单元格水平排列</li>\n<li>列：单元格纵向排列</li>\n<li>网格线：容器下的每个项目都分布在每个单元格中，开发这模式可以看到该线<img src=\"http://img.shuaxindiary.cn/grid-line.png\"></li>\n</ul>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><h3 id=\"demo1\"><a href=\"#demo1\" class=\"headerlink\" title=\"demo1\"></a>demo1</h3><ul>\n<li>效果：<img src=\"http://img.shuaxindiary.cn/grid-demo1.png\"></li>\n<li>说明：特殊的布局<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span> &#123;</span><br>        width: 500px;<br>        height: 500px;<br>        margin: 0 auto;<br><span class=\"css\">        <span class=\"hljs-comment\">/* 开启网格布其 */</span></span><br>        display: grid;<br><span class=\"css\">        <span class=\"hljs-comment\">/* 定义单元格名称以及在容器中的分布 */</span></span><br>        grid-template-areas: &#x27;a a b&#x27;&#x27;a a c&#x27;&#x27;d e c&#x27;;<br>    &#125;<br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(1)</span> &#123;</span><br><span class=\"css\">        <span class=\"hljs-comment\">/* 定义当前单元格在容器中的分布区域 */</span></span><br>        grid-area: a;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(2)</span> &#123;</span><br>        grid-area: b;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(3)</span> &#123;</span><br>        grid-area: c;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(4)</span> &#123;</span><br>        grid-area: d;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(5)</span> &#123;</span><br>        grid-area: e;<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightblue;&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightcoral;&quot;</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightgoldenrodyellow;&quot;</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightgrey;&quot;</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightsalmon;&quot;</span>&gt;</span>5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"demo2\"><a href=\"#demo2\" class=\"headerlink\" title=\"demo2\"></a>demo2</h3><ul>\n<li>效果：<img src=\"http://img.shuaxindiary.cn/grid-demo2.png\"></li>\n<li>说明：一个九宫格，里面每个单元格之间的间距都是一样的<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span> &#123;</span><br>        width: 420px;<br>        height: 420px;<br>        padding: 20px;<br>        margin: 0 auto;<br><span class=\"css\">        <span class=\"hljs-comment\">/* 开启grid */</span></span><br>        display: grid;<br><span class=\"css\">        <span class=\"hljs-comment\">/* 设置有几行 每一行的宽度 */</span></span><br><span class=\"css\">        <span class=\"hljs-comment\">/* repeat是提供的一个方便书写的函数 第一个参数为设置几行（列）第二个参数为具体的值 */</span></span><br>        grid-template-rows: repeat(3, 140px);<br><span class=\"css\">        <span class=\"hljs-comment\">/* 同理 列 */</span></span><br>        grid-template-columns: repeat(3, 140px);<br><span class=\"css\">        <span class=\"hljs-comment\">/* 设置单元格内的元素排列方式 和flex类似 */</span></span><br>        align-items: center;<br>        border: 1px solid lightsalmon;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span> &#123;</span><br>        width: 100px;<br>        height: 100px;<br>        margin: 0 auto;<br>        background-color: lightsalmon;<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"wordcount":1990,"excerpt":"<p>最近看<a href=\"https://www.zhangxinxu.com/\">张鑫旭</a>前辈的博客，感觉又找回最开始学习HTML&amp;CSS时候的感觉，好玩有趣；然后就想起了一直听过但没写过的网格布局，记录一下。</p>","more":"<h1 id=\"网格布局\"><a href=\"#网格布局\" class=\"headerlink\" title=\"网格布局\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\">网格布局</a></h1><ul>\n<li>和弹性盒子（flex）一样官方提供的方便布局的新属性 display:grid</li>\n<li>如名字一样，开启该属性后会将目标dom设置成由一个一个单元格组成的一个布局容器</li>\n</ul>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>容器：开启了grid的dom；内部由数个单元格组成</li>\n<li>行：单元格水平排列</li>\n<li>列：单元格纵向排列</li>\n<li>网格线：容器下的每个项目都分布在每个单元格中，开发这模式可以看到该线<img src=\"http://img.shuaxindiary.cn/grid-line.png\"></li>\n</ul>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><h3 id=\"demo1\"><a href=\"#demo1\" class=\"headerlink\" title=\"demo1\"></a>demo1</h3><ul>\n<li>效果：<img src=\"http://img.shuaxindiary.cn/grid-demo1.png\"></li>\n<li>说明：特殊的布局<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span> &#123;</span><br>        width: 500px;<br>        height: 500px;<br>        margin: 0 auto;<br><span class=\"css\">        <span class=\"hljs-comment\">/* 开启网格布其 */</span></span><br>        display: grid;<br><span class=\"css\">        <span class=\"hljs-comment\">/* 定义单元格名称以及在容器中的分布 */</span></span><br>        grid-template-areas: &#x27;a a b&#x27;&#x27;a a c&#x27;&#x27;d e c&#x27;;<br>    &#125;<br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(1)</span> &#123;</span><br><span class=\"css\">        <span class=\"hljs-comment\">/* 定义当前单元格在容器中的分布区域 */</span></span><br>        grid-area: a;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(2)</span> &#123;</span><br>        grid-area: b;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(3)</span> &#123;</span><br>        grid-area: c;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(4)</span> &#123;</span><br>        grid-area: d;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">:nth-child(5)</span> &#123;</span><br>        grid-area: e;<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightblue;&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightcoral;&quot;</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightgoldenrodyellow;&quot;</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightgrey;&quot;</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color: lightsalmon;&quot;</span>&gt;</span>5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"demo2\"><a href=\"#demo2\" class=\"headerlink\" title=\"demo2\"></a>demo2</h3><ul>\n<li>效果：<img src=\"http://img.shuaxindiary.cn/grid-demo2.png\"></li>\n<li>说明：一个九宫格，里面每个单元格之间的间距都是一样的<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span> &#123;</span><br>        width: 420px;<br>        height: 420px;<br>        padding: 20px;<br>        margin: 0 auto;<br><span class=\"css\">        <span class=\"hljs-comment\">/* 开启grid */</span></span><br>        display: grid;<br><span class=\"css\">        <span class=\"hljs-comment\">/* 设置有几行 每一行的宽度 */</span></span><br><span class=\"css\">        <span class=\"hljs-comment\">/* repeat是提供的一个方便书写的函数 第一个参数为设置几行（列）第二个参数为具体的值 */</span></span><br>        grid-template-rows: repeat(3, 140px);<br><span class=\"css\">        <span class=\"hljs-comment\">/* 同理 列 */</span></span><br>        grid-template-columns: repeat(3, 140px);<br><span class=\"css\">        <span class=\"hljs-comment\">/* 设置单元格内的元素排列方式 和flex类似 */</span></span><br>        align-items: center;<br>        border: 1px solid lightsalmon;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-id\">#app</span>&gt;<span class=\"hljs-selector-tag\">div</span> &#123;</span><br>        width: 100px;<br>        height: 100px;<br>        margin: 0 auto;<br>        background-color: lightsalmon;<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>"},{"title":"MongoDB入门学习笔记","abbrlink":841,"date":"2019-11-10T11:48:21.000Z","_content":"# 使用前准备\n1.安装mongodb [下载](http://downloads.mongodb.com/)\n2.选择服务端然后对应系统版本，推荐下载msi格式(这个可以一步一步安装，比较方便)\n3.下载后在安装目录里(与bing目录同级下)创建 data文件夹(存放数据库集合的)\n4.通过cmd启动mongdb\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.进入bin目录\n\n<!-- more -->\n```linux\n2. mongod --dbpath (这里的路径是第三部创建的data文件夹的而路径) \n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.看到控制台打印出 waiting forconnections on port 27017(默认端口) 即启动成功\n\n5.将mongodb添加到本地服务中\n&nbsp;&nbsp;&nbsp;1.在第三部的data文件中创建log文件夹\n&nbsp;&nbsp;&nbsp;2.在log文件夹中创建mongodb.log文件\n&nbsp;&nbsp;&nbsp;3.输入命令\n```linux\nmongod.exe --logpath (这里写你log文件的路径) --logappend --dbpath (这里写你data文件夹的路径) --directoryperdb --serviceName MongoDB --install\n```\n&nbsp;&nbsp;&nbsp;4.通过管理员启动cmd，输入\n```linux\n<!-- 启动mongodb服务 -->\nnet start MongoDB\n<!-- 关闭mngodb服务 -->\nnet stop MongoDB\n<!-- 卸载mongodb服务 -->\nmongod.exe --remove --serviceName \"MongoDB\"\n```\n&nbsp;&nbsp;&nbsp;5.遇到无法启动的问题 删除data目录下的 mongod.lock和storage.bson文件重新启动即可\n# 基本概念\n集合:类似MySQL的表\n\n文档:类似MySQL的元祖\n<!-- more -->\n\nmongo中的数据类型:\n>Object ID： ⽂档ID\n- 可以手动设置，未设置系统默认分配一个objectID(是⼀个12字节的⼗六进制数)\n>String： 字符串， 最常⽤， 必须是有效的UTF-8\n>Boolean： 存储⼀个布尔值， true或false\n>Integer： 整数可以是32位或64位， 这取决于服务器\n>Double： 存储浮点值\n>Arrays： 数组或列表， 多个值存储到⼀个键\n>Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档\n>Null： 存储Null值\n>Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数\n>Date： 存储当前⽇期或时间的UNIX时间格式\n```shell\n# 创建日期\nnew Date('2017-12-20')\n```\n# MongoDB基本命令\n>关于数据库\n```shell\n# 启动MongoDB\nnet stop mongodb\n# 进入安装目录的bin目录\n# 终端启动(客户端)\nmongo\n# 服务端启动\nmongod\n# 查看当前数据\ndb\n# 查看所有数据库\nshow dbs\n# 切换数据库---不存在时会自动创建---如果创建了没操作，在切换时，该数据库不保存\nuse <dbname>\n# 删除数据库\ndb.dropDatabase()\n# 显示当前数据库状态信息\ndb.stats()\n# 查看当前数据库版本\ndb.version()\n# 查看当前连接数据库地址\ndb.getMongo()\n```\n>关于集合\n```shell\n# 查看所有集合\nshow collections\n# 删除集合\ndb.<集合名>.drop()\n```\n>关于文档\n```shell\n# 插入文档  数据为对象格式  当集合不存在时直接插入会自动创建集合\ndb.<集合名>.insertOne({name:'shauxin',age:21});\n# insertOne插入一个  insertMany插入多个\ndb.<集合名>.insertOne([{name:'one'},{name:'two'}]);\n# 查询所有文档\ndb.<集合名>.find()\n# 更新文档\n#更新一条update或者updateOne,没有更新的字段会丢弃. \ndb.<集合名>.update({name:'hr'},{name:'mnc'})\n#更新一条\ndb.<集合名>.update({name:'hr'},{$set:{name:'hys'}})\n#更新全部\ndb.<集合名>.update({},{$set:{gender:0}},{multi:true}) \n# 更新多个 updateMany\ndb.<集合名>.updateOne({name:'wade'},{$set:{age:21}})   \n# 删除\n# 删除第一个符合条件的\ndb.<集合名>.deleteOne({age:21})\n# 删除所有符合条件的\ndb.<集合名>.deleteMany({age:21})\n```\n","source":"_posts/技术笔记/MongoDB入门学习笔记.md","raw":"---\ntitle: MongoDB入门学习笔记\ncategory:\n  - 技术笔记\ntag:\n  - 踩坑\n  - NodeJS\nabbrlink: 841\ndate: 2019-11-10 19:48:21\n---\n# 使用前准备\n1.安装mongodb [下载](http://downloads.mongodb.com/)\n2.选择服务端然后对应系统版本，推荐下载msi格式(这个可以一步一步安装，比较方便)\n3.下载后在安装目录里(与bing目录同级下)创建 data文件夹(存放数据库集合的)\n4.通过cmd启动mongdb\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.进入bin目录\n\n<!-- more -->\n```linux\n2. mongod --dbpath (这里的路径是第三部创建的data文件夹的而路径) \n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.看到控制台打印出 waiting forconnections on port 27017(默认端口) 即启动成功\n\n5.将mongodb添加到本地服务中\n&nbsp;&nbsp;&nbsp;1.在第三部的data文件中创建log文件夹\n&nbsp;&nbsp;&nbsp;2.在log文件夹中创建mongodb.log文件\n&nbsp;&nbsp;&nbsp;3.输入命令\n```linux\nmongod.exe --logpath (这里写你log文件的路径) --logappend --dbpath (这里写你data文件夹的路径) --directoryperdb --serviceName MongoDB --install\n```\n&nbsp;&nbsp;&nbsp;4.通过管理员启动cmd，输入\n```linux\n<!-- 启动mongodb服务 -->\nnet start MongoDB\n<!-- 关闭mngodb服务 -->\nnet stop MongoDB\n<!-- 卸载mongodb服务 -->\nmongod.exe --remove --serviceName \"MongoDB\"\n```\n&nbsp;&nbsp;&nbsp;5.遇到无法启动的问题 删除data目录下的 mongod.lock和storage.bson文件重新启动即可\n# 基本概念\n集合:类似MySQL的表\n\n文档:类似MySQL的元祖\n<!-- more -->\n\nmongo中的数据类型:\n>Object ID： ⽂档ID\n- 可以手动设置，未设置系统默认分配一个objectID(是⼀个12字节的⼗六进制数)\n>String： 字符串， 最常⽤， 必须是有效的UTF-8\n>Boolean： 存储⼀个布尔值， true或false\n>Integer： 整数可以是32位或64位， 这取决于服务器\n>Double： 存储浮点值\n>Arrays： 数组或列表， 多个值存储到⼀个键\n>Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档\n>Null： 存储Null值\n>Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数\n>Date： 存储当前⽇期或时间的UNIX时间格式\n```shell\n# 创建日期\nnew Date('2017-12-20')\n```\n# MongoDB基本命令\n>关于数据库\n```shell\n# 启动MongoDB\nnet stop mongodb\n# 进入安装目录的bin目录\n# 终端启动(客户端)\nmongo\n# 服务端启动\nmongod\n# 查看当前数据\ndb\n# 查看所有数据库\nshow dbs\n# 切换数据库---不存在时会自动创建---如果创建了没操作，在切换时，该数据库不保存\nuse <dbname>\n# 删除数据库\ndb.dropDatabase()\n# 显示当前数据库状态信息\ndb.stats()\n# 查看当前数据库版本\ndb.version()\n# 查看当前连接数据库地址\ndb.getMongo()\n```\n>关于集合\n```shell\n# 查看所有集合\nshow collections\n# 删除集合\ndb.<集合名>.drop()\n```\n>关于文档\n```shell\n# 插入文档  数据为对象格式  当集合不存在时直接插入会自动创建集合\ndb.<集合名>.insertOne({name:'shauxin',age:21});\n# insertOne插入一个  insertMany插入多个\ndb.<集合名>.insertOne([{name:'one'},{name:'two'}]);\n# 查询所有文档\ndb.<集合名>.find()\n# 更新文档\n#更新一条update或者updateOne,没有更新的字段会丢弃. \ndb.<集合名>.update({name:'hr'},{name:'mnc'})\n#更新一条\ndb.<集合名>.update({name:'hr'},{$set:{name:'hys'}})\n#更新全部\ndb.<集合名>.update({},{$set:{gender:0}},{multi:true}) \n# 更新多个 updateMany\ndb.<集合名>.updateOne({name:'wade'},{$set:{age:21}})   \n# 删除\n# 删除第一个符合条件的\ndb.<集合名>.deleteOne({age:21})\n# 删除所有符合条件的\ndb.<集合名>.deleteMany({age:21})\n```\n","slug":"技术笔记/MongoDB入门学习笔记","published":1,"updated":"2021-12-31T12:01:59.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv16000vj7jfbdl9hhcr","content":"<h1 id=\"使用前准备\"><a href=\"#使用前准备\" class=\"headerlink\" title=\"使用前准备\"></a>使用前准备</h1><p>1.安装mongodb <a href=\"http://downloads.mongodb.com/\">下载</a><br>2.选择服务端然后对应系统版本，推荐下载msi格式(这个可以一步一步安装，比较方便)<br>3.下载后在安装目录里(与bing目录同级下)创建 data文件夹(存放数据库集合的)<br>4.通过cmd启动mongdb<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.进入bin目录</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs linux\">2. mongod --dbpath (这里的路径是第三部创建的data文件夹的而路径) <br></code></pre></div></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.看到控制台打印出 waiting forconnections on port 27017(默认端口) 即启动成功</p>\n<p>5.将mongodb添加到本地服务中<br>&nbsp;&nbsp;&nbsp;1.在第三部的data文件中创建log文件夹<br>&nbsp;&nbsp;&nbsp;2.在log文件夹中创建mongodb.log文件<br>&nbsp;&nbsp;&nbsp;3.输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs linux\">mongod.exe --logpath (这里写你log文件的路径) --logappend --dbpath (这里写你data文件夹的路径) --directoryperdb --serviceName MongoDB --install<br></code></pre></div></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;4.通过管理员启动cmd，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs linux\">&lt;!-- 启动mongodb服务 --&gt;<br>net start MongoDB<br>&lt;!-- 关闭mngodb服务 --&gt;<br>net stop MongoDB<br>&lt;!-- 卸载mongodb服务 --&gt;<br>mongod.exe --remove --serviceName &quot;MongoDB&quot;<br></code></pre></div></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;5.遇到无法启动的问题 删除data目录下的 mongod.lock和storage.bson文件重新启动即可</p>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>集合:类似MySQL的表</p>\n<p>文档:类似MySQL的元祖</p>\n<!-- more -->\n\n<p>mongo中的数据类型:</p>\n<blockquote>\n<p>Object ID： ⽂档ID</p>\n</blockquote>\n<ul>\n<li>可以手动设置，未设置系统默认分配一个objectID(是⼀个12字节的⼗六进制数)<blockquote>\n<p>String： 字符串， 最常⽤， 必须是有效的UTF-8<br>Boolean： 存储⼀个布尔值， true或false<br>Integer： 整数可以是32位或64位， 这取决于服务器<br>Double： 存储浮点值<br>Arrays： 数组或列表， 多个值存储到⼀个键<br>Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档<br>Null： 存储Null值<br>Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数<br>Date： 存储当前⽇期或时间的UNIX时间格式</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建日期</span><br>new Date(&#x27;2017-12-20&#x27;)<br></code></pre></div></td></tr></table></figure>\n<h1 id=\"MongoDB基本命令\"><a href=\"#MongoDB基本命令\" class=\"headerlink\" title=\"MongoDB基本命令\"></a>MongoDB基本命令</h1><blockquote>\n<p>关于数据库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 启动MongoDB</span><br>net stop mongodb<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 进入安装目录的bin目录</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 终端启动(客户端)</span><br>mongo<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 服务端启动</span><br>mongod<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前数据</span><br>db<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看所有数据库</span><br>show dbs<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切换数据库---不存在时会自动创建---如果创建了没操作，在切换时，该数据库不保存</span><br>use &lt;dbname&gt;<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除数据库</span><br>db.dropDatabase()<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 显示当前数据库状态信息</span><br>db.stats()<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前数据库版本</span><br>db.version()<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前连接数据库地址</span><br>db.getMongo()<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>关于集合</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看所有集合</span><br>show collections<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除集合</span><br>db.&lt;集合名&gt;.drop()<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>关于文档</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 插入文档  数据为对象格式  当集合不存在时直接插入会自动创建集合</span><br>db.&lt;集合名&gt;.insertOne(&#123;name:&#x27;shauxin&#x27;,age:21&#125;);<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> insertOne插入一个  insertMany插入多个</span><br>db.&lt;集合名&gt;.insertOne([&#123;name:&#x27;one&#x27;&#125;,&#123;name:&#x27;two&#x27;&#125;]);<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查询所有文档</span><br>db.&lt;集合名&gt;.find()<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 更新文档</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">更新一条update或者updateOne,没有更新的字段会丢弃. </span><br>db.&lt;集合名&gt;.update(&#123;name:&#x27;hr&#x27;&#125;,&#123;name:&#x27;mnc&#x27;&#125;)<br><span class=\"hljs-meta\">#</span><span class=\"bash\">更新一条</span><br>db.&lt;集合名&gt;.update(&#123;name:&#x27;hr&#x27;&#125;,&#123;$set:&#123;name:&#x27;hys&#x27;&#125;&#125;)<br><span class=\"hljs-meta\">#</span><span class=\"bash\">更新全部</span><br>db.&lt;集合名&gt;.update(&#123;&#125;,&#123;$set:&#123;gender:0&#125;&#125;,&#123;multi:true&#125;) <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 更新多个 updateMany</span><br>db.&lt;集合名&gt;.updateOne(&#123;name:&#x27;wade&#x27;&#125;,&#123;$set:&#123;age:21&#125;&#125;)   <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除第一个符合条件的</span><br>db.&lt;集合名&gt;.deleteOne(&#123;age:21&#125;)<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除所有符合条件的</span><br>db.&lt;集合名&gt;.deleteMany(&#123;age:21&#125;)<br></code></pre></div></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":2319,"excerpt":"<h1 id=\"使用前准备\"><a href=\"#使用前准备\" class=\"headerlink\" title=\"使用前准备\"></a>使用前准备</h1><p>1.安装mongodb <a href=\"http://downloads.mongodb.com/\">下载</a><br>2.选择服务端然后对应系统版本，推荐下载msi格式(这个可以一步一步安装，比较方便)<br>3.下载后在安装目录里(与bing目录同级下)创建 data文件夹(存放数据库集合的)<br>4.通过cmd启动mongdb<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.进入bin目录</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs linux\">2. mongod --dbpath (这里的路径是第三部创建的data文件夹的而路径) <br></code></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.看到控制台打印出 waiting forconnections on port 27017(默认端口) 即启动成功</p>\n<p>5.将mongodb添加到本地服务中<br>&nbsp;&nbsp;&nbsp;1.在第三部的data文件中创建log文件夹<br>&nbsp;&nbsp;&nbsp;2.在log文件夹中创建mongodb.log文件<br>&nbsp;&nbsp;&nbsp;3.输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs linux\">mongod.exe --logpath (这里写你log文件的路径) --logappend --dbpath (这里写你data文件夹的路径) --directoryperdb --serviceName MongoDB --install<br></code></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;4.通过管理员启动cmd，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs linux\">&lt;!-- 启动mongodb服务 --&gt;<br>net start MongoDB<br>&lt;!-- 关闭mngodb服务 --&gt;<br>net stop MongoDB<br>&lt;!-- 卸载mongodb服务 --&gt;<br>mongod.exe --remove --serviceName &quot;MongoDB&quot;<br></code></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;5.遇到无法启动的问题 删除data目录下的 mongod.lock和storage.bson文件重新启动即可</p>\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>集合:类似MySQL的表</p>\n<p>文档:类似MySQL的元祖</p>\n<!-- more -->\n\n<p>mongo中的数据类型:</p>\n<blockquote>\n<p>Object ID： ⽂档ID</p>\n</blockquote>\n<ul>\n<li>可以手动设置，未设置系统默认分配一个objectID(是⼀个12字节的⼗六进制数)<blockquote>\n<p>String： 字符串， 最常⽤， 必须是有效的UTF-8<br>Boolean： 存储⼀个布尔值， true或false<br>Integer： 整数可以是32位或64位， 这取决于服务器<br>Double： 存储浮点值<br>Arrays： 数组或列表， 多个值存储到⼀个键<br>Object： ⽤于嵌⼊式的⽂档， 即⼀个值为⼀个⽂档<br>Null： 存储Null值<br>Timestamp： 时间戳， 表示从1970-1-1到现在的总秒数<br>Date： 存储当前⽇期或时间的UNIX时间格式</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建日期</span><br>new Date(&#x27;2017-12-20&#x27;)<br></code></pre></td></tr></table></figure>\n<h1 id=\"MongoDB基本命令\"><a href=\"#MongoDB基本命令\" class=\"headerlink\" title=\"MongoDB基本命令\"></a>MongoDB基本命令</h1><blockquote>\n<p>关于数据库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 启动MongoDB</span><br>net stop mongodb<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 进入安装目录的bin目录</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 终端启动(客户端)</span><br>mongo<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 服务端启动</span><br>mongod<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前数据</span><br>db<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看所有数据库</span><br>show dbs<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切换数据库---不存在时会自动创建---如果创建了没操作，在切换时，该数据库不保存</span><br>use &lt;dbname&gt;<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除数据库</span><br>db.dropDatabase()<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 显示当前数据库状态信息</span><br>db.stats()<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前数据库版本</span><br>db.version()<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前连接数据库地址</span><br>db.getMongo()<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>关于集合</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看所有集合</span><br>show collections<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除集合</span><br>db.&lt;集合名&gt;.drop()<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>关于文档</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 插入文档  数据为对象格式  当集合不存在时直接插入会自动创建集合</span><br>db.&lt;集合名&gt;.insertOne(&#123;name:&#x27;shauxin&#x27;,age:21&#125;);<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> insertOne插入一个  insertMany插入多个</span><br>db.&lt;集合名&gt;.insertOne([&#123;name:&#x27;one&#x27;&#125;,&#123;name:&#x27;two&#x27;&#125;]);<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查询所有文档</span><br>db.&lt;集合名&gt;.find()<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 更新文档</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\">更新一条update或者updateOne,没有更新的字段会丢弃. </span><br>db.&lt;集合名&gt;.update(&#123;name:&#x27;hr&#x27;&#125;,&#123;name:&#x27;mnc&#x27;&#125;)<br><span class=\"hljs-meta\">#</span><span class=\"bash\">更新一条</span><br>db.&lt;集合名&gt;.update(&#123;name:&#x27;hr&#x27;&#125;,&#123;$set:&#123;name:&#x27;hys&#x27;&#125;&#125;)<br><span class=\"hljs-meta\">#</span><span class=\"bash\">更新全部</span><br>db.&lt;集合名&gt;.update(&#123;&#125;,&#123;$set:&#123;gender:0&#125;&#125;,&#123;multi:true&#125;) <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 更新多个 updateMany</span><br>db.&lt;集合名&gt;.updateOne(&#123;name:&#x27;wade&#x27;&#125;,&#123;$set:&#123;age:21&#125;&#125;)   <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除第一个符合条件的</span><br>db.&lt;集合名&gt;.deleteOne(&#123;age:21&#125;)<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除所有符合条件的</span><br>db.&lt;集合名&gt;.deleteMany(&#123;age:21&#125;)<br></code></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"antd menu组件","date":"2020-11-11T13:22:08.000Z","_content":"\nantd menu组件\n====================\n继续记录antd+react使用\n\n\n场景\n===\n1.每次刷新浏览器后，menu应该继续选中当前url对应的menuitem\n2.限制只能打开一个menugroup\n\n<!-- more -->\n\n## 代码&思路\n每次刷新浏览器后，menu应该继续选中当前url对应的menuitem\n- 场景1思路：利用react路由的withRouter包裹当前组件，然后组件内部通过props就可以得到当前路由对象location；location的pathname就是当前的url，然后将该值赋给defaultSelectedKeys即可\n- 场景2思路：menu组件打开的menu是通过openKeys控制，每次点击要打开的menu的时候，去将openkeys绑定的数组重置为当前点击的菜单的key即可\n```js\n// Nav组件\nimport {  withRouter } from 'react-router-dom';\nconst Nav=({location})=>{\n    const [keys, setKeys] = useState(['sub1'])\n    const saveKeys = ({ key }) => {\n    setKeys(() => [key])\n    }\n    return (\n    <Menu\n      onClick={handleClick}\n      defaultSelectedKeys={[location.pathname]}\n      openKeys={keys}\n      mode=\"inline\"\n      style={{ width: \"100 %\", height: \"100%\" }}\n    >\n      <SubMenu\n        onTitleClick={saveKeys}\n        key=\"sub0\"\n        title={\n          <span>\n            <CopyOutlined />\n            <span>概览</span>\n          </span>\n        }\n      >\n        <Menu.Item key=\"/\">\n          <Link to=\"/\">首页</Link>\n        </Menu.Item>\n      </SubMenu>\n      <SubMenu\n        onTitleClick={saveKeys}\n        key=\"sub0\"\n        title={\n          <span>\n            <CopyOutlined />\n            <span>概览</span>\n          </span>\n        }\n      >\n        <Menu.Item key=\"/about\">\n          <Link to=\"/about\">关于</Link>\n        </Menu.Item>\n      </SubMenu>\n    </Menu>\n    )\n}\nexport default withRouter(Nav)\n```","source":"_posts/技术笔记/antd-menu组件.md","raw":"---\ntitle: antd menu组件\ndate: 2020-11-11 21:22:08\ncategory:\n  - 技术笔记\ntag:\n  - React\n  - 踩坑\n---\n\nantd menu组件\n====================\n继续记录antd+react使用\n\n\n场景\n===\n1.每次刷新浏览器后，menu应该继续选中当前url对应的menuitem\n2.限制只能打开一个menugroup\n\n<!-- more -->\n\n## 代码&思路\n每次刷新浏览器后，menu应该继续选中当前url对应的menuitem\n- 场景1思路：利用react路由的withRouter包裹当前组件，然后组件内部通过props就可以得到当前路由对象location；location的pathname就是当前的url，然后将该值赋给defaultSelectedKeys即可\n- 场景2思路：menu组件打开的menu是通过openKeys控制，每次点击要打开的menu的时候，去将openkeys绑定的数组重置为当前点击的菜单的key即可\n```js\n// Nav组件\nimport {  withRouter } from 'react-router-dom';\nconst Nav=({location})=>{\n    const [keys, setKeys] = useState(['sub1'])\n    const saveKeys = ({ key }) => {\n    setKeys(() => [key])\n    }\n    return (\n    <Menu\n      onClick={handleClick}\n      defaultSelectedKeys={[location.pathname]}\n      openKeys={keys}\n      mode=\"inline\"\n      style={{ width: \"100 %\", height: \"100%\" }}\n    >\n      <SubMenu\n        onTitleClick={saveKeys}\n        key=\"sub0\"\n        title={\n          <span>\n            <CopyOutlined />\n            <span>概览</span>\n          </span>\n        }\n      >\n        <Menu.Item key=\"/\">\n          <Link to=\"/\">首页</Link>\n        </Menu.Item>\n      </SubMenu>\n      <SubMenu\n        onTitleClick={saveKeys}\n        key=\"sub0\"\n        title={\n          <span>\n            <CopyOutlined />\n            <span>概览</span>\n          </span>\n        }\n      >\n        <Menu.Item key=\"/about\">\n          <Link to=\"/about\">关于</Link>\n        </Menu.Item>\n      </SubMenu>\n    </Menu>\n    )\n}\nexport default withRouter(Nav)\n```","slug":"技术笔记/antd-menu组件","published":1,"updated":"2021-12-31T12:01:59.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv17000yj7jfhmes0ciu","content":"<h1 id=\"antd-menu组件\"><a href=\"#antd-menu组件\" class=\"headerlink\" title=\"antd menu组件\"></a>antd menu组件</h1><p>继续记录antd+react使用</p>\n<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>1.每次刷新浏览器后，menu应该继续选中当前url对应的menuitem<br>2.限制只能打开一个menugroup</p>\n<a id=\"more\"></a>\n\n<h2 id=\"代码-amp-思路\"><a href=\"#代码-amp-思路\" class=\"headerlink\" title=\"代码&amp;思路\"></a>代码&amp;思路</h2><p>每次刷新浏览器后，menu应该继续选中当前url对应的menuitem</p>\n<ul>\n<li>场景1思路：利用react路由的withRouter包裹当前组件，然后组件内部通过props就可以得到当前路由对象location；location的pathname就是当前的url，然后将该值赋给defaultSelectedKeys即可</li>\n<li>场景2思路：menu组件打开的menu是通过openKeys控制，每次点击要打开的menu的时候，去将openkeys绑定的数组重置为当前点击的菜单的key即可<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Nav组件</span><br><span class=\"hljs-keyword\">import</span> &#123;  withRouter &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> Nav=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;location&#125;</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> [keys, setKeys] = useState([<span class=\"hljs-string\">&#x27;sub1&#x27;</span>])<br>    <span class=\"hljs-keyword\">const</span> saveKeys = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; key &#125;</span>) =&gt;</span> &#123;<br>    setKeys(<span class=\"hljs-function\">() =&gt;</span> [key])<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> (<br>    &lt;Menu<br>      onClick=&#123;handleClick&#125;<br>      defaultSelectedKeys=&#123;[location.pathname]&#125;<br>      openKeys=&#123;keys&#125;<br>      mode=<span class=\"hljs-string\">&quot;inline&quot;</span><br>      style=&#123;&#123; <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">&quot;100 %&quot;</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&quot;100%&quot;</span> &#125;&#125;<br>    &gt;<br>      &lt;SubMenu<br>        onTitleClick=&#123;saveKeys&#125;<br>        key=<span class=\"hljs-string\">&quot;sub0&quot;</span><br>        title=&#123;<br>          &lt;span&gt;<br>            &lt;CopyOutlined /&gt;<br>            &lt;span&gt;概览&lt;/span&gt;<br>          &lt;/span&gt;<br>        &#125;<br>      &gt;<br>        &lt;Menu.Item key=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;<br>          &lt;Link to=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;首页&lt;/Link&gt;<br>        &lt;/Menu.Item&gt;<br>      &lt;/SubMenu&gt;<br>      &lt;SubMenu<br>        onTitleClick=&#123;saveKeys&#125;<br>        key=<span class=\"hljs-string\">&quot;sub0&quot;</span><br>        title=&#123;<br>          &lt;span&gt;<br>            &lt;CopyOutlined /&gt;<br>            &lt;span&gt;概览&lt;/span&gt;<br>          &lt;/span&gt;<br>        &#125;<br>      &gt;<br>        &lt;Menu.Item key=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;<br>          &lt;Link to=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;关于&lt;/Link&gt;<br>        &lt;/Menu.Item&gt;<br>      &lt;/SubMenu&gt;<br>    &lt;/Menu&gt;<br>    )<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> withRouter(Nav)<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"wordcount":1463,"excerpt":"<h1 id=\"antd-menu组件\"><a href=\"#antd-menu组件\" class=\"headerlink\" title=\"antd menu组件\"></a>antd menu组件</h1><p>继续记录antd+react使用</p>\n<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>1.每次刷新浏览器后，menu应该继续选中当前url对应的menuitem<br>2.限制只能打开一个menugroup</p>","more":"<h2 id=\"代码-amp-思路\"><a href=\"#代码-amp-思路\" class=\"headerlink\" title=\"代码&amp;思路\"></a>代码&amp;思路</h2><p>每次刷新浏览器后，menu应该继续选中当前url对应的menuitem</p>\n<ul>\n<li>场景1思路：利用react路由的withRouter包裹当前组件，然后组件内部通过props就可以得到当前路由对象location；location的pathname就是当前的url，然后将该值赋给defaultSelectedKeys即可</li>\n<li>场景2思路：menu组件打开的menu是通过openKeys控制，每次点击要打开的menu的时候，去将openkeys绑定的数组重置为当前点击的菜单的key即可<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Nav组件</span><br><span class=\"hljs-keyword\">import</span> &#123;  withRouter &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-router-dom&#x27;</span>;<br><span class=\"hljs-keyword\">const</span> Nav=<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123;location&#125;</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> [keys, setKeys] = useState([<span class=\"hljs-string\">&#x27;sub1&#x27;</span>])<br>    <span class=\"hljs-keyword\">const</span> saveKeys = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; key &#125;</span>) =&gt;</span> &#123;<br>    setKeys(<span class=\"hljs-function\">() =&gt;</span> [key])<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> (<br>    &lt;Menu<br>      onClick=&#123;handleClick&#125;<br>      defaultSelectedKeys=&#123;[location.pathname]&#125;<br>      openKeys=&#123;keys&#125;<br>      mode=<span class=\"hljs-string\">&quot;inline&quot;</span><br>      style=&#123;&#123; <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">&quot;100 %&quot;</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&quot;100%&quot;</span> &#125;&#125;<br>    &gt;<br>      &lt;SubMenu<br>        onTitleClick=&#123;saveKeys&#125;<br>        key=<span class=\"hljs-string\">&quot;sub0&quot;</span><br>        title=&#123;<br>          &lt;span&gt;<br>            &lt;CopyOutlined /&gt;<br>            &lt;span&gt;概览&lt;/span&gt;<br>          &lt;/span&gt;<br>        &#125;<br>      &gt;<br>        &lt;Menu.Item key=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;<br>          &lt;Link to=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;首页&lt;/Link&gt;<br>        &lt;/Menu.Item&gt;<br>      &lt;/SubMenu&gt;<br>      &lt;SubMenu<br>        onTitleClick=&#123;saveKeys&#125;<br>        key=<span class=\"hljs-string\">&quot;sub0&quot;</span><br>        title=&#123;<br>          &lt;span&gt;<br>            &lt;CopyOutlined /&gt;<br>            &lt;span&gt;概览&lt;/span&gt;<br>          &lt;/span&gt;<br>        &#125;<br>      &gt;<br>        &lt;Menu.Item key=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;<br>          &lt;Link to=<span class=\"hljs-string\">&quot;/about&quot;</span>&gt;关于&lt;/Link&gt;<br>        &lt;/Menu.Item&gt;<br>      &lt;/SubMenu&gt;<br>    &lt;/Menu&gt;<br>    )<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> withRouter(Nav)<br></code></pre></td></tr></table></figure></li>\n</ul>"},{"title":"demo-cli","abbrlink":13818,"date":"2020-04-11T12:08:07.000Z","_content":"\n# 起因\n- 习惯了基于集成了各种工具的cli，来进行开发后，有时候回到最最最原始的三剑客(HTML+CSS+JS)，纯手撸的时候觉得效率过于低下。\n- 尤其是写CSS的时候，为了避免因为标签权重问题导致的样式错乱，而不停的重复写选择器，还有没有全局管理样式的功能，导致不停的去查查改改。。。\n- 基于上述和还有很多一时没想起的问题，所以有了做一个自己的非SPA应用的脚手架的想法\n<!-- more -->\n# 关于该脚手架\n使用用gulp搭建的自动化脚手架\n\n## 适用场景\n- 写静态官网\n- 练习TS/ES6\n\n## 功能描述\n- 支持区分生产/开发环境\n- 支持LESS（可选是否使用）\n- 支持ES6（模块化不支持）\n- 支持TS（可选是否使用）\n- 支持生产环境时HTML+CSS+JS+图片压缩\n\n>2020-4-16更新 1.0.0->1.1.0\n- 添加了自己封装的工具函数模块\n- 添加对AMD模块化支持 [如何使用](https://requirejs.org/)\n\n\n# 食用指南\n\n## 下载该脚手架\n测试阶段，暂时只能通过github来下载\n```shell\ngit clone git@github.com:SHUAXINDIARY/demo-cli.git\n```\n\n## 安装依赖\n```shell\n# 1.先安装node\n# 2.全局安装gulp\nnpm i gulp -g\n# 3.安装依赖\nnpm i \n```\n\n## 目录说明\n```js\n+ src---开发目录\n   + assets---存放其他资源：resetcss、图标等\n   + css---样式文件\n   + js----js代码\n   + less--less文件(可选：不使用无视即可)\n   + ts----ts文件(可选：不使用无视即可)\n   - index.html---src根目录存放页面文件\n- babelrc---babel配置(可自定义参考官方配置)\n+ gulpfile.js---gulp配置目录\n   - index.js---入口文件\n   - Tasks.js---任务方法文件\n   - paths.js---打包入口/出口路径\n- tsconfig.json--ts配置文件(可自定义参考)\n- config.json----配置项目环境：例如是否使用ts/less、配置本地服务器信息\n```\n## 开始食用\n```shell\n# 开发环境\nnpm run dev\n# 部署前打包\nnpm run build\n```\n\n\n## 食用配置\n以下配置根据自行情况选择\n\n>是否使用less\n- 进入config.js\n- 设置less为true\n\n>是否使用ts\n- 同上\n- ts编译相关配置，参考[官方文档](https://typescript.bootcss.com/tsconfig-json.html)\n- 关于ts编译配置支持情况查看[gulp-typescript](https://www.npmjs.com/package/gulp-typescript)\n\n>配置本地服务器信息\n- 进入config.js\n- 可根据[gulp-connect](https://www.npmjs.com/package/gulp-connect)配置\n\n# 结尾\n- [该项目源码](https://github.com/SHUAXINDIARY/demo-cli)","source":"_posts/技术笔记/demo-cli.md","raw":"---\ntitle: demo-cli\ncategory:\n  - 技术笔记\ntag:\n  - 前端\n  - GULP\nabbrlink: 13818\ndate: 2020-04-11 20:08:07\n---\n\n# 起因\n- 习惯了基于集成了各种工具的cli，来进行开发后，有时候回到最最最原始的三剑客(HTML+CSS+JS)，纯手撸的时候觉得效率过于低下。\n- 尤其是写CSS的时候，为了避免因为标签权重问题导致的样式错乱，而不停的重复写选择器，还有没有全局管理样式的功能，导致不停的去查查改改。。。\n- 基于上述和还有很多一时没想起的问题，所以有了做一个自己的非SPA应用的脚手架的想法\n<!-- more -->\n# 关于该脚手架\n使用用gulp搭建的自动化脚手架\n\n## 适用场景\n- 写静态官网\n- 练习TS/ES6\n\n## 功能描述\n- 支持区分生产/开发环境\n- 支持LESS（可选是否使用）\n- 支持ES6（模块化不支持）\n- 支持TS（可选是否使用）\n- 支持生产环境时HTML+CSS+JS+图片压缩\n\n>2020-4-16更新 1.0.0->1.1.0\n- 添加了自己封装的工具函数模块\n- 添加对AMD模块化支持 [如何使用](https://requirejs.org/)\n\n\n# 食用指南\n\n## 下载该脚手架\n测试阶段，暂时只能通过github来下载\n```shell\ngit clone git@github.com:SHUAXINDIARY/demo-cli.git\n```\n\n## 安装依赖\n```shell\n# 1.先安装node\n# 2.全局安装gulp\nnpm i gulp -g\n# 3.安装依赖\nnpm i \n```\n\n## 目录说明\n```js\n+ src---开发目录\n   + assets---存放其他资源：resetcss、图标等\n   + css---样式文件\n   + js----js代码\n   + less--less文件(可选：不使用无视即可)\n   + ts----ts文件(可选：不使用无视即可)\n   - index.html---src根目录存放页面文件\n- babelrc---babel配置(可自定义参考官方配置)\n+ gulpfile.js---gulp配置目录\n   - index.js---入口文件\n   - Tasks.js---任务方法文件\n   - paths.js---打包入口/出口路径\n- tsconfig.json--ts配置文件(可自定义参考)\n- config.json----配置项目环境：例如是否使用ts/less、配置本地服务器信息\n```\n## 开始食用\n```shell\n# 开发环境\nnpm run dev\n# 部署前打包\nnpm run build\n```\n\n\n## 食用配置\n以下配置根据自行情况选择\n\n>是否使用less\n- 进入config.js\n- 设置less为true\n\n>是否使用ts\n- 同上\n- ts编译相关配置，参考[官方文档](https://typescript.bootcss.com/tsconfig-json.html)\n- 关于ts编译配置支持情况查看[gulp-typescript](https://www.npmjs.com/package/gulp-typescript)\n\n>配置本地服务器信息\n- 进入config.js\n- 可根据[gulp-connect](https://www.npmjs.com/package/gulp-connect)配置\n\n# 结尾\n- [该项目源码](https://github.com/SHUAXINDIARY/demo-cli)","slug":"技术笔记/demo-cli","published":1,"updated":"2021-12-31T12:01:59.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv170011j7jf4snoa3l6","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><ul>\n<li>习惯了基于集成了各种工具的cli，来进行开发后，有时候回到最最最原始的三剑客(HTML+CSS+JS)，纯手撸的时候觉得效率过于低下。</li>\n<li>尤其是写CSS的时候，为了避免因为标签权重问题导致的样式错乱，而不停的重复写选择器，还有没有全局管理样式的功能，导致不停的去查查改改。。。</li>\n<li>基于上述和还有很多一时没想起的问题，所以有了做一个自己的非SPA应用的脚手架的想法<a id=\"more\"></a>\n<h1 id=\"关于该脚手架\"><a href=\"#关于该脚手架\" class=\"headerlink\" title=\"关于该脚手架\"></a>关于该脚手架</h1>使用用gulp搭建的自动化脚手架</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>写静态官网</li>\n<li>练习TS/ES6</li>\n</ul>\n<h2 id=\"功能描述\"><a href=\"#功能描述\" class=\"headerlink\" title=\"功能描述\"></a>功能描述</h2><ul>\n<li>支持区分生产/开发环境</li>\n<li>支持LESS（可选是否使用）</li>\n<li>支持ES6（模块化不支持）</li>\n<li>支持TS（可选是否使用）</li>\n<li>支持生产环境时HTML+CSS+JS+图片压缩</li>\n</ul>\n<blockquote>\n<p>2020-4-16更新 1.0.0-&gt;1.1.0</p>\n</blockquote>\n<ul>\n<li>添加了自己封装的工具函数模块</li>\n<li>添加对AMD模块化支持 <a href=\"https://requirejs.org/\">如何使用</a></li>\n</ul>\n<h1 id=\"食用指南\"><a href=\"#食用指南\" class=\"headerlink\" title=\"食用指南\"></a>食用指南</h1><h2 id=\"下载该脚手架\"><a href=\"#下载该脚手架\" class=\"headerlink\" title=\"下载该脚手架\"></a>下载该脚手架</h2><p>测试阶段，暂时只能通过github来下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">git clone git@github.com:SHUAXINDIARY/demo-cli.git<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 1.先安装node</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 2.全局安装gulp</span><br>npm i gulp -g<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 3.安装依赖</span><br>npm i <br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"目录说明\"><a href=\"#目录说明\" class=\"headerlink\" title=\"目录说明\"></a>目录说明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">+ src---开发目录<br>   + assets---存放其他资源：resetcss、图标等<br>   + css---样式文件<br>   + js----js代码<br>   + less--less文件(可选：不使用无视即可)<br>   + ts----ts文件(可选：不使用无视即可)<br>   - index.html---src根目录存放页面文件<br>- babelrc---babel配置(可自定义参考官方配置)<br>+ gulpfile.js---gulp配置目录<br>   - index.js---入口文件<br>   - Tasks.js---任务方法文件<br>   - paths.js---打包入口/出口路径<br>- tsconfig.json--ts配置文件(可自定义参考)<br>- config.json----配置项目环境：例如是否使用ts/less、配置本地服务器信息<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"开始食用\"><a href=\"#开始食用\" class=\"headerlink\" title=\"开始食用\"></a>开始食用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 开发环境</span><br>npm run dev<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 部署前打包</span><br>npm run build<br></code></pre></div></td></tr></table></figure>\n\n\n<h2 id=\"食用配置\"><a href=\"#食用配置\" class=\"headerlink\" title=\"食用配置\"></a>食用配置</h2><p>以下配置根据自行情况选择</p>\n<blockquote>\n<p>是否使用less</p>\n</blockquote>\n<ul>\n<li>进入config.js</li>\n<li>设置less为true</li>\n</ul>\n<blockquote>\n<p>是否使用ts</p>\n</blockquote>\n<ul>\n<li>同上</li>\n<li>ts编译相关配置，参考<a href=\"https://typescript.bootcss.com/tsconfig-json.html\">官方文档</a></li>\n<li>关于ts编译配置支持情况查看<a href=\"https://www.npmjs.com/package/gulp-typescript\">gulp-typescript</a></li>\n</ul>\n<blockquote>\n<p>配置本地服务器信息</p>\n</blockquote>\n<ul>\n<li>进入config.js</li>\n<li>可根据<a href=\"https://www.npmjs.com/package/gulp-connect\">gulp-connect</a>配置</li>\n</ul>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><ul>\n<li><a href=\"https://github.com/SHUAXINDIARY/demo-cli\">该项目源码</a></li>\n</ul>\n","site":{"data":{}},"wordcount":1004,"excerpt":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><ul>\n<li>习惯了基于集成了各种工具的cli，来进行开发后，有时候回到最最最原始的三剑客(HTML+CSS+JS)，纯手撸的时候觉得效率过于低下。</li>\n<li>尤其是写CSS的时候，为了避免因为标签权重问题导致的样式错乱，而不停的重复写选择器，还有没有全局管理样式的功能，导致不停的去查查改改。。。</li>\n<li>基于上述和还有很多一时没想起的问题，所以有了做一个自己的非SPA应用的脚手架的想法","more":"<h1 id=\"关于该脚手架\"><a href=\"#关于该脚手架\" class=\"headerlink\" title=\"关于该脚手架\"></a>关于该脚手架</h1>使用用gulp搭建的自动化脚手架</li>\n</ul>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>写静态官网</li>\n<li>练习TS/ES6</li>\n</ul>\n<h2 id=\"功能描述\"><a href=\"#功能描述\" class=\"headerlink\" title=\"功能描述\"></a>功能描述</h2><ul>\n<li>支持区分生产/开发环境</li>\n<li>支持LESS（可选是否使用）</li>\n<li>支持ES6（模块化不支持）</li>\n<li>支持TS（可选是否使用）</li>\n<li>支持生产环境时HTML+CSS+JS+图片压缩</li>\n</ul>\n<blockquote>\n<p>2020-4-16更新 1.0.0-&gt;1.1.0</p>\n</blockquote>\n<ul>\n<li>添加了自己封装的工具函数模块</li>\n<li>添加对AMD模块化支持 <a href=\"https://requirejs.org/\">如何使用</a></li>\n</ul>\n<h1 id=\"食用指南\"><a href=\"#食用指南\" class=\"headerlink\" title=\"食用指南\"></a>食用指南</h1><h2 id=\"下载该脚手架\"><a href=\"#下载该脚手架\" class=\"headerlink\" title=\"下载该脚手架\"></a>下载该脚手架</h2><p>测试阶段，暂时只能通过github来下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone git@github.com:SHUAXINDIARY/demo-cli.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 1.先安装node</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 2.全局安装gulp</span><br>npm i gulp -g<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 3.安装依赖</span><br>npm i <br></code></pre></td></tr></table></figure>\n\n<h2 id=\"目录说明\"><a href=\"#目录说明\" class=\"headerlink\" title=\"目录说明\"></a>目录说明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">+ src---开发目录<br>   + assets---存放其他资源：resetcss、图标等<br>   + css---样式文件<br>   + js----js代码<br>   + less--less文件(可选：不使用无视即可)<br>   + ts----ts文件(可选：不使用无视即可)<br>   - index.html---src根目录存放页面文件<br>- babelrc---babel配置(可自定义参考官方配置)<br>+ gulpfile.js---gulp配置目录<br>   - index.js---入口文件<br>   - Tasks.js---任务方法文件<br>   - paths.js---打包入口/出口路径<br>- tsconfig.json--ts配置文件(可自定义参考)<br>- config.json----配置项目环境：例如是否使用ts/less、配置本地服务器信息<br></code></pre></td></tr></table></figure>\n<h2 id=\"开始食用\"><a href=\"#开始食用\" class=\"headerlink\" title=\"开始食用\"></a>开始食用</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 开发环境</span><br>npm run dev<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 部署前打包</span><br>npm run build<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"食用配置\"><a href=\"#食用配置\" class=\"headerlink\" title=\"食用配置\"></a>食用配置</h2><p>以下配置根据自行情况选择</p>\n<blockquote>\n<p>是否使用less</p>\n</blockquote>\n<ul>\n<li>进入config.js</li>\n<li>设置less为true</li>\n</ul>\n<blockquote>\n<p>是否使用ts</p>\n</blockquote>\n<ul>\n<li>同上</li>\n<li>ts编译相关配置，参考<a href=\"https://typescript.bootcss.com/tsconfig-json.html\">官方文档</a></li>\n<li>关于ts编译配置支持情况查看<a href=\"https://www.npmjs.com/package/gulp-typescript\">gulp-typescript</a></li>\n</ul>\n<blockquote>\n<p>配置本地服务器信息</p>\n</blockquote>\n<ul>\n<li>进入config.js</li>\n<li>可根据<a href=\"https://www.npmjs.com/package/gulp-connect\">gulp-connect</a>配置</li>\n</ul>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><ul>\n<li><a href=\"https://github.com/SHUAXINDIARY/demo-cli\">该项目源码</a></li>\n</ul>"},{"title":"vue-cli3配置","abbrlink":419,"date":"2019-10-14T11:26:57.000Z","_content":"\n# vue-cli3.0常见配置\n<!-- more -->\n### 配置打包后资源依赖路径\n>创建vue.config.js\n```js\nmodule.exports={\n    publicPath: process.env.NODE_ENV === 'production'\n        ? '/TODO/'\n        : '/'\n};\n```\n\n### 配置请求本地json文件\n>1.通过配置webpack的[devserver](https://webpack.js.org/configuration/dev-server/) \n>2.导入expres来响应路由请求，并返回json文件内容\n```js\nconst express = require('express')\nconst app = express()\nvar apiRoutes = express.Router()\napp.use('/api', apiRoutes)\n// 加载本地的json文件\nvar globalData = require('[你的json文件路径]');\nmodule.exports={\n    // webpack devServer的配置\n    devServer: {\n        // host: 'localhost',\n        // port: '8080',\n        before(app) {\n            app.get('[路由路径]', (req, res, next) => {\n                res.json({\n                    // 这里是你的json内容\n                    errno: 0,\n                    data: globalData(上面引入的json文件变量)\n                })\n            })\n        },\n    },\n}\n```\n","source":"_posts/vue/vue-cli3配置.md","raw":"---\ntitle: vue-cli3配置\ncategory:\n  - 技术笔记\ntag:\n  - Vue\n  - 踩坑\nabbrlink: 419\ndate: 2019-10-14 19:26:57\n---\n\n# vue-cli3.0常见配置\n<!-- more -->\n### 配置打包后资源依赖路径\n>创建vue.config.js\n```js\nmodule.exports={\n    publicPath: process.env.NODE_ENV === 'production'\n        ? '/TODO/'\n        : '/'\n};\n```\n\n### 配置请求本地json文件\n>1.通过配置webpack的[devserver](https://webpack.js.org/configuration/dev-server/) \n>2.导入expres来响应路由请求，并返回json文件内容\n```js\nconst express = require('express')\nconst app = express()\nvar apiRoutes = express.Router()\napp.use('/api', apiRoutes)\n// 加载本地的json文件\nvar globalData = require('[你的json文件路径]');\nmodule.exports={\n    // webpack devServer的配置\n    devServer: {\n        // host: 'localhost',\n        // port: '8080',\n        before(app) {\n            app.get('[路由路径]', (req, res, next) => {\n                res.json({\n                    // 这里是你的json内容\n                    errno: 0,\n                    data: globalData(上面引入的json文件变量)\n                })\n            })\n        },\n    },\n}\n```\n","slug":"vue/vue-cli3配置","published":1,"updated":"2021-12-31T12:01:59.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv170014j7jf1qogewst","content":"<h1 id=\"vue-cli3-0常见配置\"><a href=\"#vue-cli3-0常见配置\" class=\"headerlink\" title=\"vue-cli3.0常见配置\"></a>vue-cli3.0常见配置</h1><a id=\"more\"></a>\n<h3 id=\"配置打包后资源依赖路径\"><a href=\"#配置打包后资源依赖路径\" class=\"headerlink\" title=\"配置打包后资源依赖路径\"></a>配置打包后资源依赖路径</h3><blockquote>\n<p>创建vue.config.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    publicPath: process.env.NODE_ENV === <span class=\"hljs-string\">&#x27;production&#x27;</span><br>        ? <span class=\"hljs-string\">&#x27;/TODO/&#x27;</span><br>        : <span class=\"hljs-string\">&#x27;/&#x27;</span><br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"配置请求本地json文件\"><a href=\"#配置请求本地json文件\" class=\"headerlink\" title=\"配置请求本地json文件\"></a>配置请求本地json文件</h3><blockquote>\n<p>1.通过配置webpack的<a href=\"https://webpack.js.org/configuration/dev-server/\">devserver</a><br>2.导入expres来响应路由请求，并返回json文件内容</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> app = express()<br><span class=\"hljs-keyword\">var</span> apiRoutes = express.Router()<br>app.use(<span class=\"hljs-string\">&#x27;/api&#x27;</span>, apiRoutes)<br><span class=\"hljs-comment\">// 加载本地的json文件</span><br><span class=\"hljs-keyword\">var</span> globalData = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;[你的json文件路径]&#x27;</span>);<br><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    <span class=\"hljs-comment\">// webpack devServer的配置</span><br>    devServer: &#123;<br>        <span class=\"hljs-comment\">// host: &#x27;localhost&#x27;,</span><br>        <span class=\"hljs-comment\">// port: &#x27;8080&#x27;,</span><br>        before(app) &#123;<br>            app.get(<span class=\"hljs-string\">&#x27;[路由路径]&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>                res.json(&#123;<br>                    <span class=\"hljs-comment\">// 这里是你的json内容</span><br>                    errno: <span class=\"hljs-number\">0</span>,<br>                    data: globalData(上面引入的json文件变量)<br>                &#125;)<br>            &#125;)<br>        &#125;,<br>    &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":725,"excerpt":"<h1 id=\"vue-cli3-0常见配置\"><a href=\"#vue-cli3-0常见配置\" class=\"headerlink\" title=\"vue-cli3.0常见配置\"></a>vue-cli3.0常见配置</h1>","more":"<h3 id=\"配置打包后资源依赖路径\"><a href=\"#配置打包后资源依赖路径\" class=\"headerlink\" title=\"配置打包后资源依赖路径\"></a>配置打包后资源依赖路径</h3><blockquote>\n<p>创建vue.config.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    publicPath: process.env.NODE_ENV === <span class=\"hljs-string\">&#x27;production&#x27;</span><br>        ? <span class=\"hljs-string\">&#x27;/TODO/&#x27;</span><br>        : <span class=\"hljs-string\">&#x27;/&#x27;</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置请求本地json文件\"><a href=\"#配置请求本地json文件\" class=\"headerlink\" title=\"配置请求本地json文件\"></a>配置请求本地json文件</h3><blockquote>\n<p>1.通过配置webpack的<a href=\"https://webpack.js.org/configuration/dev-server/\">devserver</a><br>2.导入expres来响应路由请求，并返回json文件内容</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> app = express()<br><span class=\"hljs-keyword\">var</span> apiRoutes = express.Router()<br>app.use(<span class=\"hljs-string\">&#x27;/api&#x27;</span>, apiRoutes)<br><span class=\"hljs-comment\">// 加载本地的json文件</span><br><span class=\"hljs-keyword\">var</span> globalData = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;[你的json文件路径]&#x27;</span>);<br><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    <span class=\"hljs-comment\">// webpack devServer的配置</span><br>    devServer: &#123;<br>        <span class=\"hljs-comment\">// host: &#x27;localhost&#x27;,</span><br>        <span class=\"hljs-comment\">// port: &#x27;8080&#x27;,</span><br>        before(app) &#123;<br>            app.get(<span class=\"hljs-string\">&#x27;[路由路径]&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>                res.json(&#123;<br>                    <span class=\"hljs-comment\">// 这里是你的json内容</span><br>                    errno: <span class=\"hljs-number\">0</span>,<br>                    data: globalData(上面引入的json文件变量)<br>                &#125;)<br>            &#125;)<br>        &#125;,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"antd表格组件扩展行","abbrlink":37055,"date":"2020-08-28T14:26:21.000Z","_content":"\n# 开头\n- 最近入职的团队主要技术栈是react，组件库是antd；因为之前写react少，antd也没用过，所以导致上手第一时间还有蛮多不习惯的；然后就有些小坑，记录一下。\n\n<!-- more -->\n\n# 问题描述\n- 需求是表格展示数据需要将一些数据隐藏起来，然后通过点击指定的按钮展开/收起一个面板，来显示这些数据\n- 官方有提供这个功能，但是没有提供接口让你可以指定需要展开的按钮，然后查了一圈也没查到，就好好看了看文档，研究了下可以通过几个api来实现这个需求\n\n## 步骤\n\n>需要的api\n- expandable：展开功能配置\n- expandIcon：定义展开图标\n- expandedRowKeys：控制展开的行\n\n>思路说明\n- 当table组件配置了expandable后，表格会自动在第一列添加个按钮（是个图标），然后通过这个按钮来控制面板的展开收起\n- 1.通过定义展开图标来隐藏图标，这样就没有点击的目标了，等于取消了该开关\n- 2.设置expandedRowKeys，通过表格每一行的key来控制打开或隐藏那一行面板\n- 3.expandedRowKeys是一个数组，元素为字符串，就是每一行的key，当这个数组有某一行的key，这一行的面板就会被打开，没有反之；利用该特性，在我们需要指定的按钮上绑定一个事件，来动态的添加对应行的key到该数组即可\n\n# 代码\n```React\nimport React, { useState } from 'react'\nimport { Table, Button } from 'antd'\nimport './main.css'\n\nconst Main = () => {\n    const [openKeys, setOpenKeys] = useState([])\n    const handleOpenRow = (id) => {\n        let index = openKeys.indexOf(id)\n        if (index === -1) {\n            setOpenKeys(() => {\n                return [...openKeys, id]\n            })\n        } else {\n            const arr = openKeys\n            arr.splice(index, 1)\n            setOpenKeys(() => {\n                return [...arr]\n            })\n        }\n\n    }\n    const columns = [\n        {\n            title: 'ID',\n            align: 'center',\n            dataIndex: 'key',\n        },\n        {\n            title: '姓名',\n            align: 'center',\n            dataIndex: 'name',\n        }, {\n            title: \"操作\",\n            align: 'center',\n            render: (row) => {\n                return (\n                    <Button type=\"link\" onClick={() => handleOpenRow(row.key)}>\n                        {\n                            openKeys.indexOf(row.key) === -1 ? '展开' : '收起'\n                        }\n                    </Button>\n                )\n            }\n        }\n    ]\n    const tableData = [{\n        key: '1',\n        name: \"one\",\n        sex: \"man\"\n    },\n    {\n        key: '2',\n        name: 'two',\n        sex: \"man\"\n    }]\n    return (\n         <div className=\"container\">\n            <Table columns={columns} dataSource={tableData}\n                // 开启扩展行\n                expandable={{\n                    // 定义扩展行内容\n                    expandedRowRender: record => {\n                        return <p>sex：{record.sex}</p>\n                    },\n                    // 自定义按钮图标\n                    expandIcon: _ => '',\n                    // 定义哪些行开启\n                    expandedRowKeys: openKeys\n                }}\n            />\n        </div>\n    )\n}\nexport default Main\n```","source":"_posts/技术笔记/antd表格组件扩展行.md","raw":"---\ntitle: antd表格组件扩展行\ncategory:\n  - 技术笔记\ntag:\n  - React\n  - 踩坑\nabbrlink: 37055\ndate: 2020-08-28 22:26:21\n---\n\n# 开头\n- 最近入职的团队主要技术栈是react，组件库是antd；因为之前写react少，antd也没用过，所以导致上手第一时间还有蛮多不习惯的；然后就有些小坑，记录一下。\n\n<!-- more -->\n\n# 问题描述\n- 需求是表格展示数据需要将一些数据隐藏起来，然后通过点击指定的按钮展开/收起一个面板，来显示这些数据\n- 官方有提供这个功能，但是没有提供接口让你可以指定需要展开的按钮，然后查了一圈也没查到，就好好看了看文档，研究了下可以通过几个api来实现这个需求\n\n## 步骤\n\n>需要的api\n- expandable：展开功能配置\n- expandIcon：定义展开图标\n- expandedRowKeys：控制展开的行\n\n>思路说明\n- 当table组件配置了expandable后，表格会自动在第一列添加个按钮（是个图标），然后通过这个按钮来控制面板的展开收起\n- 1.通过定义展开图标来隐藏图标，这样就没有点击的目标了，等于取消了该开关\n- 2.设置expandedRowKeys，通过表格每一行的key来控制打开或隐藏那一行面板\n- 3.expandedRowKeys是一个数组，元素为字符串，就是每一行的key，当这个数组有某一行的key，这一行的面板就会被打开，没有反之；利用该特性，在我们需要指定的按钮上绑定一个事件，来动态的添加对应行的key到该数组即可\n\n# 代码\n```React\nimport React, { useState } from 'react'\nimport { Table, Button } from 'antd'\nimport './main.css'\n\nconst Main = () => {\n    const [openKeys, setOpenKeys] = useState([])\n    const handleOpenRow = (id) => {\n        let index = openKeys.indexOf(id)\n        if (index === -1) {\n            setOpenKeys(() => {\n                return [...openKeys, id]\n            })\n        } else {\n            const arr = openKeys\n            arr.splice(index, 1)\n            setOpenKeys(() => {\n                return [...arr]\n            })\n        }\n\n    }\n    const columns = [\n        {\n            title: 'ID',\n            align: 'center',\n            dataIndex: 'key',\n        },\n        {\n            title: '姓名',\n            align: 'center',\n            dataIndex: 'name',\n        }, {\n            title: \"操作\",\n            align: 'center',\n            render: (row) => {\n                return (\n                    <Button type=\"link\" onClick={() => handleOpenRow(row.key)}>\n                        {\n                            openKeys.indexOf(row.key) === -1 ? '展开' : '收起'\n                        }\n                    </Button>\n                )\n            }\n        }\n    ]\n    const tableData = [{\n        key: '1',\n        name: \"one\",\n        sex: \"man\"\n    },\n    {\n        key: '2',\n        name: 'two',\n        sex: \"man\"\n    }]\n    return (\n         <div className=\"container\">\n            <Table columns={columns} dataSource={tableData}\n                // 开启扩展行\n                expandable={{\n                    // 定义扩展行内容\n                    expandedRowRender: record => {\n                        return <p>sex：{record.sex}</p>\n                    },\n                    // 自定义按钮图标\n                    expandIcon: _ => '',\n                    // 定义哪些行开启\n                    expandedRowKeys: openKeys\n                }}\n            />\n        </div>\n    )\n}\nexport default Main\n```","slug":"技术笔记/antd表格组件扩展行","published":1,"updated":"2021-12-31T12:01:59.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv180017j7jf17qp8rph","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><ul>\n<li>最近入职的团队主要技术栈是react，组件库是antd；因为之前写react少，antd也没用过，所以导致上手第一时间还有蛮多不习惯的；然后就有些小坑，记录一下。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><ul>\n<li>需求是表格展示数据需要将一些数据隐藏起来，然后通过点击指定的按钮展开/收起一个面板，来显示这些数据</li>\n<li>官方有提供这个功能，但是没有提供接口让你可以指定需要展开的按钮，然后查了一圈也没查到，就好好看了看文档，研究了下可以通过几个api来实现这个需求</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><blockquote>\n<p>需要的api</p>\n</blockquote>\n<ul>\n<li>expandable：展开功能配置</li>\n<li>expandIcon：定义展开图标</li>\n<li>expandedRowKeys：控制展开的行</li>\n</ul>\n<blockquote>\n<p>思路说明</p>\n</blockquote>\n<ul>\n<li>当table组件配置了expandable后，表格会自动在第一列添加个按钮（是个图标），然后通过这个按钮来控制面板的展开收起</li>\n<li>1.通过定义展开图标来隐藏图标，这样就没有点击的目标了，等于取消了该开关</li>\n<li>2.设置expandedRowKeys，通过表格每一行的key来控制打开或隐藏那一行面板</li>\n<li>3.expandedRowKeys是一个数组，元素为字符串，就是每一行的key，当这个数组有某一行的key，这一行的面板就会被打开，没有反之；利用该特性，在我们需要指定的按钮上绑定一个事件，来动态的添加对应行的key到该数组即可</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs React\">import React, &#123; useState &#125; from &#39;react&#39;<br>import &#123; Table, Button &#125; from &#39;antd&#39;<br>import &#39;.&#x2F;main.css&#39;<br><br>const Main &#x3D; () &#x3D;&gt; &#123;<br>    const [openKeys, setOpenKeys] &#x3D; useState([])<br>    const handleOpenRow &#x3D; (id) &#x3D;&gt; &#123;<br>        let index &#x3D; openKeys.indexOf(id)<br>        if (index &#x3D;&#x3D;&#x3D; -1) &#123;<br>            setOpenKeys(() &#x3D;&gt; &#123;<br>                return [...openKeys, id]<br>            &#125;)<br>        &#125; else &#123;<br>            const arr &#x3D; openKeys<br>            arr.splice(index, 1)<br>            setOpenKeys(() &#x3D;&gt; &#123;<br>                return [...arr]<br>            &#125;)<br>        &#125;<br><br>    &#125;<br>    const columns &#x3D; [<br>        &#123;<br>            title: &#39;ID&#39;,<br>            align: &#39;center&#39;,<br>            dataIndex: &#39;key&#39;,<br>        &#125;,<br>        &#123;<br>            title: &#39;姓名&#39;,<br>            align: &#39;center&#39;,<br>            dataIndex: &#39;name&#39;,<br>        &#125;, &#123;<br>            title: &quot;操作&quot;,<br>            align: &#39;center&#39;,<br>            render: (row) &#x3D;&gt; &#123;<br>                return (<br>                    &lt;Button type&#x3D;&quot;link&quot; onClick&#x3D;&#123;() &#x3D;&gt; handleOpenRow(row.key)&#125;&gt;<br>                        &#123;<br>                            openKeys.indexOf(row.key) &#x3D;&#x3D;&#x3D; -1 ? &#39;展开&#39; : &#39;收起&#39;<br>                        &#125;<br>                    &lt;&#x2F;Button&gt;<br>                )<br>            &#125;<br>        &#125;<br>    ]<br>    const tableData &#x3D; [&#123;<br>        key: &#39;1&#39;,<br>        name: &quot;one&quot;,<br>        sex: &quot;man&quot;<br>    &#125;,<br>    &#123;<br>        key: &#39;2&#39;,<br>        name: &#39;two&#39;,<br>        sex: &quot;man&quot;<br>    &#125;]<br>    return (<br>         &lt;div className&#x3D;&quot;container&quot;&gt;<br>            &lt;Table columns&#x3D;&#123;columns&#125; dataSource&#x3D;&#123;tableData&#125;<br>                &#x2F;&#x2F; 开启扩展行<br>                expandable&#x3D;&#123;&#123;<br>                    &#x2F;&#x2F; 定义扩展行内容<br>                    expandedRowRender: record &#x3D;&gt; &#123;<br>                        return &lt;p&gt;sex：&#123;record.sex&#125;&lt;&#x2F;p&gt;<br>                    &#125;,<br>                    &#x2F;&#x2F; 自定义按钮图标<br>                    expandIcon: _ &#x3D;&gt; &#39;&#39;,<br>                    &#x2F;&#x2F; 定义哪些行开启<br>                    expandedRowKeys: openKeys<br>                &#125;&#125;<br>            &#x2F;&gt;<br>        &lt;&#x2F;div&gt;<br>    )<br>&#125;<br>export default Main<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":2266,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><ul>\n<li>最近入职的团队主要技术栈是react，组件库是antd；因为之前写react少，antd也没用过，所以导致上手第一时间还有蛮多不习惯的；然后就有些小坑，记录一下。</li>\n</ul>","more":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><ul>\n<li>需求是表格展示数据需要将一些数据隐藏起来，然后通过点击指定的按钮展开/收起一个面板，来显示这些数据</li>\n<li>官方有提供这个功能，但是没有提供接口让你可以指定需要展开的按钮，然后查了一圈也没查到，就好好看了看文档，研究了下可以通过几个api来实现这个需求</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><blockquote>\n<p>需要的api</p>\n</blockquote>\n<ul>\n<li>expandable：展开功能配置</li>\n<li>expandIcon：定义展开图标</li>\n<li>expandedRowKeys：控制展开的行</li>\n</ul>\n<blockquote>\n<p>思路说明</p>\n</blockquote>\n<ul>\n<li>当table组件配置了expandable后，表格会自动在第一列添加个按钮（是个图标），然后通过这个按钮来控制面板的展开收起</li>\n<li>1.通过定义展开图标来隐藏图标，这样就没有点击的目标了，等于取消了该开关</li>\n<li>2.设置expandedRowKeys，通过表格每一行的key来控制打开或隐藏那一行面板</li>\n<li>3.expandedRowKeys是一个数组，元素为字符串，就是每一行的key，当这个数组有某一行的key，这一行的面板就会被打开，没有反之；利用该特性，在我们需要指定的按钮上绑定一个事件，来动态的添加对应行的key到该数组即可</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs React\">import React, &#123; useState &#125; from &#39;react&#39;<br>import &#123; Table, Button &#125; from &#39;antd&#39;<br>import &#39;.&#x2F;main.css&#39;<br><br>const Main &#x3D; () &#x3D;&gt; &#123;<br>    const [openKeys, setOpenKeys] &#x3D; useState([])<br>    const handleOpenRow &#x3D; (id) &#x3D;&gt; &#123;<br>        let index &#x3D; openKeys.indexOf(id)<br>        if (index &#x3D;&#x3D;&#x3D; -1) &#123;<br>            setOpenKeys(() &#x3D;&gt; &#123;<br>                return [...openKeys, id]<br>            &#125;)<br>        &#125; else &#123;<br>            const arr &#x3D; openKeys<br>            arr.splice(index, 1)<br>            setOpenKeys(() &#x3D;&gt; &#123;<br>                return [...arr]<br>            &#125;)<br>        &#125;<br><br>    &#125;<br>    const columns &#x3D; [<br>        &#123;<br>            title: &#39;ID&#39;,<br>            align: &#39;center&#39;,<br>            dataIndex: &#39;key&#39;,<br>        &#125;,<br>        &#123;<br>            title: &#39;姓名&#39;,<br>            align: &#39;center&#39;,<br>            dataIndex: &#39;name&#39;,<br>        &#125;, &#123;<br>            title: &quot;操作&quot;,<br>            align: &#39;center&#39;,<br>            render: (row) &#x3D;&gt; &#123;<br>                return (<br>                    &lt;Button type&#x3D;&quot;link&quot; onClick&#x3D;&#123;() &#x3D;&gt; handleOpenRow(row.key)&#125;&gt;<br>                        &#123;<br>                            openKeys.indexOf(row.key) &#x3D;&#x3D;&#x3D; -1 ? &#39;展开&#39; : &#39;收起&#39;<br>                        &#125;<br>                    &lt;&#x2F;Button&gt;<br>                )<br>            &#125;<br>        &#125;<br>    ]<br>    const tableData &#x3D; [&#123;<br>        key: &#39;1&#39;,<br>        name: &quot;one&quot;,<br>        sex: &quot;man&quot;<br>    &#125;,<br>    &#123;<br>        key: &#39;2&#39;,<br>        name: &#39;two&#39;,<br>        sex: &quot;man&quot;<br>    &#125;]<br>    return (<br>         &lt;div className&#x3D;&quot;container&quot;&gt;<br>            &lt;Table columns&#x3D;&#123;columns&#125; dataSource&#x3D;&#123;tableData&#125;<br>                &#x2F;&#x2F; 开启扩展行<br>                expandable&#x3D;&#123;&#123;<br>                    &#x2F;&#x2F; 定义扩展行内容<br>                    expandedRowRender: record &#x3D;&gt; &#123;<br>                        return &lt;p&gt;sex：&#123;record.sex&#125;&lt;&#x2F;p&gt;<br>                    &#125;,<br>                    &#x2F;&#x2F; 自定义按钮图标<br>                    expandIcon: _ &#x3D;&gt; &#39;&#39;,<br>                    &#x2F;&#x2F; 定义哪些行开启<br>                    expandedRowKeys: openKeys<br>                &#125;&#125;<br>            &#x2F;&gt;<br>        &lt;&#x2F;div&gt;<br>    )<br>&#125;<br>export default Main<br></code></pre></td></tr></table></figure>"},{"title":"git笔记","abbrlink":26666,"date":"2019-10-10T03:57:17.000Z","_content":"\n# 说明\n>下文命令中 [ ]内部为具体要填写的数据，并不包括[ ]\n\n>如: git clone [url],实际为 git clone https://****\n\n# GIT学习\n\n## 关于 GIT\n>项目的版本管理工具\n>多人同时开发项目协作工具\n\n## 使用\n>官网下载并安装git \n\n<!-- more -->\n## 常用命令\n\n***初始化仓库***\n```shell\n# 进入你的项目文件夹 初始化该项目\ngit init\n```\n***全局配置***\n\n****注:刚下载好，第一次使用时做这一步****\n```shell\ngit config --global user.name \"[name]\"\ngit config --global user.email \"[email]\"\n```\n\n***克隆项目***\n```shell\ngit clone [项目地址]\n```\n\n***项目管理***\n>增加文件到暂存区\n```shell\n# 添加指定文件 到暂存区\ngit add [文件名] [文件名] ...\n# 添加指定目录 到暂存区\ngit add [目录名]\n# 添加所有 到暂存区\ngit add .\n```\n>将暂存区的文件提交到仓库区\n```shell\n# 提交暂存区所有文件\ngit commit -m '[提交备注]'\n# 提交暂存区指定文件\ngit commit [文件名] [文件名] ... -m '[备注]'\n```\n>撤销暂存区的文件\n```shell\n# 恢复暂存区文件到工作区\ngit checkout [文件名]\n# 恢复所有\ngit checkout .\n```\n\n***分支***\n>如果在vscode，一下操作可以通过软件的界面完成\n```shell\n# 查看本地所有分支\ngit branch\n# 查看远程仓库分支\ngit branch -r\n# 同时查看本地和远程所有分支\ngit branch -a \n# 新建分支，但还留在本分支\ngit branch [分支名]\n# 创建分支并切换到新建分支\ngit checkout -b [分支名]\n# 切换分支\ngit checkout [分支名]\n# 删除分支\ngit branch -d [分支名]\n# 合并本地另一个分支代码到当前分支\ngit merge [目标分支]\n```\n\n\n***远程仓库***\n```shell\n# 添加远程仓库\ngit remote add [重命名] [url]\n# 将本地仓库推送到远程仓库 master分支(或其他分支)\ngit push  origin master\n# 提交时创建本地分支和远程对应的分支关联\ngit push -u origin master\n# 之后提交关联后的仓库代码时直接\ngit push\n# 将本地仓库代码提交并强行覆盖远程库的代码(慎重操作)\ngit push -f\n\n# 同步远程仓库代码到本地\ngit pull [远程分支] [本地分支]\n```\n\n## 使用技巧\n\n### ***master分支***\n>项目最稳定最完整，随时可上线代码\n### hotfix\n>修复线上bug\n### feature分支\n>开发新功能版本\n### ***devlop分支***\n>功能最新最全分支\n","source":"_posts/技术笔记/git笔记.md","raw":"---\ntitle: git笔记\ncategory:\n  - 技术笔记\ntag:\n  - Git\n  - 踩坑\nabbrlink: 26666\ndate: 2019-10-10 11:57:17\n---\n\n# 说明\n>下文命令中 [ ]内部为具体要填写的数据，并不包括[ ]\n\n>如: git clone [url],实际为 git clone https://****\n\n# GIT学习\n\n## 关于 GIT\n>项目的版本管理工具\n>多人同时开发项目协作工具\n\n## 使用\n>官网下载并安装git \n\n<!-- more -->\n## 常用命令\n\n***初始化仓库***\n```shell\n# 进入你的项目文件夹 初始化该项目\ngit init\n```\n***全局配置***\n\n****注:刚下载好，第一次使用时做这一步****\n```shell\ngit config --global user.name \"[name]\"\ngit config --global user.email \"[email]\"\n```\n\n***克隆项目***\n```shell\ngit clone [项目地址]\n```\n\n***项目管理***\n>增加文件到暂存区\n```shell\n# 添加指定文件 到暂存区\ngit add [文件名] [文件名] ...\n# 添加指定目录 到暂存区\ngit add [目录名]\n# 添加所有 到暂存区\ngit add .\n```\n>将暂存区的文件提交到仓库区\n```shell\n# 提交暂存区所有文件\ngit commit -m '[提交备注]'\n# 提交暂存区指定文件\ngit commit [文件名] [文件名] ... -m '[备注]'\n```\n>撤销暂存区的文件\n```shell\n# 恢复暂存区文件到工作区\ngit checkout [文件名]\n# 恢复所有\ngit checkout .\n```\n\n***分支***\n>如果在vscode，一下操作可以通过软件的界面完成\n```shell\n# 查看本地所有分支\ngit branch\n# 查看远程仓库分支\ngit branch -r\n# 同时查看本地和远程所有分支\ngit branch -a \n# 新建分支，但还留在本分支\ngit branch [分支名]\n# 创建分支并切换到新建分支\ngit checkout -b [分支名]\n# 切换分支\ngit checkout [分支名]\n# 删除分支\ngit branch -d [分支名]\n# 合并本地另一个分支代码到当前分支\ngit merge [目标分支]\n```\n\n\n***远程仓库***\n```shell\n# 添加远程仓库\ngit remote add [重命名] [url]\n# 将本地仓库推送到远程仓库 master分支(或其他分支)\ngit push  origin master\n# 提交时创建本地分支和远程对应的分支关联\ngit push -u origin master\n# 之后提交关联后的仓库代码时直接\ngit push\n# 将本地仓库代码提交并强行覆盖远程库的代码(慎重操作)\ngit push -f\n\n# 同步远程仓库代码到本地\ngit pull [远程分支] [本地分支]\n```\n\n## 使用技巧\n\n### ***master分支***\n>项目最稳定最完整，随时可上线代码\n### hotfix\n>修复线上bug\n### feature分支\n>开发新功能版本\n### ***devlop分支***\n>功能最新最全分支\n","slug":"技术笔记/git笔记","published":1,"updated":"2021-12-31T12:01:59.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv19001aj7jfb2f90tz8","content":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><blockquote>\n<p>下文命令中 [ ]内部为具体要填写的数据，并不包括[ ]</p>\n</blockquote>\n<blockquote>\n<p>如: git clone [url],实际为 git clone https://****</p>\n</blockquote>\n<h1 id=\"GIT学习\"><a href=\"#GIT学习\" class=\"headerlink\" title=\"GIT学习\"></a>GIT学习</h1><h2 id=\"关于-GIT\"><a href=\"#关于-GIT\" class=\"headerlink\" title=\"关于 GIT\"></a>关于 GIT</h2><blockquote>\n<p>项目的版本管理工具<br>多人同时开发项目协作工具</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><blockquote>\n<p>官网下载并安装git </p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p><strong><em>初始化仓库</em></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 进入你的项目文件夹 初始化该项目</span><br>git init<br></code></pre></div></td></tr></table></figure>\n<p><strong><em>全局配置</em></strong></p>\n<p><strong><strong>注:刚下载好，第一次使用时做这一步</strong></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">git config --global user.name &quot;[name]&quot;<br>git config --global user.email &quot;[email]&quot;<br></code></pre></div></td></tr></table></figure>\n\n<p><strong><em>克隆项目</em></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">git clone [项目地址]<br></code></pre></div></td></tr></table></figure>\n\n<p><strong><em>项目管理</em></strong></p>\n<blockquote>\n<p>增加文件到暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加指定文件 到暂存区</span><br>git add [文件名] [文件名] ...<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加指定目录 到暂存区</span><br>git add [目录名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加所有 到暂存区</span><br>git add .<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>将暂存区的文件提交到仓库区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 提交暂存区所有文件</span><br>git commit -m &#x27;[提交备注]&#x27;<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 提交暂存区指定文件</span><br>git commit [文件名] [文件名] ... -m &#x27;[备注]&#x27;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>撤销暂存区的文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 恢复暂存区文件到工作区</span><br>git checkout [文件名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 恢复所有</span><br>git checkout .<br></code></pre></div></td></tr></table></figure>\n\n<p><strong><em>分支</em></strong></p>\n<blockquote>\n<p>如果在vscode，一下操作可以通过软件的界面完成</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看本地所有分支</span><br>git branch<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看远程仓库分支</span><br>git branch -r<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 同时查看本地和远程所有分支</span><br>git branch -a <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 新建分支，但还留在本分支</span><br>git branch [分支名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建分支并切换到新建分支</span><br>git checkout -b [分支名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切换分支</span><br>git checkout [分支名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除分支</span><br>git branch -d [分支名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 合并本地另一个分支代码到当前分支</span><br>git merge [目标分支]<br></code></pre></div></td></tr></table></figure>\n\n\n<p><strong><em>远程仓库</em></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加远程仓库</span><br>git remote add [重命名] [url]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 将本地仓库推送到远程仓库 master分支(或其他分支)</span><br>git push  origin master<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 提交时创建本地分支和远程对应的分支关联</span><br>git push -u origin master<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 之后提交关联后的仓库代码时直接</span><br>git push<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 将本地仓库代码提交并强行覆盖远程库的代码(慎重操作)</span><br>git push -f<br><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 同步远程仓库代码到本地</span><br>git pull [远程分支] [本地分支]<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><h3 id=\"master分支\"><a href=\"#master分支\" class=\"headerlink\" title=\"master分支\"></a><strong><em>master分支</em></strong></h3><blockquote>\n<p>项目最稳定最完整，随时可上线代码</p>\n</blockquote>\n<h3 id=\"hotfix\"><a href=\"#hotfix\" class=\"headerlink\" title=\"hotfix\"></a>hotfix</h3><blockquote>\n<p>修复线上bug</p>\n</blockquote>\n<h3 id=\"feature分支\"><a href=\"#feature分支\" class=\"headerlink\" title=\"feature分支\"></a>feature分支</h3><blockquote>\n<p>开发新功能版本</p>\n</blockquote>\n<h3 id=\"devlop分支\"><a href=\"#devlop分支\" class=\"headerlink\" title=\"devlop分支\"></a><strong><em>devlop分支</em></strong></h3><blockquote>\n<p>功能最新最全分支</p>\n</blockquote>\n","site":{"data":{}},"wordcount":1069,"excerpt":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><blockquote>\n<p>下文命令中 [ ]内部为具体要填写的数据，并不包括[ ]</p>\n</blockquote>\n<blockquote>\n<p>如: git clone [url],实际为 git clone https://****</p>\n</blockquote>\n<h1 id=\"GIT学习\"><a href=\"#GIT学习\" class=\"headerlink\" title=\"GIT学习\"></a>GIT学习</h1><h2 id=\"关于-GIT\"><a href=\"#关于-GIT\" class=\"headerlink\" title=\"关于 GIT\"></a>关于 GIT</h2><blockquote>\n<p>项目的版本管理工具<br>多人同时开发项目协作工具</p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><blockquote>\n<p>官网下载并安装git </p>\n</blockquote>","more":"<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p><strong><em>初始化仓库</em></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 进入你的项目文件夹 初始化该项目</span><br>git init<br></code></pre></td></tr></table></figure>\n<p><strong><em>全局配置</em></strong></p>\n<p><strong><strong>注:刚下载好，第一次使用时做这一步</strong></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git config --global user.name &quot;[name]&quot;<br>git config --global user.email &quot;[email]&quot;<br></code></pre></td></tr></table></figure>\n\n<p><strong><em>克隆项目</em></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone [项目地址]<br></code></pre></td></tr></table></figure>\n\n<p><strong><em>项目管理</em></strong></p>\n<blockquote>\n<p>增加文件到暂存区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加指定文件 到暂存区</span><br>git add [文件名] [文件名] ...<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加指定目录 到暂存区</span><br>git add [目录名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加所有 到暂存区</span><br>git add .<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>将暂存区的文件提交到仓库区</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 提交暂存区所有文件</span><br>git commit -m &#x27;[提交备注]&#x27;<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 提交暂存区指定文件</span><br>git commit [文件名] [文件名] ... -m &#x27;[备注]&#x27;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>撤销暂存区的文件</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 恢复暂存区文件到工作区</span><br>git checkout [文件名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 恢复所有</span><br>git checkout .<br></code></pre></td></tr></table></figure>\n\n<p><strong><em>分支</em></strong></p>\n<blockquote>\n<p>如果在vscode，一下操作可以通过软件的界面完成</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看本地所有分支</span><br>git branch<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看远程仓库分支</span><br>git branch -r<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 同时查看本地和远程所有分支</span><br>git branch -a <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 新建分支，但还留在本分支</span><br>git branch [分支名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建分支并切换到新建分支</span><br>git checkout -b [分支名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切换分支</span><br>git checkout [分支名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除分支</span><br>git branch -d [分支名]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 合并本地另一个分支代码到当前分支</span><br>git merge [目标分支]<br></code></pre></td></tr></table></figure>\n\n\n<p><strong><em>远程仓库</em></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加远程仓库</span><br>git remote add [重命名] [url]<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 将本地仓库推送到远程仓库 master分支(或其他分支)</span><br>git push  origin master<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 提交时创建本地分支和远程对应的分支关联</span><br>git push -u origin master<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 之后提交关联后的仓库代码时直接</span><br>git push<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 将本地仓库代码提交并强行覆盖远程库的代码(慎重操作)</span><br>git push -f<br><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 同步远程仓库代码到本地</span><br>git pull [远程分支] [本地分支]<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><h3 id=\"master分支\"><a href=\"#master分支\" class=\"headerlink\" title=\"master分支\"></a><strong><em>master分支</em></strong></h3><blockquote>\n<p>项目最稳定最完整，随时可上线代码</p>\n</blockquote>\n<h3 id=\"hotfix\"><a href=\"#hotfix\" class=\"headerlink\" title=\"hotfix\"></a>hotfix</h3><blockquote>\n<p>修复线上bug</p>\n</blockquote>\n<h3 id=\"feature分支\"><a href=\"#feature分支\" class=\"headerlink\" title=\"feature分支\"></a>feature分支</h3><blockquote>\n<p>开发新功能版本</p>\n</blockquote>\n<h3 id=\"devlop分支\"><a href=\"#devlop分支\" class=\"headerlink\" title=\"devlop分支\"></a><strong><em>devlop分支</em></strong></h3><blockquote>\n<p>功能最新最全分支</p>\n</blockquote>"},{"title":"git笔记2","abbrlink":2664,"date":"2020-05-29T08:18:17.000Z","_content":"\n# 问题\n在之前使用git管理代码的时候，会经常出现commit后，才发现有的地方有注释没加或者注释错别字等等问题，导致需要重新修改在add在commit，然后就会出现log中很多很没意义的commit，记录一下当出现这种情况，怎么消除之前的commit，让log看起来更清晰明了\n<!-- more -->\n# 正文\n对这种一般有两种方法，一种是操作HEAD回到指定的commit，然后修改内容在commit即可；另外就是合并多个commit\n### 相关概念\ngit管理的目录中，有这么几个概念：\n- 工作目录：workspace---为我们平时编辑文件的区域\n- 缓存区：index---git add到的区域\n- 本地仓库：local repository---git commit的区域\n- 远程仓库：remote repository---git push的区域\n- HEAD：指针，默认始终指向我们最新的commit\n\n### 回滚commit\n>相关概念\n- 用到git reset命令\n- 这个命令有三个参数:- - <soft|hard|mixed>\n- 用法 git reset -- <参数> [指定commit编号]\n\n>参数的含义\n- soft：不改变工作区的内容，之前commit的内容会回退在缓存区\n- mixed：不加参数时的默认为该参数，之前的commit内容不回退到缓存，需要再次add\n- hard：会影响工作区，让回退前的commit的代码全部删除\n\n>soft演示\n- 现在有个目录的分支是这样 ![图1](/img/git/git.png)\n- 情况是这样，在addcon这个commit后，发现没有添加注释，于是添加了注释，再一次进行了commit并注释为add注释；这一次commit就没有什么实质作用，现在干掉这次commit\n- 步骤：使用reset，通过指定commit的id来改变HEAD指向到init：git reset --soft 234ee9da \n- 现在分支情况是 ![图2](/img/git/git2.png)\n- 暂存区：![图3](/img/git/git3.png) 显示尚未commit\n- 最后在commit一次，在查看分支情况：![图4](/img/git/git4.png) 这样就将前两次应该一次完成提交的commit改成了一次\n- 总结：如果仅仅想回滚commit，重新commit，可以使用soft\n\n>mixed\n- 情况和上述一样,现在分支情况:![图5](/img/git/git5.png) \n- 现在回退到完成注释和功能的commit，然后干掉addcon2和添加注释两次commit   git reset --soft d62192e2  \n- 查看现在分支状况和缓存区 ![图6](/img/git/git6.png)  ![图7](/img/git/git7.png) \n- 和soft的区别仅仅是mixed的时候缓存区中没有内容，需要手动add修改内容后在进行commit，但是相同的是都没有修改工作区的内容\n- 总结：回滚版本并需要修改一下代码，重新commit，可以使用mixed\n\n>hard\n- 现在的分支情况： ![图8](/img/git/git8.png) \n- 背景：现在init之后的commit的内容都作废，需要重新开始，并且要清楚commit记录，可以使用hard\n- ![图9](/img/git/git9.png) ![图10](/img/git/git10.png) \n- 总结：hard适用于回滚commit时，且回滚到的指定commit之后的commit都不需要，会清空缓存区和工作区中不需要的commit的内容\n\n### 合并commit\n使用git rebase来合并需要合并的多个commit\n>演示\n- 现在分支情况 ![图11](/img/git/git11.png) \n- 现在要把***完成功能1*** ***完成功能2*** ***完成所有功能***合并成一次commit\n- 先把HEAD指向调到需要合并的多个commit的第一个commit:git rebase -i HEAD~3\n- 说明：HEAD的数字1为最新的commit\n- 这时会出现一个vim编辑器打开的文件 ![图12](/img/git/git12.png) \n- 头三行为要合并的分支，以第一行为例：**pick**是一个命令，**1e1f6cb**为该commit的编号，**完成功能1**为该commit的注释\n- 合并commit就是通过改变不同的命令来实现，看到下面的注释有提示命令有pick、reword、edit、squash、fixup、exec、break、drop、label、reset\n- 修改第二三行的pick为squash，该命令为使用commit，与之前的commit合并\n- 修改保存退出后，会继续显示一个vim编辑器打开的文件，这里可以更改commit的注释 ![图13](/img/git/git13.png)\n- 上面的为合并的commit的注释，自行选择是否可以修改；下面为被合并的commit的注释信息 \n- 操作完后，现在分支情况 ![图14](/img/git/git14.png)\n\n\n\n# 合并\n之前对于分支合并，一直使用的merge，无意间一次看到rebase也可以用来合并分支，于是试验了一下两者的区别；记录一下\n\n>merge\n- 指定一个分支，合并到当前所在分支；下例合并dev到master\n- git merge dev\n- 现有的分支情况如下：![图15](/img/git/git15.png)\n- 使用merge后 ![图16](/img/git/git16.png)\n- 对比发现，两者合并后在master分支多了一个commit\n\n>rebase\n- 合并当前分支到执行分支；下例rebase 分支dev到master\n- git rebase <指定branch>\n- 现有的分支情况如下：![图15](/img/git/git15.png)\n- 使用rebase后 ![图17](/img/git/git17.png)\n- 没有新的commit出现，而是把dev最新的commit和master最新的commit进行了合并\n\n>总结\n- 对于需要严格保留每次commit记录的时候使用merge\n- 对于只是在另一个分支进行了一些额外的开发测试，最后确认无误，且该功能本来就是要在某分支进行的，就可以直接使用rebase；比如自己在一个分支开发某一个模块，然后对于其中的一些地方不想影响其他代码，就可以单独开一个新分支进行开发测试，开发完成没问题后，不需要保留记录，直接rebase即可\n\n\n# 其他操作\n记录一下这个学习过程中了解到的一些其他的操作\n>修改commit注释\n```bash\n    git commit - -amend\n```\n\n>撤销缓存区的文件\n```bash\n# 方式1\ngit reset\n# 方式2 \ngit rm --cached <filename>\n```\n\n>从缓存和工作目录中同时清除\n```bash\n# 方式1\ngit reset --hard\n# 方式2\ngit reset --f <filename>\n```\n\n>查看缓存区文件\n```bash\ngit status\n```\n# 参考链接\n- [gitbook中文](http://gitbook.liuhui998.com/4_2.html)\n- 分支可视化使用的vscode的插件---GitGraph","source":"_posts/技术笔记/git笔记2.md","raw":"---\ntitle: git笔记2\ncategory:\n  - 技术笔记\ntag:\n  - Git\n  - 踩坑\nabbrlink: 2664\ndate: 2020-05-29 16:18:17\n---\n\n# 问题\n在之前使用git管理代码的时候，会经常出现commit后，才发现有的地方有注释没加或者注释错别字等等问题，导致需要重新修改在add在commit，然后就会出现log中很多很没意义的commit，记录一下当出现这种情况，怎么消除之前的commit，让log看起来更清晰明了\n<!-- more -->\n# 正文\n对这种一般有两种方法，一种是操作HEAD回到指定的commit，然后修改内容在commit即可；另外就是合并多个commit\n### 相关概念\ngit管理的目录中，有这么几个概念：\n- 工作目录：workspace---为我们平时编辑文件的区域\n- 缓存区：index---git add到的区域\n- 本地仓库：local repository---git commit的区域\n- 远程仓库：remote repository---git push的区域\n- HEAD：指针，默认始终指向我们最新的commit\n\n### 回滚commit\n>相关概念\n- 用到git reset命令\n- 这个命令有三个参数:- - <soft|hard|mixed>\n- 用法 git reset -- <参数> [指定commit编号]\n\n>参数的含义\n- soft：不改变工作区的内容，之前commit的内容会回退在缓存区\n- mixed：不加参数时的默认为该参数，之前的commit内容不回退到缓存，需要再次add\n- hard：会影响工作区，让回退前的commit的代码全部删除\n\n>soft演示\n- 现在有个目录的分支是这样 ![图1](/img/git/git.png)\n- 情况是这样，在addcon这个commit后，发现没有添加注释，于是添加了注释，再一次进行了commit并注释为add注释；这一次commit就没有什么实质作用，现在干掉这次commit\n- 步骤：使用reset，通过指定commit的id来改变HEAD指向到init：git reset --soft 234ee9da \n- 现在分支情况是 ![图2](/img/git/git2.png)\n- 暂存区：![图3](/img/git/git3.png) 显示尚未commit\n- 最后在commit一次，在查看分支情况：![图4](/img/git/git4.png) 这样就将前两次应该一次完成提交的commit改成了一次\n- 总结：如果仅仅想回滚commit，重新commit，可以使用soft\n\n>mixed\n- 情况和上述一样,现在分支情况:![图5](/img/git/git5.png) \n- 现在回退到完成注释和功能的commit，然后干掉addcon2和添加注释两次commit   git reset --soft d62192e2  \n- 查看现在分支状况和缓存区 ![图6](/img/git/git6.png)  ![图7](/img/git/git7.png) \n- 和soft的区别仅仅是mixed的时候缓存区中没有内容，需要手动add修改内容后在进行commit，但是相同的是都没有修改工作区的内容\n- 总结：回滚版本并需要修改一下代码，重新commit，可以使用mixed\n\n>hard\n- 现在的分支情况： ![图8](/img/git/git8.png) \n- 背景：现在init之后的commit的内容都作废，需要重新开始，并且要清楚commit记录，可以使用hard\n- ![图9](/img/git/git9.png) ![图10](/img/git/git10.png) \n- 总结：hard适用于回滚commit时，且回滚到的指定commit之后的commit都不需要，会清空缓存区和工作区中不需要的commit的内容\n\n### 合并commit\n使用git rebase来合并需要合并的多个commit\n>演示\n- 现在分支情况 ![图11](/img/git/git11.png) \n- 现在要把***完成功能1*** ***完成功能2*** ***完成所有功能***合并成一次commit\n- 先把HEAD指向调到需要合并的多个commit的第一个commit:git rebase -i HEAD~3\n- 说明：HEAD的数字1为最新的commit\n- 这时会出现一个vim编辑器打开的文件 ![图12](/img/git/git12.png) \n- 头三行为要合并的分支，以第一行为例：**pick**是一个命令，**1e1f6cb**为该commit的编号，**完成功能1**为该commit的注释\n- 合并commit就是通过改变不同的命令来实现，看到下面的注释有提示命令有pick、reword、edit、squash、fixup、exec、break、drop、label、reset\n- 修改第二三行的pick为squash，该命令为使用commit，与之前的commit合并\n- 修改保存退出后，会继续显示一个vim编辑器打开的文件，这里可以更改commit的注释 ![图13](/img/git/git13.png)\n- 上面的为合并的commit的注释，自行选择是否可以修改；下面为被合并的commit的注释信息 \n- 操作完后，现在分支情况 ![图14](/img/git/git14.png)\n\n\n\n# 合并\n之前对于分支合并，一直使用的merge，无意间一次看到rebase也可以用来合并分支，于是试验了一下两者的区别；记录一下\n\n>merge\n- 指定一个分支，合并到当前所在分支；下例合并dev到master\n- git merge dev\n- 现有的分支情况如下：![图15](/img/git/git15.png)\n- 使用merge后 ![图16](/img/git/git16.png)\n- 对比发现，两者合并后在master分支多了一个commit\n\n>rebase\n- 合并当前分支到执行分支；下例rebase 分支dev到master\n- git rebase <指定branch>\n- 现有的分支情况如下：![图15](/img/git/git15.png)\n- 使用rebase后 ![图17](/img/git/git17.png)\n- 没有新的commit出现，而是把dev最新的commit和master最新的commit进行了合并\n\n>总结\n- 对于需要严格保留每次commit记录的时候使用merge\n- 对于只是在另一个分支进行了一些额外的开发测试，最后确认无误，且该功能本来就是要在某分支进行的，就可以直接使用rebase；比如自己在一个分支开发某一个模块，然后对于其中的一些地方不想影响其他代码，就可以单独开一个新分支进行开发测试，开发完成没问题后，不需要保留记录，直接rebase即可\n\n\n# 其他操作\n记录一下这个学习过程中了解到的一些其他的操作\n>修改commit注释\n```bash\n    git commit - -amend\n```\n\n>撤销缓存区的文件\n```bash\n# 方式1\ngit reset\n# 方式2 \ngit rm --cached <filename>\n```\n\n>从缓存和工作目录中同时清除\n```bash\n# 方式1\ngit reset --hard\n# 方式2\ngit reset --f <filename>\n```\n\n>查看缓存区文件\n```bash\ngit status\n```\n# 参考链接\n- [gitbook中文](http://gitbook.liuhui998.com/4_2.html)\n- 分支可视化使用的vscode的插件---GitGraph","slug":"技术笔记/git笔记2","published":1,"updated":"2021-12-31T12:01:59.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv19001dj7jffrm101wg","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在之前使用git管理代码的时候，会经常出现commit后，才发现有的地方有注释没加或者注释错别字等等问题，导致需要重新修改在add在commit，然后就会出现log中很多很没意义的commit，记录一下当出现这种情况，怎么消除之前的commit，让log看起来更清晰明了</p>\n<a id=\"more\"></a>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>对这种一般有两种方法，一种是操作HEAD回到指定的commit，然后修改内容在commit即可；另外就是合并多个commit</p>\n<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><p>git管理的目录中，有这么几个概念：</p>\n<ul>\n<li>工作目录：workspace—为我们平时编辑文件的区域</li>\n<li>缓存区：index—git add到的区域</li>\n<li>本地仓库：local repository—git commit的区域</li>\n<li>远程仓库：remote repository—git push的区域</li>\n<li>HEAD：指针，默认始终指向我们最新的commit</li>\n</ul>\n<h3 id=\"回滚commit\"><a href=\"#回滚commit\" class=\"headerlink\" title=\"回滚commit\"></a>回滚commit</h3><blockquote>\n<p>相关概念</p>\n</blockquote>\n<ul>\n<li>用到git reset命令</li>\n<li>这个命令有三个参数:- - &lt;soft|hard|mixed&gt;</li>\n<li>用法 git reset – &lt;参数&gt; [指定commit编号]</li>\n</ul>\n<blockquote>\n<p>参数的含义</p>\n</blockquote>\n<ul>\n<li>soft：不改变工作区的内容，之前commit的内容会回退在缓存区</li>\n<li>mixed：不加参数时的默认为该参数，之前的commit内容不回退到缓存，需要再次add</li>\n<li>hard：会影响工作区，让回退前的commit的代码全部删除</li>\n</ul>\n<blockquote>\n<p>soft演示</p>\n</blockquote>\n<ul>\n<li>现在有个目录的分支是这样 <img src=\"/img/git/git.png\" alt=\"图1\"></li>\n<li>情况是这样，在addcon这个commit后，发现没有添加注释，于是添加了注释，再一次进行了commit并注释为add注释；这一次commit就没有什么实质作用，现在干掉这次commit</li>\n<li>步骤：使用reset，通过指定commit的id来改变HEAD指向到init：git reset –soft 234ee9da </li>\n<li>现在分支情况是 <img src=\"/img/git/git2.png\" alt=\"图2\"></li>\n<li>暂存区：<img src=\"/img/git/git3.png\" alt=\"图3\"> 显示尚未commit</li>\n<li>最后在commit一次，在查看分支情况：<img src=\"/img/git/git4.png\" alt=\"图4\"> 这样就将前两次应该一次完成提交的commit改成了一次</li>\n<li>总结：如果仅仅想回滚commit，重新commit，可以使用soft</li>\n</ul>\n<blockquote>\n<p>mixed</p>\n</blockquote>\n<ul>\n<li>情况和上述一样,现在分支情况:<img src=\"/img/git/git5.png\" alt=\"图5\"> </li>\n<li>现在回退到完成注释和功能的commit，然后干掉addcon2和添加注释两次commit   git reset –soft d62192e2  </li>\n<li>查看现在分支状况和缓存区 <img src=\"/img/git/git6.png\" alt=\"图6\">  <img src=\"/img/git/git7.png\" alt=\"图7\"> </li>\n<li>和soft的区别仅仅是mixed的时候缓存区中没有内容，需要手动add修改内容后在进行commit，但是相同的是都没有修改工作区的内容</li>\n<li>总结：回滚版本并需要修改一下代码，重新commit，可以使用mixed</li>\n</ul>\n<blockquote>\n<p>hard</p>\n</blockquote>\n<ul>\n<li>现在的分支情况： <img src=\"/img/git/git8.png\" alt=\"图8\"> </li>\n<li>背景：现在init之后的commit的内容都作废，需要重新开始，并且要清楚commit记录，可以使用hard</li>\n<li><img src=\"/img/git/git9.png\" alt=\"图9\"> <img src=\"/img/git/git10.png\" alt=\"图10\"> </li>\n<li>总结：hard适用于回滚commit时，且回滚到的指定commit之后的commit都不需要，会清空缓存区和工作区中不需要的commit的内容</li>\n</ul>\n<h3 id=\"合并commit\"><a href=\"#合并commit\" class=\"headerlink\" title=\"合并commit\"></a>合并commit</h3><p>使用git rebase来合并需要合并的多个commit</p>\n<blockquote>\n<p>演示</p>\n</blockquote>\n<ul>\n<li>现在分支情况 <img src=\"/img/git/git11.png\" alt=\"图11\"> </li>\n<li>现在要把*<strong>完成功能1*** *</strong>完成功能2*** <strong><em>完成所有功能</em></strong>合并成一次commit</li>\n<li>先把HEAD指向调到需要合并的多个commit的第一个commit:git rebase -i HEAD~3</li>\n<li>说明：HEAD的数字1为最新的commit</li>\n<li>这时会出现一个vim编辑器打开的文件 <img src=\"/img/git/git12.png\" alt=\"图12\"> </li>\n<li>头三行为要合并的分支，以第一行为例：<strong>pick</strong>是一个命令，<strong>1e1f6cb</strong>为该commit的编号，<strong>完成功能1</strong>为该commit的注释</li>\n<li>合并commit就是通过改变不同的命令来实现，看到下面的注释有提示命令有pick、reword、edit、squash、fixup、exec、break、drop、label、reset</li>\n<li>修改第二三行的pick为squash，该命令为使用commit，与之前的commit合并</li>\n<li>修改保存退出后，会继续显示一个vim编辑器打开的文件，这里可以更改commit的注释 <img src=\"/img/git/git13.png\" alt=\"图13\"></li>\n<li>上面的为合并的commit的注释，自行选择是否可以修改；下面为被合并的commit的注释信息 </li>\n<li>操作完后，现在分支情况 <img src=\"/img/git/git14.png\" alt=\"图14\"></li>\n</ul>\n<h1 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h1><p>之前对于分支合并，一直使用的merge，无意间一次看到rebase也可以用来合并分支，于是试验了一下两者的区别；记录一下</p>\n<blockquote>\n<p>merge</p>\n</blockquote>\n<ul>\n<li>指定一个分支，合并到当前所在分支；下例合并dev到master</li>\n<li>git merge dev</li>\n<li>现有的分支情况如下：<img src=\"/img/git/git15.png\" alt=\"图15\"></li>\n<li>使用merge后 <img src=\"/img/git/git16.png\" alt=\"图16\"></li>\n<li>对比发现，两者合并后在master分支多了一个commit</li>\n</ul>\n<blockquote>\n<p>rebase</p>\n</blockquote>\n<ul>\n<li>合并当前分支到执行分支；下例rebase 分支dev到master</li>\n<li>git rebase &lt;指定branch&gt;</li>\n<li>现有的分支情况如下：<img src=\"/img/git/git15.png\" alt=\"图15\"></li>\n<li>使用rebase后 <img src=\"/img/git/git17.png\" alt=\"图17\"></li>\n<li>没有新的commit出现，而是把dev最新的commit和master最新的commit进行了合并</li>\n</ul>\n<blockquote>\n<p>总结</p>\n</blockquote>\n<ul>\n<li>对于需要严格保留每次commit记录的时候使用merge</li>\n<li>对于只是在另一个分支进行了一些额外的开发测试，最后确认无误，且该功能本来就是要在某分支进行的，就可以直接使用rebase；比如自己在一个分支开发某一个模块，然后对于其中的一些地方不想影响其他代码，就可以单独开一个新分支进行开发测试，开发完成没问题后，不需要保留记录，直接rebase即可</li>\n</ul>\n<h1 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h1><p>记录一下这个学习过程中了解到的一些其他的操作</p>\n<blockquote>\n<p>修改commit注释</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">git commit - -amend<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p>撤销缓存区的文件</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 方式1</span><br>git reset<br><span class=\"hljs-comment\"># 方式2 </span><br>git rm --cached &lt;filename&gt;<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p>从缓存和工作目录中同时清除</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 方式1</span><br>git reset --hard<br><span class=\"hljs-comment\"># 方式2</span><br>git reset --f &lt;filename&gt;<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p>查看缓存区文件</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs bash\">git status<br></code></pre></div></td></tr></table></figure>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"http://gitbook.liuhui998.com/4_2.html\">gitbook中文</a></li>\n<li>分支可视化使用的vscode的插件—GitGraph</li>\n</ul>\n","site":{"data":{}},"wordcount":2336,"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>在之前使用git管理代码的时候，会经常出现commit后，才发现有的地方有注释没加或者注释错别字等等问题，导致需要重新修改在add在commit，然后就会出现log中很多很没意义的commit，记录一下当出现这种情况，怎么消除之前的commit，让log看起来更清晰明了</p>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>对这种一般有两种方法，一种是操作HEAD回到指定的commit，然后修改内容在commit即可；另外就是合并多个commit</p>\n<h3 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h3><p>git管理的目录中，有这么几个概念：</p>\n<ul>\n<li>工作目录：workspace—为我们平时编辑文件的区域</li>\n<li>缓存区：index—git add到的区域</li>\n<li>本地仓库：local repository—git commit的区域</li>\n<li>远程仓库：remote repository—git push的区域</li>\n<li>HEAD：指针，默认始终指向我们最新的commit</li>\n</ul>\n<h3 id=\"回滚commit\"><a href=\"#回滚commit\" class=\"headerlink\" title=\"回滚commit\"></a>回滚commit</h3><blockquote>\n<p>相关概念</p>\n</blockquote>\n<ul>\n<li>用到git reset命令</li>\n<li>这个命令有三个参数:- - &lt;soft|hard|mixed&gt;</li>\n<li>用法 git reset – &lt;参数&gt; [指定commit编号]</li>\n</ul>\n<blockquote>\n<p>参数的含义</p>\n</blockquote>\n<ul>\n<li>soft：不改变工作区的内容，之前commit的内容会回退在缓存区</li>\n<li>mixed：不加参数时的默认为该参数，之前的commit内容不回退到缓存，需要再次add</li>\n<li>hard：会影响工作区，让回退前的commit的代码全部删除</li>\n</ul>\n<blockquote>\n<p>soft演示</p>\n</blockquote>\n<ul>\n<li>现在有个目录的分支是这样 <img src=\"/img/git/git.png\" alt=\"图1\"></li>\n<li>情况是这样，在addcon这个commit后，发现没有添加注释，于是添加了注释，再一次进行了commit并注释为add注释；这一次commit就没有什么实质作用，现在干掉这次commit</li>\n<li>步骤：使用reset，通过指定commit的id来改变HEAD指向到init：git reset –soft 234ee9da </li>\n<li>现在分支情况是 <img src=\"/img/git/git2.png\" alt=\"图2\"></li>\n<li>暂存区：<img src=\"/img/git/git3.png\" alt=\"图3\"> 显示尚未commit</li>\n<li>最后在commit一次，在查看分支情况：<img src=\"/img/git/git4.png\" alt=\"图4\"> 这样就将前两次应该一次完成提交的commit改成了一次</li>\n<li>总结：如果仅仅想回滚commit，重新commit，可以使用soft</li>\n</ul>\n<blockquote>\n<p>mixed</p>\n</blockquote>\n<ul>\n<li>情况和上述一样,现在分支情况:<img src=\"/img/git/git5.png\" alt=\"图5\"> </li>\n<li>现在回退到完成注释和功能的commit，然后干掉addcon2和添加注释两次commit   git reset –soft d62192e2  </li>\n<li>查看现在分支状况和缓存区 <img src=\"/img/git/git6.png\" alt=\"图6\">  <img src=\"/img/git/git7.png\" alt=\"图7\"> </li>\n<li>和soft的区别仅仅是mixed的时候缓存区中没有内容，需要手动add修改内容后在进行commit，但是相同的是都没有修改工作区的内容</li>\n<li>总结：回滚版本并需要修改一下代码，重新commit，可以使用mixed</li>\n</ul>\n<blockquote>\n<p>hard</p>\n</blockquote>\n<ul>\n<li>现在的分支情况： <img src=\"/img/git/git8.png\" alt=\"图8\"> </li>\n<li>背景：现在init之后的commit的内容都作废，需要重新开始，并且要清楚commit记录，可以使用hard</li>\n<li><img src=\"/img/git/git9.png\" alt=\"图9\"> <img src=\"/img/git/git10.png\" alt=\"图10\"> </li>\n<li>总结：hard适用于回滚commit时，且回滚到的指定commit之后的commit都不需要，会清空缓存区和工作区中不需要的commit的内容</li>\n</ul>\n<h3 id=\"合并commit\"><a href=\"#合并commit\" class=\"headerlink\" title=\"合并commit\"></a>合并commit</h3><p>使用git rebase来合并需要合并的多个commit</p>\n<blockquote>\n<p>演示</p>\n</blockquote>\n<ul>\n<li>现在分支情况 <img src=\"/img/git/git11.png\" alt=\"图11\"> </li>\n<li>现在要把*<strong>完成功能1*** *</strong>完成功能2*** <strong><em>完成所有功能</em></strong>合并成一次commit</li>\n<li>先把HEAD指向调到需要合并的多个commit的第一个commit:git rebase -i HEAD~3</li>\n<li>说明：HEAD的数字1为最新的commit</li>\n<li>这时会出现一个vim编辑器打开的文件 <img src=\"/img/git/git12.png\" alt=\"图12\"> </li>\n<li>头三行为要合并的分支，以第一行为例：<strong>pick</strong>是一个命令，<strong>1e1f6cb</strong>为该commit的编号，<strong>完成功能1</strong>为该commit的注释</li>\n<li>合并commit就是通过改变不同的命令来实现，看到下面的注释有提示命令有pick、reword、edit、squash、fixup、exec、break、drop、label、reset</li>\n<li>修改第二三行的pick为squash，该命令为使用commit，与之前的commit合并</li>\n<li>修改保存退出后，会继续显示一个vim编辑器打开的文件，这里可以更改commit的注释 <img src=\"/img/git/git13.png\" alt=\"图13\"></li>\n<li>上面的为合并的commit的注释，自行选择是否可以修改；下面为被合并的commit的注释信息 </li>\n<li>操作完后，现在分支情况 <img src=\"/img/git/git14.png\" alt=\"图14\"></li>\n</ul>\n<h1 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h1><p>之前对于分支合并，一直使用的merge，无意间一次看到rebase也可以用来合并分支，于是试验了一下两者的区别；记录一下</p>\n<blockquote>\n<p>merge</p>\n</blockquote>\n<ul>\n<li>指定一个分支，合并到当前所在分支；下例合并dev到master</li>\n<li>git merge dev</li>\n<li>现有的分支情况如下：<img src=\"/img/git/git15.png\" alt=\"图15\"></li>\n<li>使用merge后 <img src=\"/img/git/git16.png\" alt=\"图16\"></li>\n<li>对比发现，两者合并后在master分支多了一个commit</li>\n</ul>\n<blockquote>\n<p>rebase</p>\n</blockquote>\n<ul>\n<li>合并当前分支到执行分支；下例rebase 分支dev到master</li>\n<li>git rebase &lt;指定branch&gt;</li>\n<li>现有的分支情况如下：<img src=\"/img/git/git15.png\" alt=\"图15\"></li>\n<li>使用rebase后 <img src=\"/img/git/git17.png\" alt=\"图17\"></li>\n<li>没有新的commit出现，而是把dev最新的commit和master最新的commit进行了合并</li>\n</ul>\n<blockquote>\n<p>总结</p>\n</blockquote>\n<ul>\n<li>对于需要严格保留每次commit记录的时候使用merge</li>\n<li>对于只是在另一个分支进行了一些额外的开发测试，最后确认无误，且该功能本来就是要在某分支进行的，就可以直接使用rebase；比如自己在一个分支开发某一个模块，然后对于其中的一些地方不想影响其他代码，就可以单独开一个新分支进行开发测试，开发完成没问题后，不需要保留记录，直接rebase即可</li>\n</ul>\n<h1 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h1><p>记录一下这个学习过程中了解到的一些其他的操作</p>\n<blockquote>\n<p>修改commit注释</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git commit - -amend<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>撤销缓存区的文件</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 方式1</span><br>git reset<br><span class=\"hljs-comment\"># 方式2 </span><br>git rm --cached &lt;filename&gt;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从缓存和工作目录中同时清除</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 方式1</span><br>git reset --hard<br><span class=\"hljs-comment\"># 方式2</span><br>git reset --f &lt;filename&gt;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看缓存区文件</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git status<br></code></pre></td></tr></table></figure>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"http://gitbook.liuhui998.com/4_2.html\">gitbook中文</a></li>\n<li>分支可视化使用的vscode的插件—GitGraph</li>\n</ul>"},{"title":"mongoose简单入门","abbrlink":39885,"date":"2019-08-14T01:51:57.000Z","_content":"# mongoose是什么？\nMongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。\n<!-- more -->\n# 基本增删改查使用(最近几天用过的一些基本的操作) [中文文档](http://www.mongoosejs.net/docs/index.html)\n1.安装mongoose\n```javascript\nnpm i mongoose --save\n```\n2.引入mongoose\n```javascript\nconst mongoose=requie('mongoose'); \n```\n3.连接本地数据库\n```javascript\n// 参数是mongodb:+数据库地址/数据库名称 \n// useNewUrlParser 是设置新的url解析\nmongoose.connect('mongodb://localhost:27017/mongo-relation', { useNewUrlParser: true });\n```\n3.创建集合,以创建一个users集合(即数据库表)为例\n```javascript\n// mongoose通过model来对应数据库中的集合 \n// 第一个参数时 是集合名 第二个参数是设置集合的键以及类型\nconst Users=mongoose.model('Users',new mongoose.Scema({\n    name:{\n        type:String\n    }\n}));\n```\n4.插入数据，向users集合中插入2行文档(即数据)\n```javascript\nconst insert=async function(){\n    await Users.insertMany([{\n        name:'刷新1'\n    },{\n        name:'shuaxin'\n    }]);\n    console.log('插入成功');\n};\ninsert();\n```\n5.查找数据\n```javascript\nconst find=async function(){\n    // 查找集合中所有数据\n    const users=await Users.find();\n    cosnole.log(users);\n    // 根据条件查找\n    const findUser=await Users.find().where({\n        name:'刷新1'\n    });\n    cosnole.log(findUser);\n    // 限制条数查找\n    const twoUsers = await Users.find().limit(2);\n    console.log(twoUsers);\n    // 更多使用可以看官网\n};\nfind();\n```\n6.修改数据\n```javascript\nconst updata=async function(){\n    // 先查找要修改的数据\n    const target=await Users.find().where({\n        name:'刷新1'\n    });\n    target.name='刷新2';\n    // 保存修改的数据\n    await Users.save();\n    console.log('修改成功');\n};\nupdate();\n```\n7.删除数据\n```javascript\nconst del=aync function(){\n    // 先查找要删除的数据\n    const target=await Users.find().where({\n        name:'刷新2'\n    });\n    // 直接删除\n    await product.remove();\n    console.log('删除成功');\n};\ndel();\n```\n# 4.集合之间的关联\n1.创建一个性别集合(Gender)和用户(Users)集合 \n2.性别集合插入男(man)和女(woman)属性\n3.在用户集合键类型设置时,性别类型性别集合中对应性别的id，ref为指向性别集合\n\n```javascript\n gender:{type: mongoose.SchemaTypes.ObjectId, ref: 'Gender'}\n```\n4.插入数据时，先获取性别集合中对应的性别，然后设置\n```javascript\n// 获取性别\nconst man=await Gender.findOne({gender:'男'});\nconst woman=await Gender.findOne({gender:'女'});\n// 插入数据\nconst res=await Users.insertMany([{\n    name:'刷新',\n    gender:man\n},{\n    name:'tao',\n    gender:man\n},{\n    name:'guiyi',\n    gender:woman\n}]);\n```\n\n```javascript\n    const mongoose=require('mongoose');\n    mongoose.connect('mongodb://localhost:27017/userMsg', { useNewUrlParser: true });\n\n    // 性别集合\n    const Gender=mongoose.model('Gender',new mongoose.Schema({\n        gender:{\n            type:String\n        }\n    })); \n    // 用户集合\n    const Users=mongoose.model('Users',new mongoose.Schema({\n        name:{type:String},\n        gender:{type: mongoose.SchemaTypes.ObjectId, ref: 'Gender'}\n    }));\n    // 向gender中插入数据\n    const insertGender=async function(){\n        await Gender.insertMany([{\n            gender:'男'\n        },{\n            gender:'女'\n        }]);\n    };\n    // 向users中插入数据\n    const insertUser=async function(){\n        const man=await Gender.findOne({gender:'男'});\n        const woman=await Gender.findOne({gender:'女'});\n        const res=await Users.insertMany([{\n            name:'刷新',\n            gender:man\n        },{\n            name:'tao',\n            gender:man\n        },{\n            name:'guiyi',\n            gender:woman\n        }]);\n    };\n    const main=async function(){\n        const gender=await Gender.find();\n        const users=await Users.find();\n        // 当Gender中没有数据时 执行insertGender\n        if (gender.length==0) {\n            await insertGender();\n            console.log('插入成功');\n        } else {\n            // 当Gender中有数据时 直接打印\n            console.log(gender);\n            if(users.length==0){\n                // 当Users中没有数据时 执行insertGender\n                await insertUser();\n                console.log('用户插入成功');\n            }else{\n                //  当Users中有数据时 执行insertUsers\n                //  populate('gender') 显示分类属性的详细信息\n                const usersDeatl=await Users.find().populate('gender');\n                console.log(usersDeatl);\n            };\n        };\n    };\n    main();\n```\n\n\n","source":"_posts/技术笔记/mongoose使用.md","raw":"---\ntitle: mongoose简单入门\ncategory:\n  - 技术笔记\ntag:\n  - 踩坑\n  - NodeJS\nabbrlink: 39885\ndate: 2019-08-14 09:51:57\n---\n# mongoose是什么？\nMongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。\n<!-- more -->\n# 基本增删改查使用(最近几天用过的一些基本的操作) [中文文档](http://www.mongoosejs.net/docs/index.html)\n1.安装mongoose\n```javascript\nnpm i mongoose --save\n```\n2.引入mongoose\n```javascript\nconst mongoose=requie('mongoose'); \n```\n3.连接本地数据库\n```javascript\n// 参数是mongodb:+数据库地址/数据库名称 \n// useNewUrlParser 是设置新的url解析\nmongoose.connect('mongodb://localhost:27017/mongo-relation', { useNewUrlParser: true });\n```\n3.创建集合,以创建一个users集合(即数据库表)为例\n```javascript\n// mongoose通过model来对应数据库中的集合 \n// 第一个参数时 是集合名 第二个参数是设置集合的键以及类型\nconst Users=mongoose.model('Users',new mongoose.Scema({\n    name:{\n        type:String\n    }\n}));\n```\n4.插入数据，向users集合中插入2行文档(即数据)\n```javascript\nconst insert=async function(){\n    await Users.insertMany([{\n        name:'刷新1'\n    },{\n        name:'shuaxin'\n    }]);\n    console.log('插入成功');\n};\ninsert();\n```\n5.查找数据\n```javascript\nconst find=async function(){\n    // 查找集合中所有数据\n    const users=await Users.find();\n    cosnole.log(users);\n    // 根据条件查找\n    const findUser=await Users.find().where({\n        name:'刷新1'\n    });\n    cosnole.log(findUser);\n    // 限制条数查找\n    const twoUsers = await Users.find().limit(2);\n    console.log(twoUsers);\n    // 更多使用可以看官网\n};\nfind();\n```\n6.修改数据\n```javascript\nconst updata=async function(){\n    // 先查找要修改的数据\n    const target=await Users.find().where({\n        name:'刷新1'\n    });\n    target.name='刷新2';\n    // 保存修改的数据\n    await Users.save();\n    console.log('修改成功');\n};\nupdate();\n```\n7.删除数据\n```javascript\nconst del=aync function(){\n    // 先查找要删除的数据\n    const target=await Users.find().where({\n        name:'刷新2'\n    });\n    // 直接删除\n    await product.remove();\n    console.log('删除成功');\n};\ndel();\n```\n# 4.集合之间的关联\n1.创建一个性别集合(Gender)和用户(Users)集合 \n2.性别集合插入男(man)和女(woman)属性\n3.在用户集合键类型设置时,性别类型性别集合中对应性别的id，ref为指向性别集合\n\n```javascript\n gender:{type: mongoose.SchemaTypes.ObjectId, ref: 'Gender'}\n```\n4.插入数据时，先获取性别集合中对应的性别，然后设置\n```javascript\n// 获取性别\nconst man=await Gender.findOne({gender:'男'});\nconst woman=await Gender.findOne({gender:'女'});\n// 插入数据\nconst res=await Users.insertMany([{\n    name:'刷新',\n    gender:man\n},{\n    name:'tao',\n    gender:man\n},{\n    name:'guiyi',\n    gender:woman\n}]);\n```\n\n```javascript\n    const mongoose=require('mongoose');\n    mongoose.connect('mongodb://localhost:27017/userMsg', { useNewUrlParser: true });\n\n    // 性别集合\n    const Gender=mongoose.model('Gender',new mongoose.Schema({\n        gender:{\n            type:String\n        }\n    })); \n    // 用户集合\n    const Users=mongoose.model('Users',new mongoose.Schema({\n        name:{type:String},\n        gender:{type: mongoose.SchemaTypes.ObjectId, ref: 'Gender'}\n    }));\n    // 向gender中插入数据\n    const insertGender=async function(){\n        await Gender.insertMany([{\n            gender:'男'\n        },{\n            gender:'女'\n        }]);\n    };\n    // 向users中插入数据\n    const insertUser=async function(){\n        const man=await Gender.findOne({gender:'男'});\n        const woman=await Gender.findOne({gender:'女'});\n        const res=await Users.insertMany([{\n            name:'刷新',\n            gender:man\n        },{\n            name:'tao',\n            gender:man\n        },{\n            name:'guiyi',\n            gender:woman\n        }]);\n    };\n    const main=async function(){\n        const gender=await Gender.find();\n        const users=await Users.find();\n        // 当Gender中没有数据时 执行insertGender\n        if (gender.length==0) {\n            await insertGender();\n            console.log('插入成功');\n        } else {\n            // 当Gender中有数据时 直接打印\n            console.log(gender);\n            if(users.length==0){\n                // 当Users中没有数据时 执行insertGender\n                await insertUser();\n                console.log('用户插入成功');\n            }else{\n                //  当Users中有数据时 执行insertUsers\n                //  populate('gender') 显示分类属性的详细信息\n                const usersDeatl=await Users.find().populate('gender');\n                console.log(usersDeatl);\n            };\n        };\n    };\n    main();\n```\n\n\n","slug":"技术笔记/mongoose使用","published":1,"updated":"2021-12-31T12:01:59.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv19001gj7jf1b6zg9qv","content":"<h1 id=\"mongoose是什么？\"><a href=\"#mongoose是什么？\" class=\"headerlink\" title=\"mongoose是什么？\"></a>mongoose是什么？</h1><p>Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。</p>\n<a id=\"more\"></a>\n<h1 id=\"基本增删改查使用-最近几天用过的一些基本的操作-中文文档\"><a href=\"#基本增删改查使用-最近几天用过的一些基本的操作-中文文档\" class=\"headerlink\" title=\"基本增删改查使用(最近几天用过的一些基本的操作) 中文文档\"></a>基本增删改查使用(最近几天用过的一些基本的操作) <a href=\"http://www.mongoosejs.net/docs/index.html\">中文文档</a></h1><p>1.安装mongoose</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">npm i mongoose --save<br></code></pre></div></td></tr></table></figure>\n<p>2.引入mongoose</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> mongoose=requie(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>); <br></code></pre></div></td></tr></table></figure>\n<p>3.连接本地数据库</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 参数是mongodb:+数据库地址/数据库名称 </span><br><span class=\"hljs-comment\">// useNewUrlParser 是设置新的url解析</span><br>mongoose.connect(<span class=\"hljs-string\">&#x27;mongodb://localhost:27017/mongo-relation&#x27;</span>, &#123; <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span> &#125;);<br></code></pre></div></td></tr></table></figure>\n<p>3.创建集合,以创建一个users集合(即数据库表)为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// mongoose通过model来对应数据库中的集合 </span><br><span class=\"hljs-comment\">// 第一个参数时 是集合名 第二个参数是设置集合的键以及类型</span><br><span class=\"hljs-keyword\">const</span> Users=mongoose.model(<span class=\"hljs-string\">&#x27;Users&#x27;</span>,<span class=\"hljs-keyword\">new</span> mongoose.Scema(&#123;<br>    name:&#123;<br>        type:<span class=\"hljs-built_in\">String</span><br>    &#125;<br>&#125;));<br></code></pre></div></td></tr></table></figure>\n<p>4.插入数据，向users集合中插入2行文档(即数据)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> insert=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">await</span> Users.insertMany([&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新1&#x27;</span><br>    &#125;,&#123;<br>        name:<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>    &#125;]);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;插入成功&#x27;</span>);<br>&#125;;<br>insert();<br></code></pre></div></td></tr></table></figure>\n<p>5.查找数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> find=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 查找集合中所有数据</span><br>    <span class=\"hljs-keyword\">const</span> users=<span class=\"hljs-keyword\">await</span> Users.find();<br>    cosnole.log(users);<br>    <span class=\"hljs-comment\">// 根据条件查找</span><br>    <span class=\"hljs-keyword\">const</span> findUser=<span class=\"hljs-keyword\">await</span> Users.find().where(&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新1&#x27;</span><br>    &#125;);<br>    cosnole.log(findUser);<br>    <span class=\"hljs-comment\">// 限制条数查找</span><br>    <span class=\"hljs-keyword\">const</span> twoUsers = <span class=\"hljs-keyword\">await</span> Users.find().limit(<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(twoUsers);<br>    <span class=\"hljs-comment\">// 更多使用可以看官网</span><br>&#125;;<br>find();<br></code></pre></div></td></tr></table></figure>\n<p>6.修改数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> updata=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 先查找要修改的数据</span><br>    <span class=\"hljs-keyword\">const</span> target=<span class=\"hljs-keyword\">await</span> Users.find().where(&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新1&#x27;</span><br>    &#125;);<br>    target.name=<span class=\"hljs-string\">&#x27;刷新2&#x27;</span>;<br>    <span class=\"hljs-comment\">// 保存修改的数据</span><br>    <span class=\"hljs-keyword\">await</span> Users.save();<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;修改成功&#x27;</span>);<br>&#125;;<br>update();<br></code></pre></div></td></tr></table></figure>\n<p>7.删除数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> del=aync <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 先查找要删除的数据</span><br>    <span class=\"hljs-keyword\">const</span> target=<span class=\"hljs-keyword\">await</span> Users.find().where(&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新2&#x27;</span><br>    &#125;);<br>    <span class=\"hljs-comment\">// 直接删除</span><br>    <span class=\"hljs-keyword\">await</span> product.remove();<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;删除成功&#x27;</span>);<br>&#125;;<br>del();<br></code></pre></div></td></tr></table></figure>\n<h1 id=\"4-集合之间的关联\"><a href=\"#4-集合之间的关联\" class=\"headerlink\" title=\"4.集合之间的关联\"></a>4.集合之间的关联</h1><p>1.创建一个性别集合(Gender)和用户(Users)集合<br>2.性别集合插入男(man)和女(woman)属性<br>3.在用户集合键类型设置时,性别类型性别集合中对应性别的id，ref为指向性别集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">gender:&#123;<span class=\"hljs-attr\">type</span>: mongoose.SchemaTypes.ObjectId, <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">&#x27;Gender&#x27;</span>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>4.插入数据时，先获取性别集合中对应的性别，然后设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 获取性别</span><br><span class=\"hljs-keyword\">const</span> man=<span class=\"hljs-keyword\">await</span> Gender.findOne(&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>&#125;);<br><span class=\"hljs-keyword\">const</span> woman=<span class=\"hljs-keyword\">await</span> Gender.findOne(&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;女&#x27;</span>&#125;);<br><span class=\"hljs-comment\">// 插入数据</span><br><span class=\"hljs-keyword\">const</span> res=<span class=\"hljs-keyword\">await</span> Users.insertMany([&#123;<br>    name:<span class=\"hljs-string\">&#x27;刷新&#x27;</span>,<br>    gender:man<br>&#125;,&#123;<br>    name:<span class=\"hljs-string\">&#x27;tao&#x27;</span>,<br>    gender:man<br>&#125;,&#123;<br>    name:<span class=\"hljs-string\">&#x27;guiyi&#x27;</span>,<br>    gender:woman<br>&#125;]);<br></code></pre></div></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> mongoose=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>);<br>mongoose.connect(<span class=\"hljs-string\">&#x27;mongodb://localhost:27017/userMsg&#x27;</span>, &#123; <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span> &#125;);<br><br><span class=\"hljs-comment\">// 性别集合</span><br><span class=\"hljs-keyword\">const</span> Gender=mongoose.model(<span class=\"hljs-string\">&#x27;Gender&#x27;</span>,<span class=\"hljs-keyword\">new</span> mongoose.Schema(&#123;<br>    gender:&#123;<br>        type:<span class=\"hljs-built_in\">String</span><br>    &#125;<br>&#125;)); <br><span class=\"hljs-comment\">// 用户集合</span><br><span class=\"hljs-keyword\">const</span> Users=mongoose.model(<span class=\"hljs-string\">&#x27;Users&#x27;</span>,<span class=\"hljs-keyword\">new</span> mongoose.Schema(&#123;<br>    name:&#123;<span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">String</span>&#125;,<br>    gender:&#123;<span class=\"hljs-attr\">type</span>: mongoose.SchemaTypes.ObjectId, <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">&#x27;Gender&#x27;</span>&#125;<br>&#125;));<br><span class=\"hljs-comment\">// 向gender中插入数据</span><br><span class=\"hljs-keyword\">const</span> insertGender=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">await</span> Gender.insertMany([&#123;<br>        gender:<span class=\"hljs-string\">&#x27;男&#x27;</span><br>    &#125;,&#123;<br>        gender:<span class=\"hljs-string\">&#x27;女&#x27;</span><br>    &#125;]);<br>&#125;;<br><span class=\"hljs-comment\">// 向users中插入数据</span><br><span class=\"hljs-keyword\">const</span> insertUser=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> man=<span class=\"hljs-keyword\">await</span> Gender.findOne(&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>&#125;);<br>    <span class=\"hljs-keyword\">const</span> woman=<span class=\"hljs-keyword\">await</span> Gender.findOne(&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;女&#x27;</span>&#125;);<br>    <span class=\"hljs-keyword\">const</span> res=<span class=\"hljs-keyword\">await</span> Users.insertMany([&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新&#x27;</span>,<br>        gender:man<br>    &#125;,&#123;<br>        name:<span class=\"hljs-string\">&#x27;tao&#x27;</span>,<br>        gender:man<br>    &#125;,&#123;<br>        name:<span class=\"hljs-string\">&#x27;guiyi&#x27;</span>,<br>        gender:woman<br>    &#125;]);<br>&#125;;<br><span class=\"hljs-keyword\">const</span> main=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> gender=<span class=\"hljs-keyword\">await</span> Gender.find();<br>    <span class=\"hljs-keyword\">const</span> users=<span class=\"hljs-keyword\">await</span> Users.find();<br>    <span class=\"hljs-comment\">// 当Gender中没有数据时 执行insertGender</span><br>    <span class=\"hljs-keyword\">if</span> (gender.length==<span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">await</span> insertGender();<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;插入成功&#x27;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 当Gender中有数据时 直接打印</span><br>        <span class=\"hljs-built_in\">console</span>.log(gender);<br>        <span class=\"hljs-keyword\">if</span>(users.length==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-comment\">// 当Users中没有数据时 执行insertGender</span><br>            <span class=\"hljs-keyword\">await</span> insertUser();<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用户插入成功&#x27;</span>);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-comment\">//  当Users中有数据时 执行insertUsers</span><br>            <span class=\"hljs-comment\">//  populate(&#x27;gender&#x27;) 显示分类属性的详细信息</span><br>            <span class=\"hljs-keyword\">const</span> usersDeatl=<span class=\"hljs-keyword\">await</span> Users.find().populate(<span class=\"hljs-string\">&#x27;gender&#x27;</span>);<br>            <span class=\"hljs-built_in\">console</span>.log(usersDeatl);<br>        &#125;;<br>    &#125;;<br>&#125;;<br>main();<br></code></pre></div></td></tr></table></figure>\n\n\n","site":{"data":{}},"wordcount":3756,"excerpt":"<h1 id=\"mongoose是什么？\"><a href=\"#mongoose是什么？\" class=\"headerlink\" title=\"mongoose是什么？\"></a>mongoose是什么？</h1><p>Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。</p>","more":"<h1 id=\"基本增删改查使用-最近几天用过的一些基本的操作-中文文档\"><a href=\"#基本增删改查使用-最近几天用过的一些基本的操作-中文文档\" class=\"headerlink\" title=\"基本增删改查使用(最近几天用过的一些基本的操作) 中文文档\"></a>基本增删改查使用(最近几天用过的一些基本的操作) <a href=\"http://www.mongoosejs.net/docs/index.html\">中文文档</a></h1><p>1.安装mongoose</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">npm i mongoose --save<br></code></pre></td></tr></table></figure>\n<p>2.引入mongoose</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> mongoose=requie(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>); <br></code></pre></td></tr></table></figure>\n<p>3.连接本地数据库</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 参数是mongodb:+数据库地址/数据库名称 </span><br><span class=\"hljs-comment\">// useNewUrlParser 是设置新的url解析</span><br>mongoose.connect(<span class=\"hljs-string\">&#x27;mongodb://localhost:27017/mongo-relation&#x27;</span>, &#123; <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span> &#125;);<br></code></pre></td></tr></table></figure>\n<p>3.创建集合,以创建一个users集合(即数据库表)为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// mongoose通过model来对应数据库中的集合 </span><br><span class=\"hljs-comment\">// 第一个参数时 是集合名 第二个参数是设置集合的键以及类型</span><br><span class=\"hljs-keyword\">const</span> Users=mongoose.model(<span class=\"hljs-string\">&#x27;Users&#x27;</span>,<span class=\"hljs-keyword\">new</span> mongoose.Scema(&#123;<br>    name:&#123;<br>        type:<span class=\"hljs-built_in\">String</span><br>    &#125;<br>&#125;));<br></code></pre></td></tr></table></figure>\n<p>4.插入数据，向users集合中插入2行文档(即数据)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> insert=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">await</span> Users.insertMany([&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新1&#x27;</span><br>    &#125;,&#123;<br>        name:<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>    &#125;]);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;插入成功&#x27;</span>);<br>&#125;;<br>insert();<br></code></pre></td></tr></table></figure>\n<p>5.查找数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> find=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 查找集合中所有数据</span><br>    <span class=\"hljs-keyword\">const</span> users=<span class=\"hljs-keyword\">await</span> Users.find();<br>    cosnole.log(users);<br>    <span class=\"hljs-comment\">// 根据条件查找</span><br>    <span class=\"hljs-keyword\">const</span> findUser=<span class=\"hljs-keyword\">await</span> Users.find().where(&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新1&#x27;</span><br>    &#125;);<br>    cosnole.log(findUser);<br>    <span class=\"hljs-comment\">// 限制条数查找</span><br>    <span class=\"hljs-keyword\">const</span> twoUsers = <span class=\"hljs-keyword\">await</span> Users.find().limit(<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(twoUsers);<br>    <span class=\"hljs-comment\">// 更多使用可以看官网</span><br>&#125;;<br>find();<br></code></pre></td></tr></table></figure>\n<p>6.修改数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> updata=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 先查找要修改的数据</span><br>    <span class=\"hljs-keyword\">const</span> target=<span class=\"hljs-keyword\">await</span> Users.find().where(&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新1&#x27;</span><br>    &#125;);<br>    target.name=<span class=\"hljs-string\">&#x27;刷新2&#x27;</span>;<br>    <span class=\"hljs-comment\">// 保存修改的数据</span><br>    <span class=\"hljs-keyword\">await</span> Users.save();<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;修改成功&#x27;</span>);<br>&#125;;<br>update();<br></code></pre></td></tr></table></figure>\n<p>7.删除数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> del=aync <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 先查找要删除的数据</span><br>    <span class=\"hljs-keyword\">const</span> target=<span class=\"hljs-keyword\">await</span> Users.find().where(&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新2&#x27;</span><br>    &#125;);<br>    <span class=\"hljs-comment\">// 直接删除</span><br>    <span class=\"hljs-keyword\">await</span> product.remove();<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;删除成功&#x27;</span>);<br>&#125;;<br>del();<br></code></pre></td></tr></table></figure>\n<h1 id=\"4-集合之间的关联\"><a href=\"#4-集合之间的关联\" class=\"headerlink\" title=\"4.集合之间的关联\"></a>4.集合之间的关联</h1><p>1.创建一个性别集合(Gender)和用户(Users)集合<br>2.性别集合插入男(man)和女(woman)属性<br>3.在用户集合键类型设置时,性别类型性别集合中对应性别的id，ref为指向性别集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">gender:&#123;<span class=\"hljs-attr\">type</span>: mongoose.SchemaTypes.ObjectId, <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">&#x27;Gender&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>\n<p>4.插入数据时，先获取性别集合中对应的性别，然后设置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 获取性别</span><br><span class=\"hljs-keyword\">const</span> man=<span class=\"hljs-keyword\">await</span> Gender.findOne(&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>&#125;);<br><span class=\"hljs-keyword\">const</span> woman=<span class=\"hljs-keyword\">await</span> Gender.findOne(&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;女&#x27;</span>&#125;);<br><span class=\"hljs-comment\">// 插入数据</span><br><span class=\"hljs-keyword\">const</span> res=<span class=\"hljs-keyword\">await</span> Users.insertMany([&#123;<br>    name:<span class=\"hljs-string\">&#x27;刷新&#x27;</span>,<br>    gender:man<br>&#125;,&#123;<br>    name:<span class=\"hljs-string\">&#x27;tao&#x27;</span>,<br>    gender:man<br>&#125;,&#123;<br>    name:<span class=\"hljs-string\">&#x27;guiyi&#x27;</span>,<br>    gender:woman<br>&#125;]);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> mongoose=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>);<br>mongoose.connect(<span class=\"hljs-string\">&#x27;mongodb://localhost:27017/userMsg&#x27;</span>, &#123; <span class=\"hljs-attr\">useNewUrlParser</span>: <span class=\"hljs-literal\">true</span> &#125;);<br><br><span class=\"hljs-comment\">// 性别集合</span><br><span class=\"hljs-keyword\">const</span> Gender=mongoose.model(<span class=\"hljs-string\">&#x27;Gender&#x27;</span>,<span class=\"hljs-keyword\">new</span> mongoose.Schema(&#123;<br>    gender:&#123;<br>        type:<span class=\"hljs-built_in\">String</span><br>    &#125;<br>&#125;)); <br><span class=\"hljs-comment\">// 用户集合</span><br><span class=\"hljs-keyword\">const</span> Users=mongoose.model(<span class=\"hljs-string\">&#x27;Users&#x27;</span>,<span class=\"hljs-keyword\">new</span> mongoose.Schema(&#123;<br>    name:&#123;<span class=\"hljs-attr\">type</span>:<span class=\"hljs-built_in\">String</span>&#125;,<br>    gender:&#123;<span class=\"hljs-attr\">type</span>: mongoose.SchemaTypes.ObjectId, <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">&#x27;Gender&#x27;</span>&#125;<br>&#125;));<br><span class=\"hljs-comment\">// 向gender中插入数据</span><br><span class=\"hljs-keyword\">const</span> insertGender=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">await</span> Gender.insertMany([&#123;<br>        gender:<span class=\"hljs-string\">&#x27;男&#x27;</span><br>    &#125;,&#123;<br>        gender:<span class=\"hljs-string\">&#x27;女&#x27;</span><br>    &#125;]);<br>&#125;;<br><span class=\"hljs-comment\">// 向users中插入数据</span><br><span class=\"hljs-keyword\">const</span> insertUser=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> man=<span class=\"hljs-keyword\">await</span> Gender.findOne(&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>&#125;);<br>    <span class=\"hljs-keyword\">const</span> woman=<span class=\"hljs-keyword\">await</span> Gender.findOne(&#123;<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;女&#x27;</span>&#125;);<br>    <span class=\"hljs-keyword\">const</span> res=<span class=\"hljs-keyword\">await</span> Users.insertMany([&#123;<br>        name:<span class=\"hljs-string\">&#x27;刷新&#x27;</span>,<br>        gender:man<br>    &#125;,&#123;<br>        name:<span class=\"hljs-string\">&#x27;tao&#x27;</span>,<br>        gender:man<br>    &#125;,&#123;<br>        name:<span class=\"hljs-string\">&#x27;guiyi&#x27;</span>,<br>        gender:woman<br>    &#125;]);<br>&#125;;<br><span class=\"hljs-keyword\">const</span> main=<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> gender=<span class=\"hljs-keyword\">await</span> Gender.find();<br>    <span class=\"hljs-keyword\">const</span> users=<span class=\"hljs-keyword\">await</span> Users.find();<br>    <span class=\"hljs-comment\">// 当Gender中没有数据时 执行insertGender</span><br>    <span class=\"hljs-keyword\">if</span> (gender.length==<span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">await</span> insertGender();<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;插入成功&#x27;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 当Gender中有数据时 直接打印</span><br>        <span class=\"hljs-built_in\">console</span>.log(gender);<br>        <span class=\"hljs-keyword\">if</span>(users.length==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-comment\">// 当Users中没有数据时 执行insertGender</span><br>            <span class=\"hljs-keyword\">await</span> insertUser();<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;用户插入成功&#x27;</span>);<br>        &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-comment\">//  当Users中有数据时 执行insertUsers</span><br>            <span class=\"hljs-comment\">//  populate(&#x27;gender&#x27;) 显示分类属性的详细信息</span><br>            <span class=\"hljs-keyword\">const</span> usersDeatl=<span class=\"hljs-keyword\">await</span> Users.find().populate(<span class=\"hljs-string\">&#x27;gender&#x27;</span>);<br>            <span class=\"hljs-built_in\">console</span>.log(usersDeatl);<br>        &#125;;<br>    &#125;;<br>&#125;;<br>main();<br></code></pre></td></tr></table></figure>"},{"title":"nginx代理","abbrlink":21065,"date":"2020-05-14T15:01:18.000Z","_content":"\n# 开头\n今天（2020-5-14）试着用nginx做了一下后端接口的代理，然后了解一下正反向代理，记录一下学习笔记\n<!-- more -->\n# 代理服务器\n就是在请求端和响应端之间，多了一层处理我们请求的服务器，叫做代理服务器\n\n# 分类\n>正向代理\n- 过程：客户端向代理服务器发送http请求，并指定目标服务器，然后代理服务器去客户端指定的服务器请求内容，然后把接收到的内容在返回给客户端\n- 作用：实现科学上网；A能访问B但是不能访问Google，B可以访问Google，所以让A访问B，然后B去访问Google，再把收到的内容返回给A\n\n>反向代理\n- 过程：和上述的过程类似，只是这时请求的url是代理服务器提供，然后代理服务器根据客户端发送的请求，去真正的目标服务器请求对应的内容，这个过程对客户端不可见，客户端并不知道还有一个服务器\n- 作用：保护隐藏原始资源服务器、负载均衡、缓存静态内容等\n\n>对比\n- 正向代理是代理客户端，使客户端对服务器不可见\n- 反向代理是代理服务器，使服务器对客户端不可见\n\n# 实战\n使用nginx做正反向代理实验\n>正向代理\n- [正向代理实例](https://segmentfault.com/a/1190000022440690) 条件有限，代做\n\n>反向代理\n- 实验背景：一个前后端分离的demo，用nginx部署前端项目，并代理后端的接口；\n- 配置文件如下，注：\n```shell\nserver{\n\tlisten 80;\n\tserver_name ip地址或域名;\n\troot 前端项目路径;\n    # 部署页面\n\tlocation = /todo {\n\t# 备注：如果外面root配置了目录，这里寻找本机目录时，路径为：前端项目路径+/todo\n\t# 如果内部使用了root，寻找本机目录时，路径为：root目录+/todo\n\t# 如果内部使用了alias，寻找本机目录时，路径直接为root目录\n\t\tindex index.html;\n\t}\n    # 部署静态资源\n    location ~.*\\.(css|js|png|jpg|jepg){\n        root 静态资源路径;\n    }\n    # 转发后端接口 这里一定要在结束添加 /；否则请求后端接口时，会把apis也携带在请求里\n\tlocation ^~ /apis/ {\n\t\tproxy_pass 后端接口根路径;\n\t}\t\n}\n```\n\n# 总结\n正向代理的对象是客户端，反向代理的对象是服务端\n\n# 参考链接\n- [正反向代理区别](https://www.jianshu.com/p/208c02c9dd1d)\n- [Nginx做正反向代理](https://segmentfault.com/a/1190000022440690)\n","source":"_posts/技术笔记/nginx代理.md","raw":"---\ntitle: nginx代理\ncategory:\n  - 技术笔记\ntag:\n  - Nginx\nabbrlink: 21065\ndate: 2020-05-14 23:01:18\n---\n\n# 开头\n今天（2020-5-14）试着用nginx做了一下后端接口的代理，然后了解一下正反向代理，记录一下学习笔记\n<!-- more -->\n# 代理服务器\n就是在请求端和响应端之间，多了一层处理我们请求的服务器，叫做代理服务器\n\n# 分类\n>正向代理\n- 过程：客户端向代理服务器发送http请求，并指定目标服务器，然后代理服务器去客户端指定的服务器请求内容，然后把接收到的内容在返回给客户端\n- 作用：实现科学上网；A能访问B但是不能访问Google，B可以访问Google，所以让A访问B，然后B去访问Google，再把收到的内容返回给A\n\n>反向代理\n- 过程：和上述的过程类似，只是这时请求的url是代理服务器提供，然后代理服务器根据客户端发送的请求，去真正的目标服务器请求对应的内容，这个过程对客户端不可见，客户端并不知道还有一个服务器\n- 作用：保护隐藏原始资源服务器、负载均衡、缓存静态内容等\n\n>对比\n- 正向代理是代理客户端，使客户端对服务器不可见\n- 反向代理是代理服务器，使服务器对客户端不可见\n\n# 实战\n使用nginx做正反向代理实验\n>正向代理\n- [正向代理实例](https://segmentfault.com/a/1190000022440690) 条件有限，代做\n\n>反向代理\n- 实验背景：一个前后端分离的demo，用nginx部署前端项目，并代理后端的接口；\n- 配置文件如下，注：\n```shell\nserver{\n\tlisten 80;\n\tserver_name ip地址或域名;\n\troot 前端项目路径;\n    # 部署页面\n\tlocation = /todo {\n\t# 备注：如果外面root配置了目录，这里寻找本机目录时，路径为：前端项目路径+/todo\n\t# 如果内部使用了root，寻找本机目录时，路径为：root目录+/todo\n\t# 如果内部使用了alias，寻找本机目录时，路径直接为root目录\n\t\tindex index.html;\n\t}\n    # 部署静态资源\n    location ~.*\\.(css|js|png|jpg|jepg){\n        root 静态资源路径;\n    }\n    # 转发后端接口 这里一定要在结束添加 /；否则请求后端接口时，会把apis也携带在请求里\n\tlocation ^~ /apis/ {\n\t\tproxy_pass 后端接口根路径;\n\t}\t\n}\n```\n\n# 总结\n正向代理的对象是客户端，反向代理的对象是服务端\n\n# 参考链接\n- [正反向代理区别](https://www.jianshu.com/p/208c02c9dd1d)\n- [Nginx做正反向代理](https://segmentfault.com/a/1190000022440690)\n","slug":"技术笔记/nginx代理","published":1,"updated":"2021-12-31T12:01:59.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1a001jj7jf87tfbwu3","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>今天（2020-5-14）试着用nginx做了一下后端接口的代理，然后了解一下正反向代理，记录一下学习笔记</p>\n<a id=\"more\"></a>\n<h1 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h1><p>就是在请求端和响应端之间，多了一层处理我们请求的服务器，叫做代理服务器</p>\n<h1 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h1><blockquote>\n<p>正向代理</p>\n</blockquote>\n<ul>\n<li>过程：客户端向代理服务器发送http请求，并指定目标服务器，然后代理服务器去客户端指定的服务器请求内容，然后把接收到的内容在返回给客户端</li>\n<li>作用：实现科学上网；A能访问B但是不能访问Google，B可以访问Google，所以让A访问B，然后B去访问Google，再把收到的内容返回给A</li>\n</ul>\n<blockquote>\n<p>反向代理</p>\n</blockquote>\n<ul>\n<li>过程：和上述的过程类似，只是这时请求的url是代理服务器提供，然后代理服务器根据客户端发送的请求，去真正的目标服务器请求对应的内容，这个过程对客户端不可见，客户端并不知道还有一个服务器</li>\n<li>作用：保护隐藏原始资源服务器、负载均衡、缓存静态内容等</li>\n</ul>\n<blockquote>\n<p>对比</p>\n</blockquote>\n<ul>\n<li>正向代理是代理客户端，使客户端对服务器不可见</li>\n<li>反向代理是代理服务器，使服务器对客户端不可见</li>\n</ul>\n<h1 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h1><p>使用nginx做正反向代理实验</p>\n<blockquote>\n<p>正向代理</p>\n</blockquote>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000022440690\">正向代理实例</a> 条件有限，代做</li>\n</ul>\n<blockquote>\n<p>反向代理</p>\n</blockquote>\n<ul>\n<li>实验背景：一个前后端分离的demo，用nginx部署前端项目，并代理后端的接口；</li>\n<li>配置文件如下，注：<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">server&#123;<br>\tlisten 80;<br>\tserver_name ip地址或域名;<br>\troot 前端项目路径;<br>    # 部署页面<br>\tlocation = /todo &#123;<br><span class=\"hljs-meta\">\t#</span><span class=\"bash\"> 备注：如果外面root配置了目录，这里寻找本机目录时，路径为：前端项目路径+/todo</span><br><span class=\"hljs-meta\">\t#</span><span class=\"bash\"> 如果内部使用了root，寻找本机目录时，路径为：root目录+/todo</span><br><span class=\"hljs-meta\">\t#</span><span class=\"bash\"> 如果内部使用了<span class=\"hljs-built_in\">alias</span>，寻找本机目录时，路径直接为root目录</span><br>\t\tindex index.html;<br>\t&#125;<br>    # 部署静态资源<br>    location ~.*\\.(css|js|png|jpg|jepg)&#123;<br>        root 静态资源路径;<br>    &#125;<br>    # 转发后端接口 这里一定要在结束添加 /；否则请求后端接口时，会把apis也携带在请求里<br>\tlocation ^~ /apis/ &#123;<br>\t\tproxy_pass 后端接口根路径;<br>\t&#125;\t<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>正向代理的对象是客户端，反向代理的对象是服务端</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/208c02c9dd1d\">正反向代理区别</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022440690\">Nginx做正反向代理</a></li>\n</ul>\n","site":{"data":{}},"wordcount":945,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>今天（2020-5-14）试着用nginx做了一下后端接口的代理，然后了解一下正反向代理，记录一下学习笔记</p>","more":"<h1 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h1><p>就是在请求端和响应端之间，多了一层处理我们请求的服务器，叫做代理服务器</p>\n<h1 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h1><blockquote>\n<p>正向代理</p>\n</blockquote>\n<ul>\n<li>过程：客户端向代理服务器发送http请求，并指定目标服务器，然后代理服务器去客户端指定的服务器请求内容，然后把接收到的内容在返回给客户端</li>\n<li>作用：实现科学上网；A能访问B但是不能访问Google，B可以访问Google，所以让A访问B，然后B去访问Google，再把收到的内容返回给A</li>\n</ul>\n<blockquote>\n<p>反向代理</p>\n</blockquote>\n<ul>\n<li>过程：和上述的过程类似，只是这时请求的url是代理服务器提供，然后代理服务器根据客户端发送的请求，去真正的目标服务器请求对应的内容，这个过程对客户端不可见，客户端并不知道还有一个服务器</li>\n<li>作用：保护隐藏原始资源服务器、负载均衡、缓存静态内容等</li>\n</ul>\n<blockquote>\n<p>对比</p>\n</blockquote>\n<ul>\n<li>正向代理是代理客户端，使客户端对服务器不可见</li>\n<li>反向代理是代理服务器，使服务器对客户端不可见</li>\n</ul>\n<h1 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h1><p>使用nginx做正反向代理实验</p>\n<blockquote>\n<p>正向代理</p>\n</blockquote>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000022440690\">正向代理实例</a> 条件有限，代做</li>\n</ul>\n<blockquote>\n<p>反向代理</p>\n</blockquote>\n<ul>\n<li>实验背景：一个前后端分离的demo，用nginx部署前端项目，并代理后端的接口；</li>\n<li>配置文件如下，注：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">server&#123;<br>\tlisten 80;<br>\tserver_name ip地址或域名;<br>\troot 前端项目路径;<br>    # 部署页面<br>\tlocation = /todo &#123;<br><span class=\"hljs-meta\">\t#</span><span class=\"bash\"> 备注：如果外面root配置了目录，这里寻找本机目录时，路径为：前端项目路径+/todo</span><br><span class=\"hljs-meta\">\t#</span><span class=\"bash\"> 如果内部使用了root，寻找本机目录时，路径为：root目录+/todo</span><br><span class=\"hljs-meta\">\t#</span><span class=\"bash\"> 如果内部使用了<span class=\"hljs-built_in\">alias</span>，寻找本机目录时，路径直接为root目录</span><br>\t\tindex index.html;<br>\t&#125;<br>    # 部署静态资源<br>    location ~.*\\.(css|js|png|jpg|jepg)&#123;<br>        root 静态资源路径;<br>    &#125;<br>    # 转发后端接口 这里一定要在结束添加 /；否则请求后端接口时，会把apis也携带在请求里<br>\tlocation ^~ /apis/ &#123;<br>\t\tproxy_pass 后端接口根路径;<br>\t&#125;\t<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>正向代理的对象是客户端，反向代理的对象是服务端</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/208c02c9dd1d\">正反向代理区别</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022440690\">Nginx做正反向代理</a></li>\n</ul>"},{"title":"hexo常用配置和命令","abbrlink":28598,"date":"2019-07-01T04:21:54.000Z","_content":"常用命令\n=======\n\n内容转载自(https://chars.tech/blog/build-blog-by-hexo/)\n\n<!-- more -->\n```\n常用命令：\nhexo help #查看帮助\nhexo init #初始化一个目录\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成网页，可以在 public 目录查看整个网站的文件\nhexo server #本地预览，'Ctrl+C'关闭\nhexo deploy #部署.deploy目录\nhexo clean #清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹\n\n简写：\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n常用配置\n========\n```\n\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# Site #站点信息\ntitle:  #标题\nsubtitle:  #副标题\ndescription:  #站点描述，给搜索引擎看的\nauthor:  #作者\nemail:  #电子邮箱\nlanguage: zh-CN #语言\n# URL #链接格式\nurl:  #网址\nroot: / #根目录\npermalink: :year/:month/:day/:title/ #文章的链接格式\ntag_dir: tags #标签目录\narchive_dir: archives #存档目录\ncategory_dir: categories #分类目录\ncode_dir: downloads/code\npermalink_defaults:\n# Directory #目录\nsource_dir: source #源文件目录\npublic_dir: public #生成的网页文件目录\n# Writing #写作\nnew_post_name: :title.md #新文章标题\ndefault_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）\ntitlecase: false #标题转换成大写\nexternal_link: true #在新选项卡中打开连接\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nhighlight: #语法高亮\n  enable: true #是否启用\n  line_number: true #显示行号\n  tab_replace:\n# Category & Tag #分类和标签\ndefault_category: uncategorized #默认分类\ncategory_map:\ntag_map:\n# Archives\n2: 开启分页\n1: 禁用分页\n0: 全部禁用\narchive: 2\ncategory: 2\ntag: 2\n# Server #本地服务器\nport: 4000 #端口号\nserver_ip: localhost #IP 地址\nlogger: false\nlogger_format: dev\n# Date / Time format #日期时间格式\ndate_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/\ntime_format: H:mm:ss\n# Pagination #分页\nper_page: 10 #每页文章数，设置成 0 禁用分页\npagination_dir: page\n# Disqus #Disqus评论，替换为多说\ndisqus_shortname:\n# Extensions #拓展插件\ntheme: landscape-plus #主题\nexclude_generator:\nplugins: #插件，例如生成 RSS 和站点地图的\n- hexo-generator-feed\n- hexo-generator-sitemap\n# Deployment #部署，将 lmintlcx 改成用户名\ndeploy:\n  type: git\n  repo: github创库地址.git\n  branch: master\n```","source":"_posts/技术笔记/hexo常用配置和命令.md","raw":"---\ntitle: hexo常用配置和命令\ncategories:\n  - 技术笔记\ntag:\n  - 踩坑\n  - hexo\nabbrlink: 28598\ndate: 2019-07-01 12:21:54\n---\n常用命令\n=======\n\n内容转载自(https://chars.tech/blog/build-blog-by-hexo/)\n\n<!-- more -->\n```\n常用命令：\nhexo help #查看帮助\nhexo init #初始化一个目录\nhexo new \"postName\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo generate #生成网页，可以在 public 目录查看整个网站的文件\nhexo server #本地预览，'Ctrl+C'关闭\nhexo deploy #部署.deploy目录\nhexo clean #清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹\n\n简写：\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n常用配置\n========\n```\n\n# Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# Site #站点信息\ntitle:  #标题\nsubtitle:  #副标题\ndescription:  #站点描述，给搜索引擎看的\nauthor:  #作者\nemail:  #电子邮箱\nlanguage: zh-CN #语言\n# URL #链接格式\nurl:  #网址\nroot: / #根目录\npermalink: :year/:month/:day/:title/ #文章的链接格式\ntag_dir: tags #标签目录\narchive_dir: archives #存档目录\ncategory_dir: categories #分类目录\ncode_dir: downloads/code\npermalink_defaults:\n# Directory #目录\nsource_dir: source #源文件目录\npublic_dir: public #生成的网页文件目录\n# Writing #写作\nnew_post_name: :title.md #新文章标题\ndefault_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）\ntitlecase: false #标题转换成大写\nexternal_link: true #在新选项卡中打开连接\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nhighlight: #语法高亮\n  enable: true #是否启用\n  line_number: true #显示行号\n  tab_replace:\n# Category & Tag #分类和标签\ndefault_category: uncategorized #默认分类\ncategory_map:\ntag_map:\n# Archives\n2: 开启分页\n1: 禁用分页\n0: 全部禁用\narchive: 2\ncategory: 2\ntag: 2\n# Server #本地服务器\nport: 4000 #端口号\nserver_ip: localhost #IP 地址\nlogger: false\nlogger_format: dev\n# Date / Time format #日期时间格式\ndate_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/\ntime_format: H:mm:ss\n# Pagination #分页\nper_page: 10 #每页文章数，设置成 0 禁用分页\npagination_dir: page\n# Disqus #Disqus评论，替换为多说\ndisqus_shortname:\n# Extensions #拓展插件\ntheme: landscape-plus #主题\nexclude_generator:\nplugins: #插件，例如生成 RSS 和站点地图的\n- hexo-generator-feed\n- hexo-generator-sitemap\n# Deployment #部署，将 lmintlcx 改成用户名\ndeploy:\n  type: git\n  repo: github创库地址.git\n  branch: master\n```","slug":"技术笔记/hexo常用配置和命令","published":1,"updated":"2021-12-31T12:01:59.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1a001mj7jfcvnh63cw","content":"<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><p>内容转载自(<a href=\"https://chars.tech/blog/build-blog-by-hexo/\">https://chars.tech/blog/build-blog-by-hexo/</a>)</p>\n<a id=\"more\"></a>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs routeros\">常用命令：<br>hexo help #查看帮助<br>hexo init #初始化一个目录<br>hexo new <span class=\"hljs-string\">&quot;postName&quot;</span> #新建文章<br>hexo new<span class=\"hljs-built_in\"> page </span><span class=\"hljs-string\">&quot;pageName&quot;</span> #新建页面<br>hexo generate #生成网页，可以在 public 目录查看整个网站的文件<br>hexo<span class=\"hljs-built_in\"> server </span>#本地预览，<span class=\"hljs-string\">&#x27;Ctrl+C&#x27;</span>关闭<br>hexo deploy #部署.deploy目录<br>hexo clean #清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹<br><br>简写：<br>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs yaml\"><br><span class=\"hljs-comment\"># Hexo Configuration</span><br><span class=\"hljs-comment\">## Docs: http://hexo.io/docs/configuration.html</span><br><span class=\"hljs-comment\">## Source: https://github.com/hexojs/hexo/</span><br><span class=\"hljs-comment\"># Site #站点信息</span><br><span class=\"hljs-attr\">title:</span>  <span class=\"hljs-comment\">#标题</span><br><span class=\"hljs-attr\">subtitle:</span>  <span class=\"hljs-comment\">#副标题</span><br><span class=\"hljs-attr\">description:</span>  <span class=\"hljs-comment\">#站点描述，给搜索引擎看的</span><br><span class=\"hljs-attr\">author:</span>  <span class=\"hljs-comment\">#作者</span><br><span class=\"hljs-attr\">email:</span>  <span class=\"hljs-comment\">#电子邮箱</span><br><span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">zh-CN</span> <span class=\"hljs-comment\">#语言</span><br><span class=\"hljs-comment\"># URL #链接格式</span><br><span class=\"hljs-attr\">url:</span>  <span class=\"hljs-comment\">#网址</span><br><span class=\"hljs-attr\">root:</span> <span class=\"hljs-string\">/</span> <span class=\"hljs-comment\">#根目录</span><br><span class=\"hljs-attr\">permalink:</span> <span class=\"hljs-string\">:year/:month/:day/:title/</span> <span class=\"hljs-comment\">#文章的链接格式</span><br><span class=\"hljs-attr\">tag_dir:</span> <span class=\"hljs-string\">tags</span> <span class=\"hljs-comment\">#标签目录</span><br><span class=\"hljs-attr\">archive_dir:</span> <span class=\"hljs-string\">archives</span> <span class=\"hljs-comment\">#存档目录</span><br><span class=\"hljs-attr\">category_dir:</span> <span class=\"hljs-string\">categories</span> <span class=\"hljs-comment\">#分类目录</span><br><span class=\"hljs-attr\">code_dir:</span> <span class=\"hljs-string\">downloads/code</span><br><span class=\"hljs-attr\">permalink_defaults:</span><br><span class=\"hljs-comment\"># Directory #目录</span><br><span class=\"hljs-attr\">source_dir:</span> <span class=\"hljs-string\">source</span> <span class=\"hljs-comment\">#源文件目录</span><br><span class=\"hljs-attr\">public_dir:</span> <span class=\"hljs-string\">public</span> <span class=\"hljs-comment\">#生成的网页文件目录</span><br><span class=\"hljs-comment\"># Writing #写作</span><br><span class=\"hljs-attr\">new_post_name:</span> <span class=\"hljs-string\">:title.md</span> <span class=\"hljs-comment\">#新文章标题</span><br><span class=\"hljs-attr\">default_layout:</span> <span class=\"hljs-string\">post</span> <span class=\"hljs-comment\">#默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</span><br><span class=\"hljs-attr\">titlecase:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">#标题转换成大写</span><br><span class=\"hljs-attr\">external_link:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#在新选项卡中打开连接</span><br><span class=\"hljs-attr\">filename_case:</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-attr\">render_drafts:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-attr\">post_asset_folder:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-attr\">relative_link:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-attr\">highlight:</span> <span class=\"hljs-comment\">#语法高亮</span><br>  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#是否启用</span><br>  <span class=\"hljs-attr\">line_number:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#显示行号</span><br>  <span class=\"hljs-attr\">tab_replace:</span><br><span class=\"hljs-comment\"># Category &amp; Tag #分类和标签</span><br><span class=\"hljs-attr\">default_category:</span> <span class=\"hljs-string\">uncategorized</span> <span class=\"hljs-comment\">#默认分类</span><br><span class=\"hljs-attr\">category_map:</span><br><span class=\"hljs-attr\">tag_map:</span><br><span class=\"hljs-comment\"># Archives</span><br><span class=\"hljs-attr\">2:</span> <span class=\"hljs-string\">开启分页</span><br><span class=\"hljs-attr\">1:</span> <span class=\"hljs-string\">禁用分页</span><br><span class=\"hljs-attr\">0:</span> <span class=\"hljs-string\">全部禁用</span><br><span class=\"hljs-attr\">archive:</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-attr\">category:</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-attr\">tag:</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-comment\"># Server #本地服务器</span><br><span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">4000</span> <span class=\"hljs-comment\">#端口号</span><br><span class=\"hljs-attr\">server_ip:</span> <span class=\"hljs-string\">localhost</span> <span class=\"hljs-comment\">#IP 地址</span><br><span class=\"hljs-attr\">logger:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-attr\">logger_format:</span> <span class=\"hljs-string\">dev</span><br><span class=\"hljs-comment\"># Date / Time format #日期时间格式</span><br><span class=\"hljs-attr\">date_format:</span> <span class=\"hljs-string\">YYYY-MM-DD</span> <span class=\"hljs-comment\">#参考http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"hljs-attr\">time_format:</span> <span class=\"hljs-string\">H:mm:ss</span><br><span class=\"hljs-comment\"># Pagination #分页</span><br><span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">#每页文章数，设置成 0 禁用分页</span><br><span class=\"hljs-attr\">pagination_dir:</span> <span class=\"hljs-string\">page</span><br><span class=\"hljs-comment\"># Disqus #Disqus评论，替换为多说</span><br><span class=\"hljs-attr\">disqus_shortname:</span><br><span class=\"hljs-comment\"># Extensions #拓展插件</span><br><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">landscape-plus</span> <span class=\"hljs-comment\">#主题</span><br><span class=\"hljs-attr\">exclude_generator:</span><br><span class=\"hljs-attr\">plugins:</span> <span class=\"hljs-comment\">#插件，例如生成 RSS 和站点地图的</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hexo-generator-feed</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hexo-generator-sitemap</span><br><span class=\"hljs-comment\"># Deployment #部署，将 lmintlcx 改成用户名</span><br><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">github创库地址.git</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":1886,"excerpt":"<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><p>内容转载自(<a href=\"https://chars.tech/blog/build-blog-by-hexo/\">https://chars.tech/blog/build-blog-by-hexo/</a>)</p>","more":"<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">常用命令：<br>hexo help #查看帮助<br>hexo init #初始化一个目录<br>hexo new <span class=\"hljs-string\">&quot;postName&quot;</span> #新建文章<br>hexo new<span class=\"hljs-built_in\"> page </span><span class=\"hljs-string\">&quot;pageName&quot;</span> #新建页面<br>hexo generate #生成网页，可以在 public 目录查看整个网站的文件<br>hexo<span class=\"hljs-built_in\"> server </span>#本地预览，<span class=\"hljs-string\">&#x27;Ctrl+C&#x27;</span>关闭<br>hexo deploy #部署.deploy目录<br>hexo clean #清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹<br><br>简写：<br>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><br><span class=\"hljs-comment\"># Hexo Configuration</span><br><span class=\"hljs-comment\">## Docs: http://hexo.io/docs/configuration.html</span><br><span class=\"hljs-comment\">## Source: https://github.com/hexojs/hexo/</span><br><span class=\"hljs-comment\"># Site #站点信息</span><br><span class=\"hljs-attr\">title:</span>  <span class=\"hljs-comment\">#标题</span><br><span class=\"hljs-attr\">subtitle:</span>  <span class=\"hljs-comment\">#副标题</span><br><span class=\"hljs-attr\">description:</span>  <span class=\"hljs-comment\">#站点描述，给搜索引擎看的</span><br><span class=\"hljs-attr\">author:</span>  <span class=\"hljs-comment\">#作者</span><br><span class=\"hljs-attr\">email:</span>  <span class=\"hljs-comment\">#电子邮箱</span><br><span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">zh-CN</span> <span class=\"hljs-comment\">#语言</span><br><span class=\"hljs-comment\"># URL #链接格式</span><br><span class=\"hljs-attr\">url:</span>  <span class=\"hljs-comment\">#网址</span><br><span class=\"hljs-attr\">root:</span> <span class=\"hljs-string\">/</span> <span class=\"hljs-comment\">#根目录</span><br><span class=\"hljs-attr\">permalink:</span> <span class=\"hljs-string\">:year/:month/:day/:title/</span> <span class=\"hljs-comment\">#文章的链接格式</span><br><span class=\"hljs-attr\">tag_dir:</span> <span class=\"hljs-string\">tags</span> <span class=\"hljs-comment\">#标签目录</span><br><span class=\"hljs-attr\">archive_dir:</span> <span class=\"hljs-string\">archives</span> <span class=\"hljs-comment\">#存档目录</span><br><span class=\"hljs-attr\">category_dir:</span> <span class=\"hljs-string\">categories</span> <span class=\"hljs-comment\">#分类目录</span><br><span class=\"hljs-attr\">code_dir:</span> <span class=\"hljs-string\">downloads/code</span><br><span class=\"hljs-attr\">permalink_defaults:</span><br><span class=\"hljs-comment\"># Directory #目录</span><br><span class=\"hljs-attr\">source_dir:</span> <span class=\"hljs-string\">source</span> <span class=\"hljs-comment\">#源文件目录</span><br><span class=\"hljs-attr\">public_dir:</span> <span class=\"hljs-string\">public</span> <span class=\"hljs-comment\">#生成的网页文件目录</span><br><span class=\"hljs-comment\"># Writing #写作</span><br><span class=\"hljs-attr\">new_post_name:</span> <span class=\"hljs-string\">:title.md</span> <span class=\"hljs-comment\">#新文章标题</span><br><span class=\"hljs-attr\">default_layout:</span> <span class=\"hljs-string\">post</span> <span class=\"hljs-comment\">#默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</span><br><span class=\"hljs-attr\">titlecase:</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">#标题转换成大写</span><br><span class=\"hljs-attr\">external_link:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#在新选项卡中打开连接</span><br><span class=\"hljs-attr\">filename_case:</span> <span class=\"hljs-number\">0</span><br><span class=\"hljs-attr\">render_drafts:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-attr\">post_asset_folder:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-attr\">relative_link:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-attr\">highlight:</span> <span class=\"hljs-comment\">#语法高亮</span><br>  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#是否启用</span><br>  <span class=\"hljs-attr\">line_number:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">#显示行号</span><br>  <span class=\"hljs-attr\">tab_replace:</span><br><span class=\"hljs-comment\"># Category &amp; Tag #分类和标签</span><br><span class=\"hljs-attr\">default_category:</span> <span class=\"hljs-string\">uncategorized</span> <span class=\"hljs-comment\">#默认分类</span><br><span class=\"hljs-attr\">category_map:</span><br><span class=\"hljs-attr\">tag_map:</span><br><span class=\"hljs-comment\"># Archives</span><br><span class=\"hljs-attr\">2:</span> <span class=\"hljs-string\">开启分页</span><br><span class=\"hljs-attr\">1:</span> <span class=\"hljs-string\">禁用分页</span><br><span class=\"hljs-attr\">0:</span> <span class=\"hljs-string\">全部禁用</span><br><span class=\"hljs-attr\">archive:</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-attr\">category:</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-attr\">tag:</span> <span class=\"hljs-number\">2</span><br><span class=\"hljs-comment\"># Server #本地服务器</span><br><span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">4000</span> <span class=\"hljs-comment\">#端口号</span><br><span class=\"hljs-attr\">server_ip:</span> <span class=\"hljs-string\">localhost</span> <span class=\"hljs-comment\">#IP 地址</span><br><span class=\"hljs-attr\">logger:</span> <span class=\"hljs-literal\">false</span><br><span class=\"hljs-attr\">logger_format:</span> <span class=\"hljs-string\">dev</span><br><span class=\"hljs-comment\"># Date / Time format #日期时间格式</span><br><span class=\"hljs-attr\">date_format:</span> <span class=\"hljs-string\">YYYY-MM-DD</span> <span class=\"hljs-comment\">#参考http://momentjs.com/docs/#/displaying/format/</span><br><span class=\"hljs-attr\">time_format:</span> <span class=\"hljs-string\">H:mm:ss</span><br><span class=\"hljs-comment\"># Pagination #分页</span><br><span class=\"hljs-attr\">per_page:</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">#每页文章数，设置成 0 禁用分页</span><br><span class=\"hljs-attr\">pagination_dir:</span> <span class=\"hljs-string\">page</span><br><span class=\"hljs-comment\"># Disqus #Disqus评论，替换为多说</span><br><span class=\"hljs-attr\">disqus_shortname:</span><br><span class=\"hljs-comment\"># Extensions #拓展插件</span><br><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">landscape-plus</span> <span class=\"hljs-comment\">#主题</span><br><span class=\"hljs-attr\">exclude_generator:</span><br><span class=\"hljs-attr\">plugins:</span> <span class=\"hljs-comment\">#插件，例如生成 RSS 和站点地图的</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hexo-generator-feed</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hexo-generator-sitemap</span><br><span class=\"hljs-comment\"># Deployment #部署，将 lmintlcx 改成用户名</span><br><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">github创库地址.git</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></td></tr></table></figure>"},{"title":"textarea中复制光标所在行文本","date":"2021-01-06T05:55:37.000Z","index_img":"https://img.shuaxindiary.cn/thomas-tastet-hSODeSbvzE0-unsplash.jpg","banner_img":"https://img.shuaxindiary.cn/thomas-tastet-hSODeSbvzE0-unsplash.jpg","_content":"# 前言\n\n最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。\n\n# 相关\n[textarea中tab健失效问题](https://blog.shuaxindiary.cn/2020/12/27/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/textarea%E6%A0%87%E7%AD%BEtab%E9%94%AE%E6%97%A0%E6%95%88/)\n\n# 需求\n常见的编辑器中有个功能，是ctrl+c的时候，自动复制/剪切光标所在行的文本。\n\n# 实现思路\n1. 获取光标在文本中的位置\n2. 同时向前向后查找该位置最近的两处的回车换行符位置\n3. 然后截取这两个换行符之间的文本即可\n- - 获取位置需要判断一下是不是最后一行，以最后是否有换行符判断即可\n- - 有，就正常截取，无就按文本最后位置截取即可\n- - 需要注意监听组合键\n4. 将截取的字符串复制到系统的剪切板区域即可\n\n## 获取光标位置\n- 在textarea会有两种移动光标的操作：鼠标、键盘\n- 监听这两个事件，然后通过触发事件的对象引用event的selectionStart、selectionEnd获取\n- 键盘事件的时候需要注意，每次按键后光标移动了，但是获取到的上次按的位置，需要减一\n\n## 获取光标位置代码\n```html\n<textarea id=\"editor\" cols=\"30\" rows=\"10\"></textarea>\n<script>\n  editor.addEventListener('keydown', (e) => {\n    // 光标起始位置\n    let start = e.target.selectionStart\n    // 光标结束位置\n    let end = e.target.selectionEnd\n    // 获取鼠标选中的文本\n    let text=window.getSelection().toString()\n  })\n</script>\n```\n\n\n## 复制文本\n- 获取到文本，如上述\n- 复制到剪切区，有2中方式，如下：\n- - document对象的[execCommand](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand)，是一个函数，参数为对应要操作的指令字符串，如copy；通过他获取input中的选中的文本即可\n- - Clipboard API的[Clipboard](https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard)，因为第一个操作标准已经放弃，不建议使用；可以使用该操作代替，但是兼容性需要考虑;其次该api必须在用户交互中使用，即不能再页面加载后自动复制粘贴\n- - 第三方库：[clipboardJs](https://github.com/zenorocha/clipboard.js)\n\n## 复制文本代码\n> execCommand\n```html\n<input type=\"text\" id=\"text\">\n<button id=\"copy\">copy</button>\n<script>\n    const copy = document.querySelector('#copy')\n    const text = document.querySelector('#text')\n    copy.addEventListener('click', () => {\n      if (!document.execCommand('copy')) throw new Error('不支持改命令')\n      // 选中文本\n      text.select()\n      // 执行复制 返回一个Boolean\n      document.execCommand('copy')\n      console.log('复制成功')\n    })\n</script>\n```\n\n> Clipboard\n```html\n<input type=\"text\" id=\"text\">\n  <button id=\"copy\">copy</button>\n  <script>\n    const copy = document.querySelector('#copy')\n    const text = document.querySelector('#text')\n    copy.addEventListener('click', () => {\n      navigator.clipboard.writeText(text.value)\n    })\n</script>\n```\n\n\n# 复制光标所在行代码\n```html\n<textarea id=\"editor\" cols=\"30\" rows=\"10\"></textarea>\n<script>\n    const editor = document.querySelector('#editor')\n    // 复制文本 创建input来选中内容\n    function copyText(text) {\n      const input = document.createElement('input');\n      document.body.appendChild(input);\n      input.setAttribute('value', text);\n      input.setAttribute('id', 'copy');\n      input.select();\n      if (document.execCommand('copy')) {\n        document.execCommand('copy');\n        console.log('复制成功');\n      }\n      document.body.removeChild(document.querySelector('#copy'))\n    }\n    editor.addEventListener('keydown', (e) => {\n      // 是否是ctrl\n      let isCtrl = e.ctrlKey\n      let code = e.keyCode\n      if (isCtrl && code === 67) {\n        // 记录光标位置\n        let start = e.target.selectionStart - 1\n        let end = e.target.selectionEnd - 1\n        let text = editor.value\n        // 记录行首、尾\n        let left = -1,\n          right = -1\n        // 找到第一个换行\n        for (let i = start; i >= 0; i--) {\n          // 0时说明为第一行\n          if (text[i] === '\\n' || i === 0) {\n            left = i\n            break\n          }\n        }\n        // 找到第二个换行\n        for (let i = end; i < text.length; i++) {\n          if (text[i] === '\\n' || i === text.length - 1) {\n            right = i\n            break\n          }\n        }\n        // 这里主要是判断第一行、最后一行来处理换行符\n        let selected = text.substring(left === 0 ? left : left + 1, right === text.length - 1 ? right + 1 : right)\n        if (document.execCommand('copy')) {\n          copyText(selected)\n        }\n      }\n    })\n</script>\n```\n","source":"_posts/技术笔记/textarea中复制光标所在行文本.md","raw":"---\ntitle: textarea中复制光标所在行文本\ndate: 2021-01-06 13:55:37\nindex_img: https://img.shuaxindiary.cn/thomas-tastet-hSODeSbvzE0-unsplash.jpg\nbanner_img: https://img.shuaxindiary.cn/thomas-tastet-hSODeSbvzE0-unsplash.jpg\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 踩坑\n---\n# 前言\n\n最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。\n\n# 相关\n[textarea中tab健失效问题](https://blog.shuaxindiary.cn/2020/12/27/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/textarea%E6%A0%87%E7%AD%BEtab%E9%94%AE%E6%97%A0%E6%95%88/)\n\n# 需求\n常见的编辑器中有个功能，是ctrl+c的时候，自动复制/剪切光标所在行的文本。\n\n# 实现思路\n1. 获取光标在文本中的位置\n2. 同时向前向后查找该位置最近的两处的回车换行符位置\n3. 然后截取这两个换行符之间的文本即可\n- - 获取位置需要判断一下是不是最后一行，以最后是否有换行符判断即可\n- - 有，就正常截取，无就按文本最后位置截取即可\n- - 需要注意监听组合键\n4. 将截取的字符串复制到系统的剪切板区域即可\n\n## 获取光标位置\n- 在textarea会有两种移动光标的操作：鼠标、键盘\n- 监听这两个事件，然后通过触发事件的对象引用event的selectionStart、selectionEnd获取\n- 键盘事件的时候需要注意，每次按键后光标移动了，但是获取到的上次按的位置，需要减一\n\n## 获取光标位置代码\n```html\n<textarea id=\"editor\" cols=\"30\" rows=\"10\"></textarea>\n<script>\n  editor.addEventListener('keydown', (e) => {\n    // 光标起始位置\n    let start = e.target.selectionStart\n    // 光标结束位置\n    let end = e.target.selectionEnd\n    // 获取鼠标选中的文本\n    let text=window.getSelection().toString()\n  })\n</script>\n```\n\n\n## 复制文本\n- 获取到文本，如上述\n- 复制到剪切区，有2中方式，如下：\n- - document对象的[execCommand](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand)，是一个函数，参数为对应要操作的指令字符串，如copy；通过他获取input中的选中的文本即可\n- - Clipboard API的[Clipboard](https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard)，因为第一个操作标准已经放弃，不建议使用；可以使用该操作代替，但是兼容性需要考虑;其次该api必须在用户交互中使用，即不能再页面加载后自动复制粘贴\n- - 第三方库：[clipboardJs](https://github.com/zenorocha/clipboard.js)\n\n## 复制文本代码\n> execCommand\n```html\n<input type=\"text\" id=\"text\">\n<button id=\"copy\">copy</button>\n<script>\n    const copy = document.querySelector('#copy')\n    const text = document.querySelector('#text')\n    copy.addEventListener('click', () => {\n      if (!document.execCommand('copy')) throw new Error('不支持改命令')\n      // 选中文本\n      text.select()\n      // 执行复制 返回一个Boolean\n      document.execCommand('copy')\n      console.log('复制成功')\n    })\n</script>\n```\n\n> Clipboard\n```html\n<input type=\"text\" id=\"text\">\n  <button id=\"copy\">copy</button>\n  <script>\n    const copy = document.querySelector('#copy')\n    const text = document.querySelector('#text')\n    copy.addEventListener('click', () => {\n      navigator.clipboard.writeText(text.value)\n    })\n</script>\n```\n\n\n# 复制光标所在行代码\n```html\n<textarea id=\"editor\" cols=\"30\" rows=\"10\"></textarea>\n<script>\n    const editor = document.querySelector('#editor')\n    // 复制文本 创建input来选中内容\n    function copyText(text) {\n      const input = document.createElement('input');\n      document.body.appendChild(input);\n      input.setAttribute('value', text);\n      input.setAttribute('id', 'copy');\n      input.select();\n      if (document.execCommand('copy')) {\n        document.execCommand('copy');\n        console.log('复制成功');\n      }\n      document.body.removeChild(document.querySelector('#copy'))\n    }\n    editor.addEventListener('keydown', (e) => {\n      // 是否是ctrl\n      let isCtrl = e.ctrlKey\n      let code = e.keyCode\n      if (isCtrl && code === 67) {\n        // 记录光标位置\n        let start = e.target.selectionStart - 1\n        let end = e.target.selectionEnd - 1\n        let text = editor.value\n        // 记录行首、尾\n        let left = -1,\n          right = -1\n        // 找到第一个换行\n        for (let i = start; i >= 0; i--) {\n          // 0时说明为第一行\n          if (text[i] === '\\n' || i === 0) {\n            left = i\n            break\n          }\n        }\n        // 找到第二个换行\n        for (let i = end; i < text.length; i++) {\n          if (text[i] === '\\n' || i === text.length - 1) {\n            right = i\n            break\n          }\n        }\n        // 这里主要是判断第一行、最后一行来处理换行符\n        let selected = text.substring(left === 0 ? left : left + 1, right === text.length - 1 ? right + 1 : right)\n        if (document.execCommand('copy')) {\n          copyText(selected)\n        }\n      }\n    })\n</script>\n```\n","slug":"技术笔记/textarea中复制光标所在行文本","published":1,"updated":"2021-12-31T12:01:59.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1a001pj7jf2cow6xgj","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。</p>\n<h1 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h1><p><a href=\"https://blog.shuaxindiary.cn/2020/12/27/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/textarea%E6%A0%87%E7%AD%BEtab%E9%94%AE%E6%97%A0%E6%95%88/\">textarea中tab健失效问题</a></p>\n<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>常见的编辑器中有个功能，是ctrl+c的时候，自动复制/剪切光标所在行的文本。</p>\n<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><ol>\n<li>获取光标在文本中的位置</li>\n<li>同时向前向后查找该位置最近的两处的回车换行符位置</li>\n<li>然后截取这两个换行符之间的文本即可</li>\n</ol>\n<ul>\n<li><ul>\n<li>获取位置需要判断一下是不是最后一行，以最后是否有换行符判断即可</li>\n</ul>\n</li>\n<li><ul>\n<li>有，就正常截取，无就按文本最后位置截取即可</li>\n</ul>\n</li>\n<li><ul>\n<li>需要注意监听组合键</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>将截取的字符串复制到系统的剪切板区域即可</li>\n</ol>\n<h2 id=\"获取光标位置\"><a href=\"#获取光标位置\" class=\"headerlink\" title=\"获取光标位置\"></a>获取光标位置</h2><ul>\n<li>在textarea会有两种移动光标的操作：鼠标、键盘</li>\n<li>监听这两个事件，然后通过触发事件的对象引用event的selectionStart、selectionEnd获取</li>\n<li>键盘事件的时候需要注意，每次按键后光标移动了，但是获取到的上次按的位置，需要减一</li>\n</ul>\n<h2 id=\"获取光标位置代码\"><a href=\"#获取光标位置代码\" class=\"headerlink\" title=\"获取光标位置代码\"></a>获取光标位置代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;editor&quot;</span> <span class=\"hljs-attr\">cols</span>=<span class=\"hljs-string\">&quot;30&quot;</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">&quot;10&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">  editor.addEventListener(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 光标起始位置</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> start = e.target.selectionStart</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 光标结束位置</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> end = e.target.selectionEnd</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 获取鼠标选中的文本</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> text=<span class=\"hljs-built_in\">window</span>.getSelection().toString()</span><br>  &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n\n<h2 id=\"复制文本\"><a href=\"#复制文本\" class=\"headerlink\" title=\"复制文本\"></a>复制文本</h2><ul>\n<li>获取到文本，如上述</li>\n<li>复制到剪切区，有2中方式，如下：</li>\n<li><ul>\n<li>document对象的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand\">execCommand</a>，是一个函数，参数为对应要操作的指令字符串，如copy；通过他获取input中的选中的文本即可</li>\n</ul>\n</li>\n<li><ul>\n<li>Clipboard API的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard\">Clipboard</a>，因为第一个操作标准已经放弃，不建议使用；可以使用该操作代替，但是兼容性需要考虑;其次该api必须在用户交互中使用，即不能再页面加载后自动复制粘贴</li>\n</ul>\n</li>\n<li><ul>\n<li>第三方库：<a href=\"https://github.com/zenorocha/clipboard.js\">clipboardJs</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"复制文本代码\"><a href=\"#复制文本代码\" class=\"headerlink\" title=\"复制文本代码\"></a>复制文本代码</h2><blockquote>\n<p>execCommand</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;copy&quot;</span>&gt;</span>copy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> copy = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#copy&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#text&#x27;</span>)</span><br><span class=\"javascript\">    copy.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;不支持改命令&#x27;</span>)</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 选中文本</span></span><br>      text.select()<br><span class=\"javascript\">      <span class=\"hljs-comment\">// 执行复制 返回一个Boolean</span></span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>)</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;复制成功&#x27;</span>)</span><br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p>Clipboard</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;copy&quot;</span>&gt;</span>copy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> copy = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#copy&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#text&#x27;</span>)</span><br><span class=\"javascript\">    copy.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br>      navigator.clipboard.writeText(text.value)<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n\n<h1 id=\"复制光标所在行代码\"><a href=\"#复制光标所在行代码\" class=\"headerlink\" title=\"复制光标所在行代码\"></a>复制光标所在行代码</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;editor&quot;</span> <span class=\"hljs-attr\">cols</span>=<span class=\"hljs-string\">&quot;30&quot;</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">&quot;10&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> editor = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#editor&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 复制文本 创建input来选中内容</span></span><br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">copyText</span>(<span class=\"hljs-params\">text</span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;input&#x27;</span>);</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.body.appendChild(input);</span><br><span class=\"javascript\">      input.setAttribute(<span class=\"hljs-string\">&#x27;value&#x27;</span>, text);</span><br><span class=\"javascript\">      input.setAttribute(<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;copy&#x27;</span>);</span><br>      input.select();<br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>)) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>);</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;复制成功&#x27;</span>);</span><br>      &#125;<br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.body.removeChild(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#copy&#x27;</span>))</span><br>    &#125;<br><span class=\"javascript\">    editor.addEventListener(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 是否是ctrl</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">let</span> isCtrl = e.ctrlKey</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">let</span> code = e.keyCode</span><br>      if (isCtrl &amp;&amp; code === 67) &#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 记录光标位置</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> start = e.target.selectionStart - <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> end = e.target.selectionEnd - <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> text = editor.value</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 记录行首、尾</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">-1</span>,</span><br>          right = -1<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 找到第一个换行</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = start; i &gt;= <span class=\"hljs-number\">0</span>; i--) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 0时说明为第一行</span></span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (text[i] === <span class=\"hljs-string\">&#x27;\\n&#x27;</span> || i === <span class=\"hljs-number\">0</span>) &#123;</span><br>            left = i<br><span class=\"javascript\">            <span class=\"hljs-keyword\">break</span></span><br>          &#125;<br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 找到第二个换行</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = end; i &lt; text.length; i++) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (text[i] === <span class=\"hljs-string\">&#x27;\\n&#x27;</span> || i === text.length - <span class=\"hljs-number\">1</span>) &#123;</span><br>            right = i<br><span class=\"javascript\">            <span class=\"hljs-keyword\">break</span></span><br>          &#125;<br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 这里主要是判断第一行、最后一行来处理换行符</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> selected = text.substring(left === <span class=\"hljs-number\">0</span> ? left : left + <span class=\"hljs-number\">1</span>, right === text.length - <span class=\"hljs-number\">1</span> ? right + <span class=\"hljs-number\">1</span> : right)</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>)) &#123;</span><br>          copyText(selected)<br>        &#125;<br>      &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":3260,"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。</p>\n<h1 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h1><p><a href=\"https://blog.shuaxindiary.cn/2020/12/27/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/textarea%E6%A0%87%E7%AD%BEtab%E9%94%AE%E6%97%A0%E6%95%88/\">textarea中tab健失效问题</a></p>\n<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>常见的编辑器中有个功能，是ctrl+c的时候，自动复制/剪切光标所在行的文本。</p>\n<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><ol>\n<li>获取光标在文本中的位置</li>\n<li>同时向前向后查找该位置最近的两处的回车换行符位置</li>\n<li>然后截取这两个换行符之间的文本即可</li>\n</ol>\n<ul>\n<li><ul>\n<li>获取位置需要判断一下是不是最后一行，以最后是否有换行符判断即可</li>\n</ul>\n</li>\n<li><ul>\n<li>有，就正常截取，无就按文本最后位置截取即可</li>\n</ul>\n</li>\n<li><ul>\n<li>需要注意监听组合键</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>将截取的字符串复制到系统的剪切板区域即可</li>\n</ol>\n<h2 id=\"获取光标位置\"><a href=\"#获取光标位置\" class=\"headerlink\" title=\"获取光标位置\"></a>获取光标位置</h2><ul>\n<li>在textarea会有两种移动光标的操作：鼠标、键盘</li>\n<li>监听这两个事件，然后通过触发事件的对象引用event的selectionStart、selectionEnd获取</li>\n<li>键盘事件的时候需要注意，每次按键后光标移动了，但是获取到的上次按的位置，需要减一</li>\n</ul>\n<h2 id=\"获取光标位置代码\"><a href=\"#获取光标位置代码\" class=\"headerlink\" title=\"获取光标位置代码\"></a>获取光标位置代码</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;editor&quot;</span> <span class=\"hljs-attr\">cols</span>=<span class=\"hljs-string\">&quot;30&quot;</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">&quot;10&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">  editor.addEventListener(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 光标起始位置</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> start = e.target.selectionStart</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 光标结束位置</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> end = e.target.selectionEnd</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 获取鼠标选中的文本</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> text=<span class=\"hljs-built_in\">window</span>.getSelection().toString()</span><br>  &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"复制文本\"><a href=\"#复制文本\" class=\"headerlink\" title=\"复制文本\"></a>复制文本</h2><ul>\n<li>获取到文本，如上述</li>\n<li>复制到剪切区，有2中方式，如下：</li>\n<li><ul>\n<li>document对象的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand\">execCommand</a>，是一个函数，参数为对应要操作的指令字符串，如copy；通过他获取input中的选中的文本即可</li>\n</ul>\n</li>\n<li><ul>\n<li>Clipboard API的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Clipboard\">Clipboard</a>，因为第一个操作标准已经放弃，不建议使用；可以使用该操作代替，但是兼容性需要考虑;其次该api必须在用户交互中使用，即不能再页面加载后自动复制粘贴</li>\n</ul>\n</li>\n<li><ul>\n<li>第三方库：<a href=\"https://github.com/zenorocha/clipboard.js\">clipboardJs</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"复制文本代码\"><a href=\"#复制文本代码\" class=\"headerlink\" title=\"复制文本代码\"></a>复制文本代码</h2><blockquote>\n<p>execCommand</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;copy&quot;</span>&gt;</span>copy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> copy = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#copy&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#text&#x27;</span>)</span><br><span class=\"javascript\">    copy.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;不支持改命令&#x27;</span>)</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 选中文本</span></span><br>      text.select()<br><span class=\"javascript\">      <span class=\"hljs-comment\">// 执行复制 返回一个Boolean</span></span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>)</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;复制成功&#x27;</span>)</span><br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Clipboard</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;copy&quot;</span>&gt;</span>copy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> copy = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#copy&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#text&#x27;</span>)</span><br><span class=\"javascript\">    copy.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br>      navigator.clipboard.writeText(text.value)<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"复制光标所在行代码\"><a href=\"#复制光标所在行代码\" class=\"headerlink\" title=\"复制光标所在行代码\"></a>复制光标所在行代码</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;editor&quot;</span> <span class=\"hljs-attr\">cols</span>=<span class=\"hljs-string\">&quot;30&quot;</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">&quot;10&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> editor = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#editor&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 复制文本 创建input来选中内容</span></span><br><span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">copyText</span>(<span class=\"hljs-params\">text</span>) </span>&#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;input&#x27;</span>);</span><br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.body.appendChild(input);</span><br><span class=\"javascript\">      input.setAttribute(<span class=\"hljs-string\">&#x27;value&#x27;</span>, text);</span><br><span class=\"javascript\">      input.setAttribute(<span class=\"hljs-string\">&#x27;id&#x27;</span>, <span class=\"hljs-string\">&#x27;copy&#x27;</span>);</span><br>      input.select();<br><span class=\"javascript\">      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>)) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>);</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;复制成功&#x27;</span>);</span><br>      &#125;<br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.body.removeChild(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#copy&#x27;</span>))</span><br>    &#125;<br><span class=\"javascript\">    editor.addEventListener(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 是否是ctrl</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">let</span> isCtrl = e.ctrlKey</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">let</span> code = e.keyCode</span><br>      if (isCtrl &amp;&amp; code === 67) &#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 记录光标位置</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> start = e.target.selectionStart - <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> end = e.target.selectionEnd - <span class=\"hljs-number\">1</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> text = editor.value</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 记录行首、尾</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">-1</span>,</span><br>          right = -1<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 找到第一个换行</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = start; i &gt;= <span class=\"hljs-number\">0</span>; i--) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 0时说明为第一行</span></span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (text[i] === <span class=\"hljs-string\">&#x27;\\n&#x27;</span> || i === <span class=\"hljs-number\">0</span>) &#123;</span><br>            left = i<br><span class=\"javascript\">            <span class=\"hljs-keyword\">break</span></span><br>          &#125;<br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 找到第二个换行</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = end; i &lt; text.length; i++) &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">if</span> (text[i] === <span class=\"hljs-string\">&#x27;\\n&#x27;</span> || i === text.length - <span class=\"hljs-number\">1</span>) &#123;</span><br>            right = i<br><span class=\"javascript\">            <span class=\"hljs-keyword\">break</span></span><br>          &#125;<br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 这里主要是判断第一行、最后一行来处理换行符</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> selected = text.substring(left === <span class=\"hljs-number\">0</span> ? left : left + <span class=\"hljs-number\">1</span>, right === text.length - <span class=\"hljs-number\">1</span> ? right + <span class=\"hljs-number\">1</span> : right)</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">&#x27;copy&#x27;</span>)) &#123;</span><br>          copyText(selected)<br>        &#125;<br>      &#125;<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n"},{"title":"从输入url到页面展示发生了什么","abbrlink":35667,"date":"2019-11-28T02:53:53.000Z","_content":"# 前言\n最近在学习HTTP协议相关的知识，对这道曾经一度让我懵逼的面试题，有了一点自己的答案，所以按自己的理解简单总结一下笔记\n\n# 流程概述\n>解析输入的url中的域名\n>通过TCP三次握手建立TCP通道\n>客户端---服务端通过http协议进行数据交互\n>客户端(浏览器)接收到服务端发来的HTML然后开始进行页面渲染\n>请求结束，通过TCP四次挥手关闭TCP通道\n<!-- more -->\n\n## 解析输入的url的域名\n>首先是URL是什么？\n- URL:统一资源定位符,如下\n- http://www.w3school.com.cn/html/index.asp\n- ***http://***是http协议的版本，***www.w3school.com.cn***是域名，域名后的 ***/*** 称为路由，用来定位服务器的资源目录，***html/index.asp***就是具体目录下的具体资源文件\n\n>为什么要解析域名？\n- 为什么解析域名?因为每一台主机都有一个属于他自己的ip地址，比如 ***127.0.0.1***，其他互联网的居民也是根据这个ip地址来访问你主机的资源(你对外提供的可访问的资源)，但是这个ip地址非常不好记忆，所以需要一个通俗易懂的名字来代替ip地址,这个就是域名。解析域名就是通过你的域名来找到对应你这个域名的主机。\n\n>和怎么解析的呢？\n- 怎么解析呢?通过采用DNS协议的DNS网络服务器来根据你提供的域名，自动去寻找对应该域名的ip地址，这个过程是浏览器自动完成，不需要手动参与。\n- 解析的过程一般发生在通过URL请求之前，浏览器会先把域名发送给DNS服务器，DNS服务器根据域名找到对应的IP地址后，返回给浏览器后，浏览器将URL中的域名替换成对应的IP地址，然后继续接下来的步骤。\n\n## 通过TCP三次握手建立TCP通道\n>为什么建立TCP通道？\n- 因为http属于网络模型七层协议中的应用层，只负责两端数据包的发送和接受，这个过程需要一个通道来传送，这就是TCP协议，它属于网络模型七层协议中的传输层。\n\n>TCP三次握手的目的?\n- 为了在要进行数据交互的两端，建立一个有效的数据传输通道；这个有效可以理解成，防止服务端接收到之前连接过已经断开的客户端突然传递过来的数据，导致出现一些错误。\n\n>TCP三次握手是怎么进行的？\n- 简单概述:1.客户端先发送一个信息告诉服务端，它要进行连接;2.服务端收到信息后，会在发送一个信息告诉客户端，我知道了，你可以连接了；3.这时客户端收到服务端发来的信息后，会在传回一个信息给服务端，服务端收到后，通道搭建完成，可以开始http请求的发送了。\n- 大体过程如下图\n![TCP三次握手](/img/url.png)\n- 图中的字母和数字就是三次握手中，用来确认是具体是哪一台客户端和服务端进行的链接的数据包。\n- SYN：同步序列编号；seq：序列号；ACK：确认字符\n\n## 客户端---服务端通过http协议进行数据交互\n客户端通过HTTP的请求方法，发送请求到服务端提供的请求地址，然后服务端收到请求后，提供客户端希望获取到的数据，在返回给客户端。\n\n[http协议学习](http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/)\n\n## 浏览器解析渲染页面\n浏览器一般都有两个引擎，一个渲染引擎，用来解析HTML+CSS并绘制显示出来；另一个是js引擎用来专门执行js代码。\n>解析过程\n- 浏览器收到HTML后，会先解析HTML文件的DOM树，由上至下(先解析一个节点的所有子节点，再继续该节点的兄弟节点，依次解析)；\n- 解析完毕所有的HTML后，才会在解析对应的CSS树，并根据CSS的规则计算出布局、对应dom的样式、尺寸，完毕后在进行渲染。\n\n>注意点：\n- 在解析HTML时，如果遇到script脚本，会停止解析，开始执行脚本，脚本执行完毕后，继续解析；这也是为什么我们写内置的script的时候，如果把代码防止在body之前，获取不到dom的原因。\n- 在准备好DOM树和CSS树后，渲染时有两个概念，***回流***、***重绘***。\n- 回流：当DOM的尺寸大小，以及影响布局的变化称为回流，这个操作会触发DOM的重新计算和渲染。\n- 重绘：当DOM的颜色，和不影响布局的样式发生的改变称为重绘。\n![渲染HTML过程](/img/url2.png)\n\n## 请求结束，通过TCP四次挥手关闭TCP通道\n![四次挥手](/img/url3)\n和三次握手的前三次流程大致相同，只是多了一次，客户端向服务端发送确认信息的步骤。\n\n因为服务端，是监听端，当通道搭建完成后，实时接收客户端发送的请求；它可以随时关闭通道，而当挥手的第三步完成后，浏览器需要告诉服务端，是否确认关闭通道。\n\n图中 的FIN为结束标志，结束序列编号。\n\n# 学习参考链接\n\n[浪里行舟](https://github.com/ljianshu/Blog/issues/24)\n\n[tcp协议中“syn，ack，fin”各有什么作用](https://zhidao.baidu.com/question/1964377688066529460.html)\n\n[图解HTTP](https://book.douban.com/subject/25863515/)","source":"_posts/技术笔记/从输入url到页面展示发生了什么.md","raw":"---\ntitle: 从输入url到页面展示发生了什么\ncategory:\n  - 技术笔记\ntags:\n  - 网络\n  - 踩坑\nabbrlink: 35667\ndate: 2019-11-28 10:53:53\n---\n# 前言\n最近在学习HTTP协议相关的知识，对这道曾经一度让我懵逼的面试题，有了一点自己的答案，所以按自己的理解简单总结一下笔记\n\n# 流程概述\n>解析输入的url中的域名\n>通过TCP三次握手建立TCP通道\n>客户端---服务端通过http协议进行数据交互\n>客户端(浏览器)接收到服务端发来的HTML然后开始进行页面渲染\n>请求结束，通过TCP四次挥手关闭TCP通道\n<!-- more -->\n\n## 解析输入的url的域名\n>首先是URL是什么？\n- URL:统一资源定位符,如下\n- http://www.w3school.com.cn/html/index.asp\n- ***http://***是http协议的版本，***www.w3school.com.cn***是域名，域名后的 ***/*** 称为路由，用来定位服务器的资源目录，***html/index.asp***就是具体目录下的具体资源文件\n\n>为什么要解析域名？\n- 为什么解析域名?因为每一台主机都有一个属于他自己的ip地址，比如 ***127.0.0.1***，其他互联网的居民也是根据这个ip地址来访问你主机的资源(你对外提供的可访问的资源)，但是这个ip地址非常不好记忆，所以需要一个通俗易懂的名字来代替ip地址,这个就是域名。解析域名就是通过你的域名来找到对应你这个域名的主机。\n\n>和怎么解析的呢？\n- 怎么解析呢?通过采用DNS协议的DNS网络服务器来根据你提供的域名，自动去寻找对应该域名的ip地址，这个过程是浏览器自动完成，不需要手动参与。\n- 解析的过程一般发生在通过URL请求之前，浏览器会先把域名发送给DNS服务器，DNS服务器根据域名找到对应的IP地址后，返回给浏览器后，浏览器将URL中的域名替换成对应的IP地址，然后继续接下来的步骤。\n\n## 通过TCP三次握手建立TCP通道\n>为什么建立TCP通道？\n- 因为http属于网络模型七层协议中的应用层，只负责两端数据包的发送和接受，这个过程需要一个通道来传送，这就是TCP协议，它属于网络模型七层协议中的传输层。\n\n>TCP三次握手的目的?\n- 为了在要进行数据交互的两端，建立一个有效的数据传输通道；这个有效可以理解成，防止服务端接收到之前连接过已经断开的客户端突然传递过来的数据，导致出现一些错误。\n\n>TCP三次握手是怎么进行的？\n- 简单概述:1.客户端先发送一个信息告诉服务端，它要进行连接;2.服务端收到信息后，会在发送一个信息告诉客户端，我知道了，你可以连接了；3.这时客户端收到服务端发来的信息后，会在传回一个信息给服务端，服务端收到后，通道搭建完成，可以开始http请求的发送了。\n- 大体过程如下图\n![TCP三次握手](/img/url.png)\n- 图中的字母和数字就是三次握手中，用来确认是具体是哪一台客户端和服务端进行的链接的数据包。\n- SYN：同步序列编号；seq：序列号；ACK：确认字符\n\n## 客户端---服务端通过http协议进行数据交互\n客户端通过HTTP的请求方法，发送请求到服务端提供的请求地址，然后服务端收到请求后，提供客户端希望获取到的数据，在返回给客户端。\n\n[http协议学习](http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/)\n\n## 浏览器解析渲染页面\n浏览器一般都有两个引擎，一个渲染引擎，用来解析HTML+CSS并绘制显示出来；另一个是js引擎用来专门执行js代码。\n>解析过程\n- 浏览器收到HTML后，会先解析HTML文件的DOM树，由上至下(先解析一个节点的所有子节点，再继续该节点的兄弟节点，依次解析)；\n- 解析完毕所有的HTML后，才会在解析对应的CSS树，并根据CSS的规则计算出布局、对应dom的样式、尺寸，完毕后在进行渲染。\n\n>注意点：\n- 在解析HTML时，如果遇到script脚本，会停止解析，开始执行脚本，脚本执行完毕后，继续解析；这也是为什么我们写内置的script的时候，如果把代码防止在body之前，获取不到dom的原因。\n- 在准备好DOM树和CSS树后，渲染时有两个概念，***回流***、***重绘***。\n- 回流：当DOM的尺寸大小，以及影响布局的变化称为回流，这个操作会触发DOM的重新计算和渲染。\n- 重绘：当DOM的颜色，和不影响布局的样式发生的改变称为重绘。\n![渲染HTML过程](/img/url2.png)\n\n## 请求结束，通过TCP四次挥手关闭TCP通道\n![四次挥手](/img/url3)\n和三次握手的前三次流程大致相同，只是多了一次，客户端向服务端发送确认信息的步骤。\n\n因为服务端，是监听端，当通道搭建完成后，实时接收客户端发送的请求；它可以随时关闭通道，而当挥手的第三步完成后，浏览器需要告诉服务端，是否确认关闭通道。\n\n图中 的FIN为结束标志，结束序列编号。\n\n# 学习参考链接\n\n[浪里行舟](https://github.com/ljianshu/Blog/issues/24)\n\n[tcp协议中“syn，ack，fin”各有什么作用](https://zhidao.baidu.com/question/1964377688066529460.html)\n\n[图解HTTP](https://book.douban.com/subject/25863515/)","slug":"技术笔记/从输入url到页面展示发生了什么","published":1,"updated":"2021-12-31T12:01:59.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1a001sj7jf3fet02mm","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在学习HTTP协议相关的知识，对这道曾经一度让我懵逼的面试题，有了一点自己的答案，所以按自己的理解简单总结一下笔记</p>\n<h1 id=\"流程概述\"><a href=\"#流程概述\" class=\"headerlink\" title=\"流程概述\"></a>流程概述</h1><blockquote>\n<p>解析输入的url中的域名<br>通过TCP三次握手建立TCP通道<br>客户端—服务端通过http协议进行数据交互<br>客户端(浏览器)接收到服务端发来的HTML然后开始进行页面渲染<br>请求结束，通过TCP四次挥手关闭TCP通道</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"解析输入的url的域名\"><a href=\"#解析输入的url的域名\" class=\"headerlink\" title=\"解析输入的url的域名\"></a>解析输入的url的域名</h2><blockquote>\n<p>首先是URL是什么？</p>\n</blockquote>\n<ul>\n<li>URL:统一资源定位符,如下</li>\n<li><a href=\"http://www.w3school.com.cn/html/index.asp\">http://www.w3school.com.cn/html/index.asp</a></li>\n<li><strong><em>http://</em></strong>是http协议的版本，*<strong><a href=\"http://www.w3school.com.cn***是域名,域名后的/\">www.w3school.com.cn***是域名，域名后的</a> *</strong>/<strong>* 称为路由，用来定位服务器的资源目录，*</strong>html/index.asp***就是具体目录下的具体资源文件</li>\n</ul>\n<blockquote>\n<p>为什么要解析域名？</p>\n</blockquote>\n<ul>\n<li>为什么解析域名?因为每一台主机都有一个属于他自己的ip地址，比如 <strong><em>127.0.0.1</em></strong>，其他互联网的居民也是根据这个ip地址来访问你主机的资源(你对外提供的可访问的资源)，但是这个ip地址非常不好记忆，所以需要一个通俗易懂的名字来代替ip地址,这个就是域名。解析域名就是通过你的域名来找到对应你这个域名的主机。</li>\n</ul>\n<blockquote>\n<p>和怎么解析的呢？</p>\n</blockquote>\n<ul>\n<li>怎么解析呢?通过采用DNS协议的DNS网络服务器来根据你提供的域名，自动去寻找对应该域名的ip地址，这个过程是浏览器自动完成，不需要手动参与。</li>\n<li>解析的过程一般发生在通过URL请求之前，浏览器会先把域名发送给DNS服务器，DNS服务器根据域名找到对应的IP地址后，返回给浏览器后，浏览器将URL中的域名替换成对应的IP地址，然后继续接下来的步骤。</li>\n</ul>\n<h2 id=\"通过TCP三次握手建立TCP通道\"><a href=\"#通过TCP三次握手建立TCP通道\" class=\"headerlink\" title=\"通过TCP三次握手建立TCP通道\"></a>通过TCP三次握手建立TCP通道</h2><blockquote>\n<p>为什么建立TCP通道？</p>\n</blockquote>\n<ul>\n<li>因为http属于网络模型七层协议中的应用层，只负责两端数据包的发送和接受，这个过程需要一个通道来传送，这就是TCP协议，它属于网络模型七层协议中的传输层。</li>\n</ul>\n<blockquote>\n<p>TCP三次握手的目的?</p>\n</blockquote>\n<ul>\n<li>为了在要进行数据交互的两端，建立一个有效的数据传输通道；这个有效可以理解成，防止服务端接收到之前连接过已经断开的客户端突然传递过来的数据，导致出现一些错误。</li>\n</ul>\n<blockquote>\n<p>TCP三次握手是怎么进行的？</p>\n</blockquote>\n<ul>\n<li>简单概述:1.客户端先发送一个信息告诉服务端，它要进行连接;2.服务端收到信息后，会在发送一个信息告诉客户端，我知道了，你可以连接了；3.这时客户端收到服务端发来的信息后，会在传回一个信息给服务端，服务端收到后，通道搭建完成，可以开始http请求的发送了。</li>\n<li>大体过程如下图<br><img src=\"/img/url.png\" alt=\"TCP三次握手\"></li>\n<li>图中的字母和数字就是三次握手中，用来确认是具体是哪一台客户端和服务端进行的链接的数据包。</li>\n<li>SYN：同步序列编号；seq：序列号；ACK：确认字符</li>\n</ul>\n<h2 id=\"客户端—服务端通过http协议进行数据交互\"><a href=\"#客户端—服务端通过http协议进行数据交互\" class=\"headerlink\" title=\"客户端—服务端通过http协议进行数据交互\"></a>客户端—服务端通过http协议进行数据交互</h2><p>客户端通过HTTP的请求方法，发送请求到服务端提供的请求地址，然后服务端收到请求后，提供客户端希望获取到的数据，在返回给客户端。</p>\n<p><a href=\"http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">http协议学习</a></p>\n<h2 id=\"浏览器解析渲染页面\"><a href=\"#浏览器解析渲染页面\" class=\"headerlink\" title=\"浏览器解析渲染页面\"></a>浏览器解析渲染页面</h2><p>浏览器一般都有两个引擎，一个渲染引擎，用来解析HTML+CSS并绘制显示出来；另一个是js引擎用来专门执行js代码。</p>\n<blockquote>\n<p>解析过程</p>\n</blockquote>\n<ul>\n<li>浏览器收到HTML后，会先解析HTML文件的DOM树，由上至下(先解析一个节点的所有子节点，再继续该节点的兄弟节点，依次解析)；</li>\n<li>解析完毕所有的HTML后，才会在解析对应的CSS树，并根据CSS的规则计算出布局、对应dom的样式、尺寸，完毕后在进行渲染。</li>\n</ul>\n<blockquote>\n<p>注意点：</p>\n</blockquote>\n<ul>\n<li>在解析HTML时，如果遇到script脚本，会停止解析，开始执行脚本，脚本执行完毕后，继续解析；这也是为什么我们写内置的script的时候，如果把代码防止在body之前，获取不到dom的原因。</li>\n<li>在准备好DOM树和CSS树后，渲染时有两个概念，*<strong>回流**<em>、</em></strong>重绘***。</li>\n<li>回流：当DOM的尺寸大小，以及影响布局的变化称为回流，这个操作会触发DOM的重新计算和渲染。</li>\n<li>重绘：当DOM的颜色，和不影响布局的样式发生的改变称为重绘。<br><img src=\"/img/url2.png\" alt=\"渲染HTML过程\"></li>\n</ul>\n<h2 id=\"请求结束，通过TCP四次挥手关闭TCP通道\"><a href=\"#请求结束，通过TCP四次挥手关闭TCP通道\" class=\"headerlink\" title=\"请求结束，通过TCP四次挥手关闭TCP通道\"></a>请求结束，通过TCP四次挥手关闭TCP通道</h2><p><img src=\"/img/url3\" alt=\"四次挥手\"><br>和三次握手的前三次流程大致相同，只是多了一次，客户端向服务端发送确认信息的步骤。</p>\n<p>因为服务端，是监听端，当通道搭建完成后，实时接收客户端发送的请求；它可以随时关闭通道，而当挥手的第三步完成后，浏览器需要告诉服务端，是否确认关闭通道。</p>\n<p>图中 的FIN为结束标志，结束序列编号。</p>\n<h1 id=\"学习参考链接\"><a href=\"#学习参考链接\" class=\"headerlink\" title=\"学习参考链接\"></a>学习参考链接</h1><p><a href=\"https://github.com/ljianshu/Blog/issues/24\">浪里行舟</a></p>\n<p><a href=\"https://zhidao.baidu.com/question/1964377688066529460.html\">tcp协议中“syn，ack，fin”各有什么作用</a></p>\n<p><a href=\"https://book.douban.com/subject/25863515/\">图解HTTP</a></p>\n","site":{"data":{}},"wordcount":1796,"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在学习HTTP协议相关的知识，对这道曾经一度让我懵逼的面试题，有了一点自己的答案，所以按自己的理解简单总结一下笔记</p>\n<h1 id=\"流程概述\"><a href=\"#流程概述\" class=\"headerlink\" title=\"流程概述\"></a>流程概述</h1><blockquote>\n<p>解析输入的url中的域名<br>通过TCP三次握手建立TCP通道<br>客户端—服务端通过http协议进行数据交互<br>客户端(浏览器)接收到服务端发来的HTML然后开始进行页面渲染<br>请求结束，通过TCP四次挥手关闭TCP通道</p>\n</blockquote>","more":"<h2 id=\"解析输入的url的域名\"><a href=\"#解析输入的url的域名\" class=\"headerlink\" title=\"解析输入的url的域名\"></a>解析输入的url的域名</h2><blockquote>\n<p>首先是URL是什么？</p>\n</blockquote>\n<ul>\n<li>URL:统一资源定位符,如下</li>\n<li><a href=\"http://www.w3school.com.cn/html/index.asp\">http://www.w3school.com.cn/html/index.asp</a></li>\n<li><strong><em>http://</em></strong>是http协议的版本，*<strong><a href=\"http://www.w3school.com.cn***是域名,域名后的/\">www.w3school.com.cn***是域名，域名后的</a> *</strong>/<strong>* 称为路由，用来定位服务器的资源目录，*</strong>html/index.asp***就是具体目录下的具体资源文件</li>\n</ul>\n<blockquote>\n<p>为什么要解析域名？</p>\n</blockquote>\n<ul>\n<li>为什么解析域名?因为每一台主机都有一个属于他自己的ip地址，比如 <strong><em>127.0.0.1</em></strong>，其他互联网的居民也是根据这个ip地址来访问你主机的资源(你对外提供的可访问的资源)，但是这个ip地址非常不好记忆，所以需要一个通俗易懂的名字来代替ip地址,这个就是域名。解析域名就是通过你的域名来找到对应你这个域名的主机。</li>\n</ul>\n<blockquote>\n<p>和怎么解析的呢？</p>\n</blockquote>\n<ul>\n<li>怎么解析呢?通过采用DNS协议的DNS网络服务器来根据你提供的域名，自动去寻找对应该域名的ip地址，这个过程是浏览器自动完成，不需要手动参与。</li>\n<li>解析的过程一般发生在通过URL请求之前，浏览器会先把域名发送给DNS服务器，DNS服务器根据域名找到对应的IP地址后，返回给浏览器后，浏览器将URL中的域名替换成对应的IP地址，然后继续接下来的步骤。</li>\n</ul>\n<h2 id=\"通过TCP三次握手建立TCP通道\"><a href=\"#通过TCP三次握手建立TCP通道\" class=\"headerlink\" title=\"通过TCP三次握手建立TCP通道\"></a>通过TCP三次握手建立TCP通道</h2><blockquote>\n<p>为什么建立TCP通道？</p>\n</blockquote>\n<ul>\n<li>因为http属于网络模型七层协议中的应用层，只负责两端数据包的发送和接受，这个过程需要一个通道来传送，这就是TCP协议，它属于网络模型七层协议中的传输层。</li>\n</ul>\n<blockquote>\n<p>TCP三次握手的目的?</p>\n</blockquote>\n<ul>\n<li>为了在要进行数据交互的两端，建立一个有效的数据传输通道；这个有效可以理解成，防止服务端接收到之前连接过已经断开的客户端突然传递过来的数据，导致出现一些错误。</li>\n</ul>\n<blockquote>\n<p>TCP三次握手是怎么进行的？</p>\n</blockquote>\n<ul>\n<li>简单概述:1.客户端先发送一个信息告诉服务端，它要进行连接;2.服务端收到信息后，会在发送一个信息告诉客户端，我知道了，你可以连接了；3.这时客户端收到服务端发来的信息后，会在传回一个信息给服务端，服务端收到后，通道搭建完成，可以开始http请求的发送了。</li>\n<li>大体过程如下图<br><img src=\"/img/url.png\" alt=\"TCP三次握手\"></li>\n<li>图中的字母和数字就是三次握手中，用来确认是具体是哪一台客户端和服务端进行的链接的数据包。</li>\n<li>SYN：同步序列编号；seq：序列号；ACK：确认字符</li>\n</ul>\n<h2 id=\"客户端—服务端通过http协议进行数据交互\"><a href=\"#客户端—服务端通过http协议进行数据交互\" class=\"headerlink\" title=\"客户端—服务端通过http协议进行数据交互\"></a>客户端—服务端通过http协议进行数据交互</h2><p>客户端通过HTTP的请求方法，发送请求到服务端提供的请求地址，然后服务端收到请求后，提供客户端希望获取到的数据，在返回给客户端。</p>\n<p><a href=\"http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/http%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">http协议学习</a></p>\n<h2 id=\"浏览器解析渲染页面\"><a href=\"#浏览器解析渲染页面\" class=\"headerlink\" title=\"浏览器解析渲染页面\"></a>浏览器解析渲染页面</h2><p>浏览器一般都有两个引擎，一个渲染引擎，用来解析HTML+CSS并绘制显示出来；另一个是js引擎用来专门执行js代码。</p>\n<blockquote>\n<p>解析过程</p>\n</blockquote>\n<ul>\n<li>浏览器收到HTML后，会先解析HTML文件的DOM树，由上至下(先解析一个节点的所有子节点，再继续该节点的兄弟节点，依次解析)；</li>\n<li>解析完毕所有的HTML后，才会在解析对应的CSS树，并根据CSS的规则计算出布局、对应dom的样式、尺寸，完毕后在进行渲染。</li>\n</ul>\n<blockquote>\n<p>注意点：</p>\n</blockquote>\n<ul>\n<li>在解析HTML时，如果遇到script脚本，会停止解析，开始执行脚本，脚本执行完毕后，继续解析；这也是为什么我们写内置的script的时候，如果把代码防止在body之前，获取不到dom的原因。</li>\n<li>在准备好DOM树和CSS树后，渲染时有两个概念，*<strong>回流**<em>、</em></strong>重绘***。</li>\n<li>回流：当DOM的尺寸大小，以及影响布局的变化称为回流，这个操作会触发DOM的重新计算和渲染。</li>\n<li>重绘：当DOM的颜色，和不影响布局的样式发生的改变称为重绘。<br><img src=\"/img/url2.png\" alt=\"渲染HTML过程\"></li>\n</ul>\n<h2 id=\"请求结束，通过TCP四次挥手关闭TCP通道\"><a href=\"#请求结束，通过TCP四次挥手关闭TCP通道\" class=\"headerlink\" title=\"请求结束，通过TCP四次挥手关闭TCP通道\"></a>请求结束，通过TCP四次挥手关闭TCP通道</h2><p><img src=\"/img/url3\" alt=\"四次挥手\"><br>和三次握手的前三次流程大致相同，只是多了一次，客户端向服务端发送确认信息的步骤。</p>\n<p>因为服务端，是监听端，当通道搭建完成后，实时接收客户端发送的请求；它可以随时关闭通道，而当挥手的第三步完成后，浏览器需要告诉服务端，是否确认关闭通道。</p>\n<p>图中 的FIN为结束标志，结束序列编号。</p>\n<h1 id=\"学习参考链接\"><a href=\"#学习参考链接\" class=\"headerlink\" title=\"学习参考链接\"></a>学习参考链接</h1><p><a href=\"https://github.com/ljianshu/Blog/issues/24\">浪里行舟</a></p>\n<p><a href=\"https://zhidao.baidu.com/question/1964377688066529460.html\">tcp协议中“syn，ack，fin”各有什么作用</a></p>\n<p><a href=\"https://book.douban.com/subject/25863515/\">图解HTTP</a></p>"},{"title":"父子组件生命周期函数","date":"2020-10-29T12:25:09.000Z","_content":"\n最近一次写Vue的时候，因为父子组件都有声明周期函数，在操作顺序上出现了一些之前没有想到的问题，特此记录一下\n\n# 生命周期函数\n- beforeCreate、created、beforeMount、mounted\n- beforeUpdate、updated、beforeDestroy、destroyed\n- activated、deactivated\n<!-- more -->\n# 场景\n```html\n<script>\n    let One={\n        // ....\n        beforeCreate() {\n            console.warn(\"子组件的beforeCreate\")\n        },\n        created() {\n            console.warn(\"子组件的created\")\n        },\n        beforeMount() {\n            console.warn(\"子组件beforemount\")\n        },\n        mounted() {\n            console.warn(\"子组件mounted\")\n        }\n        // ....\n    }\n    new Vue({\n        // ...\n        components:{\n            One\n        },\n        beforeCreate() {\n            console.log(\"父组件的beforeCreate\")\n        },\n        created() {\n            console.log(\"父组件的created\")\n        },\n        beforeMount() {\n            console.log(\"父组件beforemount\")\n        },\n        mounted() {\n            console.log(\"父组件mounted\")\n        },\n        // ...\n    })\n</script>\n```\n- 上面的运行结果为:\n- ![](http://img.shuaxindiary.cn/lifecycle.png)\n\n# 分析\n- 因为Vue是从根组件（Vue实例）开始执行的，然后依次去读取目标dom下的模板字符串开始进行解析和生成vdom，然后在这个过程中开始执行一些生命钩子函数，依次从beforeCreate->created->beforeMount，这里就开始准备生成vdom了\n- 子组件是含括在父组件内部的，开始生成vdom时，每个组件都是一个实例，都会经历一圈生命周期函数，然后完成该组件的vdom后，才算整个vue的vdom完毕，所以父组件的mounted阶段才会在最后才执行\n\n\n\n\n","source":"_posts/vue/父子组件生命周期函数.md","raw":"---\ntitle: 父子组件生命周期函数\ndate: 2020-10-29 20:25:09\ncategory:\n  - 技术笔记\ntag:\n  - Vue\n---\n\n最近一次写Vue的时候，因为父子组件都有声明周期函数，在操作顺序上出现了一些之前没有想到的问题，特此记录一下\n\n# 生命周期函数\n- beforeCreate、created、beforeMount、mounted\n- beforeUpdate、updated、beforeDestroy、destroyed\n- activated、deactivated\n<!-- more -->\n# 场景\n```html\n<script>\n    let One={\n        // ....\n        beforeCreate() {\n            console.warn(\"子组件的beforeCreate\")\n        },\n        created() {\n            console.warn(\"子组件的created\")\n        },\n        beforeMount() {\n            console.warn(\"子组件beforemount\")\n        },\n        mounted() {\n            console.warn(\"子组件mounted\")\n        }\n        // ....\n    }\n    new Vue({\n        // ...\n        components:{\n            One\n        },\n        beforeCreate() {\n            console.log(\"父组件的beforeCreate\")\n        },\n        created() {\n            console.log(\"父组件的created\")\n        },\n        beforeMount() {\n            console.log(\"父组件beforemount\")\n        },\n        mounted() {\n            console.log(\"父组件mounted\")\n        },\n        // ...\n    })\n</script>\n```\n- 上面的运行结果为:\n- ![](http://img.shuaxindiary.cn/lifecycle.png)\n\n# 分析\n- 因为Vue是从根组件（Vue实例）开始执行的，然后依次去读取目标dom下的模板字符串开始进行解析和生成vdom，然后在这个过程中开始执行一些生命钩子函数，依次从beforeCreate->created->beforeMount，这里就开始准备生成vdom了\n- 子组件是含括在父组件内部的，开始生成vdom时，每个组件都是一个实例，都会经历一圈生命周期函数，然后完成该组件的vdom后，才算整个vue的vdom完毕，所以父组件的mounted阶段才会在最后才执行\n\n\n\n\n","slug":"vue/父子组件生命周期函数","published":1,"updated":"2021-12-31T12:01:59.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1b001vj7jf6gm59u4f","content":"<p>最近一次写Vue的时候，因为父子组件都有声明周期函数，在操作顺序上出现了一些之前没有想到的问题，特此记录一下</p>\n<h1 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h1><ul>\n<li>beforeCreate、created、beforeMount、mounted</li>\n<li>beforeUpdate、updated、beforeDestroy、destroyed</li>\n<li>activated、deactivated<a id=\"more\"></a>\n<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> One=&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// ....</span></span><br>        beforeCreate() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;子组件的beforeCreate&quot;</span>)</span><br>        &#125;,<br>        created() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;子组件的created&quot;</span>)</span><br>        &#125;,<br>        beforeMount() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;子组件beforemount&quot;</span>)</span><br>        &#125;,<br>        mounted() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;子组件mounted&quot;</span>)</span><br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// ....</span></span><br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// ...</span></span><br>        components:&#123;<br>            One<br>        &#125;,<br>        beforeCreate() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父组件的beforeCreate&quot;</span>)</span><br>        &#125;,<br>        created() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父组件的created&quot;</span>)</span><br>        &#125;,<br>        beforeMount() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父组件beforemount&quot;</span>)</span><br>        &#125;,<br>        mounted() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父组件mounted&quot;</span>)</span><br>        &#125;,<br><span class=\"javascript\">        <span class=\"hljs-comment\">// ...</span></span><br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>\n<li>上面的运行结果为:</li>\n<li><img src=\"http://img.shuaxindiary.cn/lifecycle.png\"></li>\n</ul>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><ul>\n<li>因为Vue是从根组件（Vue实例）开始执行的，然后依次去读取目标dom下的模板字符串开始进行解析和生成vdom，然后在这个过程中开始执行一些生命钩子函数，依次从beforeCreate-&gt;created-&gt;beforeMount，这里就开始准备生成vdom了</li>\n<li>子组件是含括在父组件内部的，开始生成vdom时，每个组件都是一个实例，都会经历一圈生命周期函数，然后完成该组件的vdom后，才算整个vue的vdom完毕，所以父组件的mounted阶段才会在最后才执行</li>\n</ul>\n","site":{"data":{}},"wordcount":1094,"excerpt":"<p>最近一次写Vue的时候，因为父子组件都有声明周期函数，在操作顺序上出现了一些之前没有想到的问题，特此记录一下</p>\n<h1 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h1><ul>\n<li>beforeCreate、created、beforeMount、mounted</li>\n<li>beforeUpdate、updated、beforeDestroy、destroyed</li>\n<li>activated、deactivated","more":"<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> One=&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// ....</span></span><br>        beforeCreate() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;子组件的beforeCreate&quot;</span>)</span><br>        &#125;,<br>        created() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;子组件的created&quot;</span>)</span><br>        &#125;,<br>        beforeMount() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;子组件beforemount&quot;</span>)</span><br>        &#125;,<br>        mounted() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&quot;子组件mounted&quot;</span>)</span><br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// ....</span></span><br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">new</span> Vue(&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// ...</span></span><br>        components:&#123;<br>            One<br>        &#125;,<br>        beforeCreate() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父组件的beforeCreate&quot;</span>)</span><br>        &#125;,<br>        created() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父组件的created&quot;</span>)</span><br>        &#125;,<br>        beforeMount() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父组件beforemount&quot;</span>)</span><br>        &#125;,<br>        mounted() &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父组件mounted&quot;</span>)</span><br>        &#125;,<br><span class=\"javascript\">        <span class=\"hljs-comment\">// ...</span></span><br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li>上面的运行结果为:</li>\n<li><img src=\"http://img.shuaxindiary.cn/lifecycle.png\"></li>\n</ul>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><ul>\n<li>因为Vue是从根组件（Vue实例）开始执行的，然后依次去读取目标dom下的模板字符串开始进行解析和生成vdom，然后在这个过程中开始执行一些生命钩子函数，依次从beforeCreate-&gt;created-&gt;beforeMount，这里就开始准备生成vdom了</li>\n<li>子组件是含括在父组件内部的，开始生成vdom时，每个组件都是一个实例，都会经历一圈生命周期函数，然后完成该组件的vdom后，才算整个vue的vdom完毕，所以父组件的mounted阶段才会在最后才执行</li>\n</ul>"},{"title":"优雅的扩展React官方cli配置","date":"2020-11-06T12:52:43.000Z","_content":"\nFB官方的cli也和vue-cli3.x开始一样，隐藏了webpack配置文件，但是官方没有提供类似vue.config.js这种配置入口，如果想扩展只能eject，所以记录一下来自社区的解决方案，通过[react-app-rewired](https://github.com/timarney/react-app-rewired)和[customize-cra](https://github.com/arackaf/customize-cra)不用eject也可以一定程度扩展cli配置\n\n<!-- more -->\n\nreact-app-rewired\n==================\n通过配置*config-overrides.js*文件，来重写cli原本的配置文件\n\n\ncustomize-cra\n==================\n提供了一些便捷的配置方案，例如less、babel相关等\n\n基本使用\n=================\n\n- yarn || npm 安装 react-app-rewired customize-cra\n- 根目录创建**config-overrides.js**文件\n- 修改package.json启动脚本命令，如下\n    ```json\n    {\n        \"scripts\": {\n            \"start\": \"react-app-rewired start\",\n            \"build\": \"react-app-rewired build\",\n            \"test\": \"react-app-rewired test\",\n            \"eject\": \"react-app-rewired eject\"\n        }\n    }\n    ```\n- 支持less\n    ```js\n    <!-- 当前文件：config-overrides.js -->\n    <!-- 引入重写方法和添加lessloader的方法 -->\n    const { override, addLessLoader } = require('customize-cra')\n    module.exports = {\n        webpack: override(\n            <!-- 可以传递一个配置对象作为参数 -->\n            addLessLoader()\n        )\n    }\n    ```\n\n扩展配置\n=========\n- 查看addLessLoader的源码，可以看到内部返回了一个函数，函数的参数是一个对象，即cli原本webpack配置的对象，然后在其基础上做我们想做的扩展，在返回该对象即可；下图为config对象![](https://img.shuaxindiary.cn/webpack.config.png)\n- 实战，添加一个支持解析md文件内容的loader，这里使用raw-loader来读取md文件原始内容，然后在具体的文件内部做其他操作\n- - 安装raw-loader\n- - 获取原始配置下rules ![](https://img.shuaxindiary.cn/webpack.config2.png)\n- - 第一个参数是对解析器（parser）的[配置](https://webpack.js.org/configuration/module/#ruleparser)，图中为关闭require.entrue；第二个是对rules解析的[配置](https://webpack.js.org/configuration/module/#ruleoneof)， 配置当一类文件match某一个loader，处理完毕后就退出\n    ```js\n    <!-- 当前文件：config-overrides.js -->\n    const addMdLoader=()=>config=>{\n        <!-- 获取rules数组 -->\n        let rules=config.module.rules[1].oneOf\n        rules.unshift({\n            test: /\\.txt$/i,\n            use: 'raw-loader'\n        })\n        return config\n    }\n    module.exports = {\n        webpack: override(\n            addMdLoader(),\n        )\n    }\n    ```\n\n\n总结\n===========\n这篇笔记所有的尝试来自最初对md文件解析的整个需求，所以总结一下react or vue中怎么获取md文件内容\n\n- 直接引入对应的md文件，然后fetch去取\n- 通过配置raw-loader，然后直接获取引入的md文件即可拿到内容\n- 通过社区的markdown-loader，然后直接引入即可那得到渲染成HTML后的内容\n","source":"_posts/技术笔记/优雅的扩展React官方cli配置.md","raw":"---\ntitle: 优雅的扩展React官方cli配置\ndate: 2020-11-06 20:52:43\ncategory:\n  - 技术笔记\ntag:\n  - React\n  - 踩坑\n---\n\nFB官方的cli也和vue-cli3.x开始一样，隐藏了webpack配置文件，但是官方没有提供类似vue.config.js这种配置入口，如果想扩展只能eject，所以记录一下来自社区的解决方案，通过[react-app-rewired](https://github.com/timarney/react-app-rewired)和[customize-cra](https://github.com/arackaf/customize-cra)不用eject也可以一定程度扩展cli配置\n\n<!-- more -->\n\nreact-app-rewired\n==================\n通过配置*config-overrides.js*文件，来重写cli原本的配置文件\n\n\ncustomize-cra\n==================\n提供了一些便捷的配置方案，例如less、babel相关等\n\n基本使用\n=================\n\n- yarn || npm 安装 react-app-rewired customize-cra\n- 根目录创建**config-overrides.js**文件\n- 修改package.json启动脚本命令，如下\n    ```json\n    {\n        \"scripts\": {\n            \"start\": \"react-app-rewired start\",\n            \"build\": \"react-app-rewired build\",\n            \"test\": \"react-app-rewired test\",\n            \"eject\": \"react-app-rewired eject\"\n        }\n    }\n    ```\n- 支持less\n    ```js\n    <!-- 当前文件：config-overrides.js -->\n    <!-- 引入重写方法和添加lessloader的方法 -->\n    const { override, addLessLoader } = require('customize-cra')\n    module.exports = {\n        webpack: override(\n            <!-- 可以传递一个配置对象作为参数 -->\n            addLessLoader()\n        )\n    }\n    ```\n\n扩展配置\n=========\n- 查看addLessLoader的源码，可以看到内部返回了一个函数，函数的参数是一个对象，即cli原本webpack配置的对象，然后在其基础上做我们想做的扩展，在返回该对象即可；下图为config对象![](https://img.shuaxindiary.cn/webpack.config.png)\n- 实战，添加一个支持解析md文件内容的loader，这里使用raw-loader来读取md文件原始内容，然后在具体的文件内部做其他操作\n- - 安装raw-loader\n- - 获取原始配置下rules ![](https://img.shuaxindiary.cn/webpack.config2.png)\n- - 第一个参数是对解析器（parser）的[配置](https://webpack.js.org/configuration/module/#ruleparser)，图中为关闭require.entrue；第二个是对rules解析的[配置](https://webpack.js.org/configuration/module/#ruleoneof)， 配置当一类文件match某一个loader，处理完毕后就退出\n    ```js\n    <!-- 当前文件：config-overrides.js -->\n    const addMdLoader=()=>config=>{\n        <!-- 获取rules数组 -->\n        let rules=config.module.rules[1].oneOf\n        rules.unshift({\n            test: /\\.txt$/i,\n            use: 'raw-loader'\n        })\n        return config\n    }\n    module.exports = {\n        webpack: override(\n            addMdLoader(),\n        )\n    }\n    ```\n\n\n总结\n===========\n这篇笔记所有的尝试来自最初对md文件解析的整个需求，所以总结一下react or vue中怎么获取md文件内容\n\n- 直接引入对应的md文件，然后fetch去取\n- 通过配置raw-loader，然后直接获取引入的md文件即可拿到内容\n- 通过社区的markdown-loader，然后直接引入即可那得到渲染成HTML后的内容\n","slug":"技术笔记/优雅的扩展React官方cli配置","published":1,"updated":"2021-12-31T12:01:59.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1b001yj7jf38gh2azk","content":"<p>FB官方的cli也和vue-cli3.x开始一样，隐藏了webpack配置文件，但是官方没有提供类似vue.config.js这种配置入口，如果想扩展只能eject，所以记录一下来自社区的解决方案，通过<a href=\"https://github.com/timarney/react-app-rewired\">react-app-rewired</a>和<a href=\"https://github.com/arackaf/customize-cra\">customize-cra</a>不用eject也可以一定程度扩展cli配置</p>\n<a id=\"more\"></a>\n\n<h1 id=\"react-app-rewired\"><a href=\"#react-app-rewired\" class=\"headerlink\" title=\"react-app-rewired\"></a>react-app-rewired</h1><p>通过配置<em>config-overrides.js</em>文件，来重写cli原本的配置文件</p>\n<h1 id=\"customize-cra\"><a href=\"#customize-cra\" class=\"headerlink\" title=\"customize-cra\"></a>customize-cra</h1><p>提供了一些便捷的配置方案，例如less、babel相关等</p>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><ul>\n<li>yarn || npm 安装 react-app-rewired customize-cra</li>\n<li>根目录创建<strong>config-overrides.js</strong>文件</li>\n<li>修改package.json启动脚本命令，如下  <figure class=\"highlight json\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;scripts&quot;</span>: &#123;<br>        <span class=\"hljs-attr\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;react-app-rewired start&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;react-app-rewired build&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;test&quot;</span>: <span class=\"hljs-string\">&quot;react-app-rewired test&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;eject&quot;</span>: <span class=\"hljs-string\">&quot;react-app-rewired eject&quot;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li>\n<li>支持less  <figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;!-- 当前文件：config-overrides.js --&gt;<br>&lt;!-- 引入重写方法和添加lessloader的方法 --&gt;<br><span class=\"hljs-keyword\">const</span> &#123; override, addLessLoader &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;customize-cra&#x27;</span>)<br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    webpack: override(<br>        &lt;!-- 可以传递一个配置对象作为参数 --&gt;<br>        addLessLoader()<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"扩展配置\"><a href=\"#扩展配置\" class=\"headerlink\" title=\"扩展配置\"></a>扩展配置</h1><ul>\n<li>查看addLessLoader的源码，可以看到内部返回了一个函数，函数的参数是一个对象，即cli原本webpack配置的对象，然后在其基础上做我们想做的扩展，在返回该对象即可；下图为config对象<img src=\"https://img.shuaxindiary.cn/webpack.config.png\"></li>\n<li>实战，添加一个支持解析md文件内容的loader，这里使用raw-loader来读取md文件原始内容，然后在具体的文件内部做其他操作</li>\n<li><ul>\n<li>安装raw-loader</li>\n</ul>\n</li>\n<li><ul>\n<li>获取原始配置下rules <img src=\"https://img.shuaxindiary.cn/webpack.config2.png\"></li>\n</ul>\n</li>\n<li><ul>\n<li>第一个参数是对解析器（parser）的<a href=\"https://webpack.js.org/configuration/module/#ruleparser\">配置</a>，图中为关闭require.entrue；第二个是对rules解析的<a href=\"https://webpack.js.org/configuration/module/#ruleoneof\">配置</a>， 配置当一类文件match某一个loader，处理完毕后就退出<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">&lt;!-- 当前文件：config-overrides.js --&gt;<br><span class=\"hljs-keyword\">const</span> addMdLoader=<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-function\"><span class=\"hljs-params\">config</span>=&gt;</span>&#123;<br>    &lt;!-- 获取rules数组 --&gt;<br>    <span class=\"hljs-keyword\">let</span> rules=config.module.rules[<span class=\"hljs-number\">1</span>].oneOf<br>    rules.unshift(&#123;<br>        test: <span class=\"hljs-regexp\">/\\.txt$/i</span>,<br>        use: <span class=\"hljs-string\">&#x27;raw-loader&#x27;</span><br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> config<br>&#125;<br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    webpack: override(<br>        addMdLoader(),<br>    )<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇笔记所有的尝试来自最初对md文件解析的整个需求，所以总结一下react or vue中怎么获取md文件内容</p>\n<ul>\n<li>直接引入对应的md文件，然后fetch去取</li>\n<li>通过配置raw-loader，然后直接获取引入的md文件即可拿到内容</li>\n<li>通过社区的markdown-loader，然后直接引入即可那得到渲染成HTML后的内容</li>\n</ul>\n","site":{"data":{}},"wordcount":1590,"excerpt":"<p>FB官方的cli也和vue-cli3.x开始一样，隐藏了webpack配置文件，但是官方没有提供类似vue.config.js这种配置入口，如果想扩展只能eject，所以记录一下来自社区的解决方案，通过<a href=\"https://github.com/timarney/react-app-rewired\">react-app-rewired</a>和<a href=\"https://github.com/arackaf/customize-cra\">customize-cra</a>不用eject也可以一定程度扩展cli配置</p>","more":"<h1 id=\"react-app-rewired\"><a href=\"#react-app-rewired\" class=\"headerlink\" title=\"react-app-rewired\"></a>react-app-rewired</h1><p>通过配置<em>config-overrides.js</em>文件，来重写cli原本的配置文件</p>\n<h1 id=\"customize-cra\"><a href=\"#customize-cra\" class=\"headerlink\" title=\"customize-cra\"></a>customize-cra</h1><p>提供了一些便捷的配置方案，例如less、babel相关等</p>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><ul>\n<li>yarn || npm 安装 react-app-rewired customize-cra</li>\n<li>根目录创建<strong>config-overrides.js</strong>文件</li>\n<li>修改package.json启动脚本命令，如下  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;scripts&quot;</span>: &#123;<br>        <span class=\"hljs-attr\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;react-app-rewired start&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;react-app-rewired build&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;test&quot;</span>: <span class=\"hljs-string\">&quot;react-app-rewired test&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;eject&quot;</span>: <span class=\"hljs-string\">&quot;react-app-rewired eject&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>支持less  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;!-- 当前文件：config-overrides.js --&gt;<br>&lt;!-- 引入重写方法和添加lessloader的方法 --&gt;<br><span class=\"hljs-keyword\">const</span> &#123; override, addLessLoader &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;customize-cra&#x27;</span>)<br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    webpack: override(<br>        &lt;!-- 可以传递一个配置对象作为参数 --&gt;<br>        addLessLoader()<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"扩展配置\"><a href=\"#扩展配置\" class=\"headerlink\" title=\"扩展配置\"></a>扩展配置</h1><ul>\n<li>查看addLessLoader的源码，可以看到内部返回了一个函数，函数的参数是一个对象，即cli原本webpack配置的对象，然后在其基础上做我们想做的扩展，在返回该对象即可；下图为config对象<img src=\"https://img.shuaxindiary.cn/webpack.config.png\"></li>\n<li>实战，添加一个支持解析md文件内容的loader，这里使用raw-loader来读取md文件原始内容，然后在具体的文件内部做其他操作</li>\n<li><ul>\n<li>安装raw-loader</li>\n</ul>\n</li>\n<li><ul>\n<li>获取原始配置下rules <img src=\"https://img.shuaxindiary.cn/webpack.config2.png\"></li>\n</ul>\n</li>\n<li><ul>\n<li>第一个参数是对解析器（parser）的<a href=\"https://webpack.js.org/configuration/module/#ruleparser\">配置</a>，图中为关闭require.entrue；第二个是对rules解析的<a href=\"https://webpack.js.org/configuration/module/#ruleoneof\">配置</a>， 配置当一类文件match某一个loader，处理完毕后就退出<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;!-- 当前文件：config-overrides.js --&gt;<br><span class=\"hljs-keyword\">const</span> addMdLoader=<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-function\"><span class=\"hljs-params\">config</span>=&gt;</span>&#123;<br>    &lt;!-- 获取rules数组 --&gt;<br>    <span class=\"hljs-keyword\">let</span> rules=config.module.rules[<span class=\"hljs-number\">1</span>].oneOf<br>    rules.unshift(&#123;<br>        test: <span class=\"hljs-regexp\">/\\.txt$/i</span>,<br>        use: <span class=\"hljs-string\">&#x27;raw-loader&#x27;</span><br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> config<br>&#125;<br><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>    webpack: override(<br>        addMdLoader(),<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这篇笔记所有的尝试来自最初对md文件解析的整个需求，所以总结一下react or vue中怎么获取md文件内容</p>\n<ul>\n<li>直接引入对应的md文件，然后fetch去取</li>\n<li>通过配置raw-loader，然后直接获取引入的md文件即可拿到内容</li>\n<li>通过社区的markdown-loader，然后直接引入即可那得到渲染成HTML后的内容</li>\n</ul>"},{"title":"textarea标签tab键无效","date":"2020-12-27T08:51:58.000Z","_content":"\n# 前言\n\n最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。\n\n# 原因\n- 浏览器中使用tab键会自动将光标在当前页面的各个控件上进行切换\n\n# 解决思路\n- 在textarea上监听keydown事件\n- 监听每次的按键，是tab键时(code=9)，阻止默认事件\n- 然后书写添加对应的空格逻辑即可\n\n# 实现\n```html\n<textarea id=\"editor\"/>\n<script>\n    // 阻止textarea默认事件\n    const preventTab = (e) => {\n        // 获取到textarea\n      let dom = e.target;\n      if (e.keyCode == 9) {\n        //   阻止默认事件\n        e.preventDefault();\n        // 几个空格\n        var indent = \"    \";\n        // 获取光标选中or光标所处字符串中的起始和截止位置\n        var start = dom.selectionStart;\n        var end = dom.selectionEnd;\n        // 获取光标选中的内容\n        var selected = window.getSelection().toString();\n        selected = indent + selected.replace(/\\n/g, \"\\n\" + indent);\n        dom.value =\n          dom.value.substring(0, start) + selected + dom.value.substring(end);\n        dom.setSelectionRange(start + indent.length, start + selected.length);\n      }\n    };\n    let editor=document.querySelector('#editor')\n    editor.addEventListener('keydown',(e)=>{\n        preventTab(e)\n    })\n</script>\n```","source":"_posts/技术笔记/textarea标签tab键无效.md","raw":"---\ntitle: textarea标签tab键无效\ndate: 2020-12-27 16:51:58\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 前端\n  - 踩坑\n---\n\n# 前言\n\n最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。\n\n# 原因\n- 浏览器中使用tab键会自动将光标在当前页面的各个控件上进行切换\n\n# 解决思路\n- 在textarea上监听keydown事件\n- 监听每次的按键，是tab键时(code=9)，阻止默认事件\n- 然后书写添加对应的空格逻辑即可\n\n# 实现\n```html\n<textarea id=\"editor\"/>\n<script>\n    // 阻止textarea默认事件\n    const preventTab = (e) => {\n        // 获取到textarea\n      let dom = e.target;\n      if (e.keyCode == 9) {\n        //   阻止默认事件\n        e.preventDefault();\n        // 几个空格\n        var indent = \"    \";\n        // 获取光标选中or光标所处字符串中的起始和截止位置\n        var start = dom.selectionStart;\n        var end = dom.selectionEnd;\n        // 获取光标选中的内容\n        var selected = window.getSelection().toString();\n        selected = indent + selected.replace(/\\n/g, \"\\n\" + indent);\n        dom.value =\n          dom.value.substring(0, start) + selected + dom.value.substring(end);\n        dom.setSelectionRange(start + indent.length, start + selected.length);\n      }\n    };\n    let editor=document.querySelector('#editor')\n    editor.addEventListener('keydown',(e)=>{\n        preventTab(e)\n    })\n</script>\n```","slug":"技术笔记/textarea标签tab键无效","published":1,"updated":"2021-12-31T12:01:59.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1b0021j7jf3x946a70","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。</p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><ul>\n<li>浏览器中使用tab键会自动将光标在当前页面的各个控件上进行切换</li>\n</ul>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><ul>\n<li>在textarea上监听keydown事件</li>\n<li>监听每次的按键，是tab键时(code=9)，阻止默认事件</li>\n<li>然后书写添加对应的空格逻辑即可</li>\n</ul>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;editor&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 阻止textarea默认事件</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> preventTab = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 获取到textarea</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">let</span> dom = e.target;</span><br>      if (e.keyCode == 9) &#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">//   阻止默认事件</span></span><br>        e.preventDefault();<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 几个空格</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> indent = <span class=\"hljs-string\">&quot;    &quot;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 获取光标选中or光标所处字符串中的起始和截止位置</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> start = dom.selectionStart;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> end = dom.selectionEnd;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 获取光标选中的内容</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> selected = <span class=\"hljs-built_in\">window</span>.getSelection().toString();</span><br><span class=\"javascript\">        selected = indent + selected.replace(<span class=\"hljs-regexp\">/\\n/g</span>, <span class=\"hljs-string\">&quot;\\n&quot;</span> + indent);</span><br>        dom.value =<br>          dom.value.substring(0, start) + selected + dom.value.substring(end);<br>        dom.setSelectionRange(start + indent.length, start + selected.length);<br>      &#125;<br>    &#125;;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> editor=<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#editor&#x27;</span>)</span><br><span class=\"javascript\">    editor.addEventListener(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>)=&gt;</span>&#123;</span><br>        preventTab(e)<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":965,"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近在写一个在线md编辑器，使用的textarea作为文本编辑器，来让用户进行输入；但是textarea并不具备很多日常所见到的编辑器所具备的功能，例如复制剪切光标所在行文本，甚至tab键都会带来一些意外的情况，所以记录一下这些坑。</p>\n<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><ul>\n<li>浏览器中使用tab键会自动将光标在当前页面的各个控件上进行切换</li>\n</ul>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><ul>\n<li>在textarea上监听keydown事件</li>\n<li>监听每次的按键，是tab键时(code=9)，阻止默认事件</li>\n<li>然后书写添加对应的空格逻辑即可</li>\n</ul>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;editor&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 阻止textarea默认事件</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> preventTab = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 获取到textarea</span></span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">let</span> dom = e.target;</span><br>      if (e.keyCode == 9) &#123;<br><span class=\"javascript\">        <span class=\"hljs-comment\">//   阻止默认事件</span></span><br>        e.preventDefault();<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 几个空格</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> indent = <span class=\"hljs-string\">&quot;    &quot;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 获取光标选中or光标所处字符串中的起始和截止位置</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> start = dom.selectionStart;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> end = dom.selectionEnd;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 获取光标选中的内容</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">var</span> selected = <span class=\"hljs-built_in\">window</span>.getSelection().toString();</span><br><span class=\"javascript\">        selected = indent + selected.replace(<span class=\"hljs-regexp\">/\\n/g</span>, <span class=\"hljs-string\">&quot;\\n&quot;</span> + indent);</span><br>        dom.value =<br>          dom.value.substring(0, start) + selected + dom.value.substring(end);<br>        dom.setSelectionRange(start + indent.length, start + selected.length);<br>      &#125;<br>    &#125;;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> editor=<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#editor&#x27;</span>)</span><br><span class=\"javascript\">    editor.addEventListener(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>)=&gt;</span>&#123;</span><br>        preventTab(e)<br>    &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>"},{"title":"关于JWT认证","abbrlink":53894,"date":"2020-03-15T14:57:35.000Z","_content":"\n# 开头\n- 但凡有登陆模块的程序，都会涉及到用户身份认证的问题;目的就是确保来访问是真的用户\n- 所以记录一下最近这一块学习/实验的笔记\n- 实现代码均为部分，整体代码[点这里](https://github.com/SHUAXINDIARY/NodeStudyNotes/tree/master/loginByExpress)\n<!-- more -->\n# 工作流程\n- 用户登陆，如果登陆信息和服务端保存的信息一致，服务端会通过一些机制生成一串字符串，返回给客户端\n- 客户端保存该字符串，并在之后的每次请求中携带该字符串\n- 服务端接收到请求后，会验证该字符串是否有效、是否过期;如果都没有就正常返回数据，如果失效、过期就返回对应的提示信息\n- 这串字符串就是token令牌\n\n# 小插曲\n- 做登陆等需要处理用户账号密码等私密的操作时，要对这些隐私信息进行加密，在做操作、保存等 \n- 目的：1.职业操守，开发人员要尊重用户的这些私密信息；2.防止被其他人攻击，拿到密码等私密信息进行一些不好的操作\n\n# 加密的代码实现\n- 需要用到[bcrypt](https://github.com/kelektiv/node.bcrypt.js)模块\n- 对注册密码进行加密并保存，方便演示，数据直接保存到本地数组\n```js\n...\nconst express = require('express')\nconst router = express.Router()\nconst bcrypt = require('bcrypt')\n\n// 保存注册信息\nlet users=[]\n\n// 生成salt的等级  \nconst saltRounds = 10\n// 注册\nrouter.post('/register', (req, res, next) => {\n    /**\n        body={\n            name:'shuaxin',\n            psw:'shuaxin'\n        }\n    */\n    // 接受前端数据\n    let obj = req.body\n    // 生成salt\n    const salt = bcrypt.genSaltSync(saltRounds)\n    // 利用salt对密码进行hash生成加密字符串\n    const hash = bcrypt.hashSync(obj.psw, salt)\n    // 然后保存该条数据等操作\n    users.push({\n        name:obj.name,\n        psw:hash\n    })\n    // 返回提示\n    res.json({\n        msg: 'register succ'\n    })\n})\n// 登陆\nrouter.post('/login', (req, res, next) => {\n    let obj = req.body\n    // 查找对应的账号 然后校对密码是否一致\n    for (let index in users) {\n        if (users[index].name === obj.name) {\n            // 校对结果为Boolean\n            // 参数列表(用户输入的面，存储的加密后的密码)\n            let result = bcrypt.compareSync(obj.psw, users[index].psw)\n            if (result) {\n                res.json({\n                    code: 1,\n                    msg: '登陆成功',\n                    token\n                })\n            } else {\n                res.json({\n                    code: -1,\n                    msg: '检查账号密码是否匹配'\n                })\n            }\n            break\n        }\n    }\n})\n...\n```\n\n# 生成token代码实现\n- 用到的模块[jsonwebtoken](https://github.com/auth0/node-jsonwebtoken)\n- 登陆成功返回生成的token\n- 在上文代码的登陆逻辑区域操作，省略重复代码\n```js\n...\n// 引入模块\nconst jwt = require('jsonwebtoken')\n// 设置私钥\nconst sk = 'shuaxin'\n...\n// 登陆\nrouter.post('/login', (req, res, next) => {\n    let obj = req.body\n    for (let index in users) {\n        if (users[index].name === obj.name) {\n            let result = bcrypt.compareSync(obj.psw, users[index].psw)\n            // 生成token  参数:(要加密的内容，秘钥，时间(s为单位))\n            let token = jwt.sign(users[index], sk, { expiresIn: 10 });\n            if (result) {\n                res.json({\n                    code: 1,\n                    msg: '登陆成功',\n                    token\n                })\n            } else {\n                res.json({\n                    code: -1,\n                    msg: '检查账号密码是否匹配'\n                })\n            }\n            break\n        }\n    }\n})\n...\n```\n- 验证token是否有效、过期\n```js\n...\n// 引入模块\nconst jwt = require('jsonwebtoken')\n// 设置私钥\nconst sk = 'shuaxin'\n...\nrouter.post('/testToken', (req, res, next) => {\n    let obj = req.body\n    // 过期后会抛异常 \n    try {\n        // 校验token 结果为Boolean\n        // 参数列表（token,私钥）\n        var decoded = jwt.verify(obj.token, sk);\n        if (decoded) {\n            res.json({\n                code: 1,\n                msg: '有效的token'\n            })\n        } else {\n            res.json({\n                code: -1,\n                msg: 'token无效'\n            })\n        }\n    } catch (error) {\n        res.json({\n            code: -1,\n            msg: 'token过期'\n        })\n    }\n})\n```\n\n# 其他笔记\n- 看jwt文档的时候看到了HMAC SHA256、RSA SHA256\n- 这两个是不同的加密算法模式，前者是默认的，后者可以自己设置\n- 通过搜索引擎了解到常见加密算法模式有：DES,AES, RSA, MD5, SHA, HMAC, base64，区别有待学习\n- SHA256是一种使用了哈希长度为256的算法，太菜了，底层就不懂了\n- [DES,AES, RSA, MD5, SHA, HMAC, base64区别](https://www.jianshu.com/p/567071aadc42)\n\n# 关于JWT的优缺点\n优缺点都是对比出来的，和常用的session进行对比，由于实践有限，session没用过，总结是搜索引擎搜索后，罗列的自己能理解的\n\n>JWT优点\n- 减轻服务器压力，因为生成后直接返回给客户端，服务端就无须保存，session需要维持每个用户的状态\n- 避免跨域攻击，因为服务端会对每个请求进行token校验，不存在或者无效都没法获取数据，而token保存在用户自己的客户端，只要不在这里被窃取，来自网络的伪造请求一般都无法完成\n- 适合移动端，没做过移动端，查了查资料，因为session会话状态的控制需要依赖cookie，客户端对cookie的支持很有限，所以session不适合移动端\n- 实现单点登录，因为cookie不能跨域，session依赖cookie，token不存在这个问题\n\n>JWT缺点\n- 注销登录、忘记密码等后，token还有效，这样服务端需要加一些额外操作来处理\n- - 使用UID和token对应\n- - 每个用户加密token使用单独的salt，过期改一下salt即可\n- token有效期续签问题，续签的目的就是为了防止用户频繁需要登录，token也需要额外的一些解决方案\n- - 每次请求，都更新一个新token，如果之间没有请求，过了token有效期，就需要重新登录了\n\n>参考文章\n[JWT优缺点](https://zhuanlan.zhihu.com/p/85873228)\n[JWT详解](https://learnku.com/articles/17883?order_by=vote_count&)","source":"_posts/技术笔记/关于JWT认证.md","raw":"---\ntitle: 关于JWT认证\ncategory:\n  - 技术笔记\ntags:\n  - 踩坑\n  - NodeJS\nabbrlink: 53894\ndate: 2020-03-15 22:57:35\n---\n\n# 开头\n- 但凡有登陆模块的程序，都会涉及到用户身份认证的问题;目的就是确保来访问是真的用户\n- 所以记录一下最近这一块学习/实验的笔记\n- 实现代码均为部分，整体代码[点这里](https://github.com/SHUAXINDIARY/NodeStudyNotes/tree/master/loginByExpress)\n<!-- more -->\n# 工作流程\n- 用户登陆，如果登陆信息和服务端保存的信息一致，服务端会通过一些机制生成一串字符串，返回给客户端\n- 客户端保存该字符串，并在之后的每次请求中携带该字符串\n- 服务端接收到请求后，会验证该字符串是否有效、是否过期;如果都没有就正常返回数据，如果失效、过期就返回对应的提示信息\n- 这串字符串就是token令牌\n\n# 小插曲\n- 做登陆等需要处理用户账号密码等私密的操作时，要对这些隐私信息进行加密，在做操作、保存等 \n- 目的：1.职业操守，开发人员要尊重用户的这些私密信息；2.防止被其他人攻击，拿到密码等私密信息进行一些不好的操作\n\n# 加密的代码实现\n- 需要用到[bcrypt](https://github.com/kelektiv/node.bcrypt.js)模块\n- 对注册密码进行加密并保存，方便演示，数据直接保存到本地数组\n```js\n...\nconst express = require('express')\nconst router = express.Router()\nconst bcrypt = require('bcrypt')\n\n// 保存注册信息\nlet users=[]\n\n// 生成salt的等级  \nconst saltRounds = 10\n// 注册\nrouter.post('/register', (req, res, next) => {\n    /**\n        body={\n            name:'shuaxin',\n            psw:'shuaxin'\n        }\n    */\n    // 接受前端数据\n    let obj = req.body\n    // 生成salt\n    const salt = bcrypt.genSaltSync(saltRounds)\n    // 利用salt对密码进行hash生成加密字符串\n    const hash = bcrypt.hashSync(obj.psw, salt)\n    // 然后保存该条数据等操作\n    users.push({\n        name:obj.name,\n        psw:hash\n    })\n    // 返回提示\n    res.json({\n        msg: 'register succ'\n    })\n})\n// 登陆\nrouter.post('/login', (req, res, next) => {\n    let obj = req.body\n    // 查找对应的账号 然后校对密码是否一致\n    for (let index in users) {\n        if (users[index].name === obj.name) {\n            // 校对结果为Boolean\n            // 参数列表(用户输入的面，存储的加密后的密码)\n            let result = bcrypt.compareSync(obj.psw, users[index].psw)\n            if (result) {\n                res.json({\n                    code: 1,\n                    msg: '登陆成功',\n                    token\n                })\n            } else {\n                res.json({\n                    code: -1,\n                    msg: '检查账号密码是否匹配'\n                })\n            }\n            break\n        }\n    }\n})\n...\n```\n\n# 生成token代码实现\n- 用到的模块[jsonwebtoken](https://github.com/auth0/node-jsonwebtoken)\n- 登陆成功返回生成的token\n- 在上文代码的登陆逻辑区域操作，省略重复代码\n```js\n...\n// 引入模块\nconst jwt = require('jsonwebtoken')\n// 设置私钥\nconst sk = 'shuaxin'\n...\n// 登陆\nrouter.post('/login', (req, res, next) => {\n    let obj = req.body\n    for (let index in users) {\n        if (users[index].name === obj.name) {\n            let result = bcrypt.compareSync(obj.psw, users[index].psw)\n            // 生成token  参数:(要加密的内容，秘钥，时间(s为单位))\n            let token = jwt.sign(users[index], sk, { expiresIn: 10 });\n            if (result) {\n                res.json({\n                    code: 1,\n                    msg: '登陆成功',\n                    token\n                })\n            } else {\n                res.json({\n                    code: -1,\n                    msg: '检查账号密码是否匹配'\n                })\n            }\n            break\n        }\n    }\n})\n...\n```\n- 验证token是否有效、过期\n```js\n...\n// 引入模块\nconst jwt = require('jsonwebtoken')\n// 设置私钥\nconst sk = 'shuaxin'\n...\nrouter.post('/testToken', (req, res, next) => {\n    let obj = req.body\n    // 过期后会抛异常 \n    try {\n        // 校验token 结果为Boolean\n        // 参数列表（token,私钥）\n        var decoded = jwt.verify(obj.token, sk);\n        if (decoded) {\n            res.json({\n                code: 1,\n                msg: '有效的token'\n            })\n        } else {\n            res.json({\n                code: -1,\n                msg: 'token无效'\n            })\n        }\n    } catch (error) {\n        res.json({\n            code: -1,\n            msg: 'token过期'\n        })\n    }\n})\n```\n\n# 其他笔记\n- 看jwt文档的时候看到了HMAC SHA256、RSA SHA256\n- 这两个是不同的加密算法模式，前者是默认的，后者可以自己设置\n- 通过搜索引擎了解到常见加密算法模式有：DES,AES, RSA, MD5, SHA, HMAC, base64，区别有待学习\n- SHA256是一种使用了哈希长度为256的算法，太菜了，底层就不懂了\n- [DES,AES, RSA, MD5, SHA, HMAC, base64区别](https://www.jianshu.com/p/567071aadc42)\n\n# 关于JWT的优缺点\n优缺点都是对比出来的，和常用的session进行对比，由于实践有限，session没用过，总结是搜索引擎搜索后，罗列的自己能理解的\n\n>JWT优点\n- 减轻服务器压力，因为生成后直接返回给客户端，服务端就无须保存，session需要维持每个用户的状态\n- 避免跨域攻击，因为服务端会对每个请求进行token校验，不存在或者无效都没法获取数据，而token保存在用户自己的客户端，只要不在这里被窃取，来自网络的伪造请求一般都无法完成\n- 适合移动端，没做过移动端，查了查资料，因为session会话状态的控制需要依赖cookie，客户端对cookie的支持很有限，所以session不适合移动端\n- 实现单点登录，因为cookie不能跨域，session依赖cookie，token不存在这个问题\n\n>JWT缺点\n- 注销登录、忘记密码等后，token还有效，这样服务端需要加一些额外操作来处理\n- - 使用UID和token对应\n- - 每个用户加密token使用单独的salt，过期改一下salt即可\n- token有效期续签问题，续签的目的就是为了防止用户频繁需要登录，token也需要额外的一些解决方案\n- - 每次请求，都更新一个新token，如果之间没有请求，过了token有效期，就需要重新登录了\n\n>参考文章\n[JWT优缺点](https://zhuanlan.zhihu.com/p/85873228)\n[JWT详解](https://learnku.com/articles/17883?order_by=vote_count&)","slug":"技术笔记/关于JWT认证","published":1,"updated":"2021-12-31T12:01:59.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1c0024j7jfap5masuy","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><ul>\n<li>但凡有登陆模块的程序，都会涉及到用户身份认证的问题;目的就是确保来访问是真的用户</li>\n<li>所以记录一下最近这一块学习/实验的笔记</li>\n<li>实现代码均为部分，整体代码<a href=\"https://github.com/SHUAXINDIARY/NodeStudyNotes/tree/master/loginByExpress\">点这里</a><a id=\"more\"></a>\n<h1 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h1></li>\n<li>用户登陆，如果登陆信息和服务端保存的信息一致，服务端会通过一些机制生成一串字符串，返回给客户端</li>\n<li>客户端保存该字符串，并在之后的每次请求中携带该字符串</li>\n<li>服务端接收到请求后，会验证该字符串是否有效、是否过期;如果都没有就正常返回数据，如果失效、过期就返回对应的提示信息</li>\n<li>这串字符串就是token令牌</li>\n</ul>\n<h1 id=\"小插曲\"><a href=\"#小插曲\" class=\"headerlink\" title=\"小插曲\"></a>小插曲</h1><ul>\n<li>做登陆等需要处理用户账号密码等私密的操作时，要对这些隐私信息进行加密，在做操作、保存等 </li>\n<li>目的：1.职业操守，开发人员要尊重用户的这些私密信息；2.防止被其他人攻击，拿到密码等私密信息进行一些不好的操作</li>\n</ul>\n<h1 id=\"加密的代码实现\"><a href=\"#加密的代码实现\" class=\"headerlink\" title=\"加密的代码实现\"></a>加密的代码实现</h1><ul>\n<li>需要用到<a href=\"https://github.com/kelektiv/node.bcrypt.js\">bcrypt</a>模块</li>\n<li>对注册密码进行加密并保存，方便演示，数据直接保存到本地数组<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">...<br><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> router = express.Router()<br><span class=\"hljs-keyword\">const</span> bcrypt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;bcrypt&#x27;</span>)<br><br><span class=\"hljs-comment\">// 保存注册信息</span><br><span class=\"hljs-keyword\">let</span> users=[]<br><br><span class=\"hljs-comment\">// 生成salt的等级  </span><br><span class=\"hljs-keyword\">const</span> saltRounds = <span class=\"hljs-number\">10</span><br><span class=\"hljs-comment\">// 注册</span><br>router.post(<span class=\"hljs-string\">&#x27;/register&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">        body=&#123;</span><br><span class=\"hljs-comment\">            name:&#x27;shuaxin&#x27;,</span><br><span class=\"hljs-comment\">            psw:&#x27;shuaxin&#x27;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-comment\">// 接受前端数据</span><br>    <span class=\"hljs-keyword\">let</span> obj = req.body<br>    <span class=\"hljs-comment\">// 生成salt</span><br>    <span class=\"hljs-keyword\">const</span> salt = bcrypt.genSaltSync(saltRounds)<br>    <span class=\"hljs-comment\">// 利用salt对密码进行hash生成加密字符串</span><br>    <span class=\"hljs-keyword\">const</span> hash = bcrypt.hashSync(obj.psw, salt)<br>    <span class=\"hljs-comment\">// 然后保存该条数据等操作</span><br>    users.push(&#123;<br>        name:obj.name,<br>        psw:hash<br>    &#125;)<br>    <span class=\"hljs-comment\">// 返回提示</span><br>    res.json(&#123;<br>        msg: <span class=\"hljs-string\">&#x27;register succ&#x27;</span><br>    &#125;)<br>&#125;)<br><span class=\"hljs-comment\">// 登陆</span><br>router.post(<span class=\"hljs-string\">&#x27;/login&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> obj = req.body<br>    <span class=\"hljs-comment\">// 查找对应的账号 然后校对密码是否一致</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index <span class=\"hljs-keyword\">in</span> users) &#123;<br>        <span class=\"hljs-keyword\">if</span> (users[index].name === obj.name) &#123;<br>            <span class=\"hljs-comment\">// 校对结果为Boolean</span><br>            <span class=\"hljs-comment\">// 参数列表(用户输入的面，存储的加密后的密码)</span><br>            <span class=\"hljs-keyword\">let</span> result = bcrypt.compareSync(obj.psw, users[index].psw)<br>            <span class=\"hljs-keyword\">if</span> (result) &#123;<br>                res.json(&#123;<br>                    code: <span class=\"hljs-number\">1</span>,<br>                    msg: <span class=\"hljs-string\">&#x27;登陆成功&#x27;</span>,<br>                    token<br>                &#125;)<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                res.json(&#123;<br>                    code: <span class=\"hljs-number\">-1</span>,<br>                    msg: <span class=\"hljs-string\">&#x27;检查账号密码是否匹配&#x27;</span><br>                &#125;)<br>            &#125;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>    &#125;<br>&#125;)<br>...<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"生成token代码实现\"><a href=\"#生成token代码实现\" class=\"headerlink\" title=\"生成token代码实现\"></a>生成token代码实现</h1><ul>\n<li>用到的模块<a href=\"https://github.com/auth0/node-jsonwebtoken\">jsonwebtoken</a></li>\n<li>登陆成功返回生成的token</li>\n<li>在上文代码的登陆逻辑区域操作，省略重复代码<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">...<br><span class=\"hljs-comment\">// 引入模块</span><br><span class=\"hljs-keyword\">const</span> jwt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;jsonwebtoken&#x27;</span>)<br><span class=\"hljs-comment\">// 设置私钥</span><br><span class=\"hljs-keyword\">const</span> sk = <span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>...<br><span class=\"hljs-comment\">// 登陆</span><br>router.post(<span class=\"hljs-string\">&#x27;/login&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> obj = req.body<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index <span class=\"hljs-keyword\">in</span> users) &#123;<br>        <span class=\"hljs-keyword\">if</span> (users[index].name === obj.name) &#123;<br>            <span class=\"hljs-keyword\">let</span> result = bcrypt.compareSync(obj.psw, users[index].psw)<br>            <span class=\"hljs-comment\">// 生成token  参数:(要加密的内容，秘钥，时间(s为单位))</span><br>            <span class=\"hljs-keyword\">let</span> token = jwt.sign(users[index], sk, &#123; <span class=\"hljs-attr\">expiresIn</span>: <span class=\"hljs-number\">10</span> &#125;);<br>            <span class=\"hljs-keyword\">if</span> (result) &#123;<br>                res.json(&#123;<br>                    code: <span class=\"hljs-number\">1</span>,<br>                    msg: <span class=\"hljs-string\">&#x27;登陆成功&#x27;</span>,<br>                    token<br>                &#125;)<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                res.json(&#123;<br>                    code: <span class=\"hljs-number\">-1</span>,<br>                    msg: <span class=\"hljs-string\">&#x27;检查账号密码是否匹配&#x27;</span><br>                &#125;)<br>            &#125;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>    &#125;<br>&#125;)<br>...<br></code></pre></div></td></tr></table></figure></li>\n<li>验证token是否有效、过期<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">...<br><span class=\"hljs-comment\">// 引入模块</span><br><span class=\"hljs-keyword\">const</span> jwt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;jsonwebtoken&#x27;</span>)<br><span class=\"hljs-comment\">// 设置私钥</span><br><span class=\"hljs-keyword\">const</span> sk = <span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>...<br>router.post(<span class=\"hljs-string\">&#x27;/testToken&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> obj = req.body<br>    <span class=\"hljs-comment\">// 过期后会抛异常 </span><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 校验token 结果为Boolean</span><br>        <span class=\"hljs-comment\">// 参数列表（token,私钥）</span><br>        <span class=\"hljs-keyword\">var</span> decoded = jwt.verify(obj.token, sk);<br>        <span class=\"hljs-keyword\">if</span> (decoded) &#123;<br>            res.json(&#123;<br>                code: <span class=\"hljs-number\">1</span>,<br>                msg: <span class=\"hljs-string\">&#x27;有效的token&#x27;</span><br>            &#125;)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            res.json(&#123;<br>                code: <span class=\"hljs-number\">-1</span>,<br>                msg: <span class=\"hljs-string\">&#x27;token无效&#x27;</span><br>            &#125;)<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123;<br>        res.json(&#123;<br>            code: <span class=\"hljs-number\">-1</span>,<br>            msg: <span class=\"hljs-string\">&#x27;token过期&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"其他笔记\"><a href=\"#其他笔记\" class=\"headerlink\" title=\"其他笔记\"></a>其他笔记</h1><ul>\n<li>看jwt文档的时候看到了HMAC SHA256、RSA SHA256</li>\n<li>这两个是不同的加密算法模式，前者是默认的，后者可以自己设置</li>\n<li>通过搜索引擎了解到常见加密算法模式有：DES,AES, RSA, MD5, SHA, HMAC, base64，区别有待学习</li>\n<li>SHA256是一种使用了哈希长度为256的算法，太菜了，底层就不懂了</li>\n<li><a href=\"https://www.jianshu.com/p/567071aadc42\">DES,AES, RSA, MD5, SHA, HMAC, base64区别</a></li>\n</ul>\n<h1 id=\"关于JWT的优缺点\"><a href=\"#关于JWT的优缺点\" class=\"headerlink\" title=\"关于JWT的优缺点\"></a>关于JWT的优缺点</h1><p>优缺点都是对比出来的，和常用的session进行对比，由于实践有限，session没用过，总结是搜索引擎搜索后，罗列的自己能理解的</p>\n<blockquote>\n<p>JWT优点</p>\n</blockquote>\n<ul>\n<li>减轻服务器压力，因为生成后直接返回给客户端，服务端就无须保存，session需要维持每个用户的状态</li>\n<li>避免跨域攻击，因为服务端会对每个请求进行token校验，不存在或者无效都没法获取数据，而token保存在用户自己的客户端，只要不在这里被窃取，来自网络的伪造请求一般都无法完成</li>\n<li>适合移动端，没做过移动端，查了查资料，因为session会话状态的控制需要依赖cookie，客户端对cookie的支持很有限，所以session不适合移动端</li>\n<li>实现单点登录，因为cookie不能跨域，session依赖cookie，token不存在这个问题</li>\n</ul>\n<blockquote>\n<p>JWT缺点</p>\n</blockquote>\n<ul>\n<li>注销登录、忘记密码等后，token还有效，这样服务端需要加一些额外操作来处理</li>\n<li><ul>\n<li>使用UID和token对应</li>\n</ul>\n</li>\n<li><ul>\n<li>每个用户加密token使用单独的salt，过期改一下salt即可</li>\n</ul>\n</li>\n<li>token有效期续签问题，续签的目的就是为了防止用户频繁需要登录，token也需要额外的一些解决方案</li>\n<li><ul>\n<li>每次请求，都更新一个新token，如果之间没有请求，过了token有效期，就需要重新登录了</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>参考文章<br><a href=\"https://zhuanlan.zhihu.com/p/85873228\">JWT优缺点</a><br><a href=\"https://learnku.com/articles/17883?order_by=vote_count&\">JWT详解</a></p>\n</blockquote>\n","site":{"data":{}},"wordcount":3405,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><ul>\n<li>但凡有登陆模块的程序，都会涉及到用户身份认证的问题;目的就是确保来访问是真的用户</li>\n<li>所以记录一下最近这一块学习/实验的笔记</li>\n<li>实现代码均为部分，整体代码<a href=\"https://github.com/SHUAXINDIARY/NodeStudyNotes/tree/master/loginByExpress\">点这里</a>","more":"<h1 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h1></li>\n<li>用户登陆，如果登陆信息和服务端保存的信息一致，服务端会通过一些机制生成一串字符串，返回给客户端</li>\n<li>客户端保存该字符串，并在之后的每次请求中携带该字符串</li>\n<li>服务端接收到请求后，会验证该字符串是否有效、是否过期;如果都没有就正常返回数据，如果失效、过期就返回对应的提示信息</li>\n<li>这串字符串就是token令牌</li>\n</ul>\n<h1 id=\"小插曲\"><a href=\"#小插曲\" class=\"headerlink\" title=\"小插曲\"></a>小插曲</h1><ul>\n<li>做登陆等需要处理用户账号密码等私密的操作时，要对这些隐私信息进行加密，在做操作、保存等 </li>\n<li>目的：1.职业操守，开发人员要尊重用户的这些私密信息；2.防止被其他人攻击，拿到密码等私密信息进行一些不好的操作</li>\n</ul>\n<h1 id=\"加密的代码实现\"><a href=\"#加密的代码实现\" class=\"headerlink\" title=\"加密的代码实现\"></a>加密的代码实现</h1><ul>\n<li>需要用到<a href=\"https://github.com/kelektiv/node.bcrypt.js\">bcrypt</a>模块</li>\n<li>对注册密码进行加密并保存，方便演示，数据直接保存到本地数组<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">...<br><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> router = express.Router()<br><span class=\"hljs-keyword\">const</span> bcrypt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;bcrypt&#x27;</span>)<br><br><span class=\"hljs-comment\">// 保存注册信息</span><br><span class=\"hljs-keyword\">let</span> users=[]<br><br><span class=\"hljs-comment\">// 生成salt的等级  </span><br><span class=\"hljs-keyword\">const</span> saltRounds = <span class=\"hljs-number\">10</span><br><span class=\"hljs-comment\">// 注册</span><br>router.post(<span class=\"hljs-string\">&#x27;/register&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">        body=&#123;</span><br><span class=\"hljs-comment\">            name:&#x27;shuaxin&#x27;,</span><br><span class=\"hljs-comment\">            psw:&#x27;shuaxin&#x27;</span><br><span class=\"hljs-comment\">        &#125;</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-comment\">// 接受前端数据</span><br>    <span class=\"hljs-keyword\">let</span> obj = req.body<br>    <span class=\"hljs-comment\">// 生成salt</span><br>    <span class=\"hljs-keyword\">const</span> salt = bcrypt.genSaltSync(saltRounds)<br>    <span class=\"hljs-comment\">// 利用salt对密码进行hash生成加密字符串</span><br>    <span class=\"hljs-keyword\">const</span> hash = bcrypt.hashSync(obj.psw, salt)<br>    <span class=\"hljs-comment\">// 然后保存该条数据等操作</span><br>    users.push(&#123;<br>        name:obj.name,<br>        psw:hash<br>    &#125;)<br>    <span class=\"hljs-comment\">// 返回提示</span><br>    res.json(&#123;<br>        msg: <span class=\"hljs-string\">&#x27;register succ&#x27;</span><br>    &#125;)<br>&#125;)<br><span class=\"hljs-comment\">// 登陆</span><br>router.post(<span class=\"hljs-string\">&#x27;/login&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> obj = req.body<br>    <span class=\"hljs-comment\">// 查找对应的账号 然后校对密码是否一致</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index <span class=\"hljs-keyword\">in</span> users) &#123;<br>        <span class=\"hljs-keyword\">if</span> (users[index].name === obj.name) &#123;<br>            <span class=\"hljs-comment\">// 校对结果为Boolean</span><br>            <span class=\"hljs-comment\">// 参数列表(用户输入的面，存储的加密后的密码)</span><br>            <span class=\"hljs-keyword\">let</span> result = bcrypt.compareSync(obj.psw, users[index].psw)<br>            <span class=\"hljs-keyword\">if</span> (result) &#123;<br>                res.json(&#123;<br>                    code: <span class=\"hljs-number\">1</span>,<br>                    msg: <span class=\"hljs-string\">&#x27;登陆成功&#x27;</span>,<br>                    token<br>                &#125;)<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                res.json(&#123;<br>                    code: <span class=\"hljs-number\">-1</span>,<br>                    msg: <span class=\"hljs-string\">&#x27;检查账号密码是否匹配&#x27;</span><br>                &#125;)<br>            &#125;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>    &#125;<br>&#125;)<br>...<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"生成token代码实现\"><a href=\"#生成token代码实现\" class=\"headerlink\" title=\"生成token代码实现\"></a>生成token代码实现</h1><ul>\n<li>用到的模块<a href=\"https://github.com/auth0/node-jsonwebtoken\">jsonwebtoken</a></li>\n<li>登陆成功返回生成的token</li>\n<li>在上文代码的登陆逻辑区域操作，省略重复代码<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">...<br><span class=\"hljs-comment\">// 引入模块</span><br><span class=\"hljs-keyword\">const</span> jwt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;jsonwebtoken&#x27;</span>)<br><span class=\"hljs-comment\">// 设置私钥</span><br><span class=\"hljs-keyword\">const</span> sk = <span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>...<br><span class=\"hljs-comment\">// 登陆</span><br>router.post(<span class=\"hljs-string\">&#x27;/login&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> obj = req.body<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index <span class=\"hljs-keyword\">in</span> users) &#123;<br>        <span class=\"hljs-keyword\">if</span> (users[index].name === obj.name) &#123;<br>            <span class=\"hljs-keyword\">let</span> result = bcrypt.compareSync(obj.psw, users[index].psw)<br>            <span class=\"hljs-comment\">// 生成token  参数:(要加密的内容，秘钥，时间(s为单位))</span><br>            <span class=\"hljs-keyword\">let</span> token = jwt.sign(users[index], sk, &#123; <span class=\"hljs-attr\">expiresIn</span>: <span class=\"hljs-number\">10</span> &#125;);<br>            <span class=\"hljs-keyword\">if</span> (result) &#123;<br>                res.json(&#123;<br>                    code: <span class=\"hljs-number\">1</span>,<br>                    msg: <span class=\"hljs-string\">&#x27;登陆成功&#x27;</span>,<br>                    token<br>                &#125;)<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                res.json(&#123;<br>                    code: <span class=\"hljs-number\">-1</span>,<br>                    msg: <span class=\"hljs-string\">&#x27;检查账号密码是否匹配&#x27;</span><br>                &#125;)<br>            &#125;<br>            <span class=\"hljs-keyword\">break</span><br>        &#125;<br>    &#125;<br>&#125;)<br>...<br></code></pre></td></tr></table></figure></li>\n<li>验证token是否有效、过期<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">...<br><span class=\"hljs-comment\">// 引入模块</span><br><span class=\"hljs-keyword\">const</span> jwt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;jsonwebtoken&#x27;</span>)<br><span class=\"hljs-comment\">// 设置私钥</span><br><span class=\"hljs-keyword\">const</span> sk = <span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>...<br>router.post(<span class=\"hljs-string\">&#x27;/testToken&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> obj = req.body<br>    <span class=\"hljs-comment\">// 过期后会抛异常 </span><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 校验token 结果为Boolean</span><br>        <span class=\"hljs-comment\">// 参数列表（token,私钥）</span><br>        <span class=\"hljs-keyword\">var</span> decoded = jwt.verify(obj.token, sk);<br>        <span class=\"hljs-keyword\">if</span> (decoded) &#123;<br>            res.json(&#123;<br>                code: <span class=\"hljs-number\">1</span>,<br>                msg: <span class=\"hljs-string\">&#x27;有效的token&#x27;</span><br>            &#125;)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            res.json(&#123;<br>                code: <span class=\"hljs-number\">-1</span>,<br>                msg: <span class=\"hljs-string\">&#x27;token无效&#x27;</span><br>            &#125;)<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123;<br>        res.json(&#123;<br>            code: <span class=\"hljs-number\">-1</span>,<br>            msg: <span class=\"hljs-string\">&#x27;token过期&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"其他笔记\"><a href=\"#其他笔记\" class=\"headerlink\" title=\"其他笔记\"></a>其他笔记</h1><ul>\n<li>看jwt文档的时候看到了HMAC SHA256、RSA SHA256</li>\n<li>这两个是不同的加密算法模式，前者是默认的，后者可以自己设置</li>\n<li>通过搜索引擎了解到常见加密算法模式有：DES,AES, RSA, MD5, SHA, HMAC, base64，区别有待学习</li>\n<li>SHA256是一种使用了哈希长度为256的算法，太菜了，底层就不懂了</li>\n<li><a href=\"https://www.jianshu.com/p/567071aadc42\">DES,AES, RSA, MD5, SHA, HMAC, base64区别</a></li>\n</ul>\n<h1 id=\"关于JWT的优缺点\"><a href=\"#关于JWT的优缺点\" class=\"headerlink\" title=\"关于JWT的优缺点\"></a>关于JWT的优缺点</h1><p>优缺点都是对比出来的，和常用的session进行对比，由于实践有限，session没用过，总结是搜索引擎搜索后，罗列的自己能理解的</p>\n<blockquote>\n<p>JWT优点</p>\n</blockquote>\n<ul>\n<li>减轻服务器压力，因为生成后直接返回给客户端，服务端就无须保存，session需要维持每个用户的状态</li>\n<li>避免跨域攻击，因为服务端会对每个请求进行token校验，不存在或者无效都没法获取数据，而token保存在用户自己的客户端，只要不在这里被窃取，来自网络的伪造请求一般都无法完成</li>\n<li>适合移动端，没做过移动端，查了查资料，因为session会话状态的控制需要依赖cookie，客户端对cookie的支持很有限，所以session不适合移动端</li>\n<li>实现单点登录，因为cookie不能跨域，session依赖cookie，token不存在这个问题</li>\n</ul>\n<blockquote>\n<p>JWT缺点</p>\n</blockquote>\n<ul>\n<li>注销登录、忘记密码等后，token还有效，这样服务端需要加一些额外操作来处理</li>\n<li><ul>\n<li>使用UID和token对应</li>\n</ul>\n</li>\n<li><ul>\n<li>每个用户加密token使用单独的salt，过期改一下salt即可</li>\n</ul>\n</li>\n<li>token有效期续签问题，续签的目的就是为了防止用户频繁需要登录，token也需要额外的一些解决方案</li>\n<li><ul>\n<li>每次请求，都更新一个新token，如果之间没有请求，过了token有效期，就需要重新登录了</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>参考文章<br><a href=\"https://zhuanlan.zhihu.com/p/85873228\">JWT优缺点</a><br><a href=\"https://learnku.com/articles/17883?order_by=vote_count&\">JWT详解</a></p>\n</blockquote>"},{"title":"像Vue一样使用react路由","date":"2020-11-14T01:26:55.000Z","_content":"\n\n场景\n=====\n习惯了vue里面通过配置文件一样来使用路由，react路由跳转和vue一样都是通过对应的跳转组件进行跳转，没啥区别，但是响应url页面的时候，需要使用很多内置的组件来进行书写，有点繁琐，所以记录一下简单的封装一下常用的RouterView组件，来达到像vue一样简单使用\n\n<!-- more -->\n\n思路\n=====\n- 将复杂的这部分抽离成一个组件，然后传递需要让路由显示的路由对象就好\n- 作为刚入坑react的萌新，需要注意 Link和Switch 要对应在同一个Router下\n- 用到的React路由组件：详情见[文档](https://reactrouter.com/web/guides/quick-start)\n- - BrowserRouter：浏览器里使用的路由\n- - Link：跳转\n- - Switch：切换显示的组件\n- - Route：控制url对应的组件\n\n[代码](https://codesandbox.io/s/broken-shadow-8hx9o?file=/src/index.js:96-109)\n=======\n- 使用codesandbox在线ide\n- 这里需要注意，每个jsx文件都需要单独引入一下React，不然会报错\n```js\n// RouterView.jsx\nimport React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nconst RouterView = ({ routes }) => {\n  return (\n    <Switch>\n      {routes.map((item, i) => {\n        return (\n          <Route\n            key={i}\n            path={item.path}\n            // 这里传递的为当前路由的子路由\n            component={() => item.component(item.routes)}\n          />\n        );\n      })}\n    </Switch>\n  );\n};\nexport default RouterView;\n\n```\n\nreact路由的基本使用\n=========\n- 接受参数：useParams\n```js\n// 路由\nconst routes=[\n  {\n    path: \"/home/:id\",\n    exact: true,\n    label: \"首页\",\n    component: Home\n  }\n]\n// 组件\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nexport default function () {\n  console.log(useParams());//{id:xxx}\n  return <div>Home</div>;\n}\n\n```\n- 将路由对象信息注入当前组件props：withRouter [使用](https://blog.shuaxinjs.cn/2020/11/11/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/antd-menu%E7%BB%84%E4%BB%B6/)\n\n","source":"_posts/技术笔记/像Vue一样使用react路由.md","raw":"---\ntitle: 像Vue一样使用react路由\ndate: 2020-11-14 09:26:55\ncategory:\n  - 技术笔记\ntag:\n  - React\n  - 踩坑\n---\n\n\n场景\n=====\n习惯了vue里面通过配置文件一样来使用路由，react路由跳转和vue一样都是通过对应的跳转组件进行跳转，没啥区别，但是响应url页面的时候，需要使用很多内置的组件来进行书写，有点繁琐，所以记录一下简单的封装一下常用的RouterView组件，来达到像vue一样简单使用\n\n<!-- more -->\n\n思路\n=====\n- 将复杂的这部分抽离成一个组件，然后传递需要让路由显示的路由对象就好\n- 作为刚入坑react的萌新，需要注意 Link和Switch 要对应在同一个Router下\n- 用到的React路由组件：详情见[文档](https://reactrouter.com/web/guides/quick-start)\n- - BrowserRouter：浏览器里使用的路由\n- - Link：跳转\n- - Switch：切换显示的组件\n- - Route：控制url对应的组件\n\n[代码](https://codesandbox.io/s/broken-shadow-8hx9o?file=/src/index.js:96-109)\n=======\n- 使用codesandbox在线ide\n- 这里需要注意，每个jsx文件都需要单独引入一下React，不然会报错\n```js\n// RouterView.jsx\nimport React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nconst RouterView = ({ routes }) => {\n  return (\n    <Switch>\n      {routes.map((item, i) => {\n        return (\n          <Route\n            key={i}\n            path={item.path}\n            // 这里传递的为当前路由的子路由\n            component={() => item.component(item.routes)}\n          />\n        );\n      })}\n    </Switch>\n  );\n};\nexport default RouterView;\n\n```\n\nreact路由的基本使用\n=========\n- 接受参数：useParams\n```js\n// 路由\nconst routes=[\n  {\n    path: \"/home/:id\",\n    exact: true,\n    label: \"首页\",\n    component: Home\n  }\n]\n// 组件\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nexport default function () {\n  console.log(useParams());//{id:xxx}\n  return <div>Home</div>;\n}\n\n```\n- 将路由对象信息注入当前组件props：withRouter [使用](https://blog.shuaxinjs.cn/2020/11/11/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/antd-menu%E7%BB%84%E4%BB%B6/)\n\n","slug":"技术笔记/像Vue一样使用react路由","published":1,"updated":"2021-12-31T12:01:59.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1d0027j7jf64ejcq3z","content":"<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>习惯了vue里面通过配置文件一样来使用路由，react路由跳转和vue一样都是通过对应的跳转组件进行跳转，没啥区别，但是响应url页面的时候，需要使用很多内置的组件来进行书写，有点繁琐，所以记录一下简单的封装一下常用的RouterView组件，来达到像vue一样简单使用</p>\n<a id=\"more\"></a>\n\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ul>\n<li>将复杂的这部分抽离成一个组件，然后传递需要让路由显示的路由对象就好</li>\n<li>作为刚入坑react的萌新，需要注意 Link和Switch 要对应在同一个Router下</li>\n<li>用到的React路由组件：详情见<a href=\"https://reactrouter.com/web/guides/quick-start\">文档</a></li>\n<li><ul>\n<li>BrowserRouter：浏览器里使用的路由</li>\n</ul>\n</li>\n<li><ul>\n<li>Link：跳转</li>\n</ul>\n</li>\n<li><ul>\n<li>Switch：切换显示的组件</li>\n</ul>\n</li>\n<li><ul>\n<li>Route：控制url对应的组件</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a><a href=\"https://codesandbox.io/s/broken-shadow-8hx9o?file=/src/index.js:96-109\">代码</a></h1><ul>\n<li>使用codesandbox在线ide</li>\n<li>这里需要注意，每个jsx文件都需要单独引入一下React，不然会报错<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// RouterView.jsx</span><br><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Route, Switch &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-router-dom&quot;</span>;<br><span class=\"hljs-keyword\">const</span> RouterView = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; routes &#125;</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> (<br>    &lt;Switch&gt;<br>      &#123;routes.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>          &lt;Route<br>            key=&#123;i&#125;<br>            path=&#123;item.path&#125;<br>            <span class=\"hljs-comment\">// 这里传递的为当前路由的子路由</span><br>            component=&#123;<span class=\"hljs-function\">() =&gt;</span> item.component(item.routes)&#125;<br>          /&gt;<br>        );<br>      &#125;)&#125;<br>    &lt;/Switch&gt;<br>  );<br>&#125;;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> RouterView;<br><br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"react路由的基本使用\"><a href=\"#react路由的基本使用\" class=\"headerlink\" title=\"react路由的基本使用\"></a>react路由的基本使用</h1><ul>\n<li>接受参数：useParams<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 路由</span><br><span class=\"hljs-keyword\">const</span> routes=[<br>  &#123;<br>    path: <span class=\"hljs-string\">&quot;/home/:id&quot;</span>,<br>    exact: <span class=\"hljs-literal\">true</span>,<br>    label: <span class=\"hljs-string\">&quot;首页&quot;</span>,<br>    component: Home<br>  &#125;<br>]<br><span class=\"hljs-comment\">// 组件</span><br><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; useParams &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-router-dom&quot;</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(useParams());<span class=\"hljs-comment\">//&#123;id:xxx&#125;</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li>\n<li>将路由对象信息注入当前组件props：withRouter <a href=\"https://blog.shuaxinjs.cn/2020/11/11/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/antd-menu%E7%BB%84%E4%BB%B6/\">使用</a></li>\n</ul>\n","site":{"data":{}},"wordcount":1191,"excerpt":"<h1 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h1><p>习惯了vue里面通过配置文件一样来使用路由，react路由跳转和vue一样都是通过对应的跳转组件进行跳转，没啥区别，但是响应url页面的时候，需要使用很多内置的组件来进行书写，有点繁琐，所以记录一下简单的封装一下常用的RouterView组件，来达到像vue一样简单使用</p>","more":"<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><ul>\n<li>将复杂的这部分抽离成一个组件，然后传递需要让路由显示的路由对象就好</li>\n<li>作为刚入坑react的萌新，需要注意 Link和Switch 要对应在同一个Router下</li>\n<li>用到的React路由组件：详情见<a href=\"https://reactrouter.com/web/guides/quick-start\">文档</a></li>\n<li><ul>\n<li>BrowserRouter：浏览器里使用的路由</li>\n</ul>\n</li>\n<li><ul>\n<li>Link：跳转</li>\n</ul>\n</li>\n<li><ul>\n<li>Switch：切换显示的组件</li>\n</ul>\n</li>\n<li><ul>\n<li>Route：控制url对应的组件</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a><a href=\"https://codesandbox.io/s/broken-shadow-8hx9o?file=/src/index.js:96-109\">代码</a></h1><ul>\n<li>使用codesandbox在线ide</li>\n<li>这里需要注意，每个jsx文件都需要单独引入一下React，不然会报错<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// RouterView.jsx</span><br><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Route, Switch &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-router-dom&quot;</span>;<br><span class=\"hljs-keyword\">const</span> RouterView = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; routes &#125;</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> (<br>    &lt;Switch&gt;<br>      &#123;routes.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> (<br>          &lt;Route<br>            key=&#123;i&#125;<br>            path=&#123;item.path&#125;<br>            <span class=\"hljs-comment\">// 这里传递的为当前路由的子路由</span><br>            component=&#123;<span class=\"hljs-function\">() =&gt;</span> item.component(item.routes)&#125;<br>          /&gt;<br>        );<br>      &#125;)&#125;<br>    &lt;/Switch&gt;<br>  );<br>&#125;;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> RouterView;<br><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"react路由的基本使用\"><a href=\"#react路由的基本使用\" class=\"headerlink\" title=\"react路由的基本使用\"></a>react路由的基本使用</h1><ul>\n<li>接受参数：useParams<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 路由</span><br><span class=\"hljs-keyword\">const</span> routes=[<br>  &#123;<br>    path: <span class=\"hljs-string\">&quot;/home/:id&quot;</span>,<br>    exact: <span class=\"hljs-literal\">true</span>,<br>    label: <span class=\"hljs-string\">&quot;首页&quot;</span>,<br>    component: Home<br>  &#125;<br>]<br><span class=\"hljs-comment\">// 组件</span><br><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; useParams &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-router-dom&quot;</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(useParams());<span class=\"hljs-comment\">//&#123;id:xxx&#125;</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li>\n<li>将路由对象信息注入当前组件props：withRouter <a href=\"https://blog.shuaxinjs.cn/2020/11/11/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/antd-menu%E7%BB%84%E4%BB%B6/\">使用</a></li>\n</ul>"},{"title":"关于hexo打包路径问题","date":"2020-11-08T06:40:43.000Z","_content":"\n问题描述\n========\nhexo打包部署到gh-pages后，路径资源404问题\n\n解决\n=========\n- 在hexo的配置文件（_config.yml）中，找到 URL配置选项\n- 在url中填写ghpages默认url（一般为 你的githubanme.github.io）\n- root写当前目录名\n\n示例\n====\n在zxy仓库部署项目，\n```yml\nurl: https://你设置的自定义域名（或者ghpage默认路径）\nroot: /zxy/\n```\n","source":"_posts/技术笔记/关于hexo打包路径问题.md","raw":"---\ntitle: 关于hexo打包路径问题\ndate: 2020-11-08 14:40:43\ncategories:\n  - 技术笔记\ntag:\n  - 踩坑\n  - Hexo\n---\n\n问题描述\n========\nhexo打包部署到gh-pages后，路径资源404问题\n\n解决\n=========\n- 在hexo的配置文件（_config.yml）中，找到 URL配置选项\n- 在url中填写ghpages默认url（一般为 你的githubanme.github.io）\n- root写当前目录名\n\n示例\n====\n在zxy仓库部署项目，\n```yml\nurl: https://你设置的自定义域名（或者ghpage默认路径）\nroot: /zxy/\n```\n","slug":"技术笔记/关于hexo打包路径问题","published":1,"updated":"2021-12-31T12:01:59.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1d002aj7jfaskia740","content":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>hexo打包部署到gh-pages后，路径资源404问题</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><ul>\n<li>在hexo的配置文件（_config.yml）中，找到 URL配置选项</li>\n<li>在url中填写ghpages默认url（一般为 你的githubanme.github.io）</li>\n<li>root写当前目录名</li>\n</ul>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>在zxy仓库部署项目，</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://你设置的自定义域名（或者ghpage默认路径）</span><br><span class=\"hljs-attr\">root:</span> <span class=\"hljs-string\">/zxy/</span><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":184,"excerpt":"","more":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>hexo打包部署到gh-pages后，路径资源404问题</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><ul>\n<li>在hexo的配置文件（_config.yml）中，找到 URL配置选项</li>\n<li>在url中填写ghpages默认url（一般为 你的githubanme.github.io）</li>\n<li>root写当前目录名</li>\n</ul>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>在zxy仓库部署项目，</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">https://你设置的自定义域名（或者ghpage默认路径）</span><br><span class=\"hljs-attr\">root:</span> <span class=\"hljs-string\">/zxy/</span><br></code></pre></td></tr></table></figure>\n"},{"title":"关于meta","abbrlink":24893,"date":"2019-11-08T10:05:39.000Z","_content":"# meta是什么\n\nmeta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。\n<!-- more -->\n# 作用\n\n提供文档的描述信息\n\n永远位于head内部\n\n永远以键值对形式存在\n\n# 组成\n\n## name\n\n> 描述文档信息,以下列举常见参数\n\n<meta name=\"参数\" content=\"描述内容\">\n```\n- 1.keywords---关键字\n```html\n<!-- 用于告诉搜索引擎，你网页的关键字 -->\n<meta name=\"keywords\" content=\"博客，前端\">\n```\n- 2.description---描述\n```html\n<!-- 用于告诉搜索引擎，你网站的主要内容 -->\n<meta name=\"description\" content=\"学习笔记\">\n```\n- 3.viewport---移动窗口\n```html\n<!-- 这个属性常用于设计移动端网页 -->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n- 4.robots---定义爬虫搜索方式\n```html\n<!-- robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引 -->\n<!-- content的参数有all,none,index,noindex,follow,nofollow。默认是all。 -->\n<!-- 1.none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2.noindex : 搜索引擎不索引此网页。\n3.nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4.all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5.index : 搜索引擎索引此网页。\n6.follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。 -->\n<meta name=\"robots\" content=\"none\">\n```\n- 5.author---作者\n```html\n<meta name=\"author\" content=\"刷新\">\n```\n- 6.generator---制作软件\n```html\n<!-- 用于标明网页是什么软件做的 -->\n<meta name=\"generator\" content=\"vscode\">\n```\n- 7.copyright---版权\n```html\n<meta name=\"copyright\" content=\"***所有\">\n```\n- 8.revisit-after---定义爬虫重访时间\n```html\n<!-- 如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。 -->\n<meta name=\"revisit-after\"  content=\"7 days\">\n```\n- 9.renderer---双核浏览器渲染方式(360)\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n>http请求头作用，但在h5标准中不包括cache-control、Pragma、Expires，即使设置了也不会生效\n```html\n<meta http-equiv=\"参数\" content=\"具体的描述\">\n```\n- 1.content-Type---网页字符集\n```html\n<!-- 用于设定网页字符集，便于浏览器解析与渲染页面 -->\n<!-- 旧 -->\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">\n<!-- h5 -->\n<meta charset=\"utf-8\">\n```\n- 2.X-UA-Compatible---浏览器采取何种版本渲染当前页面\n```html\n<!-- 默认最新 -->\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n- 3.cache-control---请求遵循的缓存机制\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n- 4.expires---网页到期时间\n```html\n<!-- 用于设定网页的到期时间，过期后网页必须到服务器上重新传输。 -->\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n- 5.refresh---自动刷新页面\n```html\n<!-- 网页将在设定的时间内，自动刷新并调向设定的网址。 -->\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.lxxyx.win/\"> //意思是2秒后跳转向我的博客\n```\n- 6.Set-Cookie---设置cookie\n```html\n<meta http-equiv=\"Set-Cookie\" content=\"name, date\"> //格式\n<meta http-equiv=\"Set-Cookie\" content=\"User=Lxxyx; path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT\"> //具体范例\n```\n","source":"_posts/技术笔记/关于meta.md","raw":"---\ntitle: 关于meta\ncategory:\n  - 技术笔记\ntag:\n  - 前端\nabbrlink: 24893\ndate: 2019-11-08 18:05:39\n---\n# meta是什么\n\nmeta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。\n<!-- more -->\n# 作用\n\n提供文档的描述信息\n\n永远位于head内部\n\n永远以键值对形式存在\n\n# 组成\n\n## name\n\n> 描述文档信息,以下列举常见参数\n\n<meta name=\"参数\" content=\"描述内容\">\n```\n- 1.keywords---关键字\n```html\n<!-- 用于告诉搜索引擎，你网页的关键字 -->\n<meta name=\"keywords\" content=\"博客，前端\">\n```\n- 2.description---描述\n```html\n<!-- 用于告诉搜索引擎，你网站的主要内容 -->\n<meta name=\"description\" content=\"学习笔记\">\n```\n- 3.viewport---移动窗口\n```html\n<!-- 这个属性常用于设计移动端网页 -->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n- 4.robots---定义爬虫搜索方式\n```html\n<!-- robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引 -->\n<!-- content的参数有all,none,index,noindex,follow,nofollow。默认是all。 -->\n<!-- 1.none : 搜索引擎将忽略此网页，等价于noindex，nofollow。\n2.noindex : 搜索引擎不索引此网页。\n3.nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n4.all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n5.index : 搜索引擎索引此网页。\n6.follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。 -->\n<meta name=\"robots\" content=\"none\">\n```\n- 5.author---作者\n```html\n<meta name=\"author\" content=\"刷新\">\n```\n- 6.generator---制作软件\n```html\n<!-- 用于标明网页是什么软件做的 -->\n<meta name=\"generator\" content=\"vscode\">\n```\n- 7.copyright---版权\n```html\n<meta name=\"copyright\" content=\"***所有\">\n```\n- 8.revisit-after---定义爬虫重访时间\n```html\n<!-- 如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。 -->\n<meta name=\"revisit-after\"  content=\"7 days\">\n```\n- 9.renderer---双核浏览器渲染方式(360)\n```html\n<meta name=\"renderer\" content=\"webkit\"> //默认webkit内核\n<meta name=\"renderer\" content=\"ie-comp\"> //默认IE兼容模式\n<meta name=\"renderer\" content=\"ie-stand\"> //默认IE标准模式\n```\n## http-equiv\n>http请求头作用，但在h5标准中不包括cache-control、Pragma、Expires，即使设置了也不会生效\n```html\n<meta http-equiv=\"参数\" content=\"具体的描述\">\n```\n- 1.content-Type---网页字符集\n```html\n<!-- 用于设定网页字符集，便于浏览器解析与渲染页面 -->\n<!-- 旧 -->\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">\n<!-- h5 -->\n<meta charset=\"utf-8\">\n```\n- 2.X-UA-Compatible---浏览器采取何种版本渲染当前页面\n```html\n<!-- 默认最新 -->\n <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/> //指定IE和Chrome使用最新版本渲染当前页面\n```\n- 3.cache-control---请求遵循的缓存机制\n```html\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n```\n- 4.expires---网页到期时间\n```html\n<!-- 用于设定网页的到期时间，过期后网页必须到服务器上重新传输。 -->\n<meta http-equiv=\"expires\" content=\"Sunday 26 October 2016 01:00 GMT\" />\n```\n- 5.refresh---自动刷新页面\n```html\n<!-- 网页将在设定的时间内，自动刷新并调向设定的网址。 -->\n<meta http-equiv=\"refresh\" content=\"2；URL=http://www.lxxyx.win/\"> //意思是2秒后跳转向我的博客\n```\n- 6.Set-Cookie---设置cookie\n```html\n<meta http-equiv=\"Set-Cookie\" content=\"name, date\"> //格式\n<meta http-equiv=\"Set-Cookie\" content=\"User=Lxxyx; path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT\"> //具体范例\n```\n","slug":"技术笔记/关于meta","published":1,"updated":"2021-12-31T12:01:59.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1d002dj7jfbjf31xoe","content":"<h1 id=\"meta是什么\"><a href=\"#meta是什么\" class=\"headerlink\" title=\"meta是什么\"></a>meta是什么</h1><p>meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>\n<a id=\"more\"></a>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>提供文档的描述信息</p>\n<p>永远位于head内部</p>\n<p>永远以键值对形式存在</p>\n<h1 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h1><h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><blockquote>\n<p>描述文档信息,以下列举常见参数</p>\n</blockquote>\n<meta name=\"参数\" content=\"描述内容\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs xml\">- 1.keywords---关键字<br>```html<br><span class=\"hljs-comment\">&lt;!-- 用于告诉搜索引擎，你网页的关键字 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;keywords&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;博客，前端&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 2.description---描述\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于告诉搜索引擎，你网站的主要内容 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;description&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;学习笔记&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 3.viewport---移动窗口\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 这个属性常用于设计移动端网页 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 4.robots---定义爬虫搜索方式\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引 --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- content的参数有all,none,index,noindex,follow,nofollow。默认是all。 --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 1.none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</span><br><span class=\"hljs-comment\">2.noindex : 搜索引擎不索引此网页。</span><br><span class=\"hljs-comment\">3.nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</span><br><span class=\"hljs-comment\">4.all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</span><br><span class=\"hljs-comment\">5.index : 搜索引擎索引此网页。</span><br><span class=\"hljs-comment\">6.follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;robots&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;none&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 5.author---作者\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;author&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;刷新&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 6.generator---制作软件\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于标明网页是什么软件做的 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;generator&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;vscode&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 7.copyright---版权\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;copyright&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;***所有&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 8.revisit-after---定义爬虫重访时间\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;revisit-after&quot;</span>  <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;7 days&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 9.renderer---双核浏览器渲染方式(360)\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;webkit&quot;</span>&gt;</span> //默认webkit内核<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;ie-comp&quot;</span>&gt;</span> //默认IE兼容模式<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;ie-stand&quot;</span>&gt;</span> //默认IE标准模式<br></code></pre></div></td></tr></table></figure>\n## http-equiv\n>http请求头作用，但在h5标准中不包括cache-control、Pragma、Expires，即使设置了也不会生效\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;参数&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;具体的描述&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 1.content-Type---网页字符集\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于设定网页字符集，便于浏览器解析与渲染页面 --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 旧 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;content-Type&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- h5 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 2.X-UA-Compatible---浏览器采取何种版本渲染当前页面\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 默认最新 --&gt;</span><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面<br></code></pre></div></td></tr></table></figure>\n- 3.cache-control---请求遵循的缓存机制\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;cache-control&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;no-cache&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 4.expires---网页到期时间\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于设定网页的到期时间，过期后网页必须到服务器上重新传输。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;expires&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Sunday 26 October 2016 01:00 GMT&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure>\n- 5.refresh---自动刷新页面\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 网页将在设定的时间内，自动刷新并调向设定的网址。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;refresh&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;2；URL=http://www.lxxyx.win/&quot;</span>&gt;</span> //意思是2秒后跳转向我的博客<br></code></pre></div></td></tr></table></figure>\n- 6.Set-Cookie---设置cookie\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;Set-Cookie&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;name, date&quot;</span>&gt;</span> //格式<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;Set-Cookie&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;User=Lxxyx; path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT&quot;</span>&gt;</span> //具体范例<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":2793,"excerpt":"<h1 id=\"meta是什么\"><a href=\"#meta是什么\" class=\"headerlink\" title=\"meta是什么\"></a>meta是什么</h1><p>meta标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>","more":"<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><p>提供文档的描述信息</p>\n<p>永远位于head内部</p>\n<p>永远以键值对形式存在</p>\n<h1 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h1><h2 id=\"name\"><a href=\"#name\" class=\"headerlink\" title=\"name\"></a>name</h2><blockquote>\n<p>描述文档信息,以下列举常见参数</p>\n</blockquote>\n<meta name=\"参数\" content=\"描述内容\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">- 1.keywords---关键字<br>```html<br><span class=\"hljs-comment\">&lt;!-- 用于告诉搜索引擎，你网页的关键字 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;keywords&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;博客，前端&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 2.description---描述\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于告诉搜索引擎，你网站的主要内容 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;description&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;学习笔记&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 3.viewport---移动窗口\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 这个属性常用于设计移动端网页 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 4.robots---定义爬虫搜索方式\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引 --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- content的参数有all,none,index,noindex,follow,nofollow。默认是all。 --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 1.none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</span><br><span class=\"hljs-comment\">2.noindex : 搜索引擎不索引此网页。</span><br><span class=\"hljs-comment\">3.nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</span><br><span class=\"hljs-comment\">4.all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</span><br><span class=\"hljs-comment\">5.index : 搜索引擎索引此网页。</span><br><span class=\"hljs-comment\">6.follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;robots&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;none&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 5.author---作者\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;author&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;刷新&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 6.generator---制作软件\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于标明网页是什么软件做的 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;generator&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;vscode&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 7.copyright---版权\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;copyright&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;***所有&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 8.revisit-after---定义爬虫重访时间\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;revisit-after&quot;</span>  <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;7 days&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 9.renderer---双核浏览器渲染方式(360)\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;webkit&quot;</span>&gt;</span> //默认webkit内核<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;ie-comp&quot;</span>&gt;</span> //默认IE兼容模式<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;renderer&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;ie-stand&quot;</span>&gt;</span> //默认IE标准模式<br></code></pre></td></tr></table></figure>\n## http-equiv\n>http请求头作用，但在h5标准中不包括cache-control、Pragma、Expires，即使设置了也不会生效\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;参数&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;具体的描述&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 1.content-Type---网页字符集\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于设定网页字符集，便于浏览器解析与渲染页面 --&gt;</span><br><span class=\"hljs-comment\">&lt;!-- 旧 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;content-Type&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- h5 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 2.X-UA-Compatible---浏览器采取何种版本渲染当前页面\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 默认最新 --&gt;</span><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span> //指定IE和Chrome使用最新版本渲染当前页面<br></code></pre></td></tr></table></figure>\n- 3.cache-control---请求遵循的缓存机制\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;cache-control&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;no-cache&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n- 4.expires---网页到期时间\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 用于设定网页的到期时间，过期后网页必须到服务器上重新传输。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;expires&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Sunday 26 October 2016 01:00 GMT&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n- 5.refresh---自动刷新页面\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 网页将在设定的时间内，自动刷新并调向设定的网址。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;refresh&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;2；URL=http://www.lxxyx.win/&quot;</span>&gt;</span> //意思是2秒后跳转向我的博客<br></code></pre></td></tr></table></figure>\n- 6.Set-Cookie---设置cookie\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;Set-Cookie&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;name, date&quot;</span>&gt;</span> //格式<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;Set-Cookie&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;User=Lxxyx; path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT&quot;</span>&gt;</span> //具体范例<br></code></pre></td></tr></table></figure>"},{"title":"关于前端下载","date":"2021-03-02T02:35:41.000Z","index_img":"https://img.shuaxindiary.cn/guimie.jpg","banner_img":"https://img.shuaxindiary.cn/guimie.jpg","_content":"\n# 关于本文\n记录如何在前端来下载文件的几种解决方案\n\n# 正文\n关于前端下载文件，有两种方案：\n- 1.不发请求：使用a标签设置 `download` 后去访问下载url，浏览器会自动开始下载\n- 2.发请求，然后拿到blob数据，创建一个blob的url，通过a去访问该url，设置 `download` 下载\n\n# 代码演示\n以下示范的后端代码\n```js\nrouter.get('/dolFile', function (req, res, next) {\n  const ops = {\n    'Content-Type': 'image/png'\n  }\n  res\n    .status(200)\n    .sendFile(path.join(__dirname, 'p-1.jpg'))\n});\n```\n\n### 不发送请求\n```html\n<button id=\"btn\">下载</button>\n<script>\n  // 获取下载按钮\n  const dolBtn = document.querySelector(\"#btn\")\n  // 下载函数\n  const dolFile = (url) => {\n    // 创建a标签\n    const a = document.createElement('a')\n    // 为a标签设置请求地址和下载属性\n    a.setAttribute('href', url)\n    // 该参数提供一个值 为该文件保存的默认名\n    a.setAttribute('download', '图片')\n    // 添加到页面\n    document.body.appendChild(a)\n    // 点击该a标签进行下载\n    a.click()\n    // 最后要卸载该dom\n    a.remove()\n  }\n  dolBtn.addEventListener('click', () => {\n    dolFile('http://localhost:3000/api/dolFile')\n  })\n</script>\n```\n\n### 发送请求\n```html\n<button id=\"btn\">下载</button>\n<script>\n  // 获取下载按钮\n  const dolBtn = document.querySelector(\"#btn\")\n  // 下载函数\n  const dolFile = (url) => {\n      let data = await fetch('http://localhost:3000/api/dolFile')\n        .then(res => {\n          // 直接返回一个blob即可\n          return res.blob()\n        })\n      var a = document.createElement('a');\n      //文件的名称为时间戳加文件名后缀\n      a.download = `${+new Date()}.jpg`;\n      // 创建一个blob链接 理解成类似base64那样的\n      a.href = URL.createObjectURL(data);\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n  }\n  dolBtn.addEventListener('click', () => {\n    dolFile('http://localhost:3000/api/dolFile')\n  })\n</script>\n```\n\n# 其他\n### 关于Blob\n- 是web提供的一个对象，表示一个不可变、原始数据的类文件对象。数据按二进制或文本读存\n- 一般包含2个属性：`size` ：文件大小， `type`：文件类型\n- 使用场景：大文件分割上传、上述场景一样作为一个url去下载文件\n- [MDN-Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)\n- [一文学会Blob](https://xie.infoq.cn/article/9974df9a229e5c28679c77773)\n\n### URL对象\n- 用于解析，构造，规范化和编码\n- [URL](https://developer.mozilla.org/zh-CN/docs/Web/API/URL)\n\n### 关于fetch\n- 因为一直习惯了 `axios` 不太理解为什么fetch，一直需要第一个then，接着这个时候打印了第一个then的callback的对象看了下，如下：\n![fetch_res](https://img.shuaxindiary.cn/fetch_res.png)\n这个对象其实包含了本次请求响应的各种信息，响应头、url、状态等等；然后默认提供了很多对数据的处理形式，比如：json、text、blob、formData等。有点自带拦截器一样的感觉，默认做了一层封装。\n","source":"_posts/技术笔记/关于前端下载.md","raw":"---\ntitle: 关于前端下载\ncategory:\n  - 技术笔记\ndate: 2021-03-02 10:35:41\ntag:\n - 前端下载\n - JavaScript\nindex_img: https://img.shuaxindiary.cn/guimie.jpg\nbanner_img: https://img.shuaxindiary.cn/guimie.jpg\n---\n\n# 关于本文\n记录如何在前端来下载文件的几种解决方案\n\n# 正文\n关于前端下载文件，有两种方案：\n- 1.不发请求：使用a标签设置 `download` 后去访问下载url，浏览器会自动开始下载\n- 2.发请求，然后拿到blob数据，创建一个blob的url，通过a去访问该url，设置 `download` 下载\n\n# 代码演示\n以下示范的后端代码\n```js\nrouter.get('/dolFile', function (req, res, next) {\n  const ops = {\n    'Content-Type': 'image/png'\n  }\n  res\n    .status(200)\n    .sendFile(path.join(__dirname, 'p-1.jpg'))\n});\n```\n\n### 不发送请求\n```html\n<button id=\"btn\">下载</button>\n<script>\n  // 获取下载按钮\n  const dolBtn = document.querySelector(\"#btn\")\n  // 下载函数\n  const dolFile = (url) => {\n    // 创建a标签\n    const a = document.createElement('a')\n    // 为a标签设置请求地址和下载属性\n    a.setAttribute('href', url)\n    // 该参数提供一个值 为该文件保存的默认名\n    a.setAttribute('download', '图片')\n    // 添加到页面\n    document.body.appendChild(a)\n    // 点击该a标签进行下载\n    a.click()\n    // 最后要卸载该dom\n    a.remove()\n  }\n  dolBtn.addEventListener('click', () => {\n    dolFile('http://localhost:3000/api/dolFile')\n  })\n</script>\n```\n\n### 发送请求\n```html\n<button id=\"btn\">下载</button>\n<script>\n  // 获取下载按钮\n  const dolBtn = document.querySelector(\"#btn\")\n  // 下载函数\n  const dolFile = (url) => {\n      let data = await fetch('http://localhost:3000/api/dolFile')\n        .then(res => {\n          // 直接返回一个blob即可\n          return res.blob()\n        })\n      var a = document.createElement('a');\n      //文件的名称为时间戳加文件名后缀\n      a.download = `${+new Date()}.jpg`;\n      // 创建一个blob链接 理解成类似base64那样的\n      a.href = URL.createObjectURL(data);\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n  }\n  dolBtn.addEventListener('click', () => {\n    dolFile('http://localhost:3000/api/dolFile')\n  })\n</script>\n```\n\n# 其他\n### 关于Blob\n- 是web提供的一个对象，表示一个不可变、原始数据的类文件对象。数据按二进制或文本读存\n- 一般包含2个属性：`size` ：文件大小， `type`：文件类型\n- 使用场景：大文件分割上传、上述场景一样作为一个url去下载文件\n- [MDN-Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)\n- [一文学会Blob](https://xie.infoq.cn/article/9974df9a229e5c28679c77773)\n\n### URL对象\n- 用于解析，构造，规范化和编码\n- [URL](https://developer.mozilla.org/zh-CN/docs/Web/API/URL)\n\n### 关于fetch\n- 因为一直习惯了 `axios` 不太理解为什么fetch，一直需要第一个then，接着这个时候打印了第一个then的callback的对象看了下，如下：\n![fetch_res](https://img.shuaxindiary.cn/fetch_res.png)\n这个对象其实包含了本次请求响应的各种信息，响应头、url、状态等等；然后默认提供了很多对数据的处理形式，比如：json、text、blob、formData等。有点自带拦截器一样的感觉，默认做了一层封装。\n","slug":"技术笔记/关于前端下载","published":1,"updated":"2021-12-31T12:01:59.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1e002gj7jf2o75f1xg","content":"<h1 id=\"关于本文\"><a href=\"#关于本文\" class=\"headerlink\" title=\"关于本文\"></a>关于本文</h1><p>记录如何在前端来下载文件的几种解决方案</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>关于前端下载文件，有两种方案：</p>\n<ul>\n<li>1.不发请求：使用a标签设置 <code>download</code> 后去访问下载url，浏览器会自动开始下载</li>\n<li>2.发请求，然后拿到blob数据，创建一个blob的url，通过a去访问该url，设置 <code>download</code> 下载</li>\n</ul>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p>以下示范的后端代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">router.get(<span class=\"hljs-string\">&#x27;/dolFile&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res, next</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> ops = &#123;<br>    <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;image/png&#x27;</span><br>  &#125;<br>  res<br>    .status(<span class=\"hljs-number\">200</span>)<br>    .sendFile(path.join(__dirname, <span class=\"hljs-string\">&#x27;p-1.jpg&#x27;</span>))<br>&#125;);<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"不发送请求\"><a href=\"#不发送请求\" class=\"headerlink\" title=\"不发送请求\"></a>不发送请求</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>下载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取下载按钮</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">const</span> dolBtn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&quot;#btn&quot;</span>)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 下载函数</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">const</span> dolFile = <span class=\"hljs-function\">(<span class=\"hljs-params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 创建a标签</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;a&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 为a标签设置请求地址和下载属性</span></span><br><span class=\"javascript\">    a.setAttribute(<span class=\"hljs-string\">&#x27;href&#x27;</span>, url)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 该参数提供一个值 为该文件保存的默认名</span></span><br><span class=\"javascript\">    a.setAttribute(<span class=\"hljs-string\">&#x27;download&#x27;</span>, <span class=\"hljs-string\">&#x27;图片&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 添加到页面</span></span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">document</span>.body.appendChild(a)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 点击该a标签进行下载</span></span><br>    a.click()<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 最后要卸载该dom</span></span><br>    a.remove()<br>  &#125;<br><span class=\"javascript\">  dolBtn.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">    dolFile(<span class=\"hljs-string\">&#x27;http://localhost:3000/api/dolFile&#x27;</span>)</span><br>  &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>下载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取下载按钮</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">const</span> dolBtn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&quot;#btn&quot;</span>)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 下载函数</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">const</span> dolFile = <span class=\"hljs-function\">(<span class=\"hljs-params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">&#x27;http://localhost:3000/api/dolFile&#x27;</span>)</span><br><span class=\"javascript\">        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 直接返回一个blob即可</span></span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> res.blob()</span><br>        &#125;)<br><span class=\"javascript\">      <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;a&#x27;</span>);</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">//文件的名称为时间戳加文件名后缀</span></span><br><span class=\"javascript\">      a.download = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()&#125;</span>.jpg`</span>;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 创建一个blob链接 理解成类似base64那样的</span></span><br>      a.href = URL.createObjectURL(data);<br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.body.appendChild(a);</span><br>      a.click();<br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.body.removeChild(a);</span><br>  &#125;<br><span class=\"javascript\">  dolBtn.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">    dolFile(<span class=\"hljs-string\">&#x27;http://localhost:3000/api/dolFile&#x27;</span>)</span><br>  &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h3 id=\"关于Blob\"><a href=\"#关于Blob\" class=\"headerlink\" title=\"关于Blob\"></a>关于Blob</h3><ul>\n<li>是web提供的一个对象，表示一个不可变、原始数据的类文件对象。数据按二进制或文本读存</li>\n<li>一般包含2个属性：<code>size</code> ：文件大小， <code>type</code>：文件类型</li>\n<li>使用场景：大文件分割上传、上述场景一样作为一个url去下载文件</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\">MDN-Blob</a></li>\n<li><a href=\"https://xie.infoq.cn/article/9974df9a229e5c28679c77773\">一文学会Blob</a></li>\n</ul>\n<h3 id=\"URL对象\"><a href=\"#URL对象\" class=\"headerlink\" title=\"URL对象\"></a>URL对象</h3><ul>\n<li>用于解析，构造，规范化和编码</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL\">URL</a></li>\n</ul>\n<h3 id=\"关于fetch\"><a href=\"#关于fetch\" class=\"headerlink\" title=\"关于fetch\"></a>关于fetch</h3><ul>\n<li>因为一直习惯了 <code>axios</code> 不太理解为什么fetch，一直需要第一个then，接着这个时候打印了第一个then的callback的对象看了下，如下：<br><img src=\"https://img.shuaxindiary.cn/fetch_res.png\" alt=\"fetch_res\"><br>这个对象其实包含了本次请求响应的各种信息，响应头、url、状态等等；然后默认提供了很多对数据的处理形式，比如：json、text、blob、formData等。有点自带拦截器一样的感觉，默认做了一层封装。</li>\n</ul>\n","site":{"data":{}},"wordcount":1962,"excerpt":"","more":"<h1 id=\"关于本文\"><a href=\"#关于本文\" class=\"headerlink\" title=\"关于本文\"></a>关于本文</h1><p>记录如何在前端来下载文件的几种解决方案</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>关于前端下载文件，有两种方案：</p>\n<ul>\n<li>1.不发请求：使用a标签设置 <code>download</code> 后去访问下载url，浏览器会自动开始下载</li>\n<li>2.发请求，然后拿到blob数据，创建一个blob的url，通过a去访问该url，设置 <code>download</code> 下载</li>\n</ul>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p>以下示范的后端代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">router.get(<span class=\"hljs-string\">&#x27;/dolFile&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res, next</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">const</span> ops = &#123;<br>    <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;image/png&#x27;</span><br>  &#125;<br>  res<br>    .status(<span class=\"hljs-number\">200</span>)<br>    .sendFile(path.join(__dirname, <span class=\"hljs-string\">&#x27;p-1.jpg&#x27;</span>))<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"不发送请求\"><a href=\"#不发送请求\" class=\"headerlink\" title=\"不发送请求\"></a>不发送请求</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>下载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取下载按钮</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">const</span> dolBtn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&quot;#btn&quot;</span>)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 下载函数</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">const</span> dolFile = <span class=\"hljs-function\">(<span class=\"hljs-params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 创建a标签</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;a&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 为a标签设置请求地址和下载属性</span></span><br><span class=\"javascript\">    a.setAttribute(<span class=\"hljs-string\">&#x27;href&#x27;</span>, url)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 该参数提供一个值 为该文件保存的默认名</span></span><br><span class=\"javascript\">    a.setAttribute(<span class=\"hljs-string\">&#x27;download&#x27;</span>, <span class=\"hljs-string\">&#x27;图片&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 添加到页面</span></span><br><span class=\"javascript\">    <span class=\"hljs-built_in\">document</span>.body.appendChild(a)</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 点击该a标签进行下载</span></span><br>    a.click()<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 最后要卸载该dom</span></span><br>    a.remove()<br>  &#125;<br><span class=\"javascript\">  dolBtn.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">    dolFile(<span class=\"hljs-string\">&#x27;http://localhost:3000/api/dolFile&#x27;</span>)</span><br>  &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>下载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取下载按钮</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">const</span> dolBtn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&quot;#btn&quot;</span>)</span><br><span class=\"javascript\">  <span class=\"hljs-comment\">// 下载函数</span></span><br><span class=\"javascript\">  <span class=\"hljs-keyword\">const</span> dolFile = <span class=\"hljs-function\">(<span class=\"hljs-params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"javascript\">      <span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">&#x27;http://localhost:3000/api/dolFile&#x27;</span>)</span><br><span class=\"javascript\">        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;</span><br><span class=\"javascript\">          <span class=\"hljs-comment\">// 直接返回一个blob即可</span></span><br><span class=\"javascript\">          <span class=\"hljs-keyword\">return</span> res.blob()</span><br>        &#125;)<br><span class=\"javascript\">      <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;a&#x27;</span>);</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">//文件的名称为时间戳加文件名后缀</span></span><br><span class=\"javascript\">      a.download = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()&#125;</span>.jpg`</span>;</span><br><span class=\"javascript\">      <span class=\"hljs-comment\">// 创建一个blob链接 理解成类似base64那样的</span></span><br>      a.href = URL.createObjectURL(data);<br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.body.appendChild(a);</span><br>      a.click();<br><span class=\"javascript\">      <span class=\"hljs-built_in\">document</span>.body.removeChild(a);</span><br>  &#125;<br><span class=\"javascript\">  dolBtn.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">    dolFile(<span class=\"hljs-string\">&#x27;http://localhost:3000/api/dolFile&#x27;</span>)</span><br>  &#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h3 id=\"关于Blob\"><a href=\"#关于Blob\" class=\"headerlink\" title=\"关于Blob\"></a>关于Blob</h3><ul>\n<li>是web提供的一个对象，表示一个不可变、原始数据的类文件对象。数据按二进制或文本读存</li>\n<li>一般包含2个属性：<code>size</code> ：文件大小， <code>type</code>：文件类型</li>\n<li>使用场景：大文件分割上传、上述场景一样作为一个url去下载文件</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\">MDN-Blob</a></li>\n<li><a href=\"https://xie.infoq.cn/article/9974df9a229e5c28679c77773\">一文学会Blob</a></li>\n</ul>\n<h3 id=\"URL对象\"><a href=\"#URL对象\" class=\"headerlink\" title=\"URL对象\"></a>URL对象</h3><ul>\n<li>用于解析，构造，规范化和编码</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL\">URL</a></li>\n</ul>\n<h3 id=\"关于fetch\"><a href=\"#关于fetch\" class=\"headerlink\" title=\"关于fetch\"></a>关于fetch</h3><ul>\n<li>因为一直习惯了 <code>axios</code> 不太理解为什么fetch，一直需要第一个then，接着这个时候打印了第一个then的callback的对象看了下，如下：<br><img src=\"https://img.shuaxindiary.cn/fetch_res.png\" alt=\"fetch_res\"><br>这个对象其实包含了本次请求响应的各种信息，响应头、url、状态等等；然后默认提供了很多对数据的处理形式，比如：json、text、blob、formData等。有点自带拦截器一样的感觉，默认做了一层封装。</li>\n</ul>\n"},{"title":"关于浏览器缓存","abbrlink":4423,"date":"2019-11-28T05:15:54.000Z","_content":"\n# 为什么要缓存\n因为网站的所有资源都是放在服务器上的，每次访问一个页面的时候，都会通过http请求去请求该页面依赖的静态资源，这个过程会花费很多的时间，造成页面留白等响应过长的问题，导致用户体验不是非常的友好\n\n所以合理的利用浏览器缓存，将第一次请求后得到的一些静态资源合理的存储在本地，然后当用户下次访问的时候，可以直接从本地读取；加快页面的显示。\n\n举个例子：现在我们有一个html然后页面加载一个text.js文件；来看看使用和不使用缓存的区别\n- 没有使用缓存\n![图1](/img/cache.png)\n\n- 使用了缓存\n![图2](/img/cache1.png)\n\n通过上面两张图可以明显看到，使用缓存后，加载时间从8ms变成了0，效果肉眼可见！\n<!-- more -->\n# 怎么来使用缓存？\n通过在服务端设置响应头(header)来告诉浏览器，该资源可以被缓存\n\n控制缓存资源的header： \n>***Expries*** \n- 于HTTP1.0中添加，值为服务端本地设置的时间+请求时间；然后客户端在该时间之前，可以一直使用该缓存\n\n>***Cache-Control***\n- 于HTTP1.1中添加，和Expries共存时，会覆盖前者；\n- 为了兼容1.0和1.1会和Expries共同存在\n- 值有以下几种：\n- 1.max-age=100---100秒后缓存过期\n- 2.no-cache---每次使用缓存前都要去服务端进行一次验证，以此来检查本地缓存是否过期；\n- 3.no-store---强制不进行缓存\n- 4.public---资源可以被客户端和代理服务器缓存\n- 5.private---资源只能被客户端缓存\n- [更多](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control)\n\n>***Last-Modified/If-Modified-Since***\n- Last-Modified为服务端设置，值是这个资源在服务器上的最后修改时间，下次客户端请求该资源时会自动携带该值并通过If-Modified-Since提交给服务端\n- 服务端会对比返回的值和该资源最后修改时间，若没有变化，则返回空响应，告诉客户端可以直接使用缓存\n- 如果返回给服务端的值小于该资源最后修改时间，则返回新的资源\n\n>***ETag/If-None-Match***\n- 前者在服务端设置，后者在客户端请求时通过该首部返回给服务端\n- Etag的值，为当前资源在服务端生成的一个关于该资源文件的一个唯一标识符；前后通过比对该标识符是否一致，来决定是否使用缓存\n\n# 这几种缓存手段有什么区别呢\n>Expries、Cache-Control属于 ***强缓存***\n- 意思就是可以直接把资源缓存，然后设置一个过期时间，在这时间之前，就可以一直使用。\n- 这2者区别就是设置值的方式不同，然后各自对应的协议版本不同，为了兼容1.0/1.1 两者都会使用\n\n>Last-Modified、ETag属于 ***协商缓存***\n- 意思就是即使缓存了，每次使用缓存前，都必须要去服务端进行一次验证，判断该缓存是否可用\n- 2者的区别：前者记录时间，后者记录根据文件生成的标识符；导致的结果就是，后者会更精确\n\n>2种缓存的区别：强缓存优先于协商缓存\n\n\n","source":"_posts/技术笔记/关于浏览器缓存.md","raw":"---\ntitle: 关于浏览器缓存\ncategory:\n  - 技术笔记\ntags:\n  - 网络\n  - 踩坑\nabbrlink: 4423\ndate: 2019-11-28 13:15:54\n---\n\n# 为什么要缓存\n因为网站的所有资源都是放在服务器上的，每次访问一个页面的时候，都会通过http请求去请求该页面依赖的静态资源，这个过程会花费很多的时间，造成页面留白等响应过长的问题，导致用户体验不是非常的友好\n\n所以合理的利用浏览器缓存，将第一次请求后得到的一些静态资源合理的存储在本地，然后当用户下次访问的时候，可以直接从本地读取；加快页面的显示。\n\n举个例子：现在我们有一个html然后页面加载一个text.js文件；来看看使用和不使用缓存的区别\n- 没有使用缓存\n![图1](/img/cache.png)\n\n- 使用了缓存\n![图2](/img/cache1.png)\n\n通过上面两张图可以明显看到，使用缓存后，加载时间从8ms变成了0，效果肉眼可见！\n<!-- more -->\n# 怎么来使用缓存？\n通过在服务端设置响应头(header)来告诉浏览器，该资源可以被缓存\n\n控制缓存资源的header： \n>***Expries*** \n- 于HTTP1.0中添加，值为服务端本地设置的时间+请求时间；然后客户端在该时间之前，可以一直使用该缓存\n\n>***Cache-Control***\n- 于HTTP1.1中添加，和Expries共存时，会覆盖前者；\n- 为了兼容1.0和1.1会和Expries共同存在\n- 值有以下几种：\n- 1.max-age=100---100秒后缓存过期\n- 2.no-cache---每次使用缓存前都要去服务端进行一次验证，以此来检查本地缓存是否过期；\n- 3.no-store---强制不进行缓存\n- 4.public---资源可以被客户端和代理服务器缓存\n- 5.private---资源只能被客户端缓存\n- [更多](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control)\n\n>***Last-Modified/If-Modified-Since***\n- Last-Modified为服务端设置，值是这个资源在服务器上的最后修改时间，下次客户端请求该资源时会自动携带该值并通过If-Modified-Since提交给服务端\n- 服务端会对比返回的值和该资源最后修改时间，若没有变化，则返回空响应，告诉客户端可以直接使用缓存\n- 如果返回给服务端的值小于该资源最后修改时间，则返回新的资源\n\n>***ETag/If-None-Match***\n- 前者在服务端设置，后者在客户端请求时通过该首部返回给服务端\n- Etag的值，为当前资源在服务端生成的一个关于该资源文件的一个唯一标识符；前后通过比对该标识符是否一致，来决定是否使用缓存\n\n# 这几种缓存手段有什么区别呢\n>Expries、Cache-Control属于 ***强缓存***\n- 意思就是可以直接把资源缓存，然后设置一个过期时间，在这时间之前，就可以一直使用。\n- 这2者区别就是设置值的方式不同，然后各自对应的协议版本不同，为了兼容1.0/1.1 两者都会使用\n\n>Last-Modified、ETag属于 ***协商缓存***\n- 意思就是即使缓存了，每次使用缓存前，都必须要去服务端进行一次验证，判断该缓存是否可用\n- 2者的区别：前者记录时间，后者记录根据文件生成的标识符；导致的结果就是，后者会更精确\n\n>2种缓存的区别：强缓存优先于协商缓存\n\n\n","slug":"技术笔记/关于浏览器缓存","published":1,"updated":"2021-12-31T12:01:59.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1e002jj7jf5pqn8l5w","content":"<h1 id=\"为什么要缓存\"><a href=\"#为什么要缓存\" class=\"headerlink\" title=\"为什么要缓存\"></a>为什么要缓存</h1><p>因为网站的所有资源都是放在服务器上的，每次访问一个页面的时候，都会通过http请求去请求该页面依赖的静态资源，这个过程会花费很多的时间，造成页面留白等响应过长的问题，导致用户体验不是非常的友好</p>\n<p>所以合理的利用浏览器缓存，将第一次请求后得到的一些静态资源合理的存储在本地，然后当用户下次访问的时候，可以直接从本地读取；加快页面的显示。</p>\n<p>举个例子：现在我们有一个html然后页面加载一个text.js文件；来看看使用和不使用缓存的区别</p>\n<ul>\n<li><p>没有使用缓存<br><img src=\"/img/cache.png\" alt=\"图1\"></p>\n</li>\n<li><p>使用了缓存<br><img src=\"/img/cache1.png\" alt=\"图2\"></p>\n</li>\n</ul>\n<p>通过上面两张图可以明显看到，使用缓存后，加载时间从8ms变成了0，效果肉眼可见！</p>\n<a id=\"more\"></a>\n<h1 id=\"怎么来使用缓存？\"><a href=\"#怎么来使用缓存？\" class=\"headerlink\" title=\"怎么来使用缓存？\"></a>怎么来使用缓存？</h1><p>通过在服务端设置响应头(header)来告诉浏览器，该资源可以被缓存</p>\n<p>控制缓存资源的header： </p>\n<blockquote>\n<p><strong><em>Expries</em></strong> </p>\n</blockquote>\n<ul>\n<li>于HTTP1.0中添加，值为服务端本地设置的时间+请求时间；然后客户端在该时间之前，可以一直使用该缓存</li>\n</ul>\n<blockquote>\n<p><strong><em>Cache-Control</em></strong></p>\n</blockquote>\n<ul>\n<li>于HTTP1.1中添加，和Expries共存时，会覆盖前者；</li>\n<li>为了兼容1.0和1.1会和Expries共同存在</li>\n<li>值有以下几种：</li>\n<li>1.max-age=100—100秒后缓存过期</li>\n<li>2.no-cache—每次使用缓存前都要去服务端进行一次验证，以此来检查本地缓存是否过期；</li>\n<li>3.no-store—强制不进行缓存</li>\n<li>4.public—资源可以被客户端和代理服务器缓存</li>\n<li>5.private—资源只能被客户端缓存</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\">更多</a></li>\n</ul>\n<blockquote>\n<p><strong><em>Last-Modified/If-Modified-Since</em></strong></p>\n</blockquote>\n<ul>\n<li>Last-Modified为服务端设置，值是这个资源在服务器上的最后修改时间，下次客户端请求该资源时会自动携带该值并通过If-Modified-Since提交给服务端</li>\n<li>服务端会对比返回的值和该资源最后修改时间，若没有变化，则返回空响应，告诉客户端可以直接使用缓存</li>\n<li>如果返回给服务端的值小于该资源最后修改时间，则返回新的资源</li>\n</ul>\n<blockquote>\n<p><strong><em>ETag/If-None-Match</em></strong></p>\n</blockquote>\n<ul>\n<li>前者在服务端设置，后者在客户端请求时通过该首部返回给服务端</li>\n<li>Etag的值，为当前资源在服务端生成的一个关于该资源文件的一个唯一标识符；前后通过比对该标识符是否一致，来决定是否使用缓存</li>\n</ul>\n<h1 id=\"这几种缓存手段有什么区别呢\"><a href=\"#这几种缓存手段有什么区别呢\" class=\"headerlink\" title=\"这几种缓存手段有什么区别呢\"></a>这几种缓存手段有什么区别呢</h1><blockquote>\n<p>Expries、Cache-Control属于 <strong><em>强缓存</em></strong></p>\n</blockquote>\n<ul>\n<li>意思就是可以直接把资源缓存，然后设置一个过期时间，在这时间之前，就可以一直使用。</li>\n<li>这2者区别就是设置值的方式不同，然后各自对应的协议版本不同，为了兼容1.0/1.1 两者都会使用</li>\n</ul>\n<blockquote>\n<p>Last-Modified、ETag属于 <strong><em>协商缓存</em></strong></p>\n</blockquote>\n<ul>\n<li>意思就是即使缓存了，每次使用缓存前，都必须要去服务端进行一次验证，判断该缓存是否可用</li>\n<li>2者的区别：前者记录时间，后者记录根据文件生成的标识符；导致的结果就是，后者会更精确</li>\n</ul>\n<blockquote>\n<p>2种缓存的区别：强缓存优先于协商缓存</p>\n</blockquote>\n","site":{"data":{}},"wordcount":1141,"excerpt":"<h1 id=\"为什么要缓存\"><a href=\"#为什么要缓存\" class=\"headerlink\" title=\"为什么要缓存\"></a>为什么要缓存</h1><p>因为网站的所有资源都是放在服务器上的，每次访问一个页面的时候，都会通过http请求去请求该页面依赖的静态资源，这个过程会花费很多的时间，造成页面留白等响应过长的问题，导致用户体验不是非常的友好</p>\n<p>所以合理的利用浏览器缓存，将第一次请求后得到的一些静态资源合理的存储在本地，然后当用户下次访问的时候，可以直接从本地读取；加快页面的显示。</p>\n<p>举个例子：现在我们有一个html然后页面加载一个text.js文件；来看看使用和不使用缓存的区别</p>\n<ul>\n<li><p>没有使用缓存<br><img src=\"/img/cache.png\" alt=\"图1\"></p>\n</li>\n<li><p>使用了缓存<br><img src=\"/img/cache1.png\" alt=\"图2\"></p>\n</li>\n</ul>\n<p>通过上面两张图可以明显看到，使用缓存后，加载时间从8ms变成了0，效果肉眼可见！</p>","more":"<h1 id=\"怎么来使用缓存？\"><a href=\"#怎么来使用缓存？\" class=\"headerlink\" title=\"怎么来使用缓存？\"></a>怎么来使用缓存？</h1><p>通过在服务端设置响应头(header)来告诉浏览器，该资源可以被缓存</p>\n<p>控制缓存资源的header： </p>\n<blockquote>\n<p><strong><em>Expries</em></strong> </p>\n</blockquote>\n<ul>\n<li>于HTTP1.0中添加，值为服务端本地设置的时间+请求时间；然后客户端在该时间之前，可以一直使用该缓存</li>\n</ul>\n<blockquote>\n<p><strong><em>Cache-Control</em></strong></p>\n</blockquote>\n<ul>\n<li>于HTTP1.1中添加，和Expries共存时，会覆盖前者；</li>\n<li>为了兼容1.0和1.1会和Expries共同存在</li>\n<li>值有以下几种：</li>\n<li>1.max-age=100—100秒后缓存过期</li>\n<li>2.no-cache—每次使用缓存前都要去服务端进行一次验证，以此来检查本地缓存是否过期；</li>\n<li>3.no-store—强制不进行缓存</li>\n<li>4.public—资源可以被客户端和代理服务器缓存</li>\n<li>5.private—资源只能被客户端缓存</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control\">更多</a></li>\n</ul>\n<blockquote>\n<p><strong><em>Last-Modified/If-Modified-Since</em></strong></p>\n</blockquote>\n<ul>\n<li>Last-Modified为服务端设置，值是这个资源在服务器上的最后修改时间，下次客户端请求该资源时会自动携带该值并通过If-Modified-Since提交给服务端</li>\n<li>服务端会对比返回的值和该资源最后修改时间，若没有变化，则返回空响应，告诉客户端可以直接使用缓存</li>\n<li>如果返回给服务端的值小于该资源最后修改时间，则返回新的资源</li>\n</ul>\n<blockquote>\n<p><strong><em>ETag/If-None-Match</em></strong></p>\n</blockquote>\n<ul>\n<li>前者在服务端设置，后者在客户端请求时通过该首部返回给服务端</li>\n<li>Etag的值，为当前资源在服务端生成的一个关于该资源文件的一个唯一标识符；前后通过比对该标识符是否一致，来决定是否使用缓存</li>\n</ul>\n<h1 id=\"这几种缓存手段有什么区别呢\"><a href=\"#这几种缓存手段有什么区别呢\" class=\"headerlink\" title=\"这几种缓存手段有什么区别呢\"></a>这几种缓存手段有什么区别呢</h1><blockquote>\n<p>Expries、Cache-Control属于 <strong><em>强缓存</em></strong></p>\n</blockquote>\n<ul>\n<li>意思就是可以直接把资源缓存，然后设置一个过期时间，在这时间之前，就可以一直使用。</li>\n<li>这2者区别就是设置值的方式不同，然后各自对应的协议版本不同，为了兼容1.0/1.1 两者都会使用</li>\n</ul>\n<blockquote>\n<p>Last-Modified、ETag属于 <strong><em>协商缓存</em></strong></p>\n</blockquote>\n<ul>\n<li>意思就是即使缓存了，每次使用缓存前，都必须要去服务端进行一次验证，判断该缓存是否可用</li>\n<li>2者的区别：前者记录时间，后者记录根据文件生成的标识符；导致的结果就是，后者会更精确</li>\n</ul>\n<blockquote>\n<p>2种缓存的区别：强缓存优先于协商缓存</p>\n</blockquote>"},{"title":"初探nginx","abbrlink":20679,"date":"2020-05-09T11:24:33.000Z","_content":"\n# 起因\n接触前端学习一年出头，慢慢的也了解到了很多与前端紧密相关的一些非前端本职，但却很感兴趣的技术，比如docker啊、nginx啊、linux啊、cicd什么的；所以趁着疫情在家，买了服务器、域名，昨天备案也通过了；今天就准备先来试水一下，使用nginx部署一直托管在github的博客\n\n<!-- more -->\n\n# 相关知识笔记\n\n### Nginx\n\n>什么是nginx\n- 一个支持HTTP和反向代理的开源的web服务器\n\n>web服务器\n- 基于HTTP协议，处理客户端请求，为客户端提供可供浏览内容的服务器\n- 举例：Nginx\n\n>应用服务器\n- 用来运行那些可以访问、操作本机资源的应用程序的服务器\n- 举例：Tomact\n\n>两者区别\n- 不同点：Web服务器只能处理静态资源，接受请求响应资源，结束；应用服务器也可以做请求处理，响应静态资源，但同时还可以处理动态内容，比如根据模板引擎生成页面等\n- 相同点：2者都可以处理请求\n- 以前开发中，会直接使用应用服务器处理用户请求，然后使用模板引擎动态生成页面给客户端；现在因为前后端分离的原因，以及为了减轻应用服务器压力的前提下；静态资源交给nginx这类web服务器来做，应用服务器只负责处理逻辑，提供数据\n\n### Linux\n>概念\n- macOS和Windows之外的第三大操作系统，主要用于服务器等，而且开源\n\n>版本\n- Ubuntu、centos、debian等\n\n>包安装工具\n- 因为使用的Linux不同，所使用的的包管理工具也不同\n- Debian/Ubuntu：apt、apt-cache、apt-get、dpkg\n- centos：yum\n- 备注1：apt是包管理平台，get负责包的安装更新删除管理；cache用于搜索\n- 备注2：dpkg是Debian的包管理工具，Ubuntu基于Debian，所以也可以使用；但是两个的区别是dpkg安装会绕过并覆盖apt安装的包，切不关心模块依赖问题；不关心Ubuntu软件库软件；简单理解Ubuntu专用apt，Debian专用dpkg\n\n>apt常用命令\n- 安装包：apt-get install <包名>\n- 移除包：apt-get remove <包名>\n- 更新包列表：apt-get update \n- 更新系统、已安装包：apt-get upgrade\n- 列出已安装包：dpkg -l\n- 搜索某包：apt-cache search <包名>\n- 查看包信息：apt-cache show <包名>\n\n>其他命令\n- wget：用来从指定的URL下载文件；类似迅雷\n- \n\n# 基本使用\n- 进入/etc/nginx/conf.d/目录，该目录存放自己的配置文件，nginx的主配置文件(/etc/nginx/nginx.conf)会自动加载该目录的配置文件\n- 通过以下配置文件，就可以部署一个简单的静态项目\n```shell\nserver{\n    # 监听端口号，主配置文件默认监听了80\n    listen 2333;\n    # 制定ip地址或者域名\n    server_name shuaxinjs.cn;\n    # 配置对哪些url做出相应\n    location / {\n        # 配置响应文件的目录\n        root /data;\n        # 配置目录下的响应文件\n        index index.html;\n    }\n}\n```\n>说明\n- 当在浏览器输入的url匹配到location的url后，就会去内部定义的root或alias目录找要返回的文件\n- 如果没有匹配到对应的规则，就会去默认的目录找404.html并响应；这是nginx自带的，一般在/usr/share/nginx/html\n- 可以在/var/log/nginx下查看access和error日志文件，来查看访问状态\n- root可以写在location也可以写在server中，如果内部有定义root，优先使用root的路径（精确匹配例外）\n\n>alias和root的区别\n- 假设此时域名为 [shuaxinjs.cn](shuaxinjs.cn)\n```shell\n# root\n# 这时浏览器输入www.shuxinjs.cn/dist后，nginx会去/data/dist/目录寻找文件\n\nlocation /dist{\n    root /data/;\n    index index.html;\n}\n# alias\n# 这时浏览器输入www.shuxinjs.cn/dist2后，nginx会去/home/目录寻找文件\n# alias指定目录时，结尾一定要加 /;root可有可无\nlocation /dist2{\n    alias /home/;\n    index index.html;\n}\n```\n# 常用命令\n- 使用nginx命令管理\n    ```shell\n    nginx -s reload  # 向主进程发送信号，重新加载配置文件，热重启\n    nginx -s reopen\t # 重启 Nginx\n    nginx -s stop    # 快速关闭\n    nginx -s quit    # 等待工作进程处理完成后关闭\n    nginx -T         # 查看当前 Nginx 最终的配置\n    nginx -t -c <配置路径>    # 检查配置是否有问题，如果已经在配置目录，则不需要-c\n    ```\n- 使用systemctl管理，这是Linux的系统应用管理工具\n    ```shell\n    systemctl start nginx    # 启动 Nginx\n    systemctl stop nginx     # 停止 Nginx\n    systemctl restart nginx  # 重启 Nginx\n    systemctl reload nginx   # 重新加载 Nginx，用于修改配置后\n    systemctl enable nginx   # 设置开机启动 Nginx\n    systemctl disable nginx  # 关闭开机启动 Nginx\n    systemctl status nginx   # 查看 Nginx 运行状态\n    ```\n# 配置\n\n### location配置规则\n\n>基本语法\n- 这里不需要像js一样需要用//把规则包裹起来，直接写在启用正则的符号后即可\n    ```shell\n    location [=|~|~*|^~]/uri/{...}{\n        # 具体配置\n        # root/alias dist #响应文件目录\n        # index file  #响应文件\n    }\n    ```\n\n### 单独说明\n>=\n- 精确匹配\n- 使用=的时候一定要在server中指定root，会无视location内部的路径\n- 下例：当访问shuaxinjs.cn/的时候，nginx就会去/home目录寻找index.html；但是当仅在location指定的时候就会去/usr/nginx/share/html寻找，当然那个目录不存在我们的文件，就会返回404\n    ```shell\n    ...\n    root /home;\n    location = /login/ {\n        index index.html;\n    }\n    ...\n    ```\n\n>^~\n- 表示url以某个常规字符串开始的url，不区分大小写\n- 下例：代理后端请求，凡是携带/apis/的url，都会进行去请求转发；即：shuaxinjs.cn/apis/getData会变成localhost:3000/getData\n- 这里需要注意apis后面一定要跟/，不然apis会添加到url中\n    ```shell\n    location ^~ /apis/ {\n        proxy_pass http://localhost:3000/;\n    }\n    ```\n\n>~\n- ***区分大小写*** 的正则匹配\n- 下例：匹配所有的.(css|js|png|jpg|jepg)的资源文件;\n- 正则说明：.为默认匹配除换行符以外的所有字符，\\*：默认对前一个规则执行0-n次；\\对.号做转意；（css|js|png|jpg|jepg）意思是.后的字符必须是这几种任意一种\n    ```shell\n    location ~.*\\.(css|js|png|jpg|jepg){\n        root /home/static/;\n    }\n    ```\n>~*\n- ***不区分大小写*** 的正则匹配\n\n>!~ , !~*\n- 区分大小写不匹配；不区分大小写不匹配\n\n>/\n- 通用匹配，任何请求都会匹配\n\n### 匹配顺序\n多个location配置的情况下匹配顺序为：\n首先匹配= ；\n其次是完整路径；\n然后匹配^~；\n再其次是按文件中顺序的正则匹配；\n最后是交给 / 通用匹配；\n当有匹配成功时候，停止匹配，按当前匹配规则处理请求。\n\n# 常用配置\n- 匹配静态资源\n    ```shell\n    location ~.*\\.(css|js|png|jpg|jepg){\n        root /home/static/;\n    }\n    ```\n- 代理后端请求，解决跨域\n    ```shell\n     location ^~ /api/ {\n        proxy_pass 后端地址;\n    }\n    ```\n\n- 判断请求客户端为移动端还是pc，返回不同的页面\n    ```shell\n    server{\n        listen 80;\n        server_name 域名/ip;\n        location / {\n        root pc目录；\n        root /data/pc;\n        if ( $http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)' ) {\n                root 移动端目录;\n        }\n            index index.html;\n        }\n    }   \n    ```\n# 可用全局变量\n```shell\n$host ： 请求主机头字段，否则为服务器名称。\n$http_user_agent ： 客户端agent信息\n$http_cookie ： 客户端cookie信息\n$request_method ： 客户端请求的动作，通常为GET或POST。\n$content_length ： 请求头中的Content-length字段。\n$content_type ： 请求头中的Content-Type字段。\n$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： 不包含请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： 与$uri相同。\n$query_string \n$args ： 这个变量等于请求行中的参数，同$query_string\n$document_root ： 当前请求在root指令中指定的值。\n$limit_rate ： 这个变量可以限制连接速率。\n$request_body_file \n$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。\n$remote_addr ： 客户端的IP地址。\n$remote_port ： 客户端的端口。\n$remote_user ： 已经经过Auth Basic Module验证的用户名。\n$scheme ： HTTP方法（如http，https）。\n$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： 服务器名称。\n$server_port ： 请求到达服务器的端口号。\n```\n\n\n","source":"_posts/技术笔记/初探nginx.md","raw":"---\ntitle: 初探nginx\ncategory:\n  - 技术笔记\ntag:\n  - Nginx\n  - Linux\n  - 踩坑\nabbrlink: 20679\ndate: 2020-05-09 19:24:33\n---\n\n# 起因\n接触前端学习一年出头，慢慢的也了解到了很多与前端紧密相关的一些非前端本职，但却很感兴趣的技术，比如docker啊、nginx啊、linux啊、cicd什么的；所以趁着疫情在家，买了服务器、域名，昨天备案也通过了；今天就准备先来试水一下，使用nginx部署一直托管在github的博客\n\n<!-- more -->\n\n# 相关知识笔记\n\n### Nginx\n\n>什么是nginx\n- 一个支持HTTP和反向代理的开源的web服务器\n\n>web服务器\n- 基于HTTP协议，处理客户端请求，为客户端提供可供浏览内容的服务器\n- 举例：Nginx\n\n>应用服务器\n- 用来运行那些可以访问、操作本机资源的应用程序的服务器\n- 举例：Tomact\n\n>两者区别\n- 不同点：Web服务器只能处理静态资源，接受请求响应资源，结束；应用服务器也可以做请求处理，响应静态资源，但同时还可以处理动态内容，比如根据模板引擎生成页面等\n- 相同点：2者都可以处理请求\n- 以前开发中，会直接使用应用服务器处理用户请求，然后使用模板引擎动态生成页面给客户端；现在因为前后端分离的原因，以及为了减轻应用服务器压力的前提下；静态资源交给nginx这类web服务器来做，应用服务器只负责处理逻辑，提供数据\n\n### Linux\n>概念\n- macOS和Windows之外的第三大操作系统，主要用于服务器等，而且开源\n\n>版本\n- Ubuntu、centos、debian等\n\n>包安装工具\n- 因为使用的Linux不同，所使用的的包管理工具也不同\n- Debian/Ubuntu：apt、apt-cache、apt-get、dpkg\n- centos：yum\n- 备注1：apt是包管理平台，get负责包的安装更新删除管理；cache用于搜索\n- 备注2：dpkg是Debian的包管理工具，Ubuntu基于Debian，所以也可以使用；但是两个的区别是dpkg安装会绕过并覆盖apt安装的包，切不关心模块依赖问题；不关心Ubuntu软件库软件；简单理解Ubuntu专用apt，Debian专用dpkg\n\n>apt常用命令\n- 安装包：apt-get install <包名>\n- 移除包：apt-get remove <包名>\n- 更新包列表：apt-get update \n- 更新系统、已安装包：apt-get upgrade\n- 列出已安装包：dpkg -l\n- 搜索某包：apt-cache search <包名>\n- 查看包信息：apt-cache show <包名>\n\n>其他命令\n- wget：用来从指定的URL下载文件；类似迅雷\n- \n\n# 基本使用\n- 进入/etc/nginx/conf.d/目录，该目录存放自己的配置文件，nginx的主配置文件(/etc/nginx/nginx.conf)会自动加载该目录的配置文件\n- 通过以下配置文件，就可以部署一个简单的静态项目\n```shell\nserver{\n    # 监听端口号，主配置文件默认监听了80\n    listen 2333;\n    # 制定ip地址或者域名\n    server_name shuaxinjs.cn;\n    # 配置对哪些url做出相应\n    location / {\n        # 配置响应文件的目录\n        root /data;\n        # 配置目录下的响应文件\n        index index.html;\n    }\n}\n```\n>说明\n- 当在浏览器输入的url匹配到location的url后，就会去内部定义的root或alias目录找要返回的文件\n- 如果没有匹配到对应的规则，就会去默认的目录找404.html并响应；这是nginx自带的，一般在/usr/share/nginx/html\n- 可以在/var/log/nginx下查看access和error日志文件，来查看访问状态\n- root可以写在location也可以写在server中，如果内部有定义root，优先使用root的路径（精确匹配例外）\n\n>alias和root的区别\n- 假设此时域名为 [shuaxinjs.cn](shuaxinjs.cn)\n```shell\n# root\n# 这时浏览器输入www.shuxinjs.cn/dist后，nginx会去/data/dist/目录寻找文件\n\nlocation /dist{\n    root /data/;\n    index index.html;\n}\n# alias\n# 这时浏览器输入www.shuxinjs.cn/dist2后，nginx会去/home/目录寻找文件\n# alias指定目录时，结尾一定要加 /;root可有可无\nlocation /dist2{\n    alias /home/;\n    index index.html;\n}\n```\n# 常用命令\n- 使用nginx命令管理\n    ```shell\n    nginx -s reload  # 向主进程发送信号，重新加载配置文件，热重启\n    nginx -s reopen\t # 重启 Nginx\n    nginx -s stop    # 快速关闭\n    nginx -s quit    # 等待工作进程处理完成后关闭\n    nginx -T         # 查看当前 Nginx 最终的配置\n    nginx -t -c <配置路径>    # 检查配置是否有问题，如果已经在配置目录，则不需要-c\n    ```\n- 使用systemctl管理，这是Linux的系统应用管理工具\n    ```shell\n    systemctl start nginx    # 启动 Nginx\n    systemctl stop nginx     # 停止 Nginx\n    systemctl restart nginx  # 重启 Nginx\n    systemctl reload nginx   # 重新加载 Nginx，用于修改配置后\n    systemctl enable nginx   # 设置开机启动 Nginx\n    systemctl disable nginx  # 关闭开机启动 Nginx\n    systemctl status nginx   # 查看 Nginx 运行状态\n    ```\n# 配置\n\n### location配置规则\n\n>基本语法\n- 这里不需要像js一样需要用//把规则包裹起来，直接写在启用正则的符号后即可\n    ```shell\n    location [=|~|~*|^~]/uri/{...}{\n        # 具体配置\n        # root/alias dist #响应文件目录\n        # index file  #响应文件\n    }\n    ```\n\n### 单独说明\n>=\n- 精确匹配\n- 使用=的时候一定要在server中指定root，会无视location内部的路径\n- 下例：当访问shuaxinjs.cn/的时候，nginx就会去/home目录寻找index.html；但是当仅在location指定的时候就会去/usr/nginx/share/html寻找，当然那个目录不存在我们的文件，就会返回404\n    ```shell\n    ...\n    root /home;\n    location = /login/ {\n        index index.html;\n    }\n    ...\n    ```\n\n>^~\n- 表示url以某个常规字符串开始的url，不区分大小写\n- 下例：代理后端请求，凡是携带/apis/的url，都会进行去请求转发；即：shuaxinjs.cn/apis/getData会变成localhost:3000/getData\n- 这里需要注意apis后面一定要跟/，不然apis会添加到url中\n    ```shell\n    location ^~ /apis/ {\n        proxy_pass http://localhost:3000/;\n    }\n    ```\n\n>~\n- ***区分大小写*** 的正则匹配\n- 下例：匹配所有的.(css|js|png|jpg|jepg)的资源文件;\n- 正则说明：.为默认匹配除换行符以外的所有字符，\\*：默认对前一个规则执行0-n次；\\对.号做转意；（css|js|png|jpg|jepg）意思是.后的字符必须是这几种任意一种\n    ```shell\n    location ~.*\\.(css|js|png|jpg|jepg){\n        root /home/static/;\n    }\n    ```\n>~*\n- ***不区分大小写*** 的正则匹配\n\n>!~ , !~*\n- 区分大小写不匹配；不区分大小写不匹配\n\n>/\n- 通用匹配，任何请求都会匹配\n\n### 匹配顺序\n多个location配置的情况下匹配顺序为：\n首先匹配= ；\n其次是完整路径；\n然后匹配^~；\n再其次是按文件中顺序的正则匹配；\n最后是交给 / 通用匹配；\n当有匹配成功时候，停止匹配，按当前匹配规则处理请求。\n\n# 常用配置\n- 匹配静态资源\n    ```shell\n    location ~.*\\.(css|js|png|jpg|jepg){\n        root /home/static/;\n    }\n    ```\n- 代理后端请求，解决跨域\n    ```shell\n     location ^~ /api/ {\n        proxy_pass 后端地址;\n    }\n    ```\n\n- 判断请求客户端为移动端还是pc，返回不同的页面\n    ```shell\n    server{\n        listen 80;\n        server_name 域名/ip;\n        location / {\n        root pc目录；\n        root /data/pc;\n        if ( $http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)' ) {\n                root 移动端目录;\n        }\n            index index.html;\n        }\n    }   \n    ```\n# 可用全局变量\n```shell\n$host ： 请求主机头字段，否则为服务器名称。\n$http_user_agent ： 客户端agent信息\n$http_cookie ： 客户端cookie信息\n$request_method ： 客户端请求的动作，通常为GET或POST。\n$content_length ： 请求头中的Content-length字段。\n$content_type ： 请求头中的Content-Type字段。\n$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： 不包含请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： 与$uri相同。\n$query_string \n$args ： 这个变量等于请求行中的参数，同$query_string\n$document_root ： 当前请求在root指令中指定的值。\n$limit_rate ： 这个变量可以限制连接速率。\n$request_body_file \n$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。\n$remote_addr ： 客户端的IP地址。\n$remote_port ： 客户端的端口。\n$remote_user ： 已经经过Auth Basic Module验证的用户名。\n$scheme ： HTTP方法（如http，https）。\n$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： 服务器名称。\n$server_port ： 请求到达服务器的端口号。\n```\n\n\n","slug":"技术笔记/初探nginx","published":1,"updated":"2021-12-31T12:01:59.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1e002mj7jfhn3r3ok7","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>接触前端学习一年出头，慢慢的也了解到了很多与前端紧密相关的一些非前端本职，但却很感兴趣的技术，比如docker啊、nginx啊、linux啊、cicd什么的；所以趁着疫情在家，买了服务器、域名，昨天备案也通过了；今天就准备先来试水一下，使用nginx部署一直托管在github的博客</p>\n<a id=\"more\"></a>\n\n<h1 id=\"相关知识笔记\"><a href=\"#相关知识笔记\" class=\"headerlink\" title=\"相关知识笔记\"></a>相关知识笔记</h1><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><blockquote>\n<p>什么是nginx</p>\n</blockquote>\n<ul>\n<li>一个支持HTTP和反向代理的开源的web服务器</li>\n</ul>\n<blockquote>\n<p>web服务器</p>\n</blockquote>\n<ul>\n<li>基于HTTP协议，处理客户端请求，为客户端提供可供浏览内容的服务器</li>\n<li>举例：Nginx</li>\n</ul>\n<blockquote>\n<p>应用服务器</p>\n</blockquote>\n<ul>\n<li>用来运行那些可以访问、操作本机资源的应用程序的服务器</li>\n<li>举例：Tomact</li>\n</ul>\n<blockquote>\n<p>两者区别</p>\n</blockquote>\n<ul>\n<li>不同点：Web服务器只能处理静态资源，接受请求响应资源，结束；应用服务器也可以做请求处理，响应静态资源，但同时还可以处理动态内容，比如根据模板引擎生成页面等</li>\n<li>相同点：2者都可以处理请求</li>\n<li>以前开发中，会直接使用应用服务器处理用户请求，然后使用模板引擎动态生成页面给客户端；现在因为前后端分离的原因，以及为了减轻应用服务器压力的前提下；静态资源交给nginx这类web服务器来做，应用服务器只负责处理逻辑，提供数据</li>\n</ul>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><blockquote>\n<p>概念</p>\n</blockquote>\n<ul>\n<li>macOS和Windows之外的第三大操作系统，主要用于服务器等，而且开源</li>\n</ul>\n<blockquote>\n<p>版本</p>\n</blockquote>\n<ul>\n<li>Ubuntu、centos、debian等</li>\n</ul>\n<blockquote>\n<p>包安装工具</p>\n</blockquote>\n<ul>\n<li>因为使用的Linux不同，所使用的的包管理工具也不同</li>\n<li>Debian/Ubuntu：apt、apt-cache、apt-get、dpkg</li>\n<li>centos：yum</li>\n<li>备注1：apt是包管理平台，get负责包的安装更新删除管理；cache用于搜索</li>\n<li>备注2：dpkg是Debian的包管理工具，Ubuntu基于Debian，所以也可以使用；但是两个的区别是dpkg安装会绕过并覆盖apt安装的包，切不关心模块依赖问题；不关心Ubuntu软件库软件；简单理解Ubuntu专用apt，Debian专用dpkg</li>\n</ul>\n<blockquote>\n<p>apt常用命令</p>\n</blockquote>\n<ul>\n<li>安装包：apt-get install &lt;包名&gt;</li>\n<li>移除包：apt-get remove &lt;包名&gt;</li>\n<li>更新包列表：apt-get update </li>\n<li>更新系统、已安装包：apt-get upgrade</li>\n<li>列出已安装包：dpkg -l</li>\n<li>搜索某包：apt-cache search &lt;包名&gt;</li>\n<li>查看包信息：apt-cache show &lt;包名&gt;</li>\n</ul>\n<blockquote>\n<p>其他命令</p>\n</blockquote>\n<ul>\n<li>wget：用来从指定的URL下载文件；类似迅雷</li>\n<li></li>\n</ul>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><ul>\n<li>进入/etc/nginx/conf.d/目录，该目录存放自己的配置文件，nginx的主配置文件(/etc/nginx/nginx.conf)会自动加载该目录的配置文件</li>\n<li>通过以下配置文件，就可以部署一个简单的静态项目<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">server&#123;<br>    # 监听端口号，主配置文件默认监听了80<br>    listen 2333;<br>    # 制定ip地址或者域名<br>    server_name shuaxinjs.cn;<br>    # 配置对哪些url做出相应<br>    location / &#123;<br>        # 配置响应文件的目录<br>        root /data;<br>        # 配置目录下的响应文件<br>        index index.html;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>说明</p>\n</blockquote>\n</li>\n<li>当在浏览器输入的url匹配到location的url后，就会去内部定义的root或alias目录找要返回的文件</li>\n<li>如果没有匹配到对应的规则，就会去默认的目录找404.html并响应；这是nginx自带的，一般在/usr/share/nginx/html</li>\n<li>可以在/var/log/nginx下查看access和error日志文件，来查看访问状态</li>\n<li>root可以写在location也可以写在server中，如果内部有定义root，优先使用root的路径（精确匹配例外）</li>\n</ul>\n<blockquote>\n<p>alias和root的区别</p>\n</blockquote>\n<ul>\n<li>假设此时域名为 <a href=\"shuaxinjs.cn\">shuaxinjs.cn</a><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> root</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 这时浏览器输入www.shuxinjs.cn/dist后，nginx会去/data/dist/目录寻找文件</span><br><br>location /dist&#123;<br>    root /data/;<br>    index index.html;<br>&#125;<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-built_in\">alias</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 这时浏览器输入www.shuxinjs.cn/dist2后，nginx会去/home/目录寻找文件</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-built_in\">alias</span>指定目录时，结尾一定要加 /;root可有可无</span><br>location /dist2&#123;<br>    alias /home/;<br>    index index.html;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1></li>\n<li>使用nginx命令管理  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">nginx -s reload  # 向主进程发送信号，重新加载配置文件，热重启<br>nginx -s reopen\t # 重启 Nginx<br>nginx -s stop    # 快速关闭<br>nginx -s quit    # 等待工作进程处理完成后关闭<br>nginx -T         # 查看当前 Nginx 最终的配置<br>nginx -t -c &lt;配置路径&gt;    # 检查配置是否有问题，如果已经在配置目录，则不需要-c<br></code></pre></div></td></tr></table></figure></li>\n<li>使用systemctl管理，这是Linux的系统应用管理工具  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">systemctl start nginx    # 启动 Nginx<br>systemctl stop nginx     # 停止 Nginx<br>systemctl restart nginx  # 重启 Nginx<br>systemctl reload nginx   # 重新加载 Nginx，用于修改配置后<br>systemctl enable nginx   # 设置开机启动 Nginx<br>systemctl disable nginx  # 关闭开机启动 Nginx<br>systemctl status nginx   # 查看 Nginx 运行状态<br></code></pre></div></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1></li>\n</ul>\n<h3 id=\"location配置规则\"><a href=\"#location配置规则\" class=\"headerlink\" title=\"location配置规则\"></a>location配置规则</h3><blockquote>\n<p>基本语法</p>\n</blockquote>\n<ul>\n<li>这里不需要像js一样需要用//把规则包裹起来，直接写在启用正则的符号后即可  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">location [=|~|~*|^~]/uri/&#123;...&#125;&#123;<br>    # 具体配置<br>    # root/alias dist #响应文件目录<br>    # index file  #响应文件<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"单独说明\"><a href=\"#单独说明\" class=\"headerlink\" title=\"单独说明\"></a>单独说明</h3><blockquote>\n<p>=</p>\n</blockquote>\n<ul>\n<li>精确匹配</li>\n<li>使用=的时候一定要在server中指定root，会无视location内部的路径</li>\n<li>下例：当访问shuaxinjs.cn/的时候，nginx就会去/home目录寻找index.html；但是当仅在location指定的时候就会去/usr/nginx/share/html寻找，当然那个目录不存在我们的文件，就会返回404  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">...<br>root /home;<br>location = /login/ &#123;<br>    index index.html;<br>&#125;<br>...<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>^~</p>\n</blockquote>\n<ul>\n<li>表示url以某个常规字符串开始的url，不区分大小写</li>\n<li>下例：代理后端请求，凡是携带/apis/的url，都会进行去请求转发；即：shuaxinjs.cn/apis/getData会变成localhost:3000/getData</li>\n<li>这里需要注意apis后面一定要跟/，不然apis会添加到url中  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">location ^~ /apis/ &#123;<br>    proxy_pass http://localhost:3000/;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>~</p>\n</blockquote>\n<ul>\n<li><strong><em>区分大小写</em></strong> 的正则匹配</li>\n<li>下例：匹配所有的.(css|js|png|jpg|jepg)的资源文件;</li>\n<li>正则说明：.为默认匹配除换行符以外的所有字符，*：默认对前一个规则执行0-n次；\\对.号做转意；（css|js|png|jpg|jepg）意思是.后的字符必须是这几种任意一种  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">location ~.*\\.(css|js|png|jpg|jepg)&#123;<br>    root /home/static/;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>~*</p>\n</blockquote>\n</li>\n<li><strong><em>不区分大小写</em></strong> 的正则匹配</li>\n</ul>\n<blockquote>\n<p>!~ , !~*</p>\n</blockquote>\n<ul>\n<li>区分大小写不匹配；不区分大小写不匹配</li>\n</ul>\n<blockquote>\n<p>/</p>\n</blockquote>\n<ul>\n<li>通用匹配，任何请求都会匹配</li>\n</ul>\n<h3 id=\"匹配顺序\"><a href=\"#匹配顺序\" class=\"headerlink\" title=\"匹配顺序\"></a>匹配顺序</h3><p>多个location配置的情况下匹配顺序为：<br>首先匹配= ；<br>其次是完整路径；<br>然后匹配^~；<br>再其次是按文件中顺序的正则匹配；<br>最后是交给 / 通用匹配；<br>当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p>\n<h1 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h1><ul>\n<li><p>匹配静态资源</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">location ~.*\\.(css|js|png|jpg|jepg)&#123;<br>    root /home/static/;<br>&#125;<br></code></pre></div></td></tr></table></figure></li>\n<li><p>代理后端请求，解决跨域</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"> location ^~ /api/ &#123;<br>    proxy_pass 后端地址;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n</li>\n<li><p>判断请求客户端为移动端还是pc，返回不同的页面</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">server&#123;<br>    listen 80;<br>    server_name 域名/ip;<br>    location / &#123;<br>    root pc目录；<br>    root /data/pc;<br>    if ( $http_user_agent ~* &#x27;(Android|webOS|iPhone|iPod|BlackBerry)&#x27; ) &#123;<br>            root 移动端目录;<br>    &#125;<br>        index index.html;<br>    &#125;<br>&#125;   <br></code></pre></div></td></tr></table></figure>\n<h1 id=\"可用全局变量\"><a href=\"#可用全局变量\" class=\"headerlink\" title=\"可用全局变量\"></a>可用全局变量</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\">host ： 请求主机头字段，否则为服务器名称。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">http_user_agent ： 客户端agent信息</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">http_cookie ： 客户端cookie信息</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">content_length ： 请求头中的Content-length字段。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">content_type ： 请求头中的Content-Type字段。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">uri ： 不包含请求参数的当前URI，<span class=\"hljs-variable\">$uri</span>不包含主机名，如”/foo/bar.html”。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">document_uri ： 与<span class=\"hljs-variable\">$uri</span>相同。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">query_string </span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">args ： 这个变量等于请求行中的参数，同<span class=\"hljs-variable\">$query_string</span></span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">document_root ： 当前请求在root指令中指定的值。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">limit_rate ： 这个变量可以限制连接速率。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">request_body_file </span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">request_filename ： 当前请求的文件路径，由root或<span class=\"hljs-built_in\">alias</span>指令与URI请求生成。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">remote_addr ： 客户端的IP地址。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">remote_port ： 客户端的端口。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">scheme ： HTTP方法（如http，https）。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">server_name ： 服务器名称。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">server_port ： 请求到达服务器的端口号。</span><br></code></pre></div></td></tr></table></figure>\n\n\n</li>\n</ul>\n","site":{"data":{}},"wordcount":4338,"excerpt":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>接触前端学习一年出头，慢慢的也了解到了很多与前端紧密相关的一些非前端本职，但却很感兴趣的技术，比如docker啊、nginx啊、linux啊、cicd什么的；所以趁着疫情在家，买了服务器、域名，昨天备案也通过了；今天就准备先来试水一下，使用nginx部署一直托管在github的博客</p>","more":"<h1 id=\"相关知识笔记\"><a href=\"#相关知识笔记\" class=\"headerlink\" title=\"相关知识笔记\"></a>相关知识笔记</h1><h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><blockquote>\n<p>什么是nginx</p>\n</blockquote>\n<ul>\n<li>一个支持HTTP和反向代理的开源的web服务器</li>\n</ul>\n<blockquote>\n<p>web服务器</p>\n</blockquote>\n<ul>\n<li>基于HTTP协议，处理客户端请求，为客户端提供可供浏览内容的服务器</li>\n<li>举例：Nginx</li>\n</ul>\n<blockquote>\n<p>应用服务器</p>\n</blockquote>\n<ul>\n<li>用来运行那些可以访问、操作本机资源的应用程序的服务器</li>\n<li>举例：Tomact</li>\n</ul>\n<blockquote>\n<p>两者区别</p>\n</blockquote>\n<ul>\n<li>不同点：Web服务器只能处理静态资源，接受请求响应资源，结束；应用服务器也可以做请求处理，响应静态资源，但同时还可以处理动态内容，比如根据模板引擎生成页面等</li>\n<li>相同点：2者都可以处理请求</li>\n<li>以前开发中，会直接使用应用服务器处理用户请求，然后使用模板引擎动态生成页面给客户端；现在因为前后端分离的原因，以及为了减轻应用服务器压力的前提下；静态资源交给nginx这类web服务器来做，应用服务器只负责处理逻辑，提供数据</li>\n</ul>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><blockquote>\n<p>概念</p>\n</blockquote>\n<ul>\n<li>macOS和Windows之外的第三大操作系统，主要用于服务器等，而且开源</li>\n</ul>\n<blockquote>\n<p>版本</p>\n</blockquote>\n<ul>\n<li>Ubuntu、centos、debian等</li>\n</ul>\n<blockquote>\n<p>包安装工具</p>\n</blockquote>\n<ul>\n<li>因为使用的Linux不同，所使用的的包管理工具也不同</li>\n<li>Debian/Ubuntu：apt、apt-cache、apt-get、dpkg</li>\n<li>centos：yum</li>\n<li>备注1：apt是包管理平台，get负责包的安装更新删除管理；cache用于搜索</li>\n<li>备注2：dpkg是Debian的包管理工具，Ubuntu基于Debian，所以也可以使用；但是两个的区别是dpkg安装会绕过并覆盖apt安装的包，切不关心模块依赖问题；不关心Ubuntu软件库软件；简单理解Ubuntu专用apt，Debian专用dpkg</li>\n</ul>\n<blockquote>\n<p>apt常用命令</p>\n</blockquote>\n<ul>\n<li>安装包：apt-get install &lt;包名&gt;</li>\n<li>移除包：apt-get remove &lt;包名&gt;</li>\n<li>更新包列表：apt-get update </li>\n<li>更新系统、已安装包：apt-get upgrade</li>\n<li>列出已安装包：dpkg -l</li>\n<li>搜索某包：apt-cache search &lt;包名&gt;</li>\n<li>查看包信息：apt-cache show &lt;包名&gt;</li>\n</ul>\n<blockquote>\n<p>其他命令</p>\n</blockquote>\n<ul>\n<li>wget：用来从指定的URL下载文件；类似迅雷</li>\n<li></li>\n</ul>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><ul>\n<li>进入/etc/nginx/conf.d/目录，该目录存放自己的配置文件，nginx的主配置文件(/etc/nginx/nginx.conf)会自动加载该目录的配置文件</li>\n<li>通过以下配置文件，就可以部署一个简单的静态项目<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">server&#123;<br>    # 监听端口号，主配置文件默认监听了80<br>    listen 2333;<br>    # 制定ip地址或者域名<br>    server_name shuaxinjs.cn;<br>    # 配置对哪些url做出相应<br>    location / &#123;<br>        # 配置响应文件的目录<br>        root /data;<br>        # 配置目录下的响应文件<br>        index index.html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>说明</p>\n</blockquote>\n</li>\n<li>当在浏览器输入的url匹配到location的url后，就会去内部定义的root或alias目录找要返回的文件</li>\n<li>如果没有匹配到对应的规则，就会去默认的目录找404.html并响应；这是nginx自带的，一般在/usr/share/nginx/html</li>\n<li>可以在/var/log/nginx下查看access和error日志文件，来查看访问状态</li>\n<li>root可以写在location也可以写在server中，如果内部有定义root，优先使用root的路径（精确匹配例外）</li>\n</ul>\n<blockquote>\n<p>alias和root的区别</p>\n</blockquote>\n<ul>\n<li>假设此时域名为 <a href=\"shuaxinjs.cn\">shuaxinjs.cn</a><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> root</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 这时浏览器输入www.shuxinjs.cn/dist后，nginx会去/data/dist/目录寻找文件</span><br><br>location /dist&#123;<br>    root /data/;<br>    index index.html;<br>&#125;<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-built_in\">alias</span></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 这时浏览器输入www.shuxinjs.cn/dist2后，nginx会去/home/目录寻找文件</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> <span class=\"hljs-built_in\">alias</span>指定目录时，结尾一定要加 /;root可有可无</span><br>location /dist2&#123;<br>    alias /home/;<br>    index index.html;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1></li>\n<li>使用nginx命令管理  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">nginx -s reload  # 向主进程发送信号，重新加载配置文件，热重启<br>nginx -s reopen\t # 重启 Nginx<br>nginx -s stop    # 快速关闭<br>nginx -s quit    # 等待工作进程处理完成后关闭<br>nginx -T         # 查看当前 Nginx 最终的配置<br>nginx -t -c &lt;配置路径&gt;    # 检查配置是否有问题，如果已经在配置目录，则不需要-c<br></code></pre></td></tr></table></figure></li>\n<li>使用systemctl管理，这是Linux的系统应用管理工具  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">systemctl start nginx    # 启动 Nginx<br>systemctl stop nginx     # 停止 Nginx<br>systemctl restart nginx  # 重启 Nginx<br>systemctl reload nginx   # 重新加载 Nginx，用于修改配置后<br>systemctl enable nginx   # 设置开机启动 Nginx<br>systemctl disable nginx  # 关闭开机启动 Nginx<br>systemctl status nginx   # 查看 Nginx 运行状态<br></code></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1></li>\n</ul>\n<h3 id=\"location配置规则\"><a href=\"#location配置规则\" class=\"headerlink\" title=\"location配置规则\"></a>location配置规则</h3><blockquote>\n<p>基本语法</p>\n</blockquote>\n<ul>\n<li>这里不需要像js一样需要用//把规则包裹起来，直接写在启用正则的符号后即可  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">location [=|~|~*|^~]/uri/&#123;...&#125;&#123;<br>    # 具体配置<br>    # root/alias dist #响应文件目录<br>    # index file  #响应文件<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"单独说明\"><a href=\"#单独说明\" class=\"headerlink\" title=\"单独说明\"></a>单独说明</h3><blockquote>\n<p>=</p>\n</blockquote>\n<ul>\n<li>精确匹配</li>\n<li>使用=的时候一定要在server中指定root，会无视location内部的路径</li>\n<li>下例：当访问shuaxinjs.cn/的时候，nginx就会去/home目录寻找index.html；但是当仅在location指定的时候就会去/usr/nginx/share/html寻找，当然那个目录不存在我们的文件，就会返回404  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">...<br>root /home;<br>location = /login/ &#123;<br>    index index.html;<br>&#125;<br>...<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>^~</p>\n</blockquote>\n<ul>\n<li>表示url以某个常规字符串开始的url，不区分大小写</li>\n<li>下例：代理后端请求，凡是携带/apis/的url，都会进行去请求转发；即：shuaxinjs.cn/apis/getData会变成localhost:3000/getData</li>\n<li>这里需要注意apis后面一定要跟/，不然apis会添加到url中  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">location ^~ /apis/ &#123;<br>    proxy_pass http://localhost:3000/;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>~</p>\n</blockquote>\n<ul>\n<li><strong><em>区分大小写</em></strong> 的正则匹配</li>\n<li>下例：匹配所有的.(css|js|png|jpg|jepg)的资源文件;</li>\n<li>正则说明：.为默认匹配除换行符以外的所有字符，*：默认对前一个规则执行0-n次；\\对.号做转意；（css|js|png|jpg|jepg）意思是.后的字符必须是这几种任意一种  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">location ~.*\\.(css|js|png|jpg|jepg)&#123;<br>    root /home/static/;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>~*</p>\n</blockquote>\n</li>\n<li><strong><em>不区分大小写</em></strong> 的正则匹配</li>\n</ul>\n<blockquote>\n<p>!~ , !~*</p>\n</blockquote>\n<ul>\n<li>区分大小写不匹配；不区分大小写不匹配</li>\n</ul>\n<blockquote>\n<p>/</p>\n</blockquote>\n<ul>\n<li>通用匹配，任何请求都会匹配</li>\n</ul>\n<h3 id=\"匹配顺序\"><a href=\"#匹配顺序\" class=\"headerlink\" title=\"匹配顺序\"></a>匹配顺序</h3><p>多个location配置的情况下匹配顺序为：<br>首先匹配= ；<br>其次是完整路径；<br>然后匹配^~；<br>再其次是按文件中顺序的正则匹配；<br>最后是交给 / 通用匹配；<br>当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p>\n<h1 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h1><ul>\n<li><p>匹配静态资源</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">location ~.*\\.(css|js|png|jpg|jepg)&#123;<br>    root /home/static/;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>代理后端请求，解决跨域</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"> location ^~ /api/ &#123;<br>    proxy_pass 后端地址;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>判断请求客户端为移动端还是pc，返回不同的页面</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">server&#123;<br>    listen 80;<br>    server_name 域名/ip;<br>    location / &#123;<br>    root pc目录；<br>    root /data/pc;<br>    if ( $http_user_agent ~* &#x27;(Android|webOS|iPhone|iPod|BlackBerry)&#x27; ) &#123;<br>            root 移动端目录;<br>    &#125;<br>        index index.html;<br>    &#125;<br>&#125;   <br></code></pre></td></tr></table></figure>\n<h1 id=\"可用全局变量\"><a href=\"#可用全局变量\" class=\"headerlink\" title=\"可用全局变量\"></a>可用全局变量</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\">host ： 请求主机头字段，否则为服务器名称。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">http_user_agent ： 客户端agent信息</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">http_cookie ： 客户端cookie信息</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">content_length ： 请求头中的Content-length字段。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">content_type ： 请求头中的Content-Type字段。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">uri ： 不包含请求参数的当前URI，<span class=\"hljs-variable\">$uri</span>不包含主机名，如”/foo/bar.html”。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">document_uri ： 与<span class=\"hljs-variable\">$uri</span>相同。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">query_string </span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">args ： 这个变量等于请求行中的参数，同<span class=\"hljs-variable\">$query_string</span></span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">document_root ： 当前请求在root指令中指定的值。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">limit_rate ： 这个变量可以限制连接速率。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">request_body_file </span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">request_filename ： 当前请求的文件路径，由root或<span class=\"hljs-built_in\">alias</span>指令与URI请求生成。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">remote_addr ： 客户端的IP地址。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">remote_port ： 客户端的端口。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">scheme ： HTTP方法（如http，https）。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">server_name ： 服务器名称。</span><br><span class=\"hljs-meta\">$</span><span class=\"bash\">server_port ： 请求到达服务器的端口号。</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n</ul>"},{"title":"关于跨域","abbrlink":56868,"date":"2019-11-01T08:33:27.000Z","_content":"# 跨域\n跨域是浏览器为了保证服务数据的安全性，而存在的一种限制请求的一种机制，只存在于浏览器。\n\n主要工作原理就是根据有没有遵循同源策略(当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域)，来判断一个请求是否跨域，然后决定是否允许这个请求。\n# 同源策略\n>概念\n- 1.同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。\n- 2.同源指，发请求和接受请求的两端处在：同一协议，同一域名，同一端口下。\n<!-- more -->\n![一个域名的组成](/img/tongyuan.png)\n>作用\n- 同源策略是浏览器的行为，是为了保护本地数据不被JavaScript代码获取回来的数据污染，因此拦截的是客户端发出的请求回来的数据接收，即请求发送了，服务器响应了，但是无法被浏览器接收。\n\n>同源策略会限制的内容\n- Cookie、LocalStorage、IndexedDB 等存储性内容\n- DOM 节点\n- AJAX 请求发送后，结果被浏览器拦截了\n\n>同源策略下有几个允许跨域加载资源的方式:\n- &lt;img src='***'&gt;\n- &lt;link href='***'&gt;\n- &lt;script src='***'&gt;\n# 跨域限制\n跨域不仅对请求有限制，对请求的方法和发送的内容格式，也会有限制；除过默认允许的一些外，其他的非默认请求方法和内容格式都需要在服务端进行设置允许这些对应的可以访问。\n\n因为非默认的请求方法和内容类型会在正式发送该请求前，发送一个预请求，来判断服务端是否允许该请求的访问，之后再发送该请求，如果服务端允许就正常获取响应内容，不允许就会报错，如下图。\n![不允许put访问](/img/cros2.png)\n\n服务端允许后允许访问，可以看到会有2个请求，第一就是预请求，第二个是正式发送的请求，预请求的方法是会显示OPTIONS。\n![允许访问](/img/cros3.png)\n![允许访问](/img/cros4.png)\n\n设置代码(以node为例)\n```js\nconst koa = require('koa');\nconst app = new koa();\n\napp.use(async (ctx) => {\n    console.log(ctx.request.url);\n    ctx.response.status=200;\n    // 设置允许跨域\n    ctx.response.set({\n        // 允许跨域访问的域名\n        \"Access-Control-Allow-Origin\": '*',\n        // 当请求方法是跨域默认请求之外的请求时，服务器需要设置对应的允许的请求方法\n        \"Access-Control-Allow-Methods\":\"PUT\",\n        // 允许该请求在第一次请求成功后的1000秒内，不需要再发送预请求\n        \"Access-Control-Max-Age\":\"1000\"\n    })\n    ctx.response.body = 'hi';\n});\n\napp.listen(3000, () => {\n    console.log('ok');\n});\n```\n\n列举一下跨域默认不需要预请求就可以发送的方法(Mthods)和内容类型(Content-Type)\n>跨域默认允许的请求方法(Method)\n- GET\n- POST\n- HEAD\n\n\n>默认允许的发送请求内容类型(Content-Type)\n- text/plain\n- multipart/form-data\n- application/x-www-form-urlencoded\n\n>默认允许的请求头\n- Accept\n- Accept-Language\n- Content-Language\n- Content-Type\n\n>[更多](https://fetch.spec.whatwg.org/#http-extensions)\n## 常见跨域场景\n![跨域](/img/kuayu.png)\n### [浪里行舟](https://github.com/ljianshu/Blog)大佬的一些说明\n第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。\n\n第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。\n\n这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？\n\n跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。\n\n# 解决方案\n\n## JSONP\n1.利用&lt;script src='***'&gt;可以跨域请求资源的原理\n2.这种方式只能通过GET请求。\n3.但是适配较广\n>代码\n- 前端\n```html\n...\n<body>\n    <button id='btn'>请求</button>\n    <script>\n        let btn=document.querySelector('#btn');\n        btn.onclick=function(){\n                // 创建一个script标签块\n                let frame = document.createElement('script');\n                // 设置src链接\n                // http://localhost:3000/person为请求借口\n                // ? 分隔符\n                // callback=func传给后端的一个回调函数\n                frame.src='http://localhost:3000/person?callback=func';\n                // 添加到body内\n                document.querySelector('body').append(frame);\n        };\n        function func(res){\n            // 后端成功收到请求后 会返回并执行 该函数 \n            console.log(res);// 打印收到的数据\n        }\n    </script>\n</body>\n...\n```\n- 后端(koa)\n```js\n...\nlet data=require('data.json');\nroute.get('/person', async (ctx) => {\n    newData = JSON.stringify(data);\n    // 执行前端传递来的函数 并把数据作为参数传递\n    ctx.body = `func(${newData})`;\n})\n...\n```\n- 以上前端代码可以通过jQuery来写,jQuery有封装好的方法直接使用\n## CROS\n>什么是CROS\n- 跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。---来自[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)。\n\n>使用：\n- 通过在后端设置相应头信息来允许一些指定的域名可以访问。\n>代码\n- 前端\n```html\n<button id=\"btn\">send</button>\n<script>\n    let btn = document.querySelector('#btn');\n    btn.onclick = function () {\n        getData();\n    }\n    let getData = () => {\n        fetch('http://localhost:3000/person', {\n            method: 'GET'\n        })\n            .then(\n                (res) => res.json()\n            )\n            .then(\n                (data) => {\n                    console.log(data);\n                }\n            )\n            .catch(\n                (err) => {\n                    console.log(err);\n                }\n            )\n    }\n</script>\n```\n- 后端(koa)\n```js\nconst cors = require('koa2-cors');\n// 使用cors中间件\napp.use(cors({\n    // 允许get方法跨域请求\n    allowMethods: ['GET'],\n    // 在koa中不适用中间件 可以使用上下文对象来自己设置\n    // ctx.set(...);\n}));\n\n```\n\n## Node/nginx做代理\n因为服务器之间不用遵守同源策略,所以可以通过node或者nginx来转发请求，实现跨域\n>步骤\n- 接受客户端请求 。\n- 将请求 转发给服务器。\n- 拿到服务器 响应 数据。\n- 将 响应 转发给客户端。\n![流程](/img/daili.png)\n## 其他方式尝试后更新\n","source":"_posts/技术笔记/关于跨域.md","raw":"---\ntitle: 关于跨域\ncategory:\n  - 技术笔记\ntags:\n  - 网络\n  - 踩坑\nabbrlink: 56868\ndate: 2019-11-01 16:33:27\n---\n# 跨域\n跨域是浏览器为了保证服务数据的安全性，而存在的一种限制请求的一种机制，只存在于浏览器。\n\n主要工作原理就是根据有没有遵循同源策略(当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域)，来判断一个请求是否跨域，然后决定是否允许这个请求。\n# 同源策略\n>概念\n- 1.同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。\n- 2.同源指，发请求和接受请求的两端处在：同一协议，同一域名，同一端口下。\n<!-- more -->\n![一个域名的组成](/img/tongyuan.png)\n>作用\n- 同源策略是浏览器的行为，是为了保护本地数据不被JavaScript代码获取回来的数据污染，因此拦截的是客户端发出的请求回来的数据接收，即请求发送了，服务器响应了，但是无法被浏览器接收。\n\n>同源策略会限制的内容\n- Cookie、LocalStorage、IndexedDB 等存储性内容\n- DOM 节点\n- AJAX 请求发送后，结果被浏览器拦截了\n\n>同源策略下有几个允许跨域加载资源的方式:\n- &lt;img src='***'&gt;\n- &lt;link href='***'&gt;\n- &lt;script src='***'&gt;\n# 跨域限制\n跨域不仅对请求有限制，对请求的方法和发送的内容格式，也会有限制；除过默认允许的一些外，其他的非默认请求方法和内容格式都需要在服务端进行设置允许这些对应的可以访问。\n\n因为非默认的请求方法和内容类型会在正式发送该请求前，发送一个预请求，来判断服务端是否允许该请求的访问，之后再发送该请求，如果服务端允许就正常获取响应内容，不允许就会报错，如下图。\n![不允许put访问](/img/cros2.png)\n\n服务端允许后允许访问，可以看到会有2个请求，第一就是预请求，第二个是正式发送的请求，预请求的方法是会显示OPTIONS。\n![允许访问](/img/cros3.png)\n![允许访问](/img/cros4.png)\n\n设置代码(以node为例)\n```js\nconst koa = require('koa');\nconst app = new koa();\n\napp.use(async (ctx) => {\n    console.log(ctx.request.url);\n    ctx.response.status=200;\n    // 设置允许跨域\n    ctx.response.set({\n        // 允许跨域访问的域名\n        \"Access-Control-Allow-Origin\": '*',\n        // 当请求方法是跨域默认请求之外的请求时，服务器需要设置对应的允许的请求方法\n        \"Access-Control-Allow-Methods\":\"PUT\",\n        // 允许该请求在第一次请求成功后的1000秒内，不需要再发送预请求\n        \"Access-Control-Max-Age\":\"1000\"\n    })\n    ctx.response.body = 'hi';\n});\n\napp.listen(3000, () => {\n    console.log('ok');\n});\n```\n\n列举一下跨域默认不需要预请求就可以发送的方法(Mthods)和内容类型(Content-Type)\n>跨域默认允许的请求方法(Method)\n- GET\n- POST\n- HEAD\n\n\n>默认允许的发送请求内容类型(Content-Type)\n- text/plain\n- multipart/form-data\n- application/x-www-form-urlencoded\n\n>默认允许的请求头\n- Accept\n- Accept-Language\n- Content-Language\n- Content-Type\n\n>[更多](https://fetch.spec.whatwg.org/#http-extensions)\n## 常见跨域场景\n![跨域](/img/kuayu.png)\n### [浪里行舟](https://github.com/ljianshu/Blog)大佬的一些说明\n第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。\n\n第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。\n\n这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？\n\n跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。\n\n# 解决方案\n\n## JSONP\n1.利用&lt;script src='***'&gt;可以跨域请求资源的原理\n2.这种方式只能通过GET请求。\n3.但是适配较广\n>代码\n- 前端\n```html\n...\n<body>\n    <button id='btn'>请求</button>\n    <script>\n        let btn=document.querySelector('#btn');\n        btn.onclick=function(){\n                // 创建一个script标签块\n                let frame = document.createElement('script');\n                // 设置src链接\n                // http://localhost:3000/person为请求借口\n                // ? 分隔符\n                // callback=func传给后端的一个回调函数\n                frame.src='http://localhost:3000/person?callback=func';\n                // 添加到body内\n                document.querySelector('body').append(frame);\n        };\n        function func(res){\n            // 后端成功收到请求后 会返回并执行 该函数 \n            console.log(res);// 打印收到的数据\n        }\n    </script>\n</body>\n...\n```\n- 后端(koa)\n```js\n...\nlet data=require('data.json');\nroute.get('/person', async (ctx) => {\n    newData = JSON.stringify(data);\n    // 执行前端传递来的函数 并把数据作为参数传递\n    ctx.body = `func(${newData})`;\n})\n...\n```\n- 以上前端代码可以通过jQuery来写,jQuery有封装好的方法直接使用\n## CROS\n>什么是CROS\n- 跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。---来自[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)。\n\n>使用：\n- 通过在后端设置相应头信息来允许一些指定的域名可以访问。\n>代码\n- 前端\n```html\n<button id=\"btn\">send</button>\n<script>\n    let btn = document.querySelector('#btn');\n    btn.onclick = function () {\n        getData();\n    }\n    let getData = () => {\n        fetch('http://localhost:3000/person', {\n            method: 'GET'\n        })\n            .then(\n                (res) => res.json()\n            )\n            .then(\n                (data) => {\n                    console.log(data);\n                }\n            )\n            .catch(\n                (err) => {\n                    console.log(err);\n                }\n            )\n    }\n</script>\n```\n- 后端(koa)\n```js\nconst cors = require('koa2-cors');\n// 使用cors中间件\napp.use(cors({\n    // 允许get方法跨域请求\n    allowMethods: ['GET'],\n    // 在koa中不适用中间件 可以使用上下文对象来自己设置\n    // ctx.set(...);\n}));\n\n```\n\n## Node/nginx做代理\n因为服务器之间不用遵守同源策略,所以可以通过node或者nginx来转发请求，实现跨域\n>步骤\n- 接受客户端请求 。\n- 将请求 转发给服务器。\n- 拿到服务器 响应 数据。\n- 将 响应 转发给客户端。\n![流程](/img/daili.png)\n## 其他方式尝试后更新\n","slug":"技术笔记/关于跨域","published":1,"updated":"2021-12-31T12:01:59.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1f002pj7jfb87tdc54","content":"<h1 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h1><p>跨域是浏览器为了保证服务数据的安全性，而存在的一种限制请求的一种机制，只存在于浏览器。</p>\n<p>主要工作原理就是根据有没有遵循同源策略(当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域)，来判断一个请求是否跨域，然后决定是否允许这个请求。</p>\n<h1 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h1><blockquote>\n<p>概念</p>\n</blockquote>\n<ul>\n<li>1.同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</li>\n<li>2.同源指，发请求和接受请求的两端处在：同一协议，同一域名，同一端口下。<a id=\"more\"></a>\n<img src=\"/img/tongyuan.png\" alt=\"一个域名的组成\"><blockquote>\n<p>作用</p>\n</blockquote>\n</li>\n<li>同源策略是浏览器的行为，是为了保护本地数据不被JavaScript代码获取回来的数据污染，因此拦截的是客户端发出的请求回来的数据接收，即请求发送了，服务器响应了，但是无法被浏览器接收。</li>\n</ul>\n<blockquote>\n<p>同源策略会限制的内容</p>\n</blockquote>\n<ul>\n<li>Cookie、LocalStorage、IndexedDB 等存储性内容</li>\n<li>DOM 节点</li>\n<li>AJAX 请求发送后，结果被浏览器拦截了</li>\n</ul>\n<blockquote>\n<p>同源策略下有几个允许跨域加载资源的方式:</p>\n</blockquote>\n<ul>\n<li>&lt;img src=’***’&gt;</li>\n<li>&lt;link href=’***’&gt;</li>\n<li>&lt;script src=’***’&gt;<h1 id=\"跨域限制\"><a href=\"#跨域限制\" class=\"headerlink\" title=\"跨域限制\"></a>跨域限制</h1>跨域不仅对请求有限制，对请求的方法和发送的内容格式，也会有限制；除过默认允许的一些外，其他的非默认请求方法和内容格式都需要在服务端进行设置允许这些对应的可以访问。</li>\n</ul>\n<p>因为非默认的请求方法和内容类型会在正式发送该请求前，发送一个预请求，来判断服务端是否允许该请求的访问，之后再发送该请求，如果服务端允许就正常获取响应内容，不允许就会报错，如下图。<br><img src=\"/img/cros2.png\" alt=\"不允许put访问\"></p>\n<p>服务端允许后允许访问，可以看到会有2个请求，第一就是预请求，第二个是正式发送的请求，预请求的方法是会显示OPTIONS。<br><img src=\"/img/cros3.png\" alt=\"允许访问\"><br><img src=\"/img/cros4.png\" alt=\"允许访问\"></p>\n<p>设置代码(以node为例)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> koa();<br><br>app.use(<span class=\"hljs-keyword\">async</span> (ctx) =&gt; &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(ctx.request.url);<br>    ctx.response.status=<span class=\"hljs-number\">200</span>;<br>    <span class=\"hljs-comment\">// 设置允许跨域</span><br>    ctx.response.set(&#123;<br>        <span class=\"hljs-comment\">// 允许跨域访问的域名</span><br>        <span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"hljs-string\">&#x27;*&#x27;</span>,<br>        <span class=\"hljs-comment\">// 当请求方法是跨域默认请求之外的请求时，服务器需要设置对应的允许的请求方法</span><br>        <span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>:<span class=\"hljs-string\">&quot;PUT&quot;</span>,<br>        <span class=\"hljs-comment\">// 允许该请求在第一次请求成功后的1000秒内，不需要再发送预请求</span><br>        <span class=\"hljs-string\">&quot;Access-Control-Max-Age&quot;</span>:<span class=\"hljs-string\">&quot;1000&quot;</span><br>    &#125;)<br>    ctx.response.body = <span class=\"hljs-string\">&#x27;hi&#x27;</span>;<br>&#125;);<br><br>app.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;ok&#x27;</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure>\n\n<p>列举一下跨域默认不需要预请求就可以发送的方法(Mthods)和内容类型(Content-Type)</p>\n<blockquote>\n<p>跨域默认允许的请求方法(Method)</p>\n</blockquote>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>HEAD</li>\n</ul>\n<blockquote>\n<p>默认允许的发送请求内容类型(Content-Type)</p>\n</blockquote>\n<ul>\n<li>text/plain</li>\n<li>multipart/form-data</li>\n<li>application/x-www-form-urlencoded</li>\n</ul>\n<blockquote>\n<p>默认允许的请求头</p>\n</blockquote>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Content-Type</li>\n</ul>\n<blockquote>\n<p><a href=\"https://fetch.spec.whatwg.org/#http-extensions\">更多</a></p>\n</blockquote>\n<h2 id=\"常见跨域场景\"><a href=\"#常见跨域场景\" class=\"headerlink\" title=\"常见跨域场景\"></a>常见跨域场景</h2><p><img src=\"/img/kuayu.png\" alt=\"跨域\"></p>\n<h3 id=\"浪里行舟大佬的一些说明\"><a href=\"#浪里行舟大佬的一些说明\" class=\"headerlink\" title=\"浪里行舟大佬的一些说明\"></a><a href=\"https://github.com/ljianshu/Blog\">浪里行舟</a>大佬的一些说明</h3><p>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</p>\n<p>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。</p>\n<p>这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？</p>\n<p>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>1.利用&lt;script src=’***’&gt;可以跨域请求资源的原理<br>2.这种方式只能通过GET请求。<br>3.但是适配较广</p>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<ul>\n<li>前端<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span>请求<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> btn=<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"javascript\">        btn.onclick=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 创建一个script标签块</span></span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">let</span> frame = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;script&#x27;</span>);</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 设置src链接</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// http://localhost:3000/person为请求借口</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// ? 分隔符</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// callback=func传给后端的一个回调函数</span></span><br><span class=\"javascript\">                frame.src=<span class=\"hljs-string\">&#x27;http://localhost:3000/person?callback=func&#x27;</span>;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 添加到body内</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;body&#x27;</span>).append(frame);</span><br>        &#125;;<br><span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">res</span>)</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 后端成功收到请求后 会返回并执行 该函数 </span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(res);<span class=\"hljs-comment\">// 打印收到的数据</span></span><br>        &#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></div></td></tr></table></figure></li>\n<li>后端(koa)<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">...<br><span class=\"hljs-keyword\">let</span> data=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;data.json&#x27;</span>);<br>route.get(<span class=\"hljs-string\">&#x27;/person&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx) =&gt; &#123;<br>    newData = <span class=\"hljs-built_in\">JSON</span>.stringify(data);<br>    <span class=\"hljs-comment\">// 执行前端传递来的函数 并把数据作为参数传递</span><br>    ctx.body = <span class=\"hljs-string\">`func(<span class=\"hljs-subst\">$&#123;newData&#125;</span>)`</span>;<br>&#125;)<br>...<br></code></pre></div></td></tr></table></figure></li>\n<li>以上前端代码可以通过jQuery来写,jQuery有封装好的方法直接使用<h2 id=\"CROS\"><a href=\"#CROS\" class=\"headerlink\" title=\"CROS\"></a>CROS</h2><blockquote>\n<p>什么是CROS</p>\n</blockquote>\n</li>\n<li>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。—来自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\">MDN</a>。</li>\n</ul>\n<blockquote>\n<p>使用：</p>\n</blockquote>\n<ul>\n<li>通过在后端设置相应头信息来允许一些指定的域名可以访问。<blockquote>\n<p>代码</p>\n</blockquote>\n</li>\n<li>前端<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>send<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> btn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"javascript\">    btn.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br>        getData();<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> getData = <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">        fetch(<span class=\"hljs-string\">&#x27;http://localhost:3000/person&#x27;</span>, &#123;</span><br><span class=\"javascript\">            method: <span class=\"hljs-string\">&#x27;GET&#x27;</span></span><br>        &#125;)<br>            .then(<br>                (res) =&gt; res.json()<br>            )<br>            .then(<br>                (data) =&gt; &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(data);</span><br>                &#125;<br>            )<br>            .catch(<br>                (err) =&gt; &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(err);</span><br>                &#125;<br>            )<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li>\n<li>后端(koa)<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> cors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa2-cors&#x27;</span>);<br><span class=\"hljs-comment\">// 使用cors中间件</span><br>app.use(cors(&#123;<br>    <span class=\"hljs-comment\">// 允许get方法跨域请求</span><br>    allowMethods: [<span class=\"hljs-string\">&#x27;GET&#x27;</span>],<br>    <span class=\"hljs-comment\">// 在koa中不适用中间件 可以使用上下文对象来自己设置</span><br>    <span class=\"hljs-comment\">// ctx.set(...);</span><br>&#125;));<br><br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Node-nginx做代理\"><a href=\"#Node-nginx做代理\" class=\"headerlink\" title=\"Node/nginx做代理\"></a>Node/nginx做代理</h2><p>因为服务器之间不用遵守同源策略,所以可以通过node或者nginx来转发请求，实现跨域</p>\n<blockquote>\n<p>步骤</p>\n</blockquote>\n<ul>\n<li>接受客户端请求 。</li>\n<li>将请求 转发给服务器。</li>\n<li>拿到服务器 响应 数据。</li>\n<li>将 响应 转发给客户端。<br><img src=\"/img/daili.png\" alt=\"流程\"><h2 id=\"其他方式尝试后更新\"><a href=\"#其他方式尝试后更新\" class=\"headerlink\" title=\"其他方式尝试后更新\"></a>其他方式尝试后更新</h2></li>\n</ul>\n","site":{"data":{}},"wordcount":3718,"excerpt":"<h1 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h1><p>跨域是浏览器为了保证服务数据的安全性，而存在的一种限制请求的一种机制，只存在于浏览器。</p>\n<p>主要工作原理就是根据有没有遵循同源策略(当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域)，来判断一个请求是否跨域，然后决定是否允许这个请求。</p>\n<h1 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h1><blockquote>\n<p>概念</p>\n</blockquote>\n<ul>\n<li>1.同源策略（Same origin policy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</li>\n<li>2.同源指，发请求和接受请求的两端处在：同一协议，同一域名，同一端口下。","more":"<img src=\"/img/tongyuan.png\" alt=\"一个域名的组成\"><blockquote>\n<p>作用</p>\n</blockquote>\n</li>\n<li>同源策略是浏览器的行为，是为了保护本地数据不被JavaScript代码获取回来的数据污染，因此拦截的是客户端发出的请求回来的数据接收，即请求发送了，服务器响应了，但是无法被浏览器接收。</li>\n</ul>\n<blockquote>\n<p>同源策略会限制的内容</p>\n</blockquote>\n<ul>\n<li>Cookie、LocalStorage、IndexedDB 等存储性内容</li>\n<li>DOM 节点</li>\n<li>AJAX 请求发送后，结果被浏览器拦截了</li>\n</ul>\n<blockquote>\n<p>同源策略下有几个允许跨域加载资源的方式:</p>\n</blockquote>\n<ul>\n<li>&lt;img src=’***’&gt;</li>\n<li>&lt;link href=’***’&gt;</li>\n<li>&lt;script src=’***’&gt;<h1 id=\"跨域限制\"><a href=\"#跨域限制\" class=\"headerlink\" title=\"跨域限制\"></a>跨域限制</h1>跨域不仅对请求有限制，对请求的方法和发送的内容格式，也会有限制；除过默认允许的一些外，其他的非默认请求方法和内容格式都需要在服务端进行设置允许这些对应的可以访问。</li>\n</ul>\n<p>因为非默认的请求方法和内容类型会在正式发送该请求前，发送一个预请求，来判断服务端是否允许该请求的访问，之后再发送该请求，如果服务端允许就正常获取响应内容，不允许就会报错，如下图。<br><img src=\"/img/cros2.png\" alt=\"不允许put访问\"></p>\n<p>服务端允许后允许访问，可以看到会有2个请求，第一就是预请求，第二个是正式发送的请求，预请求的方法是会显示OPTIONS。<br><img src=\"/img/cros3.png\" alt=\"允许访问\"><br><img src=\"/img/cros4.png\" alt=\"允许访问\"></p>\n<p>设置代码(以node为例)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa&#x27;</span>);<br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> koa();<br><br>app.use(<span class=\"hljs-keyword\">async</span> (ctx) =&gt; &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(ctx.request.url);<br>    ctx.response.status=<span class=\"hljs-number\">200</span>;<br>    <span class=\"hljs-comment\">// 设置允许跨域</span><br>    ctx.response.set(&#123;<br>        <span class=\"hljs-comment\">// 允许跨域访问的域名</span><br>        <span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>: <span class=\"hljs-string\">&#x27;*&#x27;</span>,<br>        <span class=\"hljs-comment\">// 当请求方法是跨域默认请求之外的请求时，服务器需要设置对应的允许的请求方法</span><br>        <span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>:<span class=\"hljs-string\">&quot;PUT&quot;</span>,<br>        <span class=\"hljs-comment\">// 允许该请求在第一次请求成功后的1000秒内，不需要再发送预请求</span><br>        <span class=\"hljs-string\">&quot;Access-Control-Max-Age&quot;</span>:<span class=\"hljs-string\">&quot;1000&quot;</span><br>    &#125;)<br>    ctx.response.body = <span class=\"hljs-string\">&#x27;hi&#x27;</span>;<br>&#125;);<br><br>app.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;ok&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>列举一下跨域默认不需要预请求就可以发送的方法(Mthods)和内容类型(Content-Type)</p>\n<blockquote>\n<p>跨域默认允许的请求方法(Method)</p>\n</blockquote>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>HEAD</li>\n</ul>\n<blockquote>\n<p>默认允许的发送请求内容类型(Content-Type)</p>\n</blockquote>\n<ul>\n<li>text/plain</li>\n<li>multipart/form-data</li>\n<li>application/x-www-form-urlencoded</li>\n</ul>\n<blockquote>\n<p>默认允许的请求头</p>\n</blockquote>\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Content-Type</li>\n</ul>\n<blockquote>\n<p><a href=\"https://fetch.spec.whatwg.org/#http-extensions\">更多</a></p>\n</blockquote>\n<h2 id=\"常见跨域场景\"><a href=\"#常见跨域场景\" class=\"headerlink\" title=\"常见跨域场景\"></a>常见跨域场景</h2><p><img src=\"/img/kuayu.png\" alt=\"跨域\"></p>\n<h3 id=\"浪里行舟大佬的一些说明\"><a href=\"#浪里行舟大佬的一些说明\" class=\"headerlink\" title=\"浪里行舟大佬的一些说明\"></a><a href=\"https://github.com/ljianshu/Blog\">浪里行舟</a>大佬的一些说明</h3><p>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</p>\n<p>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。</p>\n<p>这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？</p>\n<p>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>1.利用&lt;script src=’***’&gt;可以跨域请求资源的原理<br>2.这种方式只能通过GET请求。<br>3.但是适配较广</p>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<ul>\n<li>前端<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;btn&#x27;</span>&gt;</span>请求<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> btn=<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"javascript\">        btn.onclick=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 创建一个script标签块</span></span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">let</span> frame = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;script&#x27;</span>);</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 设置src链接</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// http://localhost:3000/person为请求借口</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// ? 分隔符</span></span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// callback=func传给后端的一个回调函数</span></span><br><span class=\"javascript\">                frame.src=<span class=\"hljs-string\">&#x27;http://localhost:3000/person?callback=func&#x27;</span>;</span><br><span class=\"javascript\">                <span class=\"hljs-comment\">// 添加到body内</span></span><br><span class=\"javascript\">                <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;body&#x27;</span>).append(frame);</span><br>        &#125;;<br><span class=\"javascript\">        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">res</span>)</span>&#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 后端成功收到请求后 会返回并执行 该函数 </span></span><br><span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(res);<span class=\"hljs-comment\">// 打印收到的数据</span></span><br>        &#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure></li>\n<li>后端(koa)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">...<br><span class=\"hljs-keyword\">let</span> data=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;data.json&#x27;</span>);<br>route.get(<span class=\"hljs-string\">&#x27;/person&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx) =&gt; &#123;<br>    newData = <span class=\"hljs-built_in\">JSON</span>.stringify(data);<br>    <span class=\"hljs-comment\">// 执行前端传递来的函数 并把数据作为参数传递</span><br>    ctx.body = <span class=\"hljs-string\">`func(<span class=\"hljs-subst\">$&#123;newData&#125;</span>)`</span>;<br>&#125;)<br>...<br></code></pre></td></tr></table></figure></li>\n<li>以上前端代码可以通过jQuery来写,jQuery有封装好的方法直接使用<h2 id=\"CROS\"><a href=\"#CROS\" class=\"headerlink\" title=\"CROS\"></a>CROS</h2><blockquote>\n<p>什么是CROS</p>\n</blockquote>\n</li>\n<li>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。—来自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\">MDN</a>。</li>\n</ul>\n<blockquote>\n<p>使用：</p>\n</blockquote>\n<ul>\n<li>通过在后端设置相应头信息来允许一些指定的域名可以访问。<blockquote>\n<p>代码</p>\n</blockquote>\n</li>\n<li>前端<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;btn&quot;</span>&gt;</span>send<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> btn = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#btn&#x27;</span>);</span><br><span class=\"javascript\">    btn.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span><br>        getData();<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> getData = <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">        fetch(<span class=\"hljs-string\">&#x27;http://localhost:3000/person&#x27;</span>, &#123;</span><br><span class=\"javascript\">            method: <span class=\"hljs-string\">&#x27;GET&#x27;</span></span><br>        &#125;)<br>            .then(<br>                (res) =&gt; res.json()<br>            )<br>            .then(<br>                (data) =&gt; &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(data);</span><br>                &#125;<br>            )<br>            .catch(<br>                (err) =&gt; &#123;<br><span class=\"javascript\">                    <span class=\"hljs-built_in\">console</span>.log(err);</span><br>                &#125;<br>            )<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n<li>后端(koa)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> cors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa2-cors&#x27;</span>);<br><span class=\"hljs-comment\">// 使用cors中间件</span><br>app.use(cors(&#123;<br>    <span class=\"hljs-comment\">// 允许get方法跨域请求</span><br>    allowMethods: [<span class=\"hljs-string\">&#x27;GET&#x27;</span>],<br>    <span class=\"hljs-comment\">// 在koa中不适用中间件 可以使用上下文对象来自己设置</span><br>    <span class=\"hljs-comment\">// ctx.set(...);</span><br>&#125;));<br><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Node-nginx做代理\"><a href=\"#Node-nginx做代理\" class=\"headerlink\" title=\"Node/nginx做代理\"></a>Node/nginx做代理</h2><p>因为服务器之间不用遵守同源策略,所以可以通过node或者nginx来转发请求，实现跨域</p>\n<blockquote>\n<p>步骤</p>\n</blockquote>\n<ul>\n<li>接受客户端请求 。</li>\n<li>将请求 转发给服务器。</li>\n<li>拿到服务器 响应 数据。</li>\n<li>将 响应 转发给客户端。<br><img src=\"/img/daili.png\" alt=\"流程\"><h2 id=\"其他方式尝试后更新\"><a href=\"#其他方式尝试后更新\" class=\"headerlink\" title=\"其他方式尝试后更新\"></a>其他方式尝试后更新</h2></li>\n</ul>"},{"title":"初探Travis","abbrlink":55766,"date":"2020-05-12T08:41:41.000Z","_content":"# 初探cicd\n> 什么是cicd？\n- cicd是持续集成和持续交付的缩写，全称为continuous integration & continuous delivery\n\n> cicd怎么做\n- 通过一些工具，来进行\n\n>这些工具做了哪些事\n- 将我们平时手动去跑的测试、打包、部署，全部通过前期配置，然后在以后的开发中，自动去执行，解放双手\n- 举个vue项目的例子：\n    ```shell\n    # 本地：对项目打包，（正规点还要跑一边测试）这些都没问题后，然后推送到远程仓库\n    npm run build -> git push \n    # 服务器：进入对应的目录，然后拉去仓库的代码\n    git pull\n    ```\n- 如果做好cicd的流程后，只需要git push代码就好，剩下的都会在集成工具里去根据配置文件，去自动执行，这个过程哪一步出现问题都会有对应的log文件\n<!-- more -->\n\n>目的\n- 将繁琐的体力劳动变化自动化，把精力集中在项目核心逻辑开发中，从而间接影响项目的质量\n# Travis\n- 和github搭配比较好的cicd工具\n- 同样的工具还有Gitlab、Jenkins等\n\n# 工作流程\n>ci：集成部分\n- 用github登陆Travis，指定我们需要进行集成的仓库\n- 在该仓库的项目中添加.travis.yml配置文件\n- 在配置文件中，配置当我们git push后，需要travis去做的事\n\n>cd：部署部分\n- 这里使用ssh密钥免密登陆服务器的原理，来让travis可以免密登陆指定服务器\n- 关于ssh登陆的流程和原理：在要登录服务器的机器生成一对秘钥，一公一私，公钥保存到目标服务器，私钥只能自己本地知道；然后当ssh连接目标服务器时，服务器会返回一段用公钥加密的字符串；客户端收到后，用私钥解密；然后在使用私钥加密该字符串，在发送给服务器，服务器使用公钥解密后，确认是自己之前传递的内容，确认成功进行连接\n- 关于ssh：安全外科协议，使用非对称加密来进行身份验证\n\n# 本地操作\n>项目\n- 创建项目，git初始化，添加.travis.yml文件\n- git push到github\n- 登陆travis，在设置页中，找到对应的仓库，并打开后面的按钮，如图\n![travis](/img/jottings/travis.png)\n    ```YAML\n    # .travis.yml\n    # 指定项目语言\n    language: node_js\n    # 指定版本\n    node_js:\n    - 10\n    # 指定分支：这样只有该分支发生变动后，才会进行操作\n    branches: \n    only:\n    - serverBackup\n    # 安装依赖：如果需要\n    # install:\n    # - npm install\n    # 运行脚本\n    script:\n    - echo \"test\"\n    ```\n>说明\n- travis的配置文件是YAML语法\n- travis的执行阶段（生命周期）分为：（括号的为可选阶段）\n- before_install -> install ->before_script -> script -> aftersuccess or afterfailure ->(before_deploy->deploy->after_deploy)->after_script\n- 安装依赖前->安装依赖->执行脚本之前->执行脚本->脚本执行成功后 或者 执行失败后->（部署前->部署->部署后）->脚本执行完成后\n- travis每一阶段执行成功后才继续下一步，如果失败立即停止\n\n\n# 服务端操作\n### Linux添加新用户/赋予root权限\n- 这里不要换成root创建，用普通用户使用sudo命令添加新用户即可\n```shell\n# 添加用户\nsudo adduser 用户名\n# 按提示操作\n# 给该用户赋予root权限\n# 编辑该文件\nvim /etc/sudoers\n# 在改行注释下添加\n# User privilege specification\n用户名 ALL=(ALL:ALL) ALL\n```\n\n### 生成SSH秘钥\n```shell\n# 回到根目录\n[~/home]:cd ~\n[~]:ssh-keygen -t rsa #-t意思选择生成的加密算法，RSA为非对称加密\n```\n\n### 设置该文件权限为700\n```shell\n# -rw------- (600)      只有拥有者有读写权限。\n# -rw-r--r-- (644)      只有拥有者有读写权限；而属组用户和其他用户只有读权限。\n# -rwx------ (700)     只有拥有者有读、写、执行权限。\n# -rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。\n# -rwx--x--x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。\n# -rw-rw-rw- (666)   所有用户都有文件读、写权限。\n# -rwxrwxrwx (777)  所有用户都有读、写、执行权限。\n# 通过chmod命令可以修改权限\n# -----------\n# 设置该目录为700\n[~]:chmod 700 ~/.ssh/\n# 设置该目录下文件为600\nchmod 600 ~/.ssh/*\n# 查看当前目录下文件信息 可以看到所有文件都属于travis\n[~]:ls -al\n# 添加生成公钥为受信列表\n[~]:cd .ssh/\n# 如果没有authorized_keys先创建\n[~]:touch authorized_keys\n[~/.ssh]:cat id_rsa.pub >> authorized_keys # cat打印文件内容\n```\n\n### 配置连接\n```shell\n# 创建一个配置文件\n[~/.ssh]:vim config\n# 内容如下\n# 测试\n[~/.ssh]:ssh test\n# 查看是否有known_hosts 有即成功 之后再登陆时就不需要yes\n[~/.ssh]:ls\n```\n```YAML\n<!-- 文件内容 -->\nHost test\nHostName 99.99.99.99(你的服务器ip)\n#登陆的用户名\nUser travis\nIdentitiesOnly yes\n#登陆使用的密钥\nIdentityFile ~/.ssh/id_rsa\n```\n\n### 安装travis\ntravis是ruby写的，所以需要安装ruby环境\n\n>安装rvm：ruby的版本管理工具，类似npx\n```shell\n# 切回root\n# 安装公钥\n[root@~]gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\n# 会提示安装gpg2 安装就好\n# 安装rvm\n[root@~]:curl -sSL https://get.rvm.io | bash -s stable\n# 安装会提示需要添加用户到rvm分组\n# 添加用户到新分组且不离开当前所在组\n# usermod -G groupA---离开当前所在组，到目标组\n[root@~]:usermod -a -G 分组名 待添加用户\n# 执行重新执行刚修改的初始化文件\n[root@~]:source /etc/profile.d/rvm.sh\n# 查看rvm版本\n[root@~]:rvm --version\n# rvm 1.29.10 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]\n```\n>安装ruby和gem---ruby的包管理工具\n```shell\n[root@~]:rvm install ruby\n# 安装完成后查看版本\n[root@~]:ruby --version\n[root@~]:gem -v\n# 查看gem当前镜像\n[root@~]:gem sources -l # https://rubygems.org/\n# 切换为国内的镜像源\n[root@~]:gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\n```\n>安装travis命令行工具\n```shell\n[root@~]:gem install travis\n# 切到travis 执行travis\n[travis@~]:travis\n# 提示yes\n# 进入项目目录，开始添加秘钥到仓库\n[travis@~/home/xxx]:travis login\n# 输入github登陆名和密码\n# 添加秘钥到仓库的配置文件中\n[travis@~/home/xxx]:travis encrypt-file ~/.ssh/id_rsa  --add\n# 打印配置文件看到多了几行\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_ff98517d7fe4_key -iv $encrypted_ff98517d7fe4_iv\n  -in id_rsa.enc -out ~\\/.ssh/id_rsa -d\n#   这里需要更改一下把out~后的\\去掉，不然会报错这是traviscli的bug\n```\n>添加目标服务器\n- 这里就在配置文件中添加一下目标服务器ip，和登陆后要进行的操作即可\n```YAML\nlanguage: node_js\nnode_js:\n- 10\nbranches: \nonly:\n- serverBackup\nscript:\n- echo \"test\"\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_5ec1b68e2d5b_key -iv $encrypted_5ec1b68e2d5b_iv\n  -in id_rsa.enc -out ~/.ssh/id_rsa -d\naddons:\nssh_known_hosts:\n- ip地址或者域名\nafter_success:\n- chmod 600 ~/.ssh/id_rsa\n- ssh publish@shuaxinjs.cn -o StrictHostKeyChecking=no 'cd /home/publish/data/shuaxindiary.github.io && git pull'\n```\n\n\n# 参考链接\n- [gem国内镜像](https://gems.ruby-china.com/)\n- [阮一峰-cicd](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html)\n- [travis自动化部署github项目到server](https://zhaosaisai.com/blog/2019/travis%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2github%E9%A1%B9%E7%9B%AE%E5%88%B0server.html)\n\n","source":"_posts/技术笔记/初探Travis.md","raw":"---\ntitle: 初探Travis\ncategory:\n  - 技术笔记\ntag:\n  - 踩坑\n  - Travis\n  - Linux\n  - CICD\nabbrlink: 55766\ndate: 2020-05-12 16:41:41\n---\n# 初探cicd\n> 什么是cicd？\n- cicd是持续集成和持续交付的缩写，全称为continuous integration & continuous delivery\n\n> cicd怎么做\n- 通过一些工具，来进行\n\n>这些工具做了哪些事\n- 将我们平时手动去跑的测试、打包、部署，全部通过前期配置，然后在以后的开发中，自动去执行，解放双手\n- 举个vue项目的例子：\n    ```shell\n    # 本地：对项目打包，（正规点还要跑一边测试）这些都没问题后，然后推送到远程仓库\n    npm run build -> git push \n    # 服务器：进入对应的目录，然后拉去仓库的代码\n    git pull\n    ```\n- 如果做好cicd的流程后，只需要git push代码就好，剩下的都会在集成工具里去根据配置文件，去自动执行，这个过程哪一步出现问题都会有对应的log文件\n<!-- more -->\n\n>目的\n- 将繁琐的体力劳动变化自动化，把精力集中在项目核心逻辑开发中，从而间接影响项目的质量\n# Travis\n- 和github搭配比较好的cicd工具\n- 同样的工具还有Gitlab、Jenkins等\n\n# 工作流程\n>ci：集成部分\n- 用github登陆Travis，指定我们需要进行集成的仓库\n- 在该仓库的项目中添加.travis.yml配置文件\n- 在配置文件中，配置当我们git push后，需要travis去做的事\n\n>cd：部署部分\n- 这里使用ssh密钥免密登陆服务器的原理，来让travis可以免密登陆指定服务器\n- 关于ssh登陆的流程和原理：在要登录服务器的机器生成一对秘钥，一公一私，公钥保存到目标服务器，私钥只能自己本地知道；然后当ssh连接目标服务器时，服务器会返回一段用公钥加密的字符串；客户端收到后，用私钥解密；然后在使用私钥加密该字符串，在发送给服务器，服务器使用公钥解密后，确认是自己之前传递的内容，确认成功进行连接\n- 关于ssh：安全外科协议，使用非对称加密来进行身份验证\n\n# 本地操作\n>项目\n- 创建项目，git初始化，添加.travis.yml文件\n- git push到github\n- 登陆travis，在设置页中，找到对应的仓库，并打开后面的按钮，如图\n![travis](/img/jottings/travis.png)\n    ```YAML\n    # .travis.yml\n    # 指定项目语言\n    language: node_js\n    # 指定版本\n    node_js:\n    - 10\n    # 指定分支：这样只有该分支发生变动后，才会进行操作\n    branches: \n    only:\n    - serverBackup\n    # 安装依赖：如果需要\n    # install:\n    # - npm install\n    # 运行脚本\n    script:\n    - echo \"test\"\n    ```\n>说明\n- travis的配置文件是YAML语法\n- travis的执行阶段（生命周期）分为：（括号的为可选阶段）\n- before_install -> install ->before_script -> script -> aftersuccess or afterfailure ->(before_deploy->deploy->after_deploy)->after_script\n- 安装依赖前->安装依赖->执行脚本之前->执行脚本->脚本执行成功后 或者 执行失败后->（部署前->部署->部署后）->脚本执行完成后\n- travis每一阶段执行成功后才继续下一步，如果失败立即停止\n\n\n# 服务端操作\n### Linux添加新用户/赋予root权限\n- 这里不要换成root创建，用普通用户使用sudo命令添加新用户即可\n```shell\n# 添加用户\nsudo adduser 用户名\n# 按提示操作\n# 给该用户赋予root权限\n# 编辑该文件\nvim /etc/sudoers\n# 在改行注释下添加\n# User privilege specification\n用户名 ALL=(ALL:ALL) ALL\n```\n\n### 生成SSH秘钥\n```shell\n# 回到根目录\n[~/home]:cd ~\n[~]:ssh-keygen -t rsa #-t意思选择生成的加密算法，RSA为非对称加密\n```\n\n### 设置该文件权限为700\n```shell\n# -rw------- (600)      只有拥有者有读写权限。\n# -rw-r--r-- (644)      只有拥有者有读写权限；而属组用户和其他用户只有读权限。\n# -rwx------ (700)     只有拥有者有读、写、执行权限。\n# -rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。\n# -rwx--x--x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。\n# -rw-rw-rw- (666)   所有用户都有文件读、写权限。\n# -rwxrwxrwx (777)  所有用户都有读、写、执行权限。\n# 通过chmod命令可以修改权限\n# -----------\n# 设置该目录为700\n[~]:chmod 700 ~/.ssh/\n# 设置该目录下文件为600\nchmod 600 ~/.ssh/*\n# 查看当前目录下文件信息 可以看到所有文件都属于travis\n[~]:ls -al\n# 添加生成公钥为受信列表\n[~]:cd .ssh/\n# 如果没有authorized_keys先创建\n[~]:touch authorized_keys\n[~/.ssh]:cat id_rsa.pub >> authorized_keys # cat打印文件内容\n```\n\n### 配置连接\n```shell\n# 创建一个配置文件\n[~/.ssh]:vim config\n# 内容如下\n# 测试\n[~/.ssh]:ssh test\n# 查看是否有known_hosts 有即成功 之后再登陆时就不需要yes\n[~/.ssh]:ls\n```\n```YAML\n<!-- 文件内容 -->\nHost test\nHostName 99.99.99.99(你的服务器ip)\n#登陆的用户名\nUser travis\nIdentitiesOnly yes\n#登陆使用的密钥\nIdentityFile ~/.ssh/id_rsa\n```\n\n### 安装travis\ntravis是ruby写的，所以需要安装ruby环境\n\n>安装rvm：ruby的版本管理工具，类似npx\n```shell\n# 切回root\n# 安装公钥\n[root@~]gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\n# 会提示安装gpg2 安装就好\n# 安装rvm\n[root@~]:curl -sSL https://get.rvm.io | bash -s stable\n# 安装会提示需要添加用户到rvm分组\n# 添加用户到新分组且不离开当前所在组\n# usermod -G groupA---离开当前所在组，到目标组\n[root@~]:usermod -a -G 分组名 待添加用户\n# 执行重新执行刚修改的初始化文件\n[root@~]:source /etc/profile.d/rvm.sh\n# 查看rvm版本\n[root@~]:rvm --version\n# rvm 1.29.10 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]\n```\n>安装ruby和gem---ruby的包管理工具\n```shell\n[root@~]:rvm install ruby\n# 安装完成后查看版本\n[root@~]:ruby --version\n[root@~]:gem -v\n# 查看gem当前镜像\n[root@~]:gem sources -l # https://rubygems.org/\n# 切换为国内的镜像源\n[root@~]:gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\n```\n>安装travis命令行工具\n```shell\n[root@~]:gem install travis\n# 切到travis 执行travis\n[travis@~]:travis\n# 提示yes\n# 进入项目目录，开始添加秘钥到仓库\n[travis@~/home/xxx]:travis login\n# 输入github登陆名和密码\n# 添加秘钥到仓库的配置文件中\n[travis@~/home/xxx]:travis encrypt-file ~/.ssh/id_rsa  --add\n# 打印配置文件看到多了几行\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_ff98517d7fe4_key -iv $encrypted_ff98517d7fe4_iv\n  -in id_rsa.enc -out ~\\/.ssh/id_rsa -d\n#   这里需要更改一下把out~后的\\去掉，不然会报错这是traviscli的bug\n```\n>添加目标服务器\n- 这里就在配置文件中添加一下目标服务器ip，和登陆后要进行的操作即可\n```YAML\nlanguage: node_js\nnode_js:\n- 10\nbranches: \nonly:\n- serverBackup\nscript:\n- echo \"test\"\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_5ec1b68e2d5b_key -iv $encrypted_5ec1b68e2d5b_iv\n  -in id_rsa.enc -out ~/.ssh/id_rsa -d\naddons:\nssh_known_hosts:\n- ip地址或者域名\nafter_success:\n- chmod 600 ~/.ssh/id_rsa\n- ssh publish@shuaxinjs.cn -o StrictHostKeyChecking=no 'cd /home/publish/data/shuaxindiary.github.io && git pull'\n```\n\n\n# 参考链接\n- [gem国内镜像](https://gems.ruby-china.com/)\n- [阮一峰-cicd](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html)\n- [travis自动化部署github项目到server](https://zhaosaisai.com/blog/2019/travis%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2github%E9%A1%B9%E7%9B%AE%E5%88%B0server.html)\n\n","slug":"技术笔记/初探Travis","published":1,"updated":"2021-12-31T12:01:59.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1f002sj7jfgf060g0m","content":"<h1 id=\"初探cicd\"><a href=\"#初探cicd\" class=\"headerlink\" title=\"初探cicd\"></a>初探cicd</h1><blockquote>\n<p>什么是cicd？</p>\n</blockquote>\n<ul>\n<li>cicd是持续集成和持续交付的缩写，全称为continuous integration &amp; continuous delivery</li>\n</ul>\n<blockquote>\n<p>cicd怎么做</p>\n</blockquote>\n<ul>\n<li>通过一些工具，来进行</li>\n</ul>\n<blockquote>\n<p>这些工具做了哪些事</p>\n</blockquote>\n<ul>\n<li>将我们平时手动去跑的测试、打包、部署，全部通过前期配置，然后在以后的开发中，自动去执行，解放双手</li>\n<li>举个vue项目的例子：  <figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 本地：对项目打包，（正规点还要跑一边测试）这些都没问题后，然后推送到远程仓库</span><br>npm run build -&gt; git push <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 服务器：进入对应的目录，然后拉去仓库的代码</span><br>git pull<br></code></pre></div></td></tr></table></figure></li>\n<li>如果做好cicd的流程后，只需要git push代码就好，剩下的都会在集成工具里去根据配置文件，去自动执行，这个过程哪一步出现问题都会有对应的log文件<a id=\"more\"></a>\n\n</li>\n</ul>\n<blockquote>\n<p>目的</p>\n</blockquote>\n<ul>\n<li>将繁琐的体力劳动变化自动化，把精力集中在项目核心逻辑开发中，从而间接影响项目的质量<h1 id=\"Travis\"><a href=\"#Travis\" class=\"headerlink\" title=\"Travis\"></a>Travis</h1></li>\n<li>和github搭配比较好的cicd工具</li>\n<li>同样的工具还有Gitlab、Jenkins等</li>\n</ul>\n<h1 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h1><blockquote>\n<p>ci：集成部分</p>\n</blockquote>\n<ul>\n<li>用github登陆Travis，指定我们需要进行集成的仓库</li>\n<li>在该仓库的项目中添加.travis.yml配置文件</li>\n<li>在配置文件中，配置当我们git push后，需要travis去做的事</li>\n</ul>\n<blockquote>\n<p>cd：部署部分</p>\n</blockquote>\n<ul>\n<li>这里使用ssh密钥免密登陆服务器的原理，来让travis可以免密登陆指定服务器</li>\n<li>关于ssh登陆的流程和原理：在要登录服务器的机器生成一对秘钥，一公一私，公钥保存到目标服务器，私钥只能自己本地知道；然后当ssh连接目标服务器时，服务器会返回一段用公钥加密的字符串；客户端收到后，用私钥解密；然后在使用私钥加密该字符串，在发送给服务器，服务器使用公钥解密后，确认是自己之前传递的内容，确认成功进行连接</li>\n<li>关于ssh：安全外科协议，使用非对称加密来进行身份验证</li>\n</ul>\n<h1 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h1><blockquote>\n<p>项目</p>\n</blockquote>\n<ul>\n<li>创建项目，git初始化，添加.travis.yml文件</li>\n<li>git push到github</li>\n<li>登陆travis，在设置页中，找到对应的仓库，并打开后面的按钮，如图<br><img src=\"/img/jottings/travis.png\" alt=\"travis\">  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs YAML\"><span class=\"hljs-comment\"># .travis.yml</span><br><span class=\"hljs-comment\"># 指定项目语言</span><br><span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">node_js</span><br><span class=\"hljs-comment\"># 指定版本</span><br><span class=\"hljs-attr\">node_js:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">10</span><br><span class=\"hljs-comment\"># 指定分支：这样只有该分支发生变动后，才会进行操作</span><br><span class=\"hljs-attr\">branches:</span> <br><span class=\"hljs-attr\">only:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">serverBackup</span><br><span class=\"hljs-comment\"># 安装依赖：如果需要</span><br><span class=\"hljs-comment\"># install:</span><br><span class=\"hljs-comment\"># - npm install</span><br><span class=\"hljs-comment\"># 运行脚本</span><br><span class=\"hljs-attr\">script:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;test&quot;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>说明</p>\n</blockquote>\n</li>\n<li>travis的配置文件是YAML语法</li>\n<li>travis的执行阶段（生命周期）分为：（括号的为可选阶段）</li>\n<li>before_install -&gt; install -&gt;before_script -&gt; script -&gt; aftersuccess or afterfailure -&gt;(before_deploy-&gt;deploy-&gt;after_deploy)-&gt;after_script</li>\n<li>安装依赖前-&gt;安装依赖-&gt;执行脚本之前-&gt;执行脚本-&gt;脚本执行成功后 或者 执行失败后-&gt;（部署前-&gt;部署-&gt;部署后）-&gt;脚本执行完成后</li>\n<li>travis每一阶段执行成功后才继续下一步，如果失败立即停止</li>\n</ul>\n<h1 id=\"服务端操作\"><a href=\"#服务端操作\" class=\"headerlink\" title=\"服务端操作\"></a>服务端操作</h1><h3 id=\"Linux添加新用户-赋予root权限\"><a href=\"#Linux添加新用户-赋予root权限\" class=\"headerlink\" title=\"Linux添加新用户/赋予root权限\"></a>Linux添加新用户/赋予root权限</h3><ul>\n<li>这里不要换成root创建，用普通用户使用sudo命令添加新用户即可<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加用户</span><br>sudo adduser 用户名<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 按提示操作</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 给该用户赋予root权限</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 编辑该文件</span><br>vim /etc/sudoers<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 在改行注释下添加</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> User privilege specification</span><br>用户名 ALL=(ALL:ALL) ALL<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"生成SSH秘钥\"><a href=\"#生成SSH秘钥\" class=\"headerlink\" title=\"生成SSH秘钥\"></a>生成SSH秘钥</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 回到根目录</span><br>[~/home]:cd ~<br>[~]:ssh-keygen -t rsa #-t意思选择生成的加密算法，RSA为非对称加密<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"设置该文件权限为700\"><a href=\"#设置该文件权限为700\" class=\"headerlink\" title=\"设置该文件权限为700\"></a>设置该文件权限为700</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rw------- (600)      只有拥有者有读写权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rw-r--r-- (644)      只有拥有者有读写权限；而属组用户和其他用户只有读权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rwx------ (700)     只有拥有者有读、写、执行权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rwx--x--x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rw-rw-rw- (666)   所有用户都有文件读、写权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rwxrwxrwx (777)  所有用户都有读、写、执行权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 通过chmod命令可以修改权限</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -----------</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 设置该目录为700</span><br>[~]:chmod 700 ~/.ssh/<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 设置该目录下文件为600</span><br>chmod 600 ~/.ssh/*<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前目录下文件信息 可以看到所有文件都属于travis</span><br>[~]:ls -al<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加生成公钥为受信列表</span><br>[~]:cd .ssh/<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 如果没有authorized_keys先创建</span><br>[~]:touch authorized_keys<br>[~/.ssh]:cat id_rsa.pub &gt;&gt; authorized_keys # cat打印文件内容<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"配置连接\"><a href=\"#配置连接\" class=\"headerlink\" title=\"配置连接\"></a>配置连接</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建一个配置文件</span><br>[~/.ssh]:vim config<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 内容如下</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 测试</span><br>[~/.ssh]:ssh test<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看是否有known_hosts 有即成功 之后再登陆时就不需要yes</span><br>[~/.ssh]:ls<br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs YAML\"><span class=\"hljs-string\">&lt;!--</span> <span class=\"hljs-string\">文件内容</span> <span class=\"hljs-string\">--&gt;</span><br><span class=\"hljs-string\">Host</span> <span class=\"hljs-string\">test</span><br><span class=\"hljs-string\">HostName</span> <span class=\"hljs-number\">99.99</span><span class=\"hljs-number\">.99</span><span class=\"hljs-number\">.99</span><span class=\"hljs-string\">(你的服务器ip)</span><br><span class=\"hljs-comment\">#登陆的用户名</span><br><span class=\"hljs-string\">User</span> <span class=\"hljs-string\">travis</span><br><span class=\"hljs-string\">IdentitiesOnly</span> <span class=\"hljs-literal\">yes</span><br><span class=\"hljs-comment\">#登陆使用的密钥</span><br><span class=\"hljs-string\">IdentityFile</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"安装travis\"><a href=\"#安装travis\" class=\"headerlink\" title=\"安装travis\"></a>安装travis</h3><p>travis是ruby写的，所以需要安装ruby环境</p>\n<blockquote>\n<p>安装rvm：ruby的版本管理工具，类似npx</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切回root</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装公钥</span><br>[root@~]gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 会提示安装gpg2 安装就好</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装rvm</span><br>[root@~]:curl -sSL https://get.rvm.io | bash -s stable<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装会提示需要添加用户到rvm分组</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加用户到新分组且不离开当前所在组</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> usermod -G groupA---离开当前所在组，到目标组</span><br>[root@~]:usermod -a -G 分组名 待添加用户<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 执行重新执行刚修改的初始化文件</span><br>[root@~]:source /etc/profile.d/rvm.sh<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看rvm版本</span><br>[root@~]:rvm --version<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> rvm 1.29.10 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>安装ruby和gem—ruby的包管理工具</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@~]:rvm install ruby<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装完成后查看版本</span><br>[root@~]:ruby --version<br>[root@~]:gem -v<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看gem当前镜像</span><br>[root@~]:gem sources -l # https://rubygems.org/<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切换为国内的镜像源</span><br>[root@~]:gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>安装travis命令行工具</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\">[root@~]:gem install travis<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切到travis 执行travis</span><br>[travis@~]:travis<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 提示yes</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 进入项目目录，开始添加秘钥到仓库</span><br>[travis@~/home/xxx]:travis login<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 输入github登陆名和密码</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加秘钥到仓库的配置文件中</span><br>[travis@~/home/xxx]:travis encrypt-file ~/.ssh/id_rsa  --add<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 打印配置文件看到多了几行</span><br>before_install:<br>- openssl aes-256-cbc -K $encrypted_ff98517d7fe4_key -iv $encrypted_ff98517d7fe4_iv<br>  -in id_rsa.enc -out ~\\/.ssh/id_rsa -d<br><span class=\"hljs-meta\">#</span><span class=\"bash\">   这里需要更改一下把out~后的\\去掉，不然会报错这是traviscli的bug</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>添加目标服务器</p>\n</blockquote>\n<ul>\n<li>这里就在配置文件中添加一下目标服务器ip，和登陆后要进行的操作即可<figure class=\"highlight yaml\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs YAML\"><span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">node_js</span><br><span class=\"hljs-attr\">node_js:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">10</span><br><span class=\"hljs-attr\">branches:</span> <br><span class=\"hljs-attr\">only:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">serverBackup</span><br><span class=\"hljs-attr\">script:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;test&quot;</span><br><span class=\"hljs-attr\">before_install:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">openssl</span> <span class=\"hljs-string\">aes-256-cbc</span> <span class=\"hljs-string\">-K</span> <span class=\"hljs-string\">$encrypted_5ec1b68e2d5b_key</span> <span class=\"hljs-string\">-iv</span> <span class=\"hljs-string\">$encrypted_5ec1b68e2d5b_iv</span><br>  <span class=\"hljs-string\">-in</span> <span class=\"hljs-string\">id_rsa.enc</span> <span class=\"hljs-string\">-out</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span> <span class=\"hljs-string\">-d</span><br><span class=\"hljs-attr\">addons:</span><br><span class=\"hljs-attr\">ssh_known_hosts:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ip地址或者域名</span><br><span class=\"hljs-attr\">after_success:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">chmod</span> <span class=\"hljs-number\">600</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ssh</span> <span class=\"hljs-string\">publish@shuaxinjs.cn</span> <span class=\"hljs-string\">-o</span> <span class=\"hljs-string\">StrictHostKeyChecking=no</span> <span class=\"hljs-string\">&#x27;cd /home/publish/data/shuaxindiary.github.io &amp;&amp; git pull&#x27;</span><br></code></pre></div></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://gems.ruby-china.com/\">gem国内镜像</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\">阮一峰-cicd</a></li>\n<li><a href=\"https://zhaosaisai.com/blog/2019/travis%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2github%E9%A1%B9%E7%9B%AE%E5%88%B0server.html\">travis自动化部署github项目到server</a></li>\n</ul>\n","site":{"data":{}},"wordcount":4048,"excerpt":"<h1 id=\"初探cicd\"><a href=\"#初探cicd\" class=\"headerlink\" title=\"初探cicd\"></a>初探cicd</h1><blockquote>\n<p>什么是cicd？</p>\n</blockquote>\n<ul>\n<li>cicd是持续集成和持续交付的缩写，全称为continuous integration &amp; continuous delivery</li>\n</ul>\n<blockquote>\n<p>cicd怎么做</p>\n</blockquote>\n<ul>\n<li>通过一些工具，来进行</li>\n</ul>\n<blockquote>\n<p>这些工具做了哪些事</p>\n</blockquote>\n<ul>\n<li>将我们平时手动去跑的测试、打包、部署，全部通过前期配置，然后在以后的开发中，自动去执行，解放双手</li>\n<li>举个vue项目的例子：  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 本地：对项目打包，（正规点还要跑一边测试）这些都没问题后，然后推送到远程仓库</span><br>npm run build -&gt; git push <br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 服务器：进入对应的目录，然后拉去仓库的代码</span><br>git pull<br></code></pre></td></tr></table></figure></li>\n<li>如果做好cicd的流程后，只需要git push代码就好，剩下的都会在集成工具里去根据配置文件，去自动执行，这个过程哪一步出现问题都会有对应的log文件","more":"</li>\n</ul>\n<blockquote>\n<p>目的</p>\n</blockquote>\n<ul>\n<li>将繁琐的体力劳动变化自动化，把精力集中在项目核心逻辑开发中，从而间接影响项目的质量<h1 id=\"Travis\"><a href=\"#Travis\" class=\"headerlink\" title=\"Travis\"></a>Travis</h1></li>\n<li>和github搭配比较好的cicd工具</li>\n<li>同样的工具还有Gitlab、Jenkins等</li>\n</ul>\n<h1 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h1><blockquote>\n<p>ci：集成部分</p>\n</blockquote>\n<ul>\n<li>用github登陆Travis，指定我们需要进行集成的仓库</li>\n<li>在该仓库的项目中添加.travis.yml配置文件</li>\n<li>在配置文件中，配置当我们git push后，需要travis去做的事</li>\n</ul>\n<blockquote>\n<p>cd：部署部分</p>\n</blockquote>\n<ul>\n<li>这里使用ssh密钥免密登陆服务器的原理，来让travis可以免密登陆指定服务器</li>\n<li>关于ssh登陆的流程和原理：在要登录服务器的机器生成一对秘钥，一公一私，公钥保存到目标服务器，私钥只能自己本地知道；然后当ssh连接目标服务器时，服务器会返回一段用公钥加密的字符串；客户端收到后，用私钥解密；然后在使用私钥加密该字符串，在发送给服务器，服务器使用公钥解密后，确认是自己之前传递的内容，确认成功进行连接</li>\n<li>关于ssh：安全外科协议，使用非对称加密来进行身份验证</li>\n</ul>\n<h1 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h1><blockquote>\n<p>项目</p>\n</blockquote>\n<ul>\n<li>创建项目，git初始化，添加.travis.yml文件</li>\n<li>git push到github</li>\n<li>登陆travis，在设置页中，找到对应的仓库，并打开后面的按钮，如图<br><img src=\"/img/jottings/travis.png\" alt=\"travis\">  <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs YAML\"><span class=\"hljs-comment\"># .travis.yml</span><br><span class=\"hljs-comment\"># 指定项目语言</span><br><span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">node_js</span><br><span class=\"hljs-comment\"># 指定版本</span><br><span class=\"hljs-attr\">node_js:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">10</span><br><span class=\"hljs-comment\"># 指定分支：这样只有该分支发生变动后，才会进行操作</span><br><span class=\"hljs-attr\">branches:</span> <br><span class=\"hljs-attr\">only:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">serverBackup</span><br><span class=\"hljs-comment\"># 安装依赖：如果需要</span><br><span class=\"hljs-comment\"># install:</span><br><span class=\"hljs-comment\"># - npm install</span><br><span class=\"hljs-comment\"># 运行脚本</span><br><span class=\"hljs-attr\">script:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;test&quot;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>说明</p>\n</blockquote>\n</li>\n<li>travis的配置文件是YAML语法</li>\n<li>travis的执行阶段（生命周期）分为：（括号的为可选阶段）</li>\n<li>before_install -&gt; install -&gt;before_script -&gt; script -&gt; aftersuccess or afterfailure -&gt;(before_deploy-&gt;deploy-&gt;after_deploy)-&gt;after_script</li>\n<li>安装依赖前-&gt;安装依赖-&gt;执行脚本之前-&gt;执行脚本-&gt;脚本执行成功后 或者 执行失败后-&gt;（部署前-&gt;部署-&gt;部署后）-&gt;脚本执行完成后</li>\n<li>travis每一阶段执行成功后才继续下一步，如果失败立即停止</li>\n</ul>\n<h1 id=\"服务端操作\"><a href=\"#服务端操作\" class=\"headerlink\" title=\"服务端操作\"></a>服务端操作</h1><h3 id=\"Linux添加新用户-赋予root权限\"><a href=\"#Linux添加新用户-赋予root权限\" class=\"headerlink\" title=\"Linux添加新用户/赋予root权限\"></a>Linux添加新用户/赋予root权限</h3><ul>\n<li>这里不要换成root创建，用普通用户使用sudo命令添加新用户即可<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加用户</span><br>sudo adduser 用户名<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 按提示操作</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 给该用户赋予root权限</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 编辑该文件</span><br>vim /etc/sudoers<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 在改行注释下添加</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> User privilege specification</span><br>用户名 ALL=(ALL:ALL) ALL<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"生成SSH秘钥\"><a href=\"#生成SSH秘钥\" class=\"headerlink\" title=\"生成SSH秘钥\"></a>生成SSH秘钥</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 回到根目录</span><br>[~/home]:cd ~<br>[~]:ssh-keygen -t rsa #-t意思选择生成的加密算法，RSA为非对称加密<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置该文件权限为700\"><a href=\"#设置该文件权限为700\" class=\"headerlink\" title=\"设置该文件权限为700\"></a>设置该文件权限为700</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rw------- (600)      只有拥有者有读写权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rw-r--r-- (644)      只有拥有者有读写权限；而属组用户和其他用户只有读权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rwx------ (700)     只有拥有者有读、写、执行权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rwx--x--x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rw-rw-rw- (666)   所有用户都有文件读、写权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -rwxrwxrwx (777)  所有用户都有读、写、执行权限。</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 通过chmod命令可以修改权限</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> -----------</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 设置该目录为700</span><br>[~]:chmod 700 ~/.ssh/<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 设置该目录下文件为600</span><br>chmod 600 ~/.ssh/*<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看当前目录下文件信息 可以看到所有文件都属于travis</span><br>[~]:ls -al<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加生成公钥为受信列表</span><br>[~]:cd .ssh/<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 如果没有authorized_keys先创建</span><br>[~]:touch authorized_keys<br>[~/.ssh]:cat id_rsa.pub &gt;&gt; authorized_keys # cat打印文件内容<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置连接\"><a href=\"#配置连接\" class=\"headerlink\" title=\"配置连接\"></a>配置连接</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 创建一个配置文件</span><br>[~/.ssh]:vim config<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 内容如下</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 测试</span><br>[~/.ssh]:ssh test<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看是否有known_hosts 有即成功 之后再登陆时就不需要yes</span><br>[~/.ssh]:ls<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs YAML\"><span class=\"hljs-string\">&lt;!--</span> <span class=\"hljs-string\">文件内容</span> <span class=\"hljs-string\">--&gt;</span><br><span class=\"hljs-string\">Host</span> <span class=\"hljs-string\">test</span><br><span class=\"hljs-string\">HostName</span> <span class=\"hljs-number\">99.99</span><span class=\"hljs-number\">.99</span><span class=\"hljs-number\">.99</span><span class=\"hljs-string\">(你的服务器ip)</span><br><span class=\"hljs-comment\">#登陆的用户名</span><br><span class=\"hljs-string\">User</span> <span class=\"hljs-string\">travis</span><br><span class=\"hljs-string\">IdentitiesOnly</span> <span class=\"hljs-literal\">yes</span><br><span class=\"hljs-comment\">#登陆使用的密钥</span><br><span class=\"hljs-string\">IdentityFile</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装travis\"><a href=\"#安装travis\" class=\"headerlink\" title=\"安装travis\"></a>安装travis</h3><p>travis是ruby写的，所以需要安装ruby环境</p>\n<blockquote>\n<p>安装rvm：ruby的版本管理工具，类似npx</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切回root</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装公钥</span><br>[root@~]gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 会提示安装gpg2 安装就好</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装rvm</span><br>[root@~]:curl -sSL https://get.rvm.io | bash -s stable<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装会提示需要添加用户到rvm分组</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加用户到新分组且不离开当前所在组</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> usermod -G groupA---离开当前所在组，到目标组</span><br>[root@~]:usermod -a -G 分组名 待添加用户<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 执行重新执行刚修改的初始化文件</span><br>[root@~]:source /etc/profile.d/rvm.sh<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看rvm版本</span><br>[root@~]:rvm --version<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> rvm 1.29.10 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>安装ruby和gem—ruby的包管理工具</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@~]:rvm install ruby<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装完成后查看版本</span><br>[root@~]:ruby --version<br>[root@~]:gem -v<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 查看gem当前镜像</span><br>[root@~]:gem sources -l # https://rubygems.org/<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切换为国内的镜像源</span><br>[root@~]:gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>安装travis命令行工具</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[root@~]:gem install travis<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 切到travis 执行travis</span><br>[travis@~]:travis<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 提示yes</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 进入项目目录，开始添加秘钥到仓库</span><br>[travis@~/home/xxx]:travis login<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 输入github登陆名和密码</span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加秘钥到仓库的配置文件中</span><br>[travis@~/home/xxx]:travis encrypt-file ~/.ssh/id_rsa  --add<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 打印配置文件看到多了几行</span><br>before_install:<br>- openssl aes-256-cbc -K $encrypted_ff98517d7fe4_key -iv $encrypted_ff98517d7fe4_iv<br>  -in id_rsa.enc -out ~\\/.ssh/id_rsa -d<br><span class=\"hljs-meta\">#</span><span class=\"bash\">   这里需要更改一下把out~后的\\去掉，不然会报错这是traviscli的bug</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>添加目标服务器</p>\n</blockquote>\n<ul>\n<li>这里就在配置文件中添加一下目标服务器ip，和登陆后要进行的操作即可<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs YAML\"><span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">node_js</span><br><span class=\"hljs-attr\">node_js:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">10</span><br><span class=\"hljs-attr\">branches:</span> <br><span class=\"hljs-attr\">only:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">serverBackup</span><br><span class=\"hljs-attr\">script:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">echo</span> <span class=\"hljs-string\">&quot;test&quot;</span><br><span class=\"hljs-attr\">before_install:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">openssl</span> <span class=\"hljs-string\">aes-256-cbc</span> <span class=\"hljs-string\">-K</span> <span class=\"hljs-string\">$encrypted_5ec1b68e2d5b_key</span> <span class=\"hljs-string\">-iv</span> <span class=\"hljs-string\">$encrypted_5ec1b68e2d5b_iv</span><br>  <span class=\"hljs-string\">-in</span> <span class=\"hljs-string\">id_rsa.enc</span> <span class=\"hljs-string\">-out</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span> <span class=\"hljs-string\">-d</span><br><span class=\"hljs-attr\">addons:</span><br><span class=\"hljs-attr\">ssh_known_hosts:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ip地址或者域名</span><br><span class=\"hljs-attr\">after_success:</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">chmod</span> <span class=\"hljs-number\">600</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ssh</span> <span class=\"hljs-string\">publish@shuaxinjs.cn</span> <span class=\"hljs-string\">-o</span> <span class=\"hljs-string\">StrictHostKeyChecking=no</span> <span class=\"hljs-string\">&#x27;cd /home/publish/data/shuaxindiary.github.io &amp;&amp; git pull&#x27;</span><br></code></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://gems.ruby-china.com/\">gem国内镜像</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\">阮一峰-cicd</a></li>\n<li><a href=\"https://zhaosaisai.com/blog/2019/travis%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2github%E9%A1%B9%E7%9B%AE%E5%88%B0server.html\">travis自动化部署github项目到server</a></li>\n</ul>"},{"title":"关于浏览器存储","abbrlink":61604,"date":"2019-12-08T06:26:10.000Z","_content":"\n# 前言\n之前为了应付上课的作业，要做一个包含有留言板功能的官网。其实仅仅就HTML+CSS+JS做类似功能倒也不是很复杂，但是自己想着怎么可以做出线上那样，如果数据库存储留言的表有数据，当加载留言板页面时就会显示这些数据这样的效果。于是就想到了浏览器缓存，来模拟这个效果，所以顺带的去补了补浏览器存储相关的知识。来记录一下。\n<!-- more -->\n\n--------------\n\n# 使用浏览器缓存实现一个伪留言板效果\nHTML+CSS+JS基础三件套！\n\n## 页面如下,不是重点一笔带过\n![页面](/img/liuyan.png)\n\n## 分析\n>功能\n- 支持留言\n- 可以及时的在留言后，显示在页面上\n- 每次加载该页面时，如果之前有留言数据，及时渲染数据到页面\n\n>重点思路\n- 获取浏览内容和触发条件很简单，通过绑定点击事件然后获取输入框值即可\n- 关于留言数据渲染:使用js提供的创建dom和插入dom的api将存储起来的留言数据渲染到页面即可\n- 关于存储留言：首先创建创建一个数组，在每一次留言后，存储每一条留言相关的数据，该数组提供渲染页面时的数据；其次就是在每次把留言存到数组时同时存储到localstrong里，来保证留言数据永久存储，在下一次打开页面时，也存在\n\n>代码实现\n- 封装Dom一系列操作,为了省事(jq也可以更省事！)\n```js\n// @param{dom:object,创建的dom}\n// @param{att:object要给dom设置的属性}\nclass Dom {\n    constructor(dom, ...rest) {\n        this.target = document.createElement(dom);\n        if (rest[0] instanceof Object) {\n            this.initDom(rest[0]);\n        }\n        if (typeof rest[0] === 'string') {\n            this.addText(rest[0]);\n        }\n        if (typeof rest[1] === 'string') {\n            this.addText(rest[1]);\n        }\n    }\n    // 初始化dom属性\n    initDom(atts) {\n        if (atts instanceof Object) {\n            for (let i in atts) {\n                this.target.setAttribute(i, atts[i]);\n            }\n        }\n    }\n    // 添加文本节点\n    addText(txt) {\n        let t = document.createTextNode(txt);\n        this.target.appendChild(t);\n    }\n    // 添加子节点\n    addChild(dom) {\n        this.target.appendChild(dom.target);\n    }\n}\n```\n- 获取用户留言，并存储该留言数据\n```html\n<body>\n    <textarea placeholder=\"留言\" id=\"context\"></textarea>\n    <button id=\"submit\" class=\"enter\">提交</button>\n</body>\n<script>\n    \n    // 获取提交按钮\n    let context=document.querySelector('#context');\n    // 存储留言数据的数组\n    let comment=[];\n    //添加新评论\n    submit.addEventListener('click', () => {\n        // 获取留言框\n        let submit=document.querySelector('#submit');\n        // 创建时间戳  图中看出 每一条留言要显示留言时间和内容\n        const d = new Date();\n        const now = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n        const time = `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        // 创建新评论信息\n        let obj = {\n            // 留言时间\n            time: `${now} ${time}`,\n            // 具体留言内容\n            text: context.value\n        };\n        // 存储当前评论到评论数组\n        comment.push(obj);\n        // 存储到评论数据到session  \n        // 键值对形式存储 值为string，所以转换对象为json格式存储\n        localStorage.setItem(comment.length, JSON.stringify(obj));\n        // 清空输入框\n        context.value = '';\n        // 渲染新添加评论到页面\n        initComment(comment);\n    });\n    // 卸载页面dom\n    let clear = function (targetDom) {\n        // 通过文档碎片API来卸载dom\n        let frag = document.createDocumentFragment(), child;\n        while (child = targetDom.children) {\n            if (child.length === 0) {\n                break;\n            }\n            frag.appendChild(child[0]);\n        }\n    }\n    // 渲染评论到页面\n    let initComment = function (arr) {\n        // 卸载上一次渲染的页面 \n        // 因为每次都是渲染当前comment数组的内容插入到页面中，所以插入前，需要删除上一次的页面下的留言相关信息\n        clear(list);\n        // 重新渲染评论到页面\n        for (let i = 0; i < arr.length; i++) {\n            let div = new Dom('div');\n            let h3 = new Dom('h3', arr[i].time);\n            // 把h3添加到div节点下\n            div.addChild(h3);\n            let p = new Dom('p');\n            let span = new Dom('span', arr[i].text);\n            p.addChild(span);\n            let button = new Dom('button', { class: 'reply' }, '回复');\n            p.addChild(button);\n            div.addChild(p);\n            list.appendChild(div.target);\n        }\n    };\n    // 初始化页面\n    // 判断localStorage中是否有数据 有就获取装入到commonent数组\n    // 这里转换是因为localstrong不是一个纯数据对象\n    let obj = JSON.parse(JSON.stringify(localStorage));\n    // 遍历localstrong数据装进comment\n    for (let i in obj) {\n        // 因为是json格式存储，这里需要转换成js对象\n        comment.push(JSON.parse(obj[i]));\n    }\n    initComment(comment);\n</script>\n```\n## [该demo源码](https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/js-%E6%9C%9F%E6%9C%AB%E4%BD%9C%E4%B8%9A)\n\n---------------------\n\n# localstrong\n是浏览器缓存的一种,可以F12打开chrome的  调试面板>application 查看\n![浏览器存储](/img/liuyan2.png)\n\n>特点\n- 存储空间为5M左右\n- 存储时间永久，除非手动删除\n- 仅在客户端使用\n- 页面可以直接读取(只读，如果要修改直接覆盖即可)\n- 键值对格存储\n- api操作友好\n\n>使用\n```js\n// 存储一条数据 第一个参数为{key:String| Number}\n// 第二个参数为要存储的值 {value:String} 存储对象的话，通过json转换一下来存储就好\nlocalStorage.setItem(1,'1');\n// 读取 参数为要读取数据的key\nlocalStorage.getItem(1)\n// 修改\nlocalStorage.setItem(1,'10');\n/**\n    删除\n        1.在调试面板鼠标点击删除\n        2.代码删除\n*/\n// 参数为 目标数据的key\nlocalStorage.removeItem(1);\n// 删除所有localStorage的数据\nlocalStorage.clear();\n```\n>使用场景\n- 静态资源一类都可\n\n\n\n# 其他存储\n## sessionstrong\n这个和localstrong一样，唯一不同的是数据存储的时间。当关闭页面或者浏览器后，数据自动清除。\n>特点\n- 和localstrong一样\n\n>使用\n- 和localstrong一样\n\n>使用场景\n- 存储当前用户的一些浏览足迹等，在同一URL地址下都可以使用。比如微博一类，当关闭或者退出后，自动释放。\n\n## cookie\n>使用\n```js\n//设置cookie\nfunction setCookie(name, value) {\n    if (!name || !value) return;\n    var Days = 30; //默认30天\n    var exp = new Date();\n    exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);\n    document.cookie = name + \"=\" + encodeURIComponent(value) + \";expires=\" + exp.toUTCString();\n}\n\n//获取cookie\nfunction getCookie(name) {\n    var arr = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]*)(;|$)\"));\n    if (arr != null) return decodeURIComponent(arr[2]);\n    return null;\n}\n\n//删除cookie\nfunction delCookie(name) {\n    var exp = new Date();\n    exp.setTime(exp.getTime() - 1);\n    var cval = getCookie(name);\n    if (!cval) document.cookie = name + \"=\" + cval + \";expires=\" + exp.toUTCString();\n}\n```\n\n>特点\n- 4kb大小\n- 参与客户端服务端之间数据交互\n- 设置时，需要提供过期时间\n- api不友好，需要自己封装\n\n>使用场景\n- 保存用户状态，实现身份认证等的操作\n\n>cookie算是另一种用途了，单独写笔记\n\n## 总结\n根据业务需要合理使用,可以结合使用,三者对比图如下\n![留言](/img/liuyan3.png)","source":"_posts/技术笔记/关于浏览器存储.md","raw":"---\ntitle: 关于浏览器存储\ncategory:\n  - 技术笔记\ntag:\n  - 前端\n  - 浏览器存储\nabbrlink: 61604\ndate: 2019-12-08 14:26:10\n---\n\n# 前言\n之前为了应付上课的作业，要做一个包含有留言板功能的官网。其实仅仅就HTML+CSS+JS做类似功能倒也不是很复杂，但是自己想着怎么可以做出线上那样，如果数据库存储留言的表有数据，当加载留言板页面时就会显示这些数据这样的效果。于是就想到了浏览器缓存，来模拟这个效果，所以顺带的去补了补浏览器存储相关的知识。来记录一下。\n<!-- more -->\n\n--------------\n\n# 使用浏览器缓存实现一个伪留言板效果\nHTML+CSS+JS基础三件套！\n\n## 页面如下,不是重点一笔带过\n![页面](/img/liuyan.png)\n\n## 分析\n>功能\n- 支持留言\n- 可以及时的在留言后，显示在页面上\n- 每次加载该页面时，如果之前有留言数据，及时渲染数据到页面\n\n>重点思路\n- 获取浏览内容和触发条件很简单，通过绑定点击事件然后获取输入框值即可\n- 关于留言数据渲染:使用js提供的创建dom和插入dom的api将存储起来的留言数据渲染到页面即可\n- 关于存储留言：首先创建创建一个数组，在每一次留言后，存储每一条留言相关的数据，该数组提供渲染页面时的数据；其次就是在每次把留言存到数组时同时存储到localstrong里，来保证留言数据永久存储，在下一次打开页面时，也存在\n\n>代码实现\n- 封装Dom一系列操作,为了省事(jq也可以更省事！)\n```js\n// @param{dom:object,创建的dom}\n// @param{att:object要给dom设置的属性}\nclass Dom {\n    constructor(dom, ...rest) {\n        this.target = document.createElement(dom);\n        if (rest[0] instanceof Object) {\n            this.initDom(rest[0]);\n        }\n        if (typeof rest[0] === 'string') {\n            this.addText(rest[0]);\n        }\n        if (typeof rest[1] === 'string') {\n            this.addText(rest[1]);\n        }\n    }\n    // 初始化dom属性\n    initDom(atts) {\n        if (atts instanceof Object) {\n            for (let i in atts) {\n                this.target.setAttribute(i, atts[i]);\n            }\n        }\n    }\n    // 添加文本节点\n    addText(txt) {\n        let t = document.createTextNode(txt);\n        this.target.appendChild(t);\n    }\n    // 添加子节点\n    addChild(dom) {\n        this.target.appendChild(dom.target);\n    }\n}\n```\n- 获取用户留言，并存储该留言数据\n```html\n<body>\n    <textarea placeholder=\"留言\" id=\"context\"></textarea>\n    <button id=\"submit\" class=\"enter\">提交</button>\n</body>\n<script>\n    \n    // 获取提交按钮\n    let context=document.querySelector('#context');\n    // 存储留言数据的数组\n    let comment=[];\n    //添加新评论\n    submit.addEventListener('click', () => {\n        // 获取留言框\n        let submit=document.querySelector('#submit');\n        // 创建时间戳  图中看出 每一条留言要显示留言时间和内容\n        const d = new Date();\n        const now = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n        const time = `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        // 创建新评论信息\n        let obj = {\n            // 留言时间\n            time: `${now} ${time}`,\n            // 具体留言内容\n            text: context.value\n        };\n        // 存储当前评论到评论数组\n        comment.push(obj);\n        // 存储到评论数据到session  \n        // 键值对形式存储 值为string，所以转换对象为json格式存储\n        localStorage.setItem(comment.length, JSON.stringify(obj));\n        // 清空输入框\n        context.value = '';\n        // 渲染新添加评论到页面\n        initComment(comment);\n    });\n    // 卸载页面dom\n    let clear = function (targetDom) {\n        // 通过文档碎片API来卸载dom\n        let frag = document.createDocumentFragment(), child;\n        while (child = targetDom.children) {\n            if (child.length === 0) {\n                break;\n            }\n            frag.appendChild(child[0]);\n        }\n    }\n    // 渲染评论到页面\n    let initComment = function (arr) {\n        // 卸载上一次渲染的页面 \n        // 因为每次都是渲染当前comment数组的内容插入到页面中，所以插入前，需要删除上一次的页面下的留言相关信息\n        clear(list);\n        // 重新渲染评论到页面\n        for (let i = 0; i < arr.length; i++) {\n            let div = new Dom('div');\n            let h3 = new Dom('h3', arr[i].time);\n            // 把h3添加到div节点下\n            div.addChild(h3);\n            let p = new Dom('p');\n            let span = new Dom('span', arr[i].text);\n            p.addChild(span);\n            let button = new Dom('button', { class: 'reply' }, '回复');\n            p.addChild(button);\n            div.addChild(p);\n            list.appendChild(div.target);\n        }\n    };\n    // 初始化页面\n    // 判断localStorage中是否有数据 有就获取装入到commonent数组\n    // 这里转换是因为localstrong不是一个纯数据对象\n    let obj = JSON.parse(JSON.stringify(localStorage));\n    // 遍历localstrong数据装进comment\n    for (let i in obj) {\n        // 因为是json格式存储，这里需要转换成js对象\n        comment.push(JSON.parse(obj[i]));\n    }\n    initComment(comment);\n</script>\n```\n## [该demo源码](https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/js-%E6%9C%9F%E6%9C%AB%E4%BD%9C%E4%B8%9A)\n\n---------------------\n\n# localstrong\n是浏览器缓存的一种,可以F12打开chrome的  调试面板>application 查看\n![浏览器存储](/img/liuyan2.png)\n\n>特点\n- 存储空间为5M左右\n- 存储时间永久，除非手动删除\n- 仅在客户端使用\n- 页面可以直接读取(只读，如果要修改直接覆盖即可)\n- 键值对格存储\n- api操作友好\n\n>使用\n```js\n// 存储一条数据 第一个参数为{key:String| Number}\n// 第二个参数为要存储的值 {value:String} 存储对象的话，通过json转换一下来存储就好\nlocalStorage.setItem(1,'1');\n// 读取 参数为要读取数据的key\nlocalStorage.getItem(1)\n// 修改\nlocalStorage.setItem(1,'10');\n/**\n    删除\n        1.在调试面板鼠标点击删除\n        2.代码删除\n*/\n// 参数为 目标数据的key\nlocalStorage.removeItem(1);\n// 删除所有localStorage的数据\nlocalStorage.clear();\n```\n>使用场景\n- 静态资源一类都可\n\n\n\n# 其他存储\n## sessionstrong\n这个和localstrong一样，唯一不同的是数据存储的时间。当关闭页面或者浏览器后，数据自动清除。\n>特点\n- 和localstrong一样\n\n>使用\n- 和localstrong一样\n\n>使用场景\n- 存储当前用户的一些浏览足迹等，在同一URL地址下都可以使用。比如微博一类，当关闭或者退出后，自动释放。\n\n## cookie\n>使用\n```js\n//设置cookie\nfunction setCookie(name, value) {\n    if (!name || !value) return;\n    var Days = 30; //默认30天\n    var exp = new Date();\n    exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);\n    document.cookie = name + \"=\" + encodeURIComponent(value) + \";expires=\" + exp.toUTCString();\n}\n\n//获取cookie\nfunction getCookie(name) {\n    var arr = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]*)(;|$)\"));\n    if (arr != null) return decodeURIComponent(arr[2]);\n    return null;\n}\n\n//删除cookie\nfunction delCookie(name) {\n    var exp = new Date();\n    exp.setTime(exp.getTime() - 1);\n    var cval = getCookie(name);\n    if (!cval) document.cookie = name + \"=\" + cval + \";expires=\" + exp.toUTCString();\n}\n```\n\n>特点\n- 4kb大小\n- 参与客户端服务端之间数据交互\n- 设置时，需要提供过期时间\n- api不友好，需要自己封装\n\n>使用场景\n- 保存用户状态，实现身份认证等的操作\n\n>cookie算是另一种用途了，单独写笔记\n\n## 总结\n根据业务需要合理使用,可以结合使用,三者对比图如下\n![留言](/img/liuyan3.png)","slug":"技术笔记/关于浏览器存储","published":1,"updated":"2021-12-31T12:01:59.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1f002vj7jf8ypgcdmp","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前为了应付上课的作业，要做一个包含有留言板功能的官网。其实仅仅就HTML+CSS+JS做类似功能倒也不是很复杂，但是自己想着怎么可以做出线上那样，如果数据库存储留言的表有数据，当加载留言板页面时就会显示这些数据这样的效果。于是就想到了浏览器缓存，来模拟这个效果，所以顺带的去补了补浏览器存储相关的知识。来记录一下。</p>\n<a id=\"more\"></a>\n\n<hr>\n<h1 id=\"使用浏览器缓存实现一个伪留言板效果\"><a href=\"#使用浏览器缓存实现一个伪留言板效果\" class=\"headerlink\" title=\"使用浏览器缓存实现一个伪留言板效果\"></a>使用浏览器缓存实现一个伪留言板效果</h1><p>HTML+CSS+JS基础三件套！</p>\n<h2 id=\"页面如下-不是重点一笔带过\"><a href=\"#页面如下-不是重点一笔带过\" class=\"headerlink\" title=\"页面如下,不是重点一笔带过\"></a>页面如下,不是重点一笔带过</h2><p><img src=\"/img/liuyan.png\" alt=\"页面\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>功能</p>\n</blockquote>\n<ul>\n<li>支持留言</li>\n<li>可以及时的在留言后，显示在页面上</li>\n<li>每次加载该页面时，如果之前有留言数据，及时渲染数据到页面</li>\n</ul>\n<blockquote>\n<p>重点思路</p>\n</blockquote>\n<ul>\n<li>获取浏览内容和触发条件很简单，通过绑定点击事件然后获取输入框值即可</li>\n<li>关于留言数据渲染:使用js提供的创建dom和插入dom的api将存储起来的留言数据渲染到页面即可</li>\n<li>关于存储留言：首先创建创建一个数组，在每一次留言后，存储每一条留言相关的数据，该数组提供渲染页面时的数据；其次就是在每次把留言存到数组时同时存储到localstrong里，来保证留言数据永久存储，在下一次打开页面时，也存在</li>\n</ul>\n<blockquote>\n<p>代码实现</p>\n</blockquote>\n<ul>\n<li>封装Dom一系列操作,为了省事(jq也可以更省事！)<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// @param&#123;dom:object,创建的dom&#125;</span><br><span class=\"hljs-comment\">// @param&#123;att:object要给dom设置的属性&#125;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dom</span> </span>&#123;<br>    <span class=\"hljs-keyword\">constructor</span>(dom, ...rest) &#123;<br>        <span class=\"hljs-built_in\">this</span>.target = <span class=\"hljs-built_in\">document</span>.createElement(dom);<br>        <span class=\"hljs-keyword\">if</span> (rest[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span>) &#123;<br>            <span class=\"hljs-built_in\">this</span>.initDom(rest[<span class=\"hljs-number\">0</span>]);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> rest[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;<br>            <span class=\"hljs-built_in\">this</span>.addText(rest[<span class=\"hljs-number\">0</span>]);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> rest[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;<br>            <span class=\"hljs-built_in\">this</span>.addText(rest[<span class=\"hljs-number\">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 初始化dom属性</span><br>    initDom(atts) &#123;<br>        <span class=\"hljs-keyword\">if</span> (atts <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span>) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> atts) &#123;<br>                <span class=\"hljs-built_in\">this</span>.target.setAttribute(i, atts[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 添加文本节点</span><br>    addText(txt) &#123;<br>        <span class=\"hljs-keyword\">let</span> t = <span class=\"hljs-built_in\">document</span>.createTextNode(txt);<br>        <span class=\"hljs-built_in\">this</span>.target.appendChild(t);<br>    &#125;<br>    <span class=\"hljs-comment\">// 添加子节点</span><br>    addChild(dom) &#123;<br>        <span class=\"hljs-built_in\">this</span>.target.appendChild(dom.target);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li>\n<li>获取用户留言，并存储该留言数据<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;留言&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;context&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;enter&quot;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br>    <br><span class=\"javascript\">    <span class=\"hljs-comment\">// 获取提交按钮</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> context=<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#context&#x27;</span>);</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 存储留言数据的数组</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> comment=[];</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">//添加新评论</span></span><br><span class=\"javascript\">    submit.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 获取留言框</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> submit=<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#submit&#x27;</span>);</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 创建时间戳  图中看出 每一条留言要显示留言时间和内容</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> now = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;d.getFullYear()&#125;</span>-<span class=\"hljs-subst\">$&#123;d.getMonth() + <span class=\"hljs-number\">1</span>&#125;</span>-<span class=\"hljs-subst\">$&#123;d.getDate()&#125;</span>`</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> time = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;d.getHours()&#125;</span>:<span class=\"hljs-subst\">$&#123;d.getMinutes()&#125;</span>:<span class=\"hljs-subst\">$&#123;d.getSeconds()&#125;</span>`</span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 创建新评论信息</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> obj = &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 留言时间</span></span><br><span class=\"javascript\">            time: <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;now&#125;</span> <span class=\"hljs-subst\">$&#123;time&#125;</span>`</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 具体留言内容</span></span><br>            text: context.value<br>        &#125;;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 存储当前评论到评论数组</span></span><br>        comment.push(obj);<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 存储到评论数据到session  </span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 键值对形式存储 值为string，所以转换对象为json格式存储</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">localStorage</span>.setItem(comment.length, <span class=\"hljs-built_in\">JSON</span>.stringify(obj));</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 清空输入框</span></span><br><span class=\"javascript\">        context.value = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 渲染新添加评论到页面</span></span><br>        initComment(comment);<br>    &#125;);<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 卸载页面dom</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> clear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">targetDom</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 通过文档碎片API来卸载dom</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> frag = <span class=\"hljs-built_in\">document</span>.createDocumentFragment(), child;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">while</span> (child = targetDom.children) &#123;</span><br>            if (child.length === 0) &#123;<br><span class=\"javascript\">                <span class=\"hljs-keyword\">break</span>;</span><br>            &#125;<br>            frag.appendChild(child[0]);<br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 渲染评论到页面</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> initComment = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arr</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 卸载上一次渲染的页面 </span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 因为每次都是渲染当前comment数组的内容插入到页面中，所以插入前，需要删除上一次的页面下的留言相关信息</span></span><br>        clear(list);<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 重新渲染评论到页面</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;div&#x27;</span>);</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> h3 = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;h3&#x27;</span>, arr[i].time);</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 把h3添加到div节点下</span></span><br>            div.addChild(h3);<br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> p = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;p&#x27;</span>);</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> span = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;span&#x27;</span>, arr[i].text);</span><br>            p.addChild(span);<br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> button = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;button&#x27;</span>, &#123; <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&#x27;reply&#x27;</span> &#125;, <span class=\"hljs-string\">&#x27;回复&#x27;</span>);</span><br>            p.addChild(button);<br>            div.addChild(p);<br>            list.appendChild(div.target);<br>        &#125;<br>    &#125;;<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 初始化页面</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 判断localStorage中是否有数据 有就获取装入到commonent数组</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 这里转换是因为localstrong不是一个纯数据对象</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(<span class=\"hljs-built_in\">localStorage</span>));</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 遍历localstrong数据装进comment</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> obj) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 因为是json格式存储，这里需要转换成js对象</span></span><br><span class=\"javascript\">        comment.push(<span class=\"hljs-built_in\">JSON</span>.parse(obj[i]));</span><br>    &#125;<br>    initComment(comment);<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"该demo源码\"><a href=\"#该demo源码\" class=\"headerlink\" title=\"该demo源码\"></a><a href=\"https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/js-%E6%9C%9F%E6%9C%AB%E4%BD%9C%E4%B8%9A\">该demo源码</a></h2></li>\n</ul>\n<hr>\n<h1 id=\"localstrong\"><a href=\"#localstrong\" class=\"headerlink\" title=\"localstrong\"></a>localstrong</h1><p>是浏览器缓存的一种,可以F12打开chrome的  调试面板&gt;application 查看<br><img src=\"/img/liuyan2.png\" alt=\"浏览器存储\"></p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ul>\n<li>存储空间为5M左右</li>\n<li>存储时间永久，除非手动删除</li>\n<li>仅在客户端使用</li>\n<li>页面可以直接读取(只读，如果要修改直接覆盖即可)</li>\n<li>键值对格存储</li>\n<li>api操作友好</li>\n</ul>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 存储一条数据 第一个参数为&#123;key:String| Number&#125;</span><br><span class=\"hljs-comment\">// 第二个参数为要存储的值 &#123;value:String&#125; 存储对象的话，通过json转换一下来存储就好</span><br><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br><span class=\"hljs-comment\">// 读取 参数为要读取数据的key</span><br><span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">// 修改</span><br><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;10&#x27;</span>);<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    删除</span><br><span class=\"hljs-comment\">        1.在调试面板鼠标点击删除</span><br><span class=\"hljs-comment\">        2.代码删除</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-comment\">// 参数为 目标数据的key</span><br><span class=\"hljs-built_in\">localStorage</span>.removeItem(<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-comment\">// 删除所有localStorage的数据</span><br><span class=\"hljs-built_in\">localStorage</span>.clear();<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>使用场景</p>\n</blockquote>\n<ul>\n<li>静态资源一类都可</li>\n</ul>\n<h1 id=\"其他存储\"><a href=\"#其他存储\" class=\"headerlink\" title=\"其他存储\"></a>其他存储</h1><h2 id=\"sessionstrong\"><a href=\"#sessionstrong\" class=\"headerlink\" title=\"sessionstrong\"></a>sessionstrong</h2><p>这个和localstrong一样，唯一不同的是数据存储的时间。当关闭页面或者浏览器后，数据自动清除。</p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ul>\n<li>和localstrong一样</li>\n</ul>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<ul>\n<li>和localstrong一样</li>\n</ul>\n<blockquote>\n<p>使用场景</p>\n</blockquote>\n<ul>\n<li>存储当前用户的一些浏览足迹等，在同一URL地址下都可以使用。比如微博一类，当关闭或者退出后，自动释放。</li>\n</ul>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><blockquote>\n<p>使用</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//设置cookie</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setCookie</span>(<span class=\"hljs-params\">name, value</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!name || !value) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">var</span> Days = <span class=\"hljs-number\">30</span>; <span class=\"hljs-comment\">//默认30天</span><br>    <span class=\"hljs-keyword\">var</span> exp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>    exp.setTime(exp.getTime() + Days * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>);<br>    <span class=\"hljs-built_in\">document</span>.cookie = name + <span class=\"hljs-string\">&quot;=&quot;</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(value) + <span class=\"hljs-string\">&quot;;expires=&quot;</span> + exp.toUTCString();<br>&#125;<br><br><span class=\"hljs-comment\">//获取cookie</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCookie</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-built_in\">document</span>.cookie.match(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&quot;(^| )&quot;</span> + name + <span class=\"hljs-string\">&quot;=([^;]*)(;|$)&quot;</span>));<br>    <span class=\"hljs-keyword\">if</span> (arr != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">decodeURIComponent</span>(arr[<span class=\"hljs-number\">2</span>]);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//删除cookie</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delCookie</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> exp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>    exp.setTime(exp.getTime() - <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> cval = getCookie(name);<br>    <span class=\"hljs-keyword\">if</span> (!cval) <span class=\"hljs-built_in\">document</span>.cookie = name + <span class=\"hljs-string\">&quot;=&quot;</span> + cval + <span class=\"hljs-string\">&quot;;expires=&quot;</span> + exp.toUTCString();<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ul>\n<li>4kb大小</li>\n<li>参与客户端服务端之间数据交互</li>\n<li>设置时，需要提供过期时间</li>\n<li>api不友好，需要自己封装</li>\n</ul>\n<blockquote>\n<p>使用场景</p>\n</blockquote>\n<ul>\n<li>保存用户状态，实现身份认证等的操作</li>\n</ul>\n<blockquote>\n<p>cookie算是另一种用途了，单独写笔记</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据业务需要合理使用,可以结合使用,三者对比图如下<br><img src=\"/img/liuyan3.png\" alt=\"留言\"></p>\n","site":{"data":{}},"wordcount":4807,"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前为了应付上课的作业，要做一个包含有留言板功能的官网。其实仅仅就HTML+CSS+JS做类似功能倒也不是很复杂，但是自己想着怎么可以做出线上那样，如果数据库存储留言的表有数据，当加载留言板页面时就会显示这些数据这样的效果。于是就想到了浏览器缓存，来模拟这个效果，所以顺带的去补了补浏览器存储相关的知识。来记录一下。</p>","more":"<hr>\n<h1 id=\"使用浏览器缓存实现一个伪留言板效果\"><a href=\"#使用浏览器缓存实现一个伪留言板效果\" class=\"headerlink\" title=\"使用浏览器缓存实现一个伪留言板效果\"></a>使用浏览器缓存实现一个伪留言板效果</h1><p>HTML+CSS+JS基础三件套！</p>\n<h2 id=\"页面如下-不是重点一笔带过\"><a href=\"#页面如下-不是重点一笔带过\" class=\"headerlink\" title=\"页面如下,不是重点一笔带过\"></a>页面如下,不是重点一笔带过</h2><p><img src=\"/img/liuyan.png\" alt=\"页面\"></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>功能</p>\n</blockquote>\n<ul>\n<li>支持留言</li>\n<li>可以及时的在留言后，显示在页面上</li>\n<li>每次加载该页面时，如果之前有留言数据，及时渲染数据到页面</li>\n</ul>\n<blockquote>\n<p>重点思路</p>\n</blockquote>\n<ul>\n<li>获取浏览内容和触发条件很简单，通过绑定点击事件然后获取输入框值即可</li>\n<li>关于留言数据渲染:使用js提供的创建dom和插入dom的api将存储起来的留言数据渲染到页面即可</li>\n<li>关于存储留言：首先创建创建一个数组，在每一次留言后，存储每一条留言相关的数据，该数组提供渲染页面时的数据；其次就是在每次把留言存到数组时同时存储到localstrong里，来保证留言数据永久存储，在下一次打开页面时，也存在</li>\n</ul>\n<blockquote>\n<p>代码实现</p>\n</blockquote>\n<ul>\n<li>封装Dom一系列操作,为了省事(jq也可以更省事！)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// @param&#123;dom:object,创建的dom&#125;</span><br><span class=\"hljs-comment\">// @param&#123;att:object要给dom设置的属性&#125;</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dom</span> </span>&#123;<br>    <span class=\"hljs-keyword\">constructor</span>(dom, ...rest) &#123;<br>        <span class=\"hljs-built_in\">this</span>.target = <span class=\"hljs-built_in\">document</span>.createElement(dom);<br>        <span class=\"hljs-keyword\">if</span> (rest[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span>) &#123;<br>            <span class=\"hljs-built_in\">this</span>.initDom(rest[<span class=\"hljs-number\">0</span>]);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> rest[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;<br>            <span class=\"hljs-built_in\">this</span>.addText(rest[<span class=\"hljs-number\">0</span>]);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> rest[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">&#x27;string&#x27;</span>) &#123;<br>            <span class=\"hljs-built_in\">this</span>.addText(rest[<span class=\"hljs-number\">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 初始化dom属性</span><br>    initDom(atts) &#123;<br>        <span class=\"hljs-keyword\">if</span> (atts <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span>) &#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> atts) &#123;<br>                <span class=\"hljs-built_in\">this</span>.target.setAttribute(i, atts[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 添加文本节点</span><br>    addText(txt) &#123;<br>        <span class=\"hljs-keyword\">let</span> t = <span class=\"hljs-built_in\">document</span>.createTextNode(txt);<br>        <span class=\"hljs-built_in\">this</span>.target.appendChild(t);<br>    &#125;<br>    <span class=\"hljs-comment\">// 添加子节点</span><br>    addChild(dom) &#123;<br>        <span class=\"hljs-built_in\">this</span>.target.appendChild(dom.target);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>获取用户留言，并存储该留言数据<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;留言&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;context&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;enter&quot;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br>    <br><span class=\"javascript\">    <span class=\"hljs-comment\">// 获取提交按钮</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> context=<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#context&#x27;</span>);</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 存储留言数据的数组</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> comment=[];</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">//添加新评论</span></span><br><span class=\"javascript\">    submit.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 获取留言框</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> submit=<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#submit&#x27;</span>);</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 创建时间戳  图中看出 每一条留言要显示留言时间和内容</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> now = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;d.getFullYear()&#125;</span>-<span class=\"hljs-subst\">$&#123;d.getMonth() + <span class=\"hljs-number\">1</span>&#125;</span>-<span class=\"hljs-subst\">$&#123;d.getDate()&#125;</span>`</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">const</span> time = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;d.getHours()&#125;</span>:<span class=\"hljs-subst\">$&#123;d.getMinutes()&#125;</span>:<span class=\"hljs-subst\">$&#123;d.getSeconds()&#125;</span>`</span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 创建新评论信息</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> obj = &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 留言时间</span></span><br><span class=\"javascript\">            time: <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;now&#125;</span> <span class=\"hljs-subst\">$&#123;time&#125;</span>`</span>,</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 具体留言内容</span></span><br>            text: context.value<br>        &#125;;<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 存储当前评论到评论数组</span></span><br>        comment.push(obj);<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 存储到评论数据到session  </span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 键值对形式存储 值为string，所以转换对象为json格式存储</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">localStorage</span>.setItem(comment.length, <span class=\"hljs-built_in\">JSON</span>.stringify(obj));</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 清空输入框</span></span><br><span class=\"javascript\">        context.value = <span class=\"hljs-string\">&#x27;&#x27;</span>;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 渲染新添加评论到页面</span></span><br>        initComment(comment);<br>    &#125;);<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 卸载页面dom</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> clear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">targetDom</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 通过文档碎片API来卸载dom</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> frag = <span class=\"hljs-built_in\">document</span>.createDocumentFragment(), child;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">while</span> (child = targetDom.children) &#123;</span><br>            if (child.length === 0) &#123;<br><span class=\"javascript\">                <span class=\"hljs-keyword\">break</span>;</span><br>            &#125;<br>            frag.appendChild(child[0]);<br>        &#125;<br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 渲染评论到页面</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> initComment = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arr</span>) </span>&#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 卸载上一次渲染的页面 </span></span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 因为每次都是渲染当前comment数组的内容插入到页面中，所以插入前，需要删除上一次的页面下的留言相关信息</span></span><br>        clear(list);<br><span class=\"javascript\">        <span class=\"hljs-comment\">// 重新渲染评论到页面</span></span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;div&#x27;</span>);</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> h3 = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;h3&#x27;</span>, arr[i].time);</span><br><span class=\"javascript\">            <span class=\"hljs-comment\">// 把h3添加到div节点下</span></span><br>            div.addChild(h3);<br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> p = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;p&#x27;</span>);</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> span = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;span&#x27;</span>, arr[i].text);</span><br>            p.addChild(span);<br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> button = <span class=\"hljs-keyword\">new</span> Dom(<span class=\"hljs-string\">&#x27;button&#x27;</span>, &#123; <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">&#x27;reply&#x27;</span> &#125;, <span class=\"hljs-string\">&#x27;回复&#x27;</span>);</span><br>            p.addChild(button);<br>            div.addChild(p);<br>            list.appendChild(div.target);<br>        &#125;<br>    &#125;;<br><span class=\"javascript\">    <span class=\"hljs-comment\">// 初始化页面</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 判断localStorage中是否有数据 有就获取装入到commonent数组</span></span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 这里转换是因为localstrong不是一个纯数据对象</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(<span class=\"hljs-built_in\">localStorage</span>));</span><br><span class=\"javascript\">    <span class=\"hljs-comment\">// 遍历localstrong数据装进comment</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> obj) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-comment\">// 因为是json格式存储，这里需要转换成js对象</span></span><br><span class=\"javascript\">        comment.push(<span class=\"hljs-built_in\">JSON</span>.parse(obj[i]));</span><br>    &#125;<br>    initComment(comment);<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"该demo源码\"><a href=\"#该demo源码\" class=\"headerlink\" title=\"该demo源码\"></a><a href=\"https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/js-%E6%9C%9F%E6%9C%AB%E4%BD%9C%E4%B8%9A\">该demo源码</a></h2></li>\n</ul>\n<hr>\n<h1 id=\"localstrong\"><a href=\"#localstrong\" class=\"headerlink\" title=\"localstrong\"></a>localstrong</h1><p>是浏览器缓存的一种,可以F12打开chrome的  调试面板&gt;application 查看<br><img src=\"/img/liuyan2.png\" alt=\"浏览器存储\"></p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ul>\n<li>存储空间为5M左右</li>\n<li>存储时间永久，除非手动删除</li>\n<li>仅在客户端使用</li>\n<li>页面可以直接读取(只读，如果要修改直接覆盖即可)</li>\n<li>键值对格存储</li>\n<li>api操作友好</li>\n</ul>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 存储一条数据 第一个参数为&#123;key:String| Number&#125;</span><br><span class=\"hljs-comment\">// 第二个参数为要存储的值 &#123;value:String&#125; 存储对象的话，通过json转换一下来存储就好</span><br><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>);<br><span class=\"hljs-comment\">// 读取 参数为要读取数据的key</span><br><span class=\"hljs-built_in\">localStorage</span>.getItem(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">// 修改</span><br><span class=\"hljs-built_in\">localStorage</span>.setItem(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;10&#x27;</span>);<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    删除</span><br><span class=\"hljs-comment\">        1.在调试面板鼠标点击删除</span><br><span class=\"hljs-comment\">        2.代码删除</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-comment\">// 参数为 目标数据的key</span><br><span class=\"hljs-built_in\">localStorage</span>.removeItem(<span class=\"hljs-number\">1</span>);<br><span class=\"hljs-comment\">// 删除所有localStorage的数据</span><br><span class=\"hljs-built_in\">localStorage</span>.clear();<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>使用场景</p>\n</blockquote>\n<ul>\n<li>静态资源一类都可</li>\n</ul>\n<h1 id=\"其他存储\"><a href=\"#其他存储\" class=\"headerlink\" title=\"其他存储\"></a>其他存储</h1><h2 id=\"sessionstrong\"><a href=\"#sessionstrong\" class=\"headerlink\" title=\"sessionstrong\"></a>sessionstrong</h2><p>这个和localstrong一样，唯一不同的是数据存储的时间。当关闭页面或者浏览器后，数据自动清除。</p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ul>\n<li>和localstrong一样</li>\n</ul>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<ul>\n<li>和localstrong一样</li>\n</ul>\n<blockquote>\n<p>使用场景</p>\n</blockquote>\n<ul>\n<li>存储当前用户的一些浏览足迹等，在同一URL地址下都可以使用。比如微博一类，当关闭或者退出后，自动释放。</li>\n</ul>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><blockquote>\n<p>使用</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//设置cookie</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setCookie</span>(<span class=\"hljs-params\">name, value</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!name || !value) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-keyword\">var</span> Days = <span class=\"hljs-number\">30</span>; <span class=\"hljs-comment\">//默认30天</span><br>    <span class=\"hljs-keyword\">var</span> exp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>    exp.setTime(exp.getTime() + Days * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>);<br>    <span class=\"hljs-built_in\">document</span>.cookie = name + <span class=\"hljs-string\">&quot;=&quot;</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(value) + <span class=\"hljs-string\">&quot;;expires=&quot;</span> + exp.toUTCString();<br>&#125;<br><br><span class=\"hljs-comment\">//获取cookie</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCookie</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-built_in\">document</span>.cookie.match(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&quot;(^| )&quot;</span> + name + <span class=\"hljs-string\">&quot;=([^;]*)(;|$)&quot;</span>));<br>    <span class=\"hljs-keyword\">if</span> (arr != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">decodeURIComponent</span>(arr[<span class=\"hljs-number\">2</span>]);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//删除cookie</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delCookie</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> exp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<br>    exp.setTime(exp.getTime() - <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> cval = getCookie(name);<br>    <span class=\"hljs-keyword\">if</span> (!cval) <span class=\"hljs-built_in\">document</span>.cookie = name + <span class=\"hljs-string\">&quot;=&quot;</span> + cval + <span class=\"hljs-string\">&quot;;expires=&quot;</span> + exp.toUTCString();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ul>\n<li>4kb大小</li>\n<li>参与客户端服务端之间数据交互</li>\n<li>设置时，需要提供过期时间</li>\n<li>api不友好，需要自己封装</li>\n</ul>\n<blockquote>\n<p>使用场景</p>\n</blockquote>\n<ul>\n<li>保存用户状态，实现身份认证等的操作</li>\n</ul>\n<blockquote>\n<p>cookie算是另一种用途了，单独写笔记</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据业务需要合理使用,可以结合使用,三者对比图如下<br><img src=\"/img/liuyan3.png\" alt=\"留言\"></p>"},{"title":"可视化图表踩坑记录","date":"2020-11-19T11:39:07.000Z","_content":"\n# 开头\n\n这周开发了一个粉丝数据可视化的模块，第一次这么“深度”的使用了下市面比较知名的2个可视化库，记录下一些坑和收货\n\n<!-- more -->\n\n# 坑\n\n- Vue中使用echarts map不渲染\n- Highcharts 17错误\n- Highcharts挂载dom，v-if无效\n\n# 收货\n\n- 封装echarts中国地图组件\n- 封装highcharts气泡图组件\n\n# 正文\n\n# 基本概念\n- 两者使用语法差不多，很多配置项名称也类似，即使一样概念也很相似\n- 基本概念参考[echarts说明](https://echarts.apache.org/zh/tutorial.html#ECharts%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%A6%82%E8%A7%88)\n\n### 关于两者区别\n\n- 两个库使用语法都差不多，字面量对象配置语法，查对应手册即可:[echarts](https://echarts.apache.org/zh/option.html#title)  [highcharts](https://api.highcharts.com.cn/highcharts)\n- 两者的区别：echarts底层是canvas；highcharts是SVG\n- 关于canvas和svg的区别：\n- - svg是xml描述图形，内容都是一个个dom节点，可以通过js操作节点；且输出图像为矢量图，放大缩小不会失真\n- - canvas是绘制的一块画布，绘制能力强，但是输出的是类似图像的格式，会失真\n\n### 填坑\n\n> **echarts**\n- 在vue中使用，绘制地图，不报错，也不显示地图\n- 一些配置显示地图后，各个省份颜色不会根据设置的颜色状态变化\n- 解决：\n- - 在Vue中需要通过geo配置项来告诉echarts渲染地图\n- - geo渲染的地图，如果要和visualMap设置的数据对应，需要在series中通过geoIndex来设置共享同一个geo组件\n- 名词解释：\n- - [geo](https://echarts.apache.org/zh/option.html#geo)：地理系坐标组件\n- - [visualMap](https://echarts.apache.org/zh/option.html#visualMap)：视觉映射组件，即控制地图哪些地方应该是什么颜色的控制组件\n- - [series](https://echarts.apache.org/zh/option.html#series)：系列表配置，配置图表类型的\n- - [series-map. geoIndex](https://echarts.apache.org/zh/option.html#series-map.geoIndex)：让map和其他类型图表和geo共享一个geo组件\n\n> **highcharts**\n- 17错误：即默认的库不包含要引入的类型，需要额外引入highcharts-more\n- 是个函数，然后将引入的Highcharts作为参数传递给highcharts-more这个函数即可\n- 对于更多的类型，则需要单独导入对应图标类型文件，使用方法类似\n- 具体哪些需要导入可以查看官方文档实例的编辑器，左边有用到的文件 ![](https://img.shuaxindiary.cn/微信截图_20201119213002.png)\n\n```js\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsMore from 'highcharts/highcharts-more';\nHighchartsMore(Highcharts);\n```\n\n> **Highcharts挂载dom，v-if无效**\n- 和echarts在挂载dom下插入canvas\n- Highcharts会将挂载dom替换成生成的svg\n","source":"_posts/技术笔记/可视化图表踩坑记录.md","raw":"---\ntitle: 可视化图表踩坑记录\ndate: 2020-11-19 19:39:07\ncategory:\n  - 技术笔记\ntag:\n  - Echarts\n  - V-Charts\n  - Highcharts\n---\n\n# 开头\n\n这周开发了一个粉丝数据可视化的模块，第一次这么“深度”的使用了下市面比较知名的2个可视化库，记录下一些坑和收货\n\n<!-- more -->\n\n# 坑\n\n- Vue中使用echarts map不渲染\n- Highcharts 17错误\n- Highcharts挂载dom，v-if无效\n\n# 收货\n\n- 封装echarts中国地图组件\n- 封装highcharts气泡图组件\n\n# 正文\n\n# 基本概念\n- 两者使用语法差不多，很多配置项名称也类似，即使一样概念也很相似\n- 基本概念参考[echarts说明](https://echarts.apache.org/zh/tutorial.html#ECharts%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%A6%82%E8%A7%88)\n\n### 关于两者区别\n\n- 两个库使用语法都差不多，字面量对象配置语法，查对应手册即可:[echarts](https://echarts.apache.org/zh/option.html#title)  [highcharts](https://api.highcharts.com.cn/highcharts)\n- 两者的区别：echarts底层是canvas；highcharts是SVG\n- 关于canvas和svg的区别：\n- - svg是xml描述图形，内容都是一个个dom节点，可以通过js操作节点；且输出图像为矢量图，放大缩小不会失真\n- - canvas是绘制的一块画布，绘制能力强，但是输出的是类似图像的格式，会失真\n\n### 填坑\n\n> **echarts**\n- 在vue中使用，绘制地图，不报错，也不显示地图\n- 一些配置显示地图后，各个省份颜色不会根据设置的颜色状态变化\n- 解决：\n- - 在Vue中需要通过geo配置项来告诉echarts渲染地图\n- - geo渲染的地图，如果要和visualMap设置的数据对应，需要在series中通过geoIndex来设置共享同一个geo组件\n- 名词解释：\n- - [geo](https://echarts.apache.org/zh/option.html#geo)：地理系坐标组件\n- - [visualMap](https://echarts.apache.org/zh/option.html#visualMap)：视觉映射组件，即控制地图哪些地方应该是什么颜色的控制组件\n- - [series](https://echarts.apache.org/zh/option.html#series)：系列表配置，配置图表类型的\n- - [series-map. geoIndex](https://echarts.apache.org/zh/option.html#series-map.geoIndex)：让map和其他类型图表和geo共享一个geo组件\n\n> **highcharts**\n- 17错误：即默认的库不包含要引入的类型，需要额外引入highcharts-more\n- 是个函数，然后将引入的Highcharts作为参数传递给highcharts-more这个函数即可\n- 对于更多的类型，则需要单独导入对应图标类型文件，使用方法类似\n- 具体哪些需要导入可以查看官方文档实例的编辑器，左边有用到的文件 ![](https://img.shuaxindiary.cn/微信截图_20201119213002.png)\n\n```js\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsMore from 'highcharts/highcharts-more';\nHighchartsMore(Highcharts);\n```\n\n> **Highcharts挂载dom，v-if无效**\n- 和echarts在挂载dom下插入canvas\n- Highcharts会将挂载dom替换成生成的svg\n","slug":"技术笔记/可视化图表踩坑记录","published":1,"updated":"2021-12-31T12:01:59.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1g002yj7jfagcbfdlf","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>这周开发了一个粉丝数据可视化的模块，第一次这么“深度”的使用了下市面比较知名的2个可视化库，记录下一些坑和收货</p>\n<a id=\"more\"></a>\n\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><ul>\n<li>Vue中使用echarts map不渲染</li>\n<li>Highcharts 17错误</li>\n<li>Highcharts挂载dom，v-if无效</li>\n</ul>\n<h1 id=\"收货\"><a href=\"#收货\" class=\"headerlink\" title=\"收货\"></a>收货</h1><ul>\n<li>封装echarts中国地图组件</li>\n<li>封装highcharts气泡图组件</li>\n</ul>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>两者使用语法差不多，很多配置项名称也类似，即使一样概念也很相似</li>\n<li>基本概念参考<a href=\"https://echarts.apache.org/zh/tutorial.html#ECharts%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%A6%82%E8%A7%88\">echarts说明</a></li>\n</ul>\n<h3 id=\"关于两者区别\"><a href=\"#关于两者区别\" class=\"headerlink\" title=\"关于两者区别\"></a>关于两者区别</h3><ul>\n<li>两个库使用语法都差不多，字面量对象配置语法，查对应手册即可:<a href=\"https://echarts.apache.org/zh/option.html#title\">echarts</a>  <a href=\"https://api.highcharts.com.cn/highcharts\">highcharts</a></li>\n<li>两者的区别：echarts底层是canvas；highcharts是SVG</li>\n<li>关于canvas和svg的区别：</li>\n<li><ul>\n<li>svg是xml描述图形，内容都是一个个dom节点，可以通过js操作节点；且输出图像为矢量图，放大缩小不会失真</li>\n</ul>\n</li>\n<li><ul>\n<li>canvas是绘制的一块画布，绘制能力强，但是输出的是类似图像的格式，会失真</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"填坑\"><a href=\"#填坑\" class=\"headerlink\" title=\"填坑\"></a>填坑</h3><blockquote>\n<p><strong>echarts</strong></p>\n</blockquote>\n<ul>\n<li>在vue中使用，绘制地图，不报错，也不显示地图</li>\n<li>一些配置显示地图后，各个省份颜色不会根据设置的颜色状态变化</li>\n<li>解决：</li>\n<li><ul>\n<li>在Vue中需要通过geo配置项来告诉echarts渲染地图</li>\n</ul>\n</li>\n<li><ul>\n<li>geo渲染的地图，如果要和visualMap设置的数据对应，需要在series中通过geoIndex来设置共享同一个geo组件</li>\n</ul>\n</li>\n<li>名词解释：</li>\n<li><ul>\n<li><a href=\"https://echarts.apache.org/zh/option.html#geo\">geo</a>：地理系坐标组件</li>\n</ul>\n</li>\n<li><ul>\n<li><a href=\"https://echarts.apache.org/zh/option.html#visualMap\">visualMap</a>：视觉映射组件，即控制地图哪些地方应该是什么颜色的控制组件</li>\n</ul>\n</li>\n<li><ul>\n<li><a href=\"https://echarts.apache.org/zh/option.html#series\">series</a>：系列表配置，配置图表类型的</li>\n</ul>\n</li>\n<li><ul>\n<li><a href=\"https://echarts.apache.org/zh/option.html#series-map.geoIndex\">series-map. geoIndex</a>：让map和其他类型图表和geo共享一个geo组件</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>highcharts</strong></p>\n</blockquote>\n<ul>\n<li>17错误：即默认的库不包含要引入的类型，需要额外引入highcharts-more</li>\n<li>是个函数，然后将引入的Highcharts作为参数传递给highcharts-more这个函数即可</li>\n<li>对于更多的类型，则需要单独导入对应图标类型文件，使用方法类似</li>\n<li>具体哪些需要导入可以查看官方文档实例的编辑器，左边有用到的文件 <img src=\"https://img.shuaxindiary.cn/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201119213002.png\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Highcharts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highcharts/highstock&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> HighchartsMore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highcharts/highcharts-more&#x27;</span>;<br>HighchartsMore(Highcharts);<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p><strong>Highcharts挂载dom，v-if无效</strong></p>\n</blockquote>\n<ul>\n<li>和echarts在挂载dom下插入canvas</li>\n<li>Highcharts会将挂载dom替换成生成的svg</li>\n</ul>\n","site":{"data":{}},"wordcount":1049,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>这周开发了一个粉丝数据可视化的模块，第一次这么“深度”的使用了下市面比较知名的2个可视化库，记录下一些坑和收货</p>","more":"<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><ul>\n<li>Vue中使用echarts map不渲染</li>\n<li>Highcharts 17错误</li>\n<li>Highcharts挂载dom，v-if无效</li>\n</ul>\n<h1 id=\"收货\"><a href=\"#收货\" class=\"headerlink\" title=\"收货\"></a>收货</h1><ul>\n<li>封装echarts中国地图组件</li>\n<li>封装highcharts气泡图组件</li>\n</ul>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>两者使用语法差不多，很多配置项名称也类似，即使一样概念也很相似</li>\n<li>基本概念参考<a href=\"https://echarts.apache.org/zh/tutorial.html#ECharts%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%A6%82%E8%A7%88\">echarts说明</a></li>\n</ul>\n<h3 id=\"关于两者区别\"><a href=\"#关于两者区别\" class=\"headerlink\" title=\"关于两者区别\"></a>关于两者区别</h3><ul>\n<li>两个库使用语法都差不多，字面量对象配置语法，查对应手册即可:<a href=\"https://echarts.apache.org/zh/option.html#title\">echarts</a>  <a href=\"https://api.highcharts.com.cn/highcharts\">highcharts</a></li>\n<li>两者的区别：echarts底层是canvas；highcharts是SVG</li>\n<li>关于canvas和svg的区别：</li>\n<li><ul>\n<li>svg是xml描述图形，内容都是一个个dom节点，可以通过js操作节点；且输出图像为矢量图，放大缩小不会失真</li>\n</ul>\n</li>\n<li><ul>\n<li>canvas是绘制的一块画布，绘制能力强，但是输出的是类似图像的格式，会失真</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"填坑\"><a href=\"#填坑\" class=\"headerlink\" title=\"填坑\"></a>填坑</h3><blockquote>\n<p><strong>echarts</strong></p>\n</blockquote>\n<ul>\n<li>在vue中使用，绘制地图，不报错，也不显示地图</li>\n<li>一些配置显示地图后，各个省份颜色不会根据设置的颜色状态变化</li>\n<li>解决：</li>\n<li><ul>\n<li>在Vue中需要通过geo配置项来告诉echarts渲染地图</li>\n</ul>\n</li>\n<li><ul>\n<li>geo渲染的地图，如果要和visualMap设置的数据对应，需要在series中通过geoIndex来设置共享同一个geo组件</li>\n</ul>\n</li>\n<li>名词解释：</li>\n<li><ul>\n<li><a href=\"https://echarts.apache.org/zh/option.html#geo\">geo</a>：地理系坐标组件</li>\n</ul>\n</li>\n<li><ul>\n<li><a href=\"https://echarts.apache.org/zh/option.html#visualMap\">visualMap</a>：视觉映射组件，即控制地图哪些地方应该是什么颜色的控制组件</li>\n</ul>\n</li>\n<li><ul>\n<li><a href=\"https://echarts.apache.org/zh/option.html#series\">series</a>：系列表配置，配置图表类型的</li>\n</ul>\n</li>\n<li><ul>\n<li><a href=\"https://echarts.apache.org/zh/option.html#series-map.geoIndex\">series-map. geoIndex</a>：让map和其他类型图表和geo共享一个geo组件</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>highcharts</strong></p>\n</blockquote>\n<ul>\n<li>17错误：即默认的库不包含要引入的类型，需要额外引入highcharts-more</li>\n<li>是个函数，然后将引入的Highcharts作为参数传递给highcharts-more这个函数即可</li>\n<li>对于更多的类型，则需要单独导入对应图标类型文件，使用方法类似</li>\n<li>具体哪些需要导入可以查看官方文档实例的编辑器，左边有用到的文件 <img src=\"https://img.shuaxindiary.cn/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201119213002.png\"></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> Highcharts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highcharts/highstock&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> HighchartsMore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;highcharts/highcharts-more&#x27;</span>;<br>HighchartsMore(Highcharts);<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>Highcharts挂载dom，v-if无效</strong></p>\n</blockquote>\n<ul>\n<li>和echarts在挂载dom下插入canvas</li>\n<li>Highcharts会将挂载dom替换成生成的svg</li>\n</ul>"},{"title":"关于预请求","abbrlink":46437,"date":"2020-03-15T02:05:12.000Z","_content":"# 开头\n最近学习Node，试着用node来学习一些关于后端的知识，帮助自己更好的理解web开发整个开发体系，这里总结遇到的一些坑\n<!-- more -->\n# 正文\n\n### 问题\n当后端设置了允许跨域的时候,前端发送请求时设置了请求头  'Content-Type': 'application/json'的时候，请求发送不成功\n>如图\n- ![问题](/img/caikeng/one.png)\n- ![问题](/img/caikeng/two.png)\n\n>这时的代码\n- 前端\n```js\nfetch('http://localhost:3000/', {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: {\n        name: 'shuaxin'\n    }\n})\n.then(res => {\n    return res.json()\n})\n.then(data => {\n    console.log(data)\n})\n```\n- 后端\n```js\nconst connect = require('connect')\nconst app = connect()\n\napp\n    .use((req, res, next) => {\n        // 设置允许的请求的域名\n        res.setHeader(\"Access-Control-Allow-Origin\", \"*\")\n        // 设置允许跨域请求的方法类型\n        res.setHeader(\"Access-Control-Allow-Methods\", \"DELETE,PUT,POST,GET,OPTIONS\")\n        console.log(req.method);\n        next()\n    })\n    .use((req, res) => {\n        res.end(JSON.stringify({\n            msg: 'succ'\n        }))\n    })\n\napp.listen('3000', () => {\n    console.log('服务启动')\n})\n```\n\n>解决\n- 只需要在后端在设置一下跨域允许的请求头即可，代码\n```js\n....\nres.setHeader('Access-Control-Allow-Headers', \"Content-Type\")\n....\n```\n\n### 分析\n在没有添加允许的请求头之前，在后台打印一下请求的method\n![OPTIONS](/img/caikeng/three.png)\n发现并不是请求中设置的PUT,这就是浏览器的预请求机制\n\n### 铺垫\n这里牵扯到一个概念:简单请求和复杂请求，对于2者的区分\n\n>简单请求\n- 请求方法只能是GET/POST/HEADE\n- 请求头只能是:Accept/Accept-Language/Conent-Language/Content-Type 等\n- 请求头的Content-Type只能是: text/plain、multipart/form-data 或 application/x-www-form-urlencoded\n\n>复杂请求(即出现预请求的条件)\n- 不满足上述条件后，就成了复杂请求，也就出现了所谓的预请求发送的问题\n- 分析第一张图发现请求类型的内容是 application/json,所以出现了预请求\n\n\n### 总结\n\n>什么是预请求?目的是什么?\n- 即options请求,是浏览器在我们真实的请求之前自动发送的一个请求\n- 目的是为了判断服务端是否允许我们真实的请求的请求头格式、请求类型等\n\n>区分简单/复杂请求\n- 就是HTML表单配合enctype可以指定的编码格式发送的请求就是简单请求\n- 其他像PUT/DELETE，和需要自定义请求头设置编码格式的请求就都是复杂请求\n- 查这方面知识看到[奇舞周刊](https://juejin.im/post/5d71d1e7f265da03934c027b)的一篇文章中提到的\n\n# 参考\n[跨域资源共享 CORS 详解](https://www.ruanyifeng.com/blog/2016/04/cors.html)\n[CORS 为什么要区分『简单请求』和『预检请求』？](https://juejin.im/post/5d71d1e7f265da03934c027b)\n\n\n\n\n\n","source":"_posts/技术笔记/关于预请求.md","raw":"---\ntitle: 关于预请求\ncategory:\n  - 技术笔记\ntags:\n  - 网络\n  - 踩坑\n  - NodeJS\nabbrlink: 46437\ndate: 2020-03-15 10:05:12\n---\n# 开头\n最近学习Node，试着用node来学习一些关于后端的知识，帮助自己更好的理解web开发整个开发体系，这里总结遇到的一些坑\n<!-- more -->\n# 正文\n\n### 问题\n当后端设置了允许跨域的时候,前端发送请求时设置了请求头  'Content-Type': 'application/json'的时候，请求发送不成功\n>如图\n- ![问题](/img/caikeng/one.png)\n- ![问题](/img/caikeng/two.png)\n\n>这时的代码\n- 前端\n```js\nfetch('http://localhost:3000/', {\n    method: 'PUT',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: {\n        name: 'shuaxin'\n    }\n})\n.then(res => {\n    return res.json()\n})\n.then(data => {\n    console.log(data)\n})\n```\n- 后端\n```js\nconst connect = require('connect')\nconst app = connect()\n\napp\n    .use((req, res, next) => {\n        // 设置允许的请求的域名\n        res.setHeader(\"Access-Control-Allow-Origin\", \"*\")\n        // 设置允许跨域请求的方法类型\n        res.setHeader(\"Access-Control-Allow-Methods\", \"DELETE,PUT,POST,GET,OPTIONS\")\n        console.log(req.method);\n        next()\n    })\n    .use((req, res) => {\n        res.end(JSON.stringify({\n            msg: 'succ'\n        }))\n    })\n\napp.listen('3000', () => {\n    console.log('服务启动')\n})\n```\n\n>解决\n- 只需要在后端在设置一下跨域允许的请求头即可，代码\n```js\n....\nres.setHeader('Access-Control-Allow-Headers', \"Content-Type\")\n....\n```\n\n### 分析\n在没有添加允许的请求头之前，在后台打印一下请求的method\n![OPTIONS](/img/caikeng/three.png)\n发现并不是请求中设置的PUT,这就是浏览器的预请求机制\n\n### 铺垫\n这里牵扯到一个概念:简单请求和复杂请求，对于2者的区分\n\n>简单请求\n- 请求方法只能是GET/POST/HEADE\n- 请求头只能是:Accept/Accept-Language/Conent-Language/Content-Type 等\n- 请求头的Content-Type只能是: text/plain、multipart/form-data 或 application/x-www-form-urlencoded\n\n>复杂请求(即出现预请求的条件)\n- 不满足上述条件后，就成了复杂请求，也就出现了所谓的预请求发送的问题\n- 分析第一张图发现请求类型的内容是 application/json,所以出现了预请求\n\n\n### 总结\n\n>什么是预请求?目的是什么?\n- 即options请求,是浏览器在我们真实的请求之前自动发送的一个请求\n- 目的是为了判断服务端是否允许我们真实的请求的请求头格式、请求类型等\n\n>区分简单/复杂请求\n- 就是HTML表单配合enctype可以指定的编码格式发送的请求就是简单请求\n- 其他像PUT/DELETE，和需要自定义请求头设置编码格式的请求就都是复杂请求\n- 查这方面知识看到[奇舞周刊](https://juejin.im/post/5d71d1e7f265da03934c027b)的一篇文章中提到的\n\n# 参考\n[跨域资源共享 CORS 详解](https://www.ruanyifeng.com/blog/2016/04/cors.html)\n[CORS 为什么要区分『简单请求』和『预检请求』？](https://juejin.im/post/5d71d1e7f265da03934c027b)\n\n\n\n\n\n","slug":"技术笔记/关于预请求","published":1,"updated":"2021-12-31T12:01:59.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1g0031j7jfe0qb0lmp","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>最近学习Node，试着用node来学习一些关于后端的知识，帮助自己更好的理解web开发整个开发体系，这里总结遇到的一些坑</p>\n<a id=\"more\"></a>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>当后端设置了允许跨域的时候,前端发送请求时设置了请求头  ‘Content-Type’: ‘application/json’的时候，请求发送不成功</p>\n<blockquote>\n<p>如图</p>\n</blockquote>\n<ul>\n<li><img src=\"/img/caikeng/one.png\" alt=\"问题\"></li>\n<li><img src=\"/img/caikeng/two.png\" alt=\"问题\"></li>\n</ul>\n<blockquote>\n<p>这时的代码</p>\n</blockquote>\n<ul>\n<li>前端<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">fetch(<span class=\"hljs-string\">&#x27;http://localhost:3000/&#x27;</span>, &#123;<br>    method: <span class=\"hljs-string\">&#x27;PUT&#x27;</span>,<br>    headers: &#123;<br>        <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span><br>    &#125;,<br>    body: &#123;<br>        name: <span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>    &#125;<br>&#125;)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> res.json()<br>&#125;)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data)<br>&#125;)<br></code></pre></div></td></tr></table></figure></li>\n<li>后端<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> connect = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;connect&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> app = connect()<br><br>app<br>    .use(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 设置允许的请求的域名</span><br>        res.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>)<br>        <span class=\"hljs-comment\">// 设置允许跨域请求的方法类型</span><br>        res.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"hljs-string\">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>)<br>        <span class=\"hljs-built_in\">console</span>.log(req.method);<br>        next()<br>    &#125;)<br>    .use(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> &#123;<br>        res.end(<span class=\"hljs-built_in\">JSON</span>.stringify(&#123;<br>            msg: <span class=\"hljs-string\">&#x27;succ&#x27;</span><br>        &#125;))<br>    &#125;)<br><br>app.listen(<span class=\"hljs-string\">&#x27;3000&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;服务启动&#x27;</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>解决</p>\n</blockquote>\n<ul>\n<li>只需要在后端在设置一下跨域允许的请求头即可，代码<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\">....<br>res.setHeader(<span class=\"hljs-string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"hljs-string\">&quot;Content-Type&quot;</span>)<br>....<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>在没有添加允许的请求头之前，在后台打印一下请求的method<br><img src=\"/img/caikeng/three.png\" alt=\"OPTIONS\"><br>发现并不是请求中设置的PUT,这就是浏览器的预请求机制</p>\n<h3 id=\"铺垫\"><a href=\"#铺垫\" class=\"headerlink\" title=\"铺垫\"></a>铺垫</h3><p>这里牵扯到一个概念:简单请求和复杂请求，对于2者的区分</p>\n<blockquote>\n<p>简单请求</p>\n</blockquote>\n<ul>\n<li>请求方法只能是GET/POST/HEADE</li>\n<li>请求头只能是:Accept/Accept-Language/Conent-Language/Content-Type 等</li>\n<li>请求头的Content-Type只能是: text/plain、multipart/form-data 或 application/x-www-form-urlencoded</li>\n</ul>\n<blockquote>\n<p>复杂请求(即出现预请求的条件)</p>\n</blockquote>\n<ul>\n<li>不满足上述条件后，就成了复杂请求，也就出现了所谓的预请求发送的问题</li>\n<li>分析第一张图发现请求类型的内容是 application/json,所以出现了预请求</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>什么是预请求?目的是什么?</p>\n</blockquote>\n<ul>\n<li>即options请求,是浏览器在我们真实的请求之前自动发送的一个请求</li>\n<li>目的是为了判断服务端是否允许我们真实的请求的请求头格式、请求类型等</li>\n</ul>\n<blockquote>\n<p>区分简单/复杂请求</p>\n</blockquote>\n<ul>\n<li>就是HTML表单配合enctype可以指定的编码格式发送的请求就是简单请求</li>\n<li>其他像PUT/DELETE，和需要自定义请求头设置编码格式的请求就都是复杂请求</li>\n<li>查这方面知识看到<a href=\"https://juejin.im/post/5d71d1e7f265da03934c027b\">奇舞周刊</a>的一篇文章中提到的</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.ruanyifeng.com/blog/2016/04/cors.html\">跨域资源共享 CORS 详解</a><br><a href=\"https://juejin.im/post/5d71d1e7f265da03934c027b\">CORS 为什么要区分『简单请求』和『预检请求』？</a></p>\n","site":{"data":{}},"wordcount":1655,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>最近学习Node，试着用node来学习一些关于后端的知识，帮助自己更好的理解web开发整个开发体系，这里总结遇到的一些坑</p>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>当后端设置了允许跨域的时候,前端发送请求时设置了请求头  ‘Content-Type’: ‘application/json’的时候，请求发送不成功</p>\n<blockquote>\n<p>如图</p>\n</blockquote>\n<ul>\n<li><img src=\"/img/caikeng/one.png\" alt=\"问题\"></li>\n<li><img src=\"/img/caikeng/two.png\" alt=\"问题\"></li>\n</ul>\n<blockquote>\n<p>这时的代码</p>\n</blockquote>\n<ul>\n<li>前端<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">fetch(<span class=\"hljs-string\">&#x27;http://localhost:3000/&#x27;</span>, &#123;<br>    method: <span class=\"hljs-string\">&#x27;PUT&#x27;</span>,<br>    headers: &#123;<br>        <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span><br>    &#125;,<br>    body: &#123;<br>        name: <span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>    &#125;<br>&#125;)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> res.json()<br>&#125;)<br>.then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(data)<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n<li>后端<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> connect = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;connect&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> app = connect()<br><br>app<br>    .use(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 设置允许的请求的域名</span><br>        res.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>)<br>        <span class=\"hljs-comment\">// 设置允许跨域请求的方法类型</span><br>        res.setHeader(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"hljs-string\">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>)<br>        <span class=\"hljs-built_in\">console</span>.log(req.method);<br>        next()<br>    &#125;)<br>    .use(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> &#123;<br>        res.end(<span class=\"hljs-built_in\">JSON</span>.stringify(&#123;<br>            msg: <span class=\"hljs-string\">&#x27;succ&#x27;</span><br>        &#125;))<br>    &#125;)<br><br>app.listen(<span class=\"hljs-string\">&#x27;3000&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;服务启动&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>解决</p>\n</blockquote>\n<ul>\n<li>只需要在后端在设置一下跨域允许的请求头即可，代码<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">....<br>res.setHeader(<span class=\"hljs-string\">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class=\"hljs-string\">&quot;Content-Type&quot;</span>)<br>....<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>在没有添加允许的请求头之前，在后台打印一下请求的method<br><img src=\"/img/caikeng/three.png\" alt=\"OPTIONS\"><br>发现并不是请求中设置的PUT,这就是浏览器的预请求机制</p>\n<h3 id=\"铺垫\"><a href=\"#铺垫\" class=\"headerlink\" title=\"铺垫\"></a>铺垫</h3><p>这里牵扯到一个概念:简单请求和复杂请求，对于2者的区分</p>\n<blockquote>\n<p>简单请求</p>\n</blockquote>\n<ul>\n<li>请求方法只能是GET/POST/HEADE</li>\n<li>请求头只能是:Accept/Accept-Language/Conent-Language/Content-Type 等</li>\n<li>请求头的Content-Type只能是: text/plain、multipart/form-data 或 application/x-www-form-urlencoded</li>\n</ul>\n<blockquote>\n<p>复杂请求(即出现预请求的条件)</p>\n</blockquote>\n<ul>\n<li>不满足上述条件后，就成了复杂请求，也就出现了所谓的预请求发送的问题</li>\n<li>分析第一张图发现请求类型的内容是 application/json,所以出现了预请求</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>什么是预请求?目的是什么?</p>\n</blockquote>\n<ul>\n<li>即options请求,是浏览器在我们真实的请求之前自动发送的一个请求</li>\n<li>目的是为了判断服务端是否允许我们真实的请求的请求头格式、请求类型等</li>\n</ul>\n<blockquote>\n<p>区分简单/复杂请求</p>\n</blockquote>\n<ul>\n<li>就是HTML表单配合enctype可以指定的编码格式发送的请求就是简单请求</li>\n<li>其他像PUT/DELETE，和需要自定义请求头设置编码格式的请求就都是复杂请求</li>\n<li>查这方面知识看到<a href=\"https://juejin.im/post/5d71d1e7f265da03934c027b\">奇舞周刊</a>的一篇文章中提到的</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.ruanyifeng.com/blog/2016/04/cors.html\">跨域资源共享 CORS 详解</a><br><a href=\"https://juejin.im/post/5d71d1e7f265da03934c027b\">CORS 为什么要区分『简单请求』和『预检请求』？</a></p>"},{"title":"js实现计算器","abbrlink":998,"date":"2019-10-27T10:08:31.000Z","category":null,"_content":"\n# 栈计算器\n![效果图](/img/computer.png)\n<!-- more -->\n\n## 说些废话\n>1.界面不是重点,使用的flex布局,仿的ios的计算器界面\n>2.代码只写了核心的算法实现(理解了你就能写出来了),想要整体的代码,大家参考给出的源码链接\n\n## [本文源码](https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/%E8%AE%A1%E7%AE%97%E5%99%A8)\n\n## 分析\n>1.多项运算时,运算符优先级的问题\n>2.获取要运算的数字时处理,是个位数还是多位数的问题\n## 原理\n>优先级问题\n- 1.用2个栈分别存储数字和运算符\n- 2.在存储运算符时判断和前一个运算符的优先级来决定是否要进行运算或者直接存储\n- 说明:这里判断优先级,是为了解决一串表达式中间位置出现乘除,如果出现,将这两个数运算后的结果入栈\n- 3.因为JS的数组结合push/pop后和栈的效果一致,所以代码使用数组来做\n\n>处理个位数还是多位数问题\n- 1.每次获取到的数字暂存在一个变量中,在点击运算符时,在将该变量中的数入栈,随后清空改变量\n- 2.当表达式只有两项时,例如 1+2,上述的操作只存储了一个数,所以在点击=号后还需要判断一下,如果该变量不为空,将中间的数入栈.\n## 代码实现\n```js\n// 创建存储数字的栈\nlet nums = [];\n// 存储运算符的栈\nlet op = [];\n// 创建运算符优先级表(用对象来做)\nlet priority = {\n    '+': 0,\n    '-': 0,\n    '*': 1,\n    '/': 1\n};\n// 比较优先级函数op1栈顶(即数组最后一个)元素,op2为当前获取到运算符\nlet compare = function (op1, op2) {\n    if (priority[op1] > priority[op2]) {\n        // 当前运算符优先级小于栈顶元素 取出栈顶运算符和nums栈顶2个数字进行运算 并将结果入栈\n        let one = nums.pop();\n        let two = nums.pop();\n        switch (op.pop()) {\n            case '+':\n                // 将运算结果入栈\n                nums.push(one + two);\n                break;\n            case '-':\n                nums.push(one - two);\n                break;\n            case '*':\n                nums.push(one * two);\n                break;\n            case '/':\n                nums.push(one / two);\n                break;\n            default:\n                break;\n        }\n        // 将该运算符入栈\n        op.push(op2);\n    } else {\n        // 大于或者等于时 直接入栈\n        op.push(op2);\n    }\n}\n// 假设一串表达式是 1+5*6-1;\nlet str = '1+5*6-1';\nlet arr = str.split(''); // [\"1\", \"+\", \"5\", \"*\", \"6\", \"-\", \"1\"]\n// 入口函数 \nvar cal = function () {\n    // 模拟真实点击按键获取数据入栈的过程\n    arr.forEach(\n        (e) => {\n            // 判断当前元素是数字还是运算符\n            if (isNaN(Number(e))) {\n                // 运算符 比较优先级\n                compare(op[op.length - 1], e);\n            } else {\n                // 数字 直接入栈 \n                nums.push(Number(e));\n            }\n        }\n    );\n    //计算表达式结果   这里没有遵循栈的操作规则 老铁们可以自己优化下 \n    // 遍历op 当op内没有元素后 停止循环\n    while (op.length != 0) {\n        // 依次取出栈低(数组起始位置)的2个元素和符号进行运算\n        // 运算完毕后 再将结果插入到第一个 \n        let one = nums.shift();\n        let two = nums.shift();\n        switch (op.shift()) {\n            case '+':\n                // 将运算结果插入到第一个\n                nums.unshift(one + two);\n                break;\n            case '-':\n                nums.unshift(one - two);\n                break;\n            case '*':\n                nums.unshift(one * two);\n                break;\n            case '/':\n                nums.unshift(one / two);\n                break;\n            default:\n                break;\n        }\n    }\n    // 上述操作后 数组最后就剩下一个数 即运算结果\n    console.log(nums[0]);\n}\ncal();\n```\n# 总结\n在最后的计算结果的地方，因为在数组中如果对第一个元素进行增删，当数组元素过多时，会很影响性能，所以这里还有很多优化的地方，后序会再更新。\n","source":"_posts/JS/js实现计算器.md","raw":"---\ntitle: js实现计算器\ntag:\n  - JavaScript\nabbrlink: 998\ndate: 2019-10-27 18:08:31\ncategory:\n---\n\n# 栈计算器\n![效果图](/img/computer.png)\n<!-- more -->\n\n## 说些废话\n>1.界面不是重点,使用的flex布局,仿的ios的计算器界面\n>2.代码只写了核心的算法实现(理解了你就能写出来了),想要整体的代码,大家参考给出的源码链接\n\n## [本文源码](https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/%E8%AE%A1%E7%AE%97%E5%99%A8)\n\n## 分析\n>1.多项运算时,运算符优先级的问题\n>2.获取要运算的数字时处理,是个位数还是多位数的问题\n## 原理\n>优先级问题\n- 1.用2个栈分别存储数字和运算符\n- 2.在存储运算符时判断和前一个运算符的优先级来决定是否要进行运算或者直接存储\n- 说明:这里判断优先级,是为了解决一串表达式中间位置出现乘除,如果出现,将这两个数运算后的结果入栈\n- 3.因为JS的数组结合push/pop后和栈的效果一致,所以代码使用数组来做\n\n>处理个位数还是多位数问题\n- 1.每次获取到的数字暂存在一个变量中,在点击运算符时,在将该变量中的数入栈,随后清空改变量\n- 2.当表达式只有两项时,例如 1+2,上述的操作只存储了一个数,所以在点击=号后还需要判断一下,如果该变量不为空,将中间的数入栈.\n## 代码实现\n```js\n// 创建存储数字的栈\nlet nums = [];\n// 存储运算符的栈\nlet op = [];\n// 创建运算符优先级表(用对象来做)\nlet priority = {\n    '+': 0,\n    '-': 0,\n    '*': 1,\n    '/': 1\n};\n// 比较优先级函数op1栈顶(即数组最后一个)元素,op2为当前获取到运算符\nlet compare = function (op1, op2) {\n    if (priority[op1] > priority[op2]) {\n        // 当前运算符优先级小于栈顶元素 取出栈顶运算符和nums栈顶2个数字进行运算 并将结果入栈\n        let one = nums.pop();\n        let two = nums.pop();\n        switch (op.pop()) {\n            case '+':\n                // 将运算结果入栈\n                nums.push(one + two);\n                break;\n            case '-':\n                nums.push(one - two);\n                break;\n            case '*':\n                nums.push(one * two);\n                break;\n            case '/':\n                nums.push(one / two);\n                break;\n            default:\n                break;\n        }\n        // 将该运算符入栈\n        op.push(op2);\n    } else {\n        // 大于或者等于时 直接入栈\n        op.push(op2);\n    }\n}\n// 假设一串表达式是 1+5*6-1;\nlet str = '1+5*6-1';\nlet arr = str.split(''); // [\"1\", \"+\", \"5\", \"*\", \"6\", \"-\", \"1\"]\n// 入口函数 \nvar cal = function () {\n    // 模拟真实点击按键获取数据入栈的过程\n    arr.forEach(\n        (e) => {\n            // 判断当前元素是数字还是运算符\n            if (isNaN(Number(e))) {\n                // 运算符 比较优先级\n                compare(op[op.length - 1], e);\n            } else {\n                // 数字 直接入栈 \n                nums.push(Number(e));\n            }\n        }\n    );\n    //计算表达式结果   这里没有遵循栈的操作规则 老铁们可以自己优化下 \n    // 遍历op 当op内没有元素后 停止循环\n    while (op.length != 0) {\n        // 依次取出栈低(数组起始位置)的2个元素和符号进行运算\n        // 运算完毕后 再将结果插入到第一个 \n        let one = nums.shift();\n        let two = nums.shift();\n        switch (op.shift()) {\n            case '+':\n                // 将运算结果插入到第一个\n                nums.unshift(one + two);\n                break;\n            case '-':\n                nums.unshift(one - two);\n                break;\n            case '*':\n                nums.unshift(one * two);\n                break;\n            case '/':\n                nums.unshift(one / two);\n                break;\n            default:\n                break;\n        }\n    }\n    // 上述操作后 数组最后就剩下一个数 即运算结果\n    console.log(nums[0]);\n}\ncal();\n```\n# 总结\n在最后的计算结果的地方，因为在数组中如果对第一个元素进行增删，当数组元素过多时，会很影响性能，所以这里还有很多优化的地方，后序会再更新。\n","slug":"JS/js实现计算器","published":1,"updated":"2021-12-31T12:01:59.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1g0034j7jfdyg48lex","content":"<h1 id=\"栈计算器\"><a href=\"#栈计算器\" class=\"headerlink\" title=\"栈计算器\"></a>栈计算器</h1><p><img src=\"/img/computer.png\" alt=\"效果图\"></p>\n<a id=\"more\"></a>\n\n<h2 id=\"说些废话\"><a href=\"#说些废话\" class=\"headerlink\" title=\"说些废话\"></a>说些废话</h2><blockquote>\n<p>1.界面不是重点,使用的flex布局,仿的ios的计算器界面<br>2.代码只写了核心的算法实现(理解了你就能写出来了),想要整体的代码,大家参考给出的源码链接</p>\n</blockquote>\n<h2 id=\"本文源码\"><a href=\"#本文源码\" class=\"headerlink\" title=\"本文源码\"></a><a href=\"https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/%E8%AE%A1%E7%AE%97%E5%99%A8\">本文源码</a></h2><h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>1.多项运算时,运算符优先级的问题<br>2.获取要运算的数字时处理,是个位数还是多位数的问题</p>\n</blockquote>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><blockquote>\n<p>优先级问题</p>\n</blockquote>\n<ul>\n<li>1.用2个栈分别存储数字和运算符</li>\n<li>2.在存储运算符时判断和前一个运算符的优先级来决定是否要进行运算或者直接存储</li>\n<li>说明:这里判断优先级,是为了解决一串表达式中间位置出现乘除,如果出现,将这两个数运算后的结果入栈</li>\n<li>3.因为JS的数组结合push/pop后和栈的效果一致,所以代码使用数组来做</li>\n</ul>\n<blockquote>\n<p>处理个位数还是多位数问题</p>\n</blockquote>\n<ul>\n<li>1.每次获取到的数字暂存在一个变量中,在点击运算符时,在将该变量中的数入栈,随后清空改变量</li>\n<li>2.当表达式只有两项时,例如 1+2,上述的操作只存储了一个数,所以在点击=号后还需要判断一下,如果该变量不为空,将中间的数入栈.<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建存储数字的栈</span><br><span class=\"hljs-keyword\">let</span> nums = [];<br><span class=\"hljs-comment\">// 存储运算符的栈</span><br><span class=\"hljs-keyword\">let</span> op = [];<br><span class=\"hljs-comment\">// 创建运算符优先级表(用对象来做)</span><br><span class=\"hljs-keyword\">let</span> priority = &#123;<br>    <span class=\"hljs-string\">&#x27;+&#x27;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&#x27;-&#x27;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&#x27;*&#x27;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&#x27;/&#x27;</span>: <span class=\"hljs-number\">1</span><br>&#125;;<br><span class=\"hljs-comment\">// 比较优先级函数op1栈顶(即数组最后一个)元素,op2为当前获取到运算符</span><br><span class=\"hljs-keyword\">let</span> compare = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">op1, op2</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (priority[op1] &gt; priority[op2]) &#123;<br>        <span class=\"hljs-comment\">// 当前运算符优先级小于栈顶元素 取出栈顶运算符和nums栈顶2个数字进行运算 并将结果入栈</span><br>        <span class=\"hljs-keyword\">let</span> one = nums.pop();<br>        <span class=\"hljs-keyword\">let</span> two = nums.pop();<br>        <span class=\"hljs-keyword\">switch</span> (op.pop()) &#123;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:<br>                <span class=\"hljs-comment\">// 将运算结果入栈</span><br>                nums.push(one + two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:<br>                nums.push(one - two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:<br>                nums.push(one * two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:<br>                nums.push(one / two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">default</span>:<br>                <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// 将该运算符入栈</span><br>        op.push(op2);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 大于或者等于时 直接入栈</span><br>        op.push(op2);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 假设一串表达式是 1+5*6-1;</span><br><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;1+5*6-1&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> arr = str.split(<span class=\"hljs-string\">&#x27;&#x27;</span>); <span class=\"hljs-comment\">// [&quot;1&quot;, &quot;+&quot;, &quot;5&quot;, &quot;*&quot;, &quot;6&quot;, &quot;-&quot;, &quot;1&quot;]</span><br><span class=\"hljs-comment\">// 入口函数 </span><br><span class=\"hljs-keyword\">var</span> cal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 模拟真实点击按键获取数据入栈的过程</span><br>    arr.forEach(<br>        (e) =&gt; &#123;<br>            <span class=\"hljs-comment\">// 判断当前元素是数字还是运算符</span><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-built_in\">Number</span>(e))) &#123;<br>                <span class=\"hljs-comment\">// 运算符 比较优先级</span><br>                compare(op[op.length - <span class=\"hljs-number\">1</span>], e);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">// 数字 直接入栈 </span><br>                nums.push(<span class=\"hljs-built_in\">Number</span>(e));<br>            &#125;<br>        &#125;<br>    );<br>    <span class=\"hljs-comment\">//计算表达式结果   这里没有遵循栈的操作规则 老铁们可以自己优化下 </span><br>    <span class=\"hljs-comment\">// 遍历op 当op内没有元素后 停止循环</span><br>    <span class=\"hljs-keyword\">while</span> (op.length != <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 依次取出栈低(数组起始位置)的2个元素和符号进行运算</span><br>        <span class=\"hljs-comment\">// 运算完毕后 再将结果插入到第一个 </span><br>        <span class=\"hljs-keyword\">let</span> one = nums.shift();<br>        <span class=\"hljs-keyword\">let</span> two = nums.shift();<br>        <span class=\"hljs-keyword\">switch</span> (op.shift()) &#123;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:<br>                <span class=\"hljs-comment\">// 将运算结果插入到第一个</span><br>                nums.unshift(one + two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:<br>                nums.unshift(one - two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:<br>                nums.unshift(one * two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:<br>                nums.unshift(one / two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">default</span>:<br>                <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 上述操作后 数组最后就剩下一个数 即运算结果</span><br>    <span class=\"hljs-built_in\">console</span>.log(nums[<span class=\"hljs-number\">0</span>]);<br>&#125;<br>cal();<br></code></pre></div></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1>在最后的计算结果的地方，因为在数组中如果对第一个元素进行增删，当数组元素过多时，会很影响性能，所以这里还有很多优化的地方，后序会再更新。</li>\n</ul>\n","site":{"data":{}},"wordcount":2129,"excerpt":"<h1 id=\"栈计算器\"><a href=\"#栈计算器\" class=\"headerlink\" title=\"栈计算器\"></a>栈计算器</h1><p><img src=\"/img/computer.png\" alt=\"效果图\"></p>","more":"<h2 id=\"说些废话\"><a href=\"#说些废话\" class=\"headerlink\" title=\"说些废话\"></a>说些废话</h2><blockquote>\n<p>1.界面不是重点,使用的flex布局,仿的ios的计算器界面<br>2.代码只写了核心的算法实现(理解了你就能写出来了),想要整体的代码,大家参考给出的源码链接</p>\n</blockquote>\n<h2 id=\"本文源码\"><a href=\"#本文源码\" class=\"headerlink\" title=\"本文源码\"></a><a href=\"https://github.com/SHUAXINDIARY/demo/tree/master/js%E7%BB%83%E4%B9%A0demo/%E8%AE%A1%E7%AE%97%E5%99%A8\">本文源码</a></h2><h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><blockquote>\n<p>1.多项运算时,运算符优先级的问题<br>2.获取要运算的数字时处理,是个位数还是多位数的问题</p>\n</blockquote>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><blockquote>\n<p>优先级问题</p>\n</blockquote>\n<ul>\n<li>1.用2个栈分别存储数字和运算符</li>\n<li>2.在存储运算符时判断和前一个运算符的优先级来决定是否要进行运算或者直接存储</li>\n<li>说明:这里判断优先级,是为了解决一串表达式中间位置出现乘除,如果出现,将这两个数运算后的结果入栈</li>\n<li>3.因为JS的数组结合push/pop后和栈的效果一致,所以代码使用数组来做</li>\n</ul>\n<blockquote>\n<p>处理个位数还是多位数问题</p>\n</blockquote>\n<ul>\n<li>1.每次获取到的数字暂存在一个变量中,在点击运算符时,在将该变量中的数入栈,随后清空改变量</li>\n<li>2.当表达式只有两项时,例如 1+2,上述的操作只存储了一个数,所以在点击=号后还需要判断一下,如果该变量不为空,将中间的数入栈.<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建存储数字的栈</span><br><span class=\"hljs-keyword\">let</span> nums = [];<br><span class=\"hljs-comment\">// 存储运算符的栈</span><br><span class=\"hljs-keyword\">let</span> op = [];<br><span class=\"hljs-comment\">// 创建运算符优先级表(用对象来做)</span><br><span class=\"hljs-keyword\">let</span> priority = &#123;<br>    <span class=\"hljs-string\">&#x27;+&#x27;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&#x27;-&#x27;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&#x27;*&#x27;</span>: <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&#x27;/&#x27;</span>: <span class=\"hljs-number\">1</span><br>&#125;;<br><span class=\"hljs-comment\">// 比较优先级函数op1栈顶(即数组最后一个)元素,op2为当前获取到运算符</span><br><span class=\"hljs-keyword\">let</span> compare = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">op1, op2</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (priority[op1] &gt; priority[op2]) &#123;<br>        <span class=\"hljs-comment\">// 当前运算符优先级小于栈顶元素 取出栈顶运算符和nums栈顶2个数字进行运算 并将结果入栈</span><br>        <span class=\"hljs-keyword\">let</span> one = nums.pop();<br>        <span class=\"hljs-keyword\">let</span> two = nums.pop();<br>        <span class=\"hljs-keyword\">switch</span> (op.pop()) &#123;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:<br>                <span class=\"hljs-comment\">// 将运算结果入栈</span><br>                nums.push(one + two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:<br>                nums.push(one - two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:<br>                nums.push(one * two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:<br>                nums.push(one / two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">default</span>:<br>                <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">// 将该运算符入栈</span><br>        op.push(op2);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 大于或者等于时 直接入栈</span><br>        op.push(op2);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 假设一串表达式是 1+5*6-1;</span><br><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;1+5*6-1&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> arr = str.split(<span class=\"hljs-string\">&#x27;&#x27;</span>); <span class=\"hljs-comment\">// [&quot;1&quot;, &quot;+&quot;, &quot;5&quot;, &quot;*&quot;, &quot;6&quot;, &quot;-&quot;, &quot;1&quot;]</span><br><span class=\"hljs-comment\">// 入口函数 </span><br><span class=\"hljs-keyword\">var</span> cal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 模拟真实点击按键获取数据入栈的过程</span><br>    arr.forEach(<br>        (e) =&gt; &#123;<br>            <span class=\"hljs-comment\">// 判断当前元素是数字还是运算符</span><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-built_in\">Number</span>(e))) &#123;<br>                <span class=\"hljs-comment\">// 运算符 比较优先级</span><br>                compare(op[op.length - <span class=\"hljs-number\">1</span>], e);<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">// 数字 直接入栈 </span><br>                nums.push(<span class=\"hljs-built_in\">Number</span>(e));<br>            &#125;<br>        &#125;<br>    );<br>    <span class=\"hljs-comment\">//计算表达式结果   这里没有遵循栈的操作规则 老铁们可以自己优化下 </span><br>    <span class=\"hljs-comment\">// 遍历op 当op内没有元素后 停止循环</span><br>    <span class=\"hljs-keyword\">while</span> (op.length != <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">// 依次取出栈低(数组起始位置)的2个元素和符号进行运算</span><br>        <span class=\"hljs-comment\">// 运算完毕后 再将结果插入到第一个 </span><br>        <span class=\"hljs-keyword\">let</span> one = nums.shift();<br>        <span class=\"hljs-keyword\">let</span> two = nums.shift();<br>        <span class=\"hljs-keyword\">switch</span> (op.shift()) &#123;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:<br>                <span class=\"hljs-comment\">// 将运算结果插入到第一个</span><br>                nums.unshift(one + two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:<br>                nums.unshift(one - two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:<br>                nums.unshift(one * two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:<br>                nums.unshift(one / two);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">default</span>:<br>                <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 上述操作后 数组最后就剩下一个数 即运算结果</span><br>    <span class=\"hljs-built_in\">console</span>.log(nums[<span class=\"hljs-number\">0</span>]);<br>&#125;<br>cal();<br></code></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1>在最后的计算结果的地方，因为在数组中如果对第一个元素进行增删，当数组元素过多时，会很影响性能，所以这里还有很多优化的地方，后序会再更新。</li>\n</ul>"},{"title":"关于js深拷贝","abbrlink":26405,"date":"2019-07-07T04:11:14.000Z","_content":"\n# 开头\n面试复习，复习到了深拷贝，记录一下\n<!-- more -->\n# 正文\n## 基本数据类型&复杂数据类型(引用数据类型)\n>概念\n- 在js种，有2中数据类型：一类是基本数据类型，一类是复杂数据类型；\n- 基本数据类型有:null,undefined,number,string,boolean,symbol(ES6)\n- 复杂数据类型:Object/arrary等\n>区别\n- 两者的区别就是在内存中的存储位置不同\n- 前者在栈中存储数据\n- 后者在堆中存储数据，而栈中存储的是数据在堆中存储的位置(引用)\n## 深拷贝\n作用与复制复杂数据类型时，因为栈中只保存了数据的地址，所以如果只是简单赋值一样的复制，就会出现如下情况(浅拷贝)\n```js\nlet one={\n    one:\"this is one\"\n}\nlet two=one\nconsole.log(two)  // {one:\"this is one\"}\none.one=1\nconsole.log(two)  // {one:1}\n```\n## 深拷贝实现\n>思路\n- 判断要复制的目标的数据类型\n- 1.简单数据类型，直接复制\n- 2.复杂数据类型(对象/数组)，遍历内部每一项\n- 3.在遍历复杂数据类型内部属性时，会出现情况上面2中情况，再次调用该函数就好(递归)\n```js\nlet deepCopy = (copyTarget) => {\n    let res = null\n    // 返回和复制对象一致的类型\n    if (copyTarget instanceof Array) {\n        res = []\n    } else {\n        res = {}\n    }\n    for (let key in copyTarget) {\n        if (typeof copyTarget[key] === 'object' && copyTarget[key] !== null) {\n            // 1.复杂数据类型\n            console.warn('复杂数据类型')\n            res[key] = deepCopy(copyTarget[key])\n        } else {\n            console.warn('基本数据类型');\n            // 2.基本数据类型/和函数\n            res[key] = copyTarget[key]\n        }\n    }\n    return res\n}\n```","source":"_posts/JS/js基础之深拷贝.md","raw":"---\ntitle: 关于js深拷贝\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 前端\nabbrlink: 26405\ndate: 2019-07-07 12:11:14\n---\n\n# 开头\n面试复习，复习到了深拷贝，记录一下\n<!-- more -->\n# 正文\n## 基本数据类型&复杂数据类型(引用数据类型)\n>概念\n- 在js种，有2中数据类型：一类是基本数据类型，一类是复杂数据类型；\n- 基本数据类型有:null,undefined,number,string,boolean,symbol(ES6)\n- 复杂数据类型:Object/arrary等\n>区别\n- 两者的区别就是在内存中的存储位置不同\n- 前者在栈中存储数据\n- 后者在堆中存储数据，而栈中存储的是数据在堆中存储的位置(引用)\n## 深拷贝\n作用与复制复杂数据类型时，因为栈中只保存了数据的地址，所以如果只是简单赋值一样的复制，就会出现如下情况(浅拷贝)\n```js\nlet one={\n    one:\"this is one\"\n}\nlet two=one\nconsole.log(two)  // {one:\"this is one\"}\none.one=1\nconsole.log(two)  // {one:1}\n```\n## 深拷贝实现\n>思路\n- 判断要复制的目标的数据类型\n- 1.简单数据类型，直接复制\n- 2.复杂数据类型(对象/数组)，遍历内部每一项\n- 3.在遍历复杂数据类型内部属性时，会出现情况上面2中情况，再次调用该函数就好(递归)\n```js\nlet deepCopy = (copyTarget) => {\n    let res = null\n    // 返回和复制对象一致的类型\n    if (copyTarget instanceof Array) {\n        res = []\n    } else {\n        res = {}\n    }\n    for (let key in copyTarget) {\n        if (typeof copyTarget[key] === 'object' && copyTarget[key] !== null) {\n            // 1.复杂数据类型\n            console.warn('复杂数据类型')\n            res[key] = deepCopy(copyTarget[key])\n        } else {\n            console.warn('基本数据类型');\n            // 2.基本数据类型/和函数\n            res[key] = copyTarget[key]\n        }\n    }\n    return res\n}\n```","slug":"JS/js基础之深拷贝","published":1,"updated":"2021-12-31T12:01:59.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1h0037j7jfd8952z5x","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>面试复习，复习到了深拷贝，记录一下</p>\n<a id=\"more\"></a>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"基本数据类型-amp-复杂数据类型-引用数据类型\"><a href=\"#基本数据类型-amp-复杂数据类型-引用数据类型\" class=\"headerlink\" title=\"基本数据类型&amp;复杂数据类型(引用数据类型)\"></a>基本数据类型&amp;复杂数据类型(引用数据类型)</h2><blockquote>\n<p>概念</p>\n</blockquote>\n<ul>\n<li>在js种，有2中数据类型：一类是基本数据类型，一类是复杂数据类型；</li>\n<li>基本数据类型有:null,undefined,number,string,boolean,symbol(ES6)</li>\n<li>复杂数据类型:Object/arrary等<blockquote>\n<p>区别</p>\n</blockquote>\n</li>\n<li>两者的区别就是在内存中的存储位置不同</li>\n<li>前者在栈中存储数据</li>\n<li>后者在堆中存储数据，而栈中存储的是数据在堆中存储的位置(引用)<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2>作用与复制复杂数据类型时，因为栈中只保存了数据的地址，所以如果只是简单赋值一样的复制，就会出现如下情况(浅拷贝)<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one=&#123;<br>    one:<span class=\"hljs-string\">&quot;this is one&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> two=one<br><span class=\"hljs-built_in\">console</span>.log(two)  <span class=\"hljs-comment\">// &#123;one:&quot;this is one&quot;&#125;</span><br>one.one=<span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">console</span>.log(two)  <span class=\"hljs-comment\">// &#123;one:1&#125;</span><br></code></pre></div></td></tr></table></figure>\n<h2 id=\"深拷贝实现\"><a href=\"#深拷贝实现\" class=\"headerlink\" title=\"深拷贝实现\"></a>深拷贝实现</h2><blockquote>\n<p>思路</p>\n</blockquote>\n</li>\n<li>判断要复制的目标的数据类型</li>\n<li>1.简单数据类型，直接复制</li>\n<li>2.复杂数据类型(对象/数组)，遍历内部每一项</li>\n<li>3.在遍历复杂数据类型内部属性时，会出现情况上面2中情况，再次调用该函数就好(递归)<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> deepCopy = <span class=\"hljs-function\">(<span class=\"hljs-params\">copyTarget</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-comment\">// 返回和复制对象一致的类型</span><br>    <span class=\"hljs-keyword\">if</span> (copyTarget <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) &#123;<br>        res = []<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        res = &#123;&#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> copyTarget) &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> copyTarget[key] === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp; copyTarget[key] !== <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 1.复杂数据类型</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;复杂数据类型&#x27;</span>)<br>            res[key] = deepCopy(copyTarget[key])<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;基本数据类型&#x27;</span>);<br>            <span class=\"hljs-comment\">// 2.基本数据类型/和函数</span><br>            res[key] = copyTarget[key]<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res<br>&#125;<br></code></pre></div></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"wordcount":1010,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>面试复习，复习到了深拷贝，记录一下</p>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"基本数据类型-amp-复杂数据类型-引用数据类型\"><a href=\"#基本数据类型-amp-复杂数据类型-引用数据类型\" class=\"headerlink\" title=\"基本数据类型&amp;复杂数据类型(引用数据类型)\"></a>基本数据类型&amp;复杂数据类型(引用数据类型)</h2><blockquote>\n<p>概念</p>\n</blockquote>\n<ul>\n<li>在js种，有2中数据类型：一类是基本数据类型，一类是复杂数据类型；</li>\n<li>基本数据类型有:null,undefined,number,string,boolean,symbol(ES6)</li>\n<li>复杂数据类型:Object/arrary等<blockquote>\n<p>区别</p>\n</blockquote>\n</li>\n<li>两者的区别就是在内存中的存储位置不同</li>\n<li>前者在栈中存储数据</li>\n<li>后者在堆中存储数据，而栈中存储的是数据在堆中存储的位置(引用)<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2>作用与复制复杂数据类型时，因为栈中只保存了数据的地址，所以如果只是简单赋值一样的复制，就会出现如下情况(浅拷贝)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one=&#123;<br>    one:<span class=\"hljs-string\">&quot;this is one&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> two=one<br><span class=\"hljs-built_in\">console</span>.log(two)  <span class=\"hljs-comment\">// &#123;one:&quot;this is one&quot;&#125;</span><br>one.one=<span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">console</span>.log(two)  <span class=\"hljs-comment\">// &#123;one:1&#125;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"深拷贝实现\"><a href=\"#深拷贝实现\" class=\"headerlink\" title=\"深拷贝实现\"></a>深拷贝实现</h2><blockquote>\n<p>思路</p>\n</blockquote>\n</li>\n<li>判断要复制的目标的数据类型</li>\n<li>1.简单数据类型，直接复制</li>\n<li>2.复杂数据类型(对象/数组)，遍历内部每一项</li>\n<li>3.在遍历复杂数据类型内部属性时，会出现情况上面2中情况，再次调用该函数就好(递归)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> deepCopy = <span class=\"hljs-function\">(<span class=\"hljs-params\">copyTarget</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-comment\">// 返回和复制对象一致的类型</span><br>    <span class=\"hljs-keyword\">if</span> (copyTarget <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) &#123;<br>        res = []<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        res = &#123;&#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> copyTarget) &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> copyTarget[key] === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp; copyTarget[key] !== <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 1.复杂数据类型</span><br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;复杂数据类型&#x27;</span>)<br>            res[key] = deepCopy(copyTarget[key])<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;基本数据类型&#x27;</span>);<br>            <span class=\"hljs-comment\">// 2.基本数据类型/和函数</span><br>            res[key] = copyTarget[key]<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>"},{"title":"关于call,bind,apply","abbrlink":21962,"date":"2019-11-20T11:23:11.000Z","_content":"# 关于call,bind,apply的作用\n这三个方法都是只有函数才可以调用，作用就是改变函数执行时this的指向。\n<!-- more -->\n# 代码中用到的一些知识的说明\n>***rest***\n- rest是es6的一个新语法，参数接受函数的多余参数，组成一个数组，放在形参的最后\n```js\nlet one=function(...rest){\n    console.log(rest instanceof Arrary); // true\n    console.log(rest);// [1,2,3]\n};\none(1,2,3);\n```\n\n> ***...<一个数组>*** \n- 解构赋值,他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值\n```js\nlet arr=[1,2,3];\nconsole.log(arr);// [1, 2, 3]\nconsole.log(...arr);// 1 2 3\nlet brr=[...arr];\n// 很方便的复制arr的值到brr\nconsole.log(brr);// [1, 2, 3]\n```\n\n# 如何使用?\ncall\n>***参数(obj,arg1,arg2,...)***\n- 第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型\n- 代码示例\n```js\nlet one = {\n    name: 'one',\n    sayhi(...rest) {\n        console.log(`这是${this.name}的函数,这是传递进来的参数：${rest[0]},${rest[1]}`);\n    }\n};\n// 这是one的函数,这是传递进来的参数：参数一,参数二\none.sayhi('参数一', '参数二');\nlet two = {\n    name: 'two'\n};\n// 这是two的函数,这是传递进来的参数：参数1,参数2\none.sayhi.call(two, '参数a', '参数b');\n```\n\nbind\n>***参数(obj,arg1,arg2,...)()***\n- 第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型\n- 使用时，需要在调用一次，因为bind返回的是一个函数\n- 代码示例\n```js\nlet one = {\n    name: 'one',\n    sayhi(...rest) {\n        console.log(`这是${this.name}的函数,这是传递进来的参数：${rest[0]},${rest[1]}`);\n    }\n};\n// 这是one的函数,这是传递进来的参数：参数一,参数二\none.sayhi('参数一', '参数二');\nlet two = {\n    name: 'two'\n};\n// 这是two的函数,这是传递进来的参数：参数1,参数2\none.sayhi.bind(two, '参数a', '参数b')();\n```\n\napply\n>***参数(obj,[arg1,arg2,...])***\n- 第一个参数时要绑定的目标对象,后面的参数，都以数组形式传入\n```js\nlet one = {\n    name: 'one',\n    sayhi(...rest) {\n        console.log(`这是${this.name}的函数,这是传递进来的参数：${rest[0]},${rest[1]}`);\n    }\n};\n// 这是one的函数,这是传递进来的参数：参数一,参数二\none.sayhi('参数一', '参数二');\nlet two = {\n    name: 'two'\n};\n// 这是two的函数,这是传递进来的参数：参数1,参数2\none.sayhi.apply(two, ['参数a', '参数b']);\n```\n\n# 总结三者不同\n>传参数不同\n- call和bind在参数传递时，都是以多参数传递，只是bind使用是需要再调用一次返回的函数；\n- apply在传递参数时，都是以数组形式传递；\n\n>使用不同\n- call和apply改变了函数的this上下文后便执行该函数\n- bind则是返回改变了上下文后的一个函数。\n\n# 三者的应用\n>***将伪数组转换成数组***\n- 啥是伪数组?就是长得像数组，但是不是数组，是一个对象；以及含有length的对象\n```js\n// 函数内部的 arguments 就是一个伪数组\nlet one = function () {\n    console.log(arguments); //Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]\n    console.log(typeof arguments); //object\n    console.log(arguments instanceof Array); // false\n    let arr = Array.prototype.slice.call(arguments);\n    console.log(arr); //  [1, 2, 3]\n    console.log(typeof arr); // object\n    console.log(arr instanceof Array); //true\n};\none(1, 2, 3);\n```\n\n>***利用call和apply实现继承***\n```js\nfunction Person(name) {\n    this.name = name;\n    this.sayhi = function () {\n        console.log(`${this.name}向您问好`);\n    }\n}\n\nfunction Man(name) {\n    Person.call(this, name);\n}\nlet shuaxin = new Man('刷新');\nshuaxin.sayhi();\n```\n\n# 来动手实现一下call、bind、apply\ncall\n```js\n// 通过rest来接受参数\nFunction.prototype.mycall = function (...rest) {\n    // 判断调用该函数的是不是函数\n    if (typeof this === 'function') {\n        // 获取要绑定的对象\n        var obj = rest.splice(0, 1)[0];\n        // 给目标对象添加当前调用的函数\n        obj[this.name] = this;\n        // 并将要传递参数再一次传入进去\n        obj[this.name](...rest);\n        // 删除目标对象的该方法\n        delete obj.sayhi;\n    } else {\n        console.log('该函数只可以被函数调用');\n    }\n    return obj[this.name];\n};\n```\n\nbind\n```js\nFunction.prototype.mybind = function (...rest) {\n    if (typeof this === 'function') {\n        // 获取要绑定的对象\n        var obj = rest.splice(0, 1)[0];\n        var fname = this.name;\n        // 给该函数绑定当前调用的函数\n        obj[fname] = this;\n    } else {\n        console.log('该函数只可以被函数调用');\n    }\n    return function () {\n        // 将要传递参数再一次传入进去\n        obj[fname](...rest);\n        // 删除该方法\n        delete obj[fname];\n    }\n};\n```\n\napply\n```js\n Function.prototype.myapply = function (...rest) {\n    if (typeof this === 'function') {\n        // 获取要绑定的对象\n        var obj = rest.splice(0, 1)[0];\n        // 给该函数绑定当前调用的函数\n        obj[this.name] = this;\n        // 将要传递参数再一次传入进去\n        if (rest[0] instanceof Array) {\n            obj[this.name](...rest[0]);\n\n        } else {\n            obj[this.name](rest[0]);\n        }\n        // 删除该方法\n        delete obj.sayhi;\n    } else {\n        console.log('该函数只可以被函数调用');\n    }\n    return obj[this.name];\n};\n```\n# 参考链接\n[JavaScript 中 call()、apply()、bind() 的用法](https://www.runoob.com/w3cnote/js-call-apply-bind.html)\n\n[JavaScript深入之call和apply的模拟实现](https://github.com/mqyqingfeng/Blog/issues/11)\n\n[让你弄懂 call、apply、bind的应用和区别](https://juejin.im/post/5a9640335188257a7924d5ef)\n","source":"_posts/JS/关于call-bind-apply.md","raw":"---\ntitle: '关于call,bind,apply'\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 前端\nabbrlink: 21962\ndate: 2019-11-20 19:23:11\n---\n# 关于call,bind,apply的作用\n这三个方法都是只有函数才可以调用，作用就是改变函数执行时this的指向。\n<!-- more -->\n# 代码中用到的一些知识的说明\n>***rest***\n- rest是es6的一个新语法，参数接受函数的多余参数，组成一个数组，放在形参的最后\n```js\nlet one=function(...rest){\n    console.log(rest instanceof Arrary); // true\n    console.log(rest);// [1,2,3]\n};\none(1,2,3);\n```\n\n> ***...<一个数组>*** \n- 解构赋值,他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值\n```js\nlet arr=[1,2,3];\nconsole.log(arr);// [1, 2, 3]\nconsole.log(...arr);// 1 2 3\nlet brr=[...arr];\n// 很方便的复制arr的值到brr\nconsole.log(brr);// [1, 2, 3]\n```\n\n# 如何使用?\ncall\n>***参数(obj,arg1,arg2,...)***\n- 第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型\n- 代码示例\n```js\nlet one = {\n    name: 'one',\n    sayhi(...rest) {\n        console.log(`这是${this.name}的函数,这是传递进来的参数：${rest[0]},${rest[1]}`);\n    }\n};\n// 这是one的函数,这是传递进来的参数：参数一,参数二\none.sayhi('参数一', '参数二');\nlet two = {\n    name: 'two'\n};\n// 这是two的函数,这是传递进来的参数：参数1,参数2\none.sayhi.call(two, '参数a', '参数b');\n```\n\nbind\n>***参数(obj,arg1,arg2,...)()***\n- 第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型\n- 使用时，需要在调用一次，因为bind返回的是一个函数\n- 代码示例\n```js\nlet one = {\n    name: 'one',\n    sayhi(...rest) {\n        console.log(`这是${this.name}的函数,这是传递进来的参数：${rest[0]},${rest[1]}`);\n    }\n};\n// 这是one的函数,这是传递进来的参数：参数一,参数二\none.sayhi('参数一', '参数二');\nlet two = {\n    name: 'two'\n};\n// 这是two的函数,这是传递进来的参数：参数1,参数2\none.sayhi.bind(two, '参数a', '参数b')();\n```\n\napply\n>***参数(obj,[arg1,arg2,...])***\n- 第一个参数时要绑定的目标对象,后面的参数，都以数组形式传入\n```js\nlet one = {\n    name: 'one',\n    sayhi(...rest) {\n        console.log(`这是${this.name}的函数,这是传递进来的参数：${rest[0]},${rest[1]}`);\n    }\n};\n// 这是one的函数,这是传递进来的参数：参数一,参数二\none.sayhi('参数一', '参数二');\nlet two = {\n    name: 'two'\n};\n// 这是two的函数,这是传递进来的参数：参数1,参数2\none.sayhi.apply(two, ['参数a', '参数b']);\n```\n\n# 总结三者不同\n>传参数不同\n- call和bind在参数传递时，都是以多参数传递，只是bind使用是需要再调用一次返回的函数；\n- apply在传递参数时，都是以数组形式传递；\n\n>使用不同\n- call和apply改变了函数的this上下文后便执行该函数\n- bind则是返回改变了上下文后的一个函数。\n\n# 三者的应用\n>***将伪数组转换成数组***\n- 啥是伪数组?就是长得像数组，但是不是数组，是一个对象；以及含有length的对象\n```js\n// 函数内部的 arguments 就是一个伪数组\nlet one = function () {\n    console.log(arguments); //Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]\n    console.log(typeof arguments); //object\n    console.log(arguments instanceof Array); // false\n    let arr = Array.prototype.slice.call(arguments);\n    console.log(arr); //  [1, 2, 3]\n    console.log(typeof arr); // object\n    console.log(arr instanceof Array); //true\n};\none(1, 2, 3);\n```\n\n>***利用call和apply实现继承***\n```js\nfunction Person(name) {\n    this.name = name;\n    this.sayhi = function () {\n        console.log(`${this.name}向您问好`);\n    }\n}\n\nfunction Man(name) {\n    Person.call(this, name);\n}\nlet shuaxin = new Man('刷新');\nshuaxin.sayhi();\n```\n\n# 来动手实现一下call、bind、apply\ncall\n```js\n// 通过rest来接受参数\nFunction.prototype.mycall = function (...rest) {\n    // 判断调用该函数的是不是函数\n    if (typeof this === 'function') {\n        // 获取要绑定的对象\n        var obj = rest.splice(0, 1)[0];\n        // 给目标对象添加当前调用的函数\n        obj[this.name] = this;\n        // 并将要传递参数再一次传入进去\n        obj[this.name](...rest);\n        // 删除目标对象的该方法\n        delete obj.sayhi;\n    } else {\n        console.log('该函数只可以被函数调用');\n    }\n    return obj[this.name];\n};\n```\n\nbind\n```js\nFunction.prototype.mybind = function (...rest) {\n    if (typeof this === 'function') {\n        // 获取要绑定的对象\n        var obj = rest.splice(0, 1)[0];\n        var fname = this.name;\n        // 给该函数绑定当前调用的函数\n        obj[fname] = this;\n    } else {\n        console.log('该函数只可以被函数调用');\n    }\n    return function () {\n        // 将要传递参数再一次传入进去\n        obj[fname](...rest);\n        // 删除该方法\n        delete obj[fname];\n    }\n};\n```\n\napply\n```js\n Function.prototype.myapply = function (...rest) {\n    if (typeof this === 'function') {\n        // 获取要绑定的对象\n        var obj = rest.splice(0, 1)[0];\n        // 给该函数绑定当前调用的函数\n        obj[this.name] = this;\n        // 将要传递参数再一次传入进去\n        if (rest[0] instanceof Array) {\n            obj[this.name](...rest[0]);\n\n        } else {\n            obj[this.name](rest[0]);\n        }\n        // 删除该方法\n        delete obj.sayhi;\n    } else {\n        console.log('该函数只可以被函数调用');\n    }\n    return obj[this.name];\n};\n```\n# 参考链接\n[JavaScript 中 call()、apply()、bind() 的用法](https://www.runoob.com/w3cnote/js-call-apply-bind.html)\n\n[JavaScript深入之call和apply的模拟实现](https://github.com/mqyqingfeng/Blog/issues/11)\n\n[让你弄懂 call、apply、bind的应用和区别](https://juejin.im/post/5a9640335188257a7924d5ef)\n","slug":"JS/关于call-bind-apply","published":1,"updated":"2021-12-31T12:01:59.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1h003aj7jfe56j3e5b","content":"<h1 id=\"关于call-bind-apply的作用\"><a href=\"#关于call-bind-apply的作用\" class=\"headerlink\" title=\"关于call,bind,apply的作用\"></a>关于call,bind,apply的作用</h1><p>这三个方法都是只有函数才可以调用，作用就是改变函数执行时this的指向。</p>\n<a id=\"more\"></a>\n<h1 id=\"代码中用到的一些知识的说明\"><a href=\"#代码中用到的一些知识的说明\" class=\"headerlink\" title=\"代码中用到的一些知识的说明\"></a>代码中用到的一些知识的说明</h1><blockquote>\n<p><strong><em>rest</em></strong></p>\n</blockquote>\n<ul>\n<li>rest是es6的一个新语法，参数接受函数的多余参数，组成一个数组，放在形参的最后<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...rest</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(rest <span class=\"hljs-keyword\">instanceof</span> Arrary); <span class=\"hljs-comment\">// true</span><br>    <span class=\"hljs-built_in\">console</span>.log(rest);<span class=\"hljs-comment\">// [1,2,3]</span><br>&#125;;<br>one(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p><strong><em>…&lt;一个数组&gt;</em></strong> </p>\n</blockquote>\n<ul>\n<li>解构赋值,他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">// [1, 2, 3]</span><br><span class=\"hljs-built_in\">console</span>.log(...arr);<span class=\"hljs-comment\">// 1 2 3</span><br><span class=\"hljs-keyword\">let</span> brr=[...arr];<br><span class=\"hljs-comment\">// 很方便的复制arr的值到brr</span><br><span class=\"hljs-built_in\">console</span>.log(brr);<span class=\"hljs-comment\">// [1, 2, 3]</span><br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用?\"></a>如何使用?</h1><p>call</p>\n<blockquote>\n<p><strong><em>参数(obj,arg1,arg2,…)</em></strong></p>\n</blockquote>\n<ul>\n<li>第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型</li>\n<li>代码示例<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one = &#123;<br>    name: <span class=\"hljs-string\">&#x27;one&#x27;</span>,<br>    sayhi(...rest) &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>的函数,这是传递进来的参数：<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">0</span>]&#125;</span>,<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">1</span>]&#125;</span>`</span>);<br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">// 这是one的函数,这是传递进来的参数：参数一,参数二</span><br>one.sayhi(<span class=\"hljs-string\">&#x27;参数一&#x27;</span>, <span class=\"hljs-string\">&#x27;参数二&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> two = &#123;<br>    name: <span class=\"hljs-string\">&#x27;two&#x27;</span><br>&#125;;<br><span class=\"hljs-comment\">// 这是two的函数,这是传递进来的参数：参数1,参数2</span><br>one.sayhi.call(two, <span class=\"hljs-string\">&#x27;参数a&#x27;</span>, <span class=\"hljs-string\">&#x27;参数b&#x27;</span>);<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<p>bind</p>\n<blockquote>\n<p><strong><em>参数(obj,arg1,arg2,…)()</em></strong></p>\n</blockquote>\n<ul>\n<li>第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型</li>\n<li>使用时，需要在调用一次，因为bind返回的是一个函数</li>\n<li>代码示例<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one = &#123;<br>    name: <span class=\"hljs-string\">&#x27;one&#x27;</span>,<br>    sayhi(...rest) &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>的函数,这是传递进来的参数：<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">0</span>]&#125;</span>,<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">1</span>]&#125;</span>`</span>);<br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">// 这是one的函数,这是传递进来的参数：参数一,参数二</span><br>one.sayhi(<span class=\"hljs-string\">&#x27;参数一&#x27;</span>, <span class=\"hljs-string\">&#x27;参数二&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> two = &#123;<br>    name: <span class=\"hljs-string\">&#x27;two&#x27;</span><br>&#125;;<br><span class=\"hljs-comment\">// 这是two的函数,这是传递进来的参数：参数1,参数2</span><br>one.sayhi.bind(two, <span class=\"hljs-string\">&#x27;参数a&#x27;</span>, <span class=\"hljs-string\">&#x27;参数b&#x27;</span>)();<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<p>apply</p>\n<blockquote>\n<p><strong><em>参数(obj,[arg1,arg2,…])</em></strong></p>\n</blockquote>\n<ul>\n<li>第一个参数时要绑定的目标对象,后面的参数，都以数组形式传入<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one = &#123;<br>    name: <span class=\"hljs-string\">&#x27;one&#x27;</span>,<br>    sayhi(...rest) &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>的函数,这是传递进来的参数：<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">0</span>]&#125;</span>,<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">1</span>]&#125;</span>`</span>);<br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">// 这是one的函数,这是传递进来的参数：参数一,参数二</span><br>one.sayhi(<span class=\"hljs-string\">&#x27;参数一&#x27;</span>, <span class=\"hljs-string\">&#x27;参数二&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> two = &#123;<br>    name: <span class=\"hljs-string\">&#x27;two&#x27;</span><br>&#125;;<br><span class=\"hljs-comment\">// 这是two的函数,这是传递进来的参数：参数1,参数2</span><br>one.sayhi.apply(two, [<span class=\"hljs-string\">&#x27;参数a&#x27;</span>, <span class=\"hljs-string\">&#x27;参数b&#x27;</span>]);<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"总结三者不同\"><a href=\"#总结三者不同\" class=\"headerlink\" title=\"总结三者不同\"></a>总结三者不同</h1><blockquote>\n<p>传参数不同</p>\n</blockquote>\n<ul>\n<li>call和bind在参数传递时，都是以多参数传递，只是bind使用是需要再调用一次返回的函数；</li>\n<li>apply在传递参数时，都是以数组形式传递；</li>\n</ul>\n<blockquote>\n<p>使用不同</p>\n</blockquote>\n<ul>\n<li>call和apply改变了函数的this上下文后便执行该函数</li>\n<li>bind则是返回改变了上下文后的一个函数。</li>\n</ul>\n<h1 id=\"三者的应用\"><a href=\"#三者的应用\" class=\"headerlink\" title=\"三者的应用\"></a>三者的应用</h1><blockquote>\n<p><strong><em>将伪数组转换成数组</em></strong></p>\n</blockquote>\n<ul>\n<li>啥是伪数组?就是长得像数组，但是不是数组，是一个对象；以及含有length的对象<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 函数内部的 arguments 就是一个伪数组</span><br><span class=\"hljs-keyword\">let</span> one = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>); <span class=\"hljs-comment\">//Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">arguments</span>); <span class=\"hljs-comment\">//object</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>); <span class=\"hljs-comment\">// false</span><br>    <span class=\"hljs-keyword\">let</span> arr = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(arr); <span class=\"hljs-comment\">//  [1, 2, 3]</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> arr); <span class=\"hljs-comment\">// object</span><br>    <span class=\"hljs-built_in\">console</span>.log(arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>); <span class=\"hljs-comment\">//true</span><br>&#125;;<br>one(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p><strong><em>利用call和apply实现继承</em></strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.sayhi = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>向您问好`</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Man</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    Person.call(<span class=\"hljs-built_in\">this</span>, name);<br>&#125;<br><span class=\"hljs-keyword\">let</span> shuaxin = <span class=\"hljs-keyword\">new</span> Man(<span class=\"hljs-string\">&#x27;刷新&#x27;</span>);<br>shuaxin.sayhi();<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"来动手实现一下call、bind、apply\"><a href=\"#来动手实现一下call、bind、apply\" class=\"headerlink\" title=\"来动手实现一下call、bind、apply\"></a>来动手实现一下call、bind、apply</h1><p>call</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 通过rest来接受参数</span><br><span class=\"hljs-built_in\">Function</span>.prototype.mycall = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...rest</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 判断调用该函数的是不是函数</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        <span class=\"hljs-comment\">// 获取要绑定的对象</span><br>        <span class=\"hljs-keyword\">var</span> obj = rest.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-comment\">// 给目标对象添加当前调用的函数</span><br>        obj[<span class=\"hljs-built_in\">this</span>.name] = <span class=\"hljs-built_in\">this</span>;<br>        <span class=\"hljs-comment\">// 并将要传递参数再一次传入进去</span><br>        obj[<span class=\"hljs-built_in\">this</span>.name](...rest);<br>        <span class=\"hljs-comment\">// 删除目标对象的该方法</span><br>        <span class=\"hljs-keyword\">delete</span> obj.sayhi;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;该函数只可以被函数调用&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj[<span class=\"hljs-built_in\">this</span>.name];<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<p>bind</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Function</span>.prototype.mybind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...rest</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        <span class=\"hljs-comment\">// 获取要绑定的对象</span><br>        <span class=\"hljs-keyword\">var</span> obj = rest.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> fname = <span class=\"hljs-built_in\">this</span>.name;<br>        <span class=\"hljs-comment\">// 给该函数绑定当前调用的函数</span><br>        obj[fname] = <span class=\"hljs-built_in\">this</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;该函数只可以被函数调用&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-comment\">// 将要传递参数再一次传入进去</span><br>        obj[fname](...rest);<br>        <span class=\"hljs-comment\">// 删除该方法</span><br>        <span class=\"hljs-keyword\">delete</span> obj[fname];<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<p>apply</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"> <span class=\"hljs-built_in\">Function</span>.prototype.myapply = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...rest</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        <span class=\"hljs-comment\">// 获取要绑定的对象</span><br>        <span class=\"hljs-keyword\">var</span> obj = rest.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-comment\">// 给该函数绑定当前调用的函数</span><br>        obj[<span class=\"hljs-built_in\">this</span>.name] = <span class=\"hljs-built_in\">this</span>;<br>        <span class=\"hljs-comment\">// 将要传递参数再一次传入进去</span><br>        <span class=\"hljs-keyword\">if</span> (rest[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) &#123;<br>            obj[<span class=\"hljs-built_in\">this</span>.name](...rest[<span class=\"hljs-number\">0</span>]);<br><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            obj[<span class=\"hljs-built_in\">this</span>.name](rest[<span class=\"hljs-number\">0</span>]);<br>        &#125;<br>        <span class=\"hljs-comment\">// 删除该方法</span><br>        <span class=\"hljs-keyword\">delete</span> obj.sayhi;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;该函数只可以被函数调用&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj[<span class=\"hljs-built_in\">this</span>.name];<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.runoob.com/w3cnote/js-call-apply-bind.html\">JavaScript 中 call()、apply()、bind() 的用法</a></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/11\">JavaScript深入之call和apply的模拟实现</a></p>\n<p><a href=\"https://juejin.im/post/5a9640335188257a7924d5ef\">让你弄懂 call、apply、bind的应用和区别</a></p>\n","site":{"data":{}},"wordcount":3854,"excerpt":"<h1 id=\"关于call-bind-apply的作用\"><a href=\"#关于call-bind-apply的作用\" class=\"headerlink\" title=\"关于call,bind,apply的作用\"></a>关于call,bind,apply的作用</h1><p>这三个方法都是只有函数才可以调用，作用就是改变函数执行时this的指向。</p>","more":"<h1 id=\"代码中用到的一些知识的说明\"><a href=\"#代码中用到的一些知识的说明\" class=\"headerlink\" title=\"代码中用到的一些知识的说明\"></a>代码中用到的一些知识的说明</h1><blockquote>\n<p><strong><em>rest</em></strong></p>\n</blockquote>\n<ul>\n<li>rest是es6的一个新语法，参数接受函数的多余参数，组成一个数组，放在形参的最后<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...rest</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(rest <span class=\"hljs-keyword\">instanceof</span> Arrary); <span class=\"hljs-comment\">// true</span><br>    <span class=\"hljs-built_in\">console</span>.log(rest);<span class=\"hljs-comment\">// [1,2,3]</span><br>&#125;;<br>one(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p><strong><em>…&lt;一个数组&gt;</em></strong> </p>\n</blockquote>\n<ul>\n<li>解构赋值,他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">// [1, 2, 3]</span><br><span class=\"hljs-built_in\">console</span>.log(...arr);<span class=\"hljs-comment\">// 1 2 3</span><br><span class=\"hljs-keyword\">let</span> brr=[...arr];<br><span class=\"hljs-comment\">// 很方便的复制arr的值到brr</span><br><span class=\"hljs-built_in\">console</span>.log(brr);<span class=\"hljs-comment\">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用?\"></a>如何使用?</h1><p>call</p>\n<blockquote>\n<p><strong><em>参数(obj,arg1,arg2,…)</em></strong></p>\n</blockquote>\n<ul>\n<li>第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型</li>\n<li>代码示例<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one = &#123;<br>    name: <span class=\"hljs-string\">&#x27;one&#x27;</span>,<br>    sayhi(...rest) &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>的函数,这是传递进来的参数：<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">0</span>]&#125;</span>,<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">1</span>]&#125;</span>`</span>);<br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">// 这是one的函数,这是传递进来的参数：参数一,参数二</span><br>one.sayhi(<span class=\"hljs-string\">&#x27;参数一&#x27;</span>, <span class=\"hljs-string\">&#x27;参数二&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> two = &#123;<br>    name: <span class=\"hljs-string\">&#x27;two&#x27;</span><br>&#125;;<br><span class=\"hljs-comment\">// 这是two的函数,这是传递进来的参数：参数1,参数2</span><br>one.sayhi.call(two, <span class=\"hljs-string\">&#x27;参数a&#x27;</span>, <span class=\"hljs-string\">&#x27;参数b&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>bind</p>\n<blockquote>\n<p><strong><em>参数(obj,arg1,arg2,…)()</em></strong></p>\n</blockquote>\n<ul>\n<li>第一个参数是要绑定的目标对象，后面的参数就是要传入函数内的参数，可以是任何类型</li>\n<li>使用时，需要在调用一次，因为bind返回的是一个函数</li>\n<li>代码示例<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one = &#123;<br>    name: <span class=\"hljs-string\">&#x27;one&#x27;</span>,<br>    sayhi(...rest) &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>的函数,这是传递进来的参数：<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">0</span>]&#125;</span>,<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">1</span>]&#125;</span>`</span>);<br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">// 这是one的函数,这是传递进来的参数：参数一,参数二</span><br>one.sayhi(<span class=\"hljs-string\">&#x27;参数一&#x27;</span>, <span class=\"hljs-string\">&#x27;参数二&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> two = &#123;<br>    name: <span class=\"hljs-string\">&#x27;two&#x27;</span><br>&#125;;<br><span class=\"hljs-comment\">// 这是two的函数,这是传递进来的参数：参数1,参数2</span><br>one.sayhi.bind(two, <span class=\"hljs-string\">&#x27;参数a&#x27;</span>, <span class=\"hljs-string\">&#x27;参数b&#x27;</span>)();<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>apply</p>\n<blockquote>\n<p><strong><em>参数(obj,[arg1,arg2,…])</em></strong></p>\n</blockquote>\n<ul>\n<li>第一个参数时要绑定的目标对象,后面的参数，都以数组形式传入<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one = &#123;<br>    name: <span class=\"hljs-string\">&#x27;one&#x27;</span>,<br>    sayhi(...rest) &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`这是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>的函数,这是传递进来的参数：<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">0</span>]&#125;</span>,<span class=\"hljs-subst\">$&#123;rest[<span class=\"hljs-number\">1</span>]&#125;</span>`</span>);<br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">// 这是one的函数,这是传递进来的参数：参数一,参数二</span><br>one.sayhi(<span class=\"hljs-string\">&#x27;参数一&#x27;</span>, <span class=\"hljs-string\">&#x27;参数二&#x27;</span>);<br><span class=\"hljs-keyword\">let</span> two = &#123;<br>    name: <span class=\"hljs-string\">&#x27;two&#x27;</span><br>&#125;;<br><span class=\"hljs-comment\">// 这是two的函数,这是传递进来的参数：参数1,参数2</span><br>one.sayhi.apply(two, [<span class=\"hljs-string\">&#x27;参数a&#x27;</span>, <span class=\"hljs-string\">&#x27;参数b&#x27;</span>]);<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"总结三者不同\"><a href=\"#总结三者不同\" class=\"headerlink\" title=\"总结三者不同\"></a>总结三者不同</h1><blockquote>\n<p>传参数不同</p>\n</blockquote>\n<ul>\n<li>call和bind在参数传递时，都是以多参数传递，只是bind使用是需要再调用一次返回的函数；</li>\n<li>apply在传递参数时，都是以数组形式传递；</li>\n</ul>\n<blockquote>\n<p>使用不同</p>\n</blockquote>\n<ul>\n<li>call和apply改变了函数的this上下文后便执行该函数</li>\n<li>bind则是返回改变了上下文后的一个函数。</li>\n</ul>\n<h1 id=\"三者的应用\"><a href=\"#三者的应用\" class=\"headerlink\" title=\"三者的应用\"></a>三者的应用</h1><blockquote>\n<p><strong><em>将伪数组转换成数组</em></strong></p>\n</blockquote>\n<ul>\n<li>啥是伪数组?就是长得像数组，但是不是数组，是一个对象；以及含有length的对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 函数内部的 arguments 就是一个伪数组</span><br><span class=\"hljs-keyword\">let</span> one = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>); <span class=\"hljs-comment\">//Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">arguments</span>); <span class=\"hljs-comment\">//object</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>); <span class=\"hljs-comment\">// false</span><br>    <span class=\"hljs-keyword\">let</span> arr = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(arr); <span class=\"hljs-comment\">//  [1, 2, 3]</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> arr); <span class=\"hljs-comment\">// object</span><br>    <span class=\"hljs-built_in\">console</span>.log(arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>); <span class=\"hljs-comment\">//true</span><br>&#125;;<br>one(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p><strong><em>利用call和apply实现继承</em></strong></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.sayhi = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>向您问好`</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Man</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    Person.call(<span class=\"hljs-built_in\">this</span>, name);<br>&#125;<br><span class=\"hljs-keyword\">let</span> shuaxin = <span class=\"hljs-keyword\">new</span> Man(<span class=\"hljs-string\">&#x27;刷新&#x27;</span>);<br>shuaxin.sayhi();<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"来动手实现一下call、bind、apply\"><a href=\"#来动手实现一下call、bind、apply\" class=\"headerlink\" title=\"来动手实现一下call、bind、apply\"></a>来动手实现一下call、bind、apply</h1><p>call</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 通过rest来接受参数</span><br><span class=\"hljs-built_in\">Function</span>.prototype.mycall = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...rest</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 判断调用该函数的是不是函数</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        <span class=\"hljs-comment\">// 获取要绑定的对象</span><br>        <span class=\"hljs-keyword\">var</span> obj = rest.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-comment\">// 给目标对象添加当前调用的函数</span><br>        obj[<span class=\"hljs-built_in\">this</span>.name] = <span class=\"hljs-built_in\">this</span>;<br>        <span class=\"hljs-comment\">// 并将要传递参数再一次传入进去</span><br>        obj[<span class=\"hljs-built_in\">this</span>.name](...rest);<br>        <span class=\"hljs-comment\">// 删除目标对象的该方法</span><br>        <span class=\"hljs-keyword\">delete</span> obj.sayhi;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;该函数只可以被函数调用&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj[<span class=\"hljs-built_in\">this</span>.name];<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>bind</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">Function</span>.prototype.mybind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...rest</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        <span class=\"hljs-comment\">// 获取要绑定的对象</span><br>        <span class=\"hljs-keyword\">var</span> obj = rest.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> fname = <span class=\"hljs-built_in\">this</span>.name;<br>        <span class=\"hljs-comment\">// 给该函数绑定当前调用的函数</span><br>        obj[fname] = <span class=\"hljs-built_in\">this</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;该函数只可以被函数调用&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-comment\">// 将要传递参数再一次传入进去</span><br>        obj[fname](...rest);<br>        <span class=\"hljs-comment\">// 删除该方法</span><br>        <span class=\"hljs-keyword\">delete</span> obj[fname];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>apply</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-built_in\">Function</span>.prototype.myapply = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...rest</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> === <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        <span class=\"hljs-comment\">// 获取要绑定的对象</span><br>        <span class=\"hljs-keyword\">var</span> obj = rest.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-comment\">// 给该函数绑定当前调用的函数</span><br>        obj[<span class=\"hljs-built_in\">this</span>.name] = <span class=\"hljs-built_in\">this</span>;<br>        <span class=\"hljs-comment\">// 将要传递参数再一次传入进去</span><br>        <span class=\"hljs-keyword\">if</span> (rest[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>) &#123;<br>            obj[<span class=\"hljs-built_in\">this</span>.name](...rest[<span class=\"hljs-number\">0</span>]);<br><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            obj[<span class=\"hljs-built_in\">this</span>.name](rest[<span class=\"hljs-number\">0</span>]);<br>        &#125;<br>        <span class=\"hljs-comment\">// 删除该方法</span><br>        <span class=\"hljs-keyword\">delete</span> obj.sayhi;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;该函数只可以被函数调用&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj[<span class=\"hljs-built_in\">this</span>.name];<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.runoob.com/w3cnote/js-call-apply-bind.html\">JavaScript 中 call()、apply()、bind() 的用法</a></p>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/11\">JavaScript深入之call和apply的模拟实现</a></p>\n<p><a href=\"https://juejin.im/post/5a9640335188257a7924d5ef\">让你弄懂 call、apply、bind的应用和区别</a></p>"},{"title":"关于js实现重载","abbrlink":38655,"date":"2019-07-23T02:05:48.000Z","_content":"# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%BD%BD.html)\n\n# 重载是什么\n\n    定义：函数名相同,函数的参数列表不同(包括参数个数和参数类型)，至于返回类型可同可不同\n\n\n<!-- more -->\n# js没有实现重载\n\n```javascript\n    let calculate={\n        add(a){\n            console.log(a);\n        },\n        add(a,b){\n            cosole.log(a+b);\n        }\n    };\n    calculate.add(5);// NaN  因为第二个参数未定义\n    calculate.add(5,5);// 10\n```\n\n    根据上面的例子发现，当有两个重名的方法的时候，会执行后面的那一个\n\n# 模拟重载\n虽然js本身不支持重载，但是我们可以通过 [arguments对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments)和[rest参数](http://es6.ruanyifeng.com/?search=rest&x=0&y=0#docs/function#rest-%E5%8F%82%E6%95%B0)来模拟重载的效果\n\n\n# 代码演示\n\narguments对象版本\n\n```javascript\nlet calculate = {\n    // arguments版本\n    add_arguments() {\n        console.log(`arg是数组吗:${arguments instanceof Array}`);\n        let argCount = arguments.length;\n        let sum = 0;\n        switch (argCount) {\n            // 当传入一个参数的时候，直接返回该值\n            case 1:\n                sum = arguments[0];\n                console.log(`sum=${sum}`);\n                break;\n                // 当参数个数大于一个时，进行求和\n            default:\n                for (let i in arguments) {\n                    sum += arguments[i];\n                }\n                console.log(`sum=${sum}`);\n                break;\n        };\n        return sum;\n    }\n};\n calculate.add_arguments(1);//1\n calculate.add_arguments(1, 1, 100);//102\n```\n\nrest参数版本\n\n```javascript\n\nlet calculate={\n    // rest参数版本\n    add_rest(one, ...arg) {\n        console.log(`arg是数组吗:${arg instanceof Array}`);\n        let sum = 0;\n        // 当传入一个参数的时候，直接返回该值\n        if (arg.length == 0) {\n            console.warn('参数只有一个');\n            console.log(one);\n            sum = one;\n        } else {\n            // 当参数个数大于一个时，进行求和\n            console.log(`参数有${arg.length+1}个`);\n            sum = one;\n            for (let i in arg) {\n                console.log(arg[i]);\n                sum += arg[i];\n            };\n            console.log(sum);\n        };\n        return sum;\n    }\n};\ncalculate.add_rest(0);//0\ncalculate.add_rest(0,10);//10\n```","source":"_posts/JS/js模拟重载.md","raw":"---\ntitle: 关于js实现重载\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 前端\nabbrlink: 38655\ndate: 2019-07-23 10:05:48\n---\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%BD%BD.html)\n\n# 重载是什么\n\n    定义：函数名相同,函数的参数列表不同(包括参数个数和参数类型)，至于返回类型可同可不同\n\n\n<!-- more -->\n# js没有实现重载\n\n```javascript\n    let calculate={\n        add(a){\n            console.log(a);\n        },\n        add(a,b){\n            cosole.log(a+b);\n        }\n    };\n    calculate.add(5);// NaN  因为第二个参数未定义\n    calculate.add(5,5);// 10\n```\n\n    根据上面的例子发现，当有两个重名的方法的时候，会执行后面的那一个\n\n# 模拟重载\n虽然js本身不支持重载，但是我们可以通过 [arguments对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments)和[rest参数](http://es6.ruanyifeng.com/?search=rest&x=0&y=0#docs/function#rest-%E5%8F%82%E6%95%B0)来模拟重载的效果\n\n\n# 代码演示\n\narguments对象版本\n\n```javascript\nlet calculate = {\n    // arguments版本\n    add_arguments() {\n        console.log(`arg是数组吗:${arguments instanceof Array}`);\n        let argCount = arguments.length;\n        let sum = 0;\n        switch (argCount) {\n            // 当传入一个参数的时候，直接返回该值\n            case 1:\n                sum = arguments[0];\n                console.log(`sum=${sum}`);\n                break;\n                // 当参数个数大于一个时，进行求和\n            default:\n                for (let i in arguments) {\n                    sum += arguments[i];\n                }\n                console.log(`sum=${sum}`);\n                break;\n        };\n        return sum;\n    }\n};\n calculate.add_arguments(1);//1\n calculate.add_arguments(1, 1, 100);//102\n```\n\nrest参数版本\n\n```javascript\n\nlet calculate={\n    // rest参数版本\n    add_rest(one, ...arg) {\n        console.log(`arg是数组吗:${arg instanceof Array}`);\n        let sum = 0;\n        // 当传入一个参数的时候，直接返回该值\n        if (arg.length == 0) {\n            console.warn('参数只有一个');\n            console.log(one);\n            sum = one;\n        } else {\n            // 当参数个数大于一个时，进行求和\n            console.log(`参数有${arg.length+1}个`);\n            sum = one;\n            for (let i in arg) {\n                console.log(arg[i]);\n                sum += arg[i];\n            };\n            console.log(sum);\n        };\n        return sum;\n    }\n};\ncalculate.add_rest(0);//0\ncalculate.add_rest(0,10);//10\n```","slug":"JS/js模拟重载","published":1,"updated":"2021-12-31T12:01:59.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1h003dj7jfbrl055ac","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%BD%BD.html\">这里</a></h1><h1 id=\"重载是什么\"><a href=\"#重载是什么\" class=\"headerlink\" title=\"重载是什么\"></a>重载是什么</h1><div class=\"hljs code-wrapper\"><pre><code>定义：函数名相同,函数的参数列表不同(包括参数个数和参数类型)，至于返回类型可同可不同</code></pre></div>\n<a id=\"more\"></a>\n<h1 id=\"js没有实现重载\"><a href=\"#js没有实现重载\" class=\"headerlink\" title=\"js没有实现重载\"></a>js没有实现重载</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> calculate=&#123;<br>    add(a)&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(a);<br>    &#125;,<br>    add(a,b)&#123;<br>        cosole.log(a+b);<br>    &#125;<br>&#125;;<br>calculate.add(<span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">// NaN  因为第二个参数未定义</span><br>calculate.add(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">// 10</span><br></code></pre></div></td></tr></table></figure>\n\n<div class=\"hljs code-wrapper\"><pre><code>根据上面的例子发现，当有两个重名的方法的时候，会执行后面的那一个</code></pre></div>\n<h1 id=\"模拟重载\"><a href=\"#模拟重载\" class=\"headerlink\" title=\"模拟重载\"></a>模拟重载</h1><p>虽然js本身不支持重载，但是我们可以通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\">arguments对象</a>和<a href=\"http://es6.ruanyifeng.com/?search=rest&x=0&y=0#docs/function#rest-%E5%8F%82%E6%95%B0\">rest参数</a>来模拟重载的效果</p>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p>arguments对象版本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> calculate = &#123;<br>    <span class=\"hljs-comment\">// arguments版本</span><br>    add_arguments() &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`arg是数组吗:<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">arguments</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>&#125;</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> argCount = <span class=\"hljs-built_in\">arguments</span>.length;<br>        <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">switch</span> (argCount) &#123;<br>            <span class=\"hljs-comment\">// 当传入一个参数的时候，直接返回该值</span><br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>                sum = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>];<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`sum=<span class=\"hljs-subst\">$&#123;sum&#125;</span>`</span>);<br>                <span class=\"hljs-keyword\">break</span>;<br>                <span class=\"hljs-comment\">// 当参数个数大于一个时，进行求和</span><br>            <span class=\"hljs-keyword\">default</span>:<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">arguments</span>) &#123;<br>                    sum += <span class=\"hljs-built_in\">arguments</span>[i];<br>                &#125;<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`sum=<span class=\"hljs-subst\">$&#123;sum&#125;</span>`</span>);<br>                <span class=\"hljs-keyword\">break</span>;<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;;<br> calculate.add_arguments(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//1</span><br> calculate.add_arguments(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>);<span class=\"hljs-comment\">//102</span><br></code></pre></div></td></tr></table></figure>\n\n<p>rest参数版本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-keyword\">let</span> calculate=&#123;<br>    <span class=\"hljs-comment\">// rest参数版本</span><br>    add_rest(one, ...arg) &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`arg是数组吗:<span class=\"hljs-subst\">$&#123;arg <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>&#125;</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-comment\">// 当传入一个参数的时候，直接返回该值</span><br>        <span class=\"hljs-keyword\">if</span> (arg.length == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;参数只有一个&#x27;</span>);<br>            <span class=\"hljs-built_in\">console</span>.log(one);<br>            sum = one;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 当参数个数大于一个时，进行求和</span><br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`参数有<span class=\"hljs-subst\">$&#123;arg.length+<span class=\"hljs-number\">1</span>&#125;</span>个`</span>);<br>            sum = one;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> arg) &#123;<br>                <span class=\"hljs-built_in\">console</span>.log(arg[i]);<br>                sum += arg[i];<br>            &#125;;<br>            <span class=\"hljs-built_in\">console</span>.log(sum);<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;;<br>calculate.add_rest(<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//0</span><br>calculate.add_rest(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>);<span class=\"hljs-comment\">//10</span><br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":1353,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%BD%BD.html\">这里</a></h1><h1 id=\"重载是什么\"><a href=\"#重载是什么\" class=\"headerlink\" title=\"重载是什么\"></a>重载是什么</h1><pre><code>定义：函数名相同,函数的参数列表不同(包括参数个数和参数类型)，至于返回类型可同可不同</code></pre>","more":"<h1 id=\"js没有实现重载\"><a href=\"#js没有实现重载\" class=\"headerlink\" title=\"js没有实现重载\"></a>js没有实现重载</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> calculate=&#123;<br>    add(a)&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(a);<br>    &#125;,<br>    add(a,b)&#123;<br>        cosole.log(a+b);<br>    &#125;<br>&#125;;<br>calculate.add(<span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">// NaN  因为第二个参数未定义</span><br>calculate.add(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">// 10</span><br></code></pre></td></tr></table></figure>\n\n<pre><code>根据上面的例子发现，当有两个重名的方法的时候，会执行后面的那一个</code></pre>\n<h1 id=\"模拟重载\"><a href=\"#模拟重载\" class=\"headerlink\" title=\"模拟重载\"></a>模拟重载</h1><p>虽然js本身不支持重载，但是我们可以通过 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\">arguments对象</a>和<a href=\"http://es6.ruanyifeng.com/?search=rest&x=0&y=0#docs/function#rest-%E5%8F%82%E6%95%B0\">rest参数</a>来模拟重载的效果</p>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p>arguments对象版本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> calculate = &#123;<br>    <span class=\"hljs-comment\">// arguments版本</span><br>    add_arguments() &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`arg是数组吗:<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">arguments</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>&#125;</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> argCount = <span class=\"hljs-built_in\">arguments</span>.length;<br>        <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">switch</span> (argCount) &#123;<br>            <span class=\"hljs-comment\">// 当传入一个参数的时候，直接返回该值</span><br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>                sum = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>];<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`sum=<span class=\"hljs-subst\">$&#123;sum&#125;</span>`</span>);<br>                <span class=\"hljs-keyword\">break</span>;<br>                <span class=\"hljs-comment\">// 当参数个数大于一个时，进行求和</span><br>            <span class=\"hljs-keyword\">default</span>:<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">arguments</span>) &#123;<br>                    sum += <span class=\"hljs-built_in\">arguments</span>[i];<br>                &#125;<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`sum=<span class=\"hljs-subst\">$&#123;sum&#125;</span>`</span>);<br>                <span class=\"hljs-keyword\">break</span>;<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;;<br> calculate.add_arguments(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//1</span><br> calculate.add_arguments(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>);<span class=\"hljs-comment\">//102</span><br></code></pre></td></tr></table></figure>\n\n<p>rest参数版本</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-keyword\">let</span> calculate=&#123;<br>    <span class=\"hljs-comment\">// rest参数版本</span><br>    add_rest(one, ...arg) &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`arg是数组吗:<span class=\"hljs-subst\">$&#123;arg <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>&#125;</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-comment\">// 当传入一个参数的时候，直接返回该值</span><br>        <span class=\"hljs-keyword\">if</span> (arg.length == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;参数只有一个&#x27;</span>);<br>            <span class=\"hljs-built_in\">console</span>.log(one);<br>            sum = one;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 当参数个数大于一个时，进行求和</span><br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`参数有<span class=\"hljs-subst\">$&#123;arg.length+<span class=\"hljs-number\">1</span>&#125;</span>个`</span>);<br>            sum = one;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> arg) &#123;<br>                <span class=\"hljs-built_in\">console</span>.log(arg[i]);<br>                sum += arg[i];<br>            &#125;;<br>            <span class=\"hljs-built_in\">console</span>.log(sum);<br>        &#125;;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>&#125;;<br>calculate.add_rest(<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//0</span><br>calculate.add_rest(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>);<span class=\"hljs-comment\">//10</span><br></code></pre></td></tr></table></figure>"},{"title":"关于js模块化","abbrlink":7924,"date":"2019-07-21T02:43:20.000Z","_content":"\n\n# 前端js模块化规范\n1.CommonJS\n2.ES6\n3.AMD的RequireJS\n4.还有其他的，比如CMD的seajs等\n<!-- more -->\n\n# CommonJS  [学习更多](http://javascript.ruanyifeng.com/nodejs/module.html)\n\n1.一个文件就是一个模块\n2.通过requie导入模块\n3.通过exports和module.exports导出模块\n4.**主要** 作用在Node(vue-cli脚手架环境里也可以用)\n5.CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作\n6.引入时，是整体加载引入的文件模块，生成一个对象,然后从该对象里获取内部属性\n7.运行时加载\n\n***实例：在node环境中编写***\n\n    ```javascript\n        // one.js\n        let sayhi=function(){\n            console.log('这是one.js文件的sayhi函数');\n        };\n        /**\n            exports.sayhi=sayhi;\n        */\n        module.exports={\n            // es6语法 键值一样时，可以只写一个\n            sayhi\n        };\n        // main.js\n        /*真实开发时注意导入路径*/\n        let one=require('one.js');\n        one.sayhi();//控制台打印 这是one.js文件的sayhi函数\n    ```\n\n# ES6  [学习更多](http://es6.ruanyifeng.com/#docs/module)\n1.一个文件就是一个模块\n2.通过export和export default导出模块\n\n    两个的区别：\n        1.  通过export导出的对象属性方法，在导入时也必须安其导出时的名字进行导入\n        2.  通过export default 导出的对象属性方法时，\n            导入可以任意起名，然后通过该名来调用导入文件内部的成员\n\n3.通过import {***}  from ***导入模块\n4.编译时加载，ES6模块不时对象，而是通过export指定输出的代码，再通过import输入\n   \n***实例：在vue-cli脚手架环境中编写***\n\n    ```javascript\n       /**使用export导出  */\n        // one.js\n        let sayhi=function(){\n            console.log('这是one.js文件的sayhi函数');\n        };\n        export {sayhi};\n        // main.js\n        /*真实开发时注意导入路径*/\n        import {sayhi} from 'one';\n        sayhi();//这是one.js文件的sayhi函数\n    ```\n    ```javascript\n        /*使用export default导出  */\n        // one.js\n        let sayhi=function(){\n            console.log('这是one.js文件的sayhi函数');\n        };\n        export default {\n            sayhi\n        };\n        // main.js\n        /*真实开发时注意导入路径*/\n        import one from 'one';\n        one.sayhi();//这是one.js文件的sayhi函数\n    ```\n# AMD 的 RequireJS [学习更多](http://javascript.ruanyifeng.com/tool/requirejs.html)\n\n1.在es6出来之前，主要使用就是CommonJS和RequireJS\n2.不同于CommonJS的同步加载，RequireJS是异步加载(所以支持回调函数)\n3.通过defin定义模块 \n4.通过require加载模块(注意require中的依赖是一个数组，即使只有一个依赖，你也必须使用数组来定义))\n\n***实例：引入requirejs后编写***\n\n    ```javascript\n        // one.js\n            define({\n                sayhi(){\n                    console.log('这是sayhi');\n                }\n            });\n        // 以上也可以写成\n            define(function () {\n                return {\n                    sayhi() {\n                        console.log('这是saihi');\n                    }\n                }\n            });\n        // main.js  注意实际开发时的路径\n        <script src=\"https://cdn.bootcss.com/require.js/2.3.6/require.js\"></script>\n        <script>\n            require(['a'],function(a){\n                a.sayhi();//这是sayhi\n            });\n        </script>\n    ```\n5.当定义模块中依赖其他模块时，把导入的模块当作参数传递进去，再使用\n\n     ```javascript\n        // one.js\n            define(['./b'],function (b) {\n                return {\n                    sayhi() {\n                        // console.log('这是saihi');\n                        b.sayhi();\n                    }\n                }\n            });\n        // main.js  注意实际开发时的路径\n        <script src=\"https://cdn.bootcss.com/require.js/2.3.6/require.js\"></script>\n         <script>\n            require(['a'],function(a){\n                a.sayhi();//这是sayhi\n            });\n        </script>\n    ```\n\n\n","source":"_posts/JS/js模块化.md","raw":"---\ntitle: 关于js模块化\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 前端\nabbrlink: 7924\ndate: 2019-07-21 10:43:20\n---\n\n\n# 前端js模块化规范\n1.CommonJS\n2.ES6\n3.AMD的RequireJS\n4.还有其他的，比如CMD的seajs等\n<!-- more -->\n\n# CommonJS  [学习更多](http://javascript.ruanyifeng.com/nodejs/module.html)\n\n1.一个文件就是一个模块\n2.通过requie导入模块\n3.通过exports和module.exports导出模块\n4.**主要** 作用在Node(vue-cli脚手架环境里也可以用)\n5.CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作\n6.引入时，是整体加载引入的文件模块，生成一个对象,然后从该对象里获取内部属性\n7.运行时加载\n\n***实例：在node环境中编写***\n\n    ```javascript\n        // one.js\n        let sayhi=function(){\n            console.log('这是one.js文件的sayhi函数');\n        };\n        /**\n            exports.sayhi=sayhi;\n        */\n        module.exports={\n            // es6语法 键值一样时，可以只写一个\n            sayhi\n        };\n        // main.js\n        /*真实开发时注意导入路径*/\n        let one=require('one.js');\n        one.sayhi();//控制台打印 这是one.js文件的sayhi函数\n    ```\n\n# ES6  [学习更多](http://es6.ruanyifeng.com/#docs/module)\n1.一个文件就是一个模块\n2.通过export和export default导出模块\n\n    两个的区别：\n        1.  通过export导出的对象属性方法，在导入时也必须安其导出时的名字进行导入\n        2.  通过export default 导出的对象属性方法时，\n            导入可以任意起名，然后通过该名来调用导入文件内部的成员\n\n3.通过import {***}  from ***导入模块\n4.编译时加载，ES6模块不时对象，而是通过export指定输出的代码，再通过import输入\n   \n***实例：在vue-cli脚手架环境中编写***\n\n    ```javascript\n       /**使用export导出  */\n        // one.js\n        let sayhi=function(){\n            console.log('这是one.js文件的sayhi函数');\n        };\n        export {sayhi};\n        // main.js\n        /*真实开发时注意导入路径*/\n        import {sayhi} from 'one';\n        sayhi();//这是one.js文件的sayhi函数\n    ```\n    ```javascript\n        /*使用export default导出  */\n        // one.js\n        let sayhi=function(){\n            console.log('这是one.js文件的sayhi函数');\n        };\n        export default {\n            sayhi\n        };\n        // main.js\n        /*真实开发时注意导入路径*/\n        import one from 'one';\n        one.sayhi();//这是one.js文件的sayhi函数\n    ```\n# AMD 的 RequireJS [学习更多](http://javascript.ruanyifeng.com/tool/requirejs.html)\n\n1.在es6出来之前，主要使用就是CommonJS和RequireJS\n2.不同于CommonJS的同步加载，RequireJS是异步加载(所以支持回调函数)\n3.通过defin定义模块 \n4.通过require加载模块(注意require中的依赖是一个数组，即使只有一个依赖，你也必须使用数组来定义))\n\n***实例：引入requirejs后编写***\n\n    ```javascript\n        // one.js\n            define({\n                sayhi(){\n                    console.log('这是sayhi');\n                }\n            });\n        // 以上也可以写成\n            define(function () {\n                return {\n                    sayhi() {\n                        console.log('这是saihi');\n                    }\n                }\n            });\n        // main.js  注意实际开发时的路径\n        <script src=\"https://cdn.bootcss.com/require.js/2.3.6/require.js\"></script>\n        <script>\n            require(['a'],function(a){\n                a.sayhi();//这是sayhi\n            });\n        </script>\n    ```\n5.当定义模块中依赖其他模块时，把导入的模块当作参数传递进去，再使用\n\n     ```javascript\n        // one.js\n            define(['./b'],function (b) {\n                return {\n                    sayhi() {\n                        // console.log('这是saihi');\n                        b.sayhi();\n                    }\n                }\n            });\n        // main.js  注意实际开发时的路径\n        <script src=\"https://cdn.bootcss.com/require.js/2.3.6/require.js\"></script>\n         <script>\n            require(['a'],function(a){\n                a.sayhi();//这是sayhi\n            });\n        </script>\n    ```\n\n\n","slug":"JS/js模块化","published":1,"updated":"2021-12-31T12:01:59.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1h003fj7jfbyo70l4q","content":"<h1 id=\"前端js模块化规范\"><a href=\"#前端js模块化规范\" class=\"headerlink\" title=\"前端js模块化规范\"></a>前端js模块化规范</h1><p>1.CommonJS<br>2.ES6<br>3.AMD的RequireJS<br>4.还有其他的，比如CMD的seajs等</p>\n<a id=\"more\"></a>\n\n<h1 id=\"CommonJS-学习更多\"><a href=\"#CommonJS-学习更多\" class=\"headerlink\" title=\"CommonJS  学习更多\"></a>CommonJS  <a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\">学习更多</a></h1><p>1.一个文件就是一个模块<br>2.通过requie导入模块<br>3.通过exports和module.exports导出模块<br>4.<strong>主要</strong> 作用在Node(vue-cli脚手架环境里也可以用)<br>5.CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作<br>6.引入时，是整体加载引入的文件模块，生成一个对象,然后从该对象里获取内部属性<br>7.运行时加载</p>\n<p><strong><em>实例：在node环境中编写</em></strong></p>\n<div class=\"hljs code-wrapper\"><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// one.js</span><br><span class=\"hljs-keyword\">let</span> sayhi=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是one.js文件的sayhi函数&#x27;</span>);<br>&#125;;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    exports.sayhi=sayhi;</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    <span class=\"hljs-comment\">// es6语法 键值一样时，可以只写一个</span><br>    sayhi<br>&#125;;<br><span class=\"hljs-comment\">// main.js</span><br><span class=\"hljs-comment\">/*真实开发时注意导入路径*/</span><br><span class=\"hljs-keyword\">let</span> one=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;one.js&#x27;</span>);<br>one.sayhi();<span class=\"hljs-comment\">//控制台打印 这是one.js文件的sayhi函数</span><br></code></pre></div></td></tr></table></figure></code></pre>\n<h1 id=\"ES6-学习更多\"><a href=\"#ES6-学习更多\" class=\"headerlink\" title=\"ES6  学习更多\"></a>ES6  <a href=\"http://es6.ruanyifeng.com/#docs/module\">学习更多</a></h1><p>1.一个文件就是一个模块<br>2.通过export和export default导出模块</p>\n<div class=\"hljs code-wrapper\"><pre><code>两个的区别：\n    1.  通过export导出的对象属性方法，在导入时也必须安其导出时的名字进行导入\n    2.  通过export default 导出的对象属性方法时，\n        导入可以任意起名，然后通过该名来调用导入文件内部的成员</code></pre></div>\n<p>3.通过import {<strong>*}  from *</strong>导入模块<br>4.编译时加载，ES6模块不时对象，而是通过export指定输出的代码，再通过import输入</p>\n<p><strong><em>实例：在vue-cli脚手架环境中编写</em></strong></p>\n<div class=\"hljs code-wrapper\"><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**使用export导出  */</span><br> <span class=\"hljs-comment\">// one.js</span><br> <span class=\"hljs-keyword\">let</span> sayhi=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是one.js文件的sayhi函数&#x27;</span>);<br> &#125;;<br> <span class=\"hljs-keyword\">export</span> &#123;sayhi&#125;;<br> <span class=\"hljs-comment\">// main.js</span><br> <span class=\"hljs-comment\">/*真实开发时注意导入路径*/</span><br> <span class=\"hljs-keyword\">import</span> &#123;sayhi&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;one&#x27;</span>;<br> sayhi();<span class=\"hljs-comment\">//这是one.js文件的sayhi函数</span><br></code></pre></div></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*使用export default导出  */</span><br><span class=\"hljs-comment\">// one.js</span><br><span class=\"hljs-keyword\">let</span> sayhi=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是one.js文件的sayhi函数&#x27;</span>);<br>&#125;;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>    sayhi<br>&#125;;<br><span class=\"hljs-comment\">// main.js</span><br><span class=\"hljs-comment\">/*真实开发时注意导入路径*/</span><br><span class=\"hljs-keyword\">import</span> one <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;one&#x27;</span>;<br>one.sayhi();<span class=\"hljs-comment\">//这是one.js文件的sayhi函数</span><br></code></pre></div></td></tr></table></figure></code></pre>\n<h1 id=\"AMD-的-RequireJS-学习更多\"><a href=\"#AMD-的-RequireJS-学习更多\" class=\"headerlink\" title=\"AMD 的 RequireJS 学习更多\"></a>AMD 的 RequireJS <a href=\"http://javascript.ruanyifeng.com/tool/requirejs.html\">学习更多</a></h1><p>1.在es6出来之前，主要使用就是CommonJS和RequireJS<br>2.不同于CommonJS的同步加载，RequireJS是异步加载(所以支持回调函数)<br>3.通过defin定义模块<br>4.通过require加载模块(注意require中的依赖是一个数组，即使只有一个依赖，你也必须使用数组来定义))</p>\n<p><strong><em>实例：引入requirejs后编写</em></strong></p>\n<div class=\"hljs code-wrapper\"><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// one.js</span><br>    define(&#123;<br>        sayhi()&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是sayhi&#x27;</span>);<br>        &#125;<br>    &#125;);<br><span class=\"hljs-comment\">// 以上也可以写成</span><br>    define(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            sayhi() &#123;<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是saihi&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br><span class=\"hljs-comment\">// main.js  注意实际开发时的路径</span><br>&lt;script src=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/require.js/2.3.6/require.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>&#123;<br>        a.sayhi();<span class=\"hljs-comment\">//这是sayhi</span><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></code></pre>\n<p>5.当定义模块中依赖其他模块时，把导入的模块当作参数传递进去，再使用</p>\n<div class=\"hljs code-wrapper\"><pre><code> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// one.js</span><br>    define([<span class=\"hljs-string\">&#x27;./b&#x27;</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">b</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            sayhi() &#123;<br>                <span class=\"hljs-comment\">// console.log(&#x27;这是saihi&#x27;);</span><br>                b.sayhi();<br>            &#125;<br>        &#125;<br>    &#125;);<br><span class=\"hljs-comment\">// main.js  注意实际开发时的路径</span><br>&lt;script src=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/require.js/2.3.6/require.js&quot;</span>&gt;&lt;/script&gt;<br> &lt;script&gt;<br>    <span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>&#123;<br>        a.sayhi();<span class=\"hljs-comment\">//这是sayhi</span><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure></code></pre>\n","site":{"data":{}},"wordcount":2263,"excerpt":"<h1 id=\"前端js模块化规范\"><a href=\"#前端js模块化规范\" class=\"headerlink\" title=\"前端js模块化规范\"></a>前端js模块化规范</h1><p>1.CommonJS<br>2.ES6<br>3.AMD的RequireJS<br>4.还有其他的，比如CMD的seajs等</p>","more":"<h1 id=\"CommonJS-学习更多\"><a href=\"#CommonJS-学习更多\" class=\"headerlink\" title=\"CommonJS  学习更多\"></a>CommonJS  <a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\">学习更多</a></h1><p>1.一个文件就是一个模块<br>2.通过requie导入模块<br>3.通过exports和module.exports导出模块<br>4.<strong>主要</strong> 作用在Node(vue-cli脚手架环境里也可以用)<br>5.CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作<br>6.引入时，是整体加载引入的文件模块，生成一个对象,然后从该对象里获取内部属性<br>7.运行时加载</p>\n<p><strong><em>实例：在node环境中编写</em></strong></p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// one.js</span><br><span class=\"hljs-keyword\">let</span> sayhi=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是one.js文件的sayhi函数&#x27;</span>);<br>&#125;;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    exports.sayhi=sayhi;</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-built_in\">module</span>.exports=&#123;<br>    <span class=\"hljs-comment\">// es6语法 键值一样时，可以只写一个</span><br>    sayhi<br>&#125;;<br><span class=\"hljs-comment\">// main.js</span><br><span class=\"hljs-comment\">/*真实开发时注意导入路径*/</span><br><span class=\"hljs-keyword\">let</span> one=<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;one.js&#x27;</span>);<br>one.sayhi();<span class=\"hljs-comment\">//控制台打印 这是one.js文件的sayhi函数</span><br></code></pre></td></tr></table></figure></code></pre>\n<h1 id=\"ES6-学习更多\"><a href=\"#ES6-学习更多\" class=\"headerlink\" title=\"ES6  学习更多\"></a>ES6  <a href=\"http://es6.ruanyifeng.com/#docs/module\">学习更多</a></h1><p>1.一个文件就是一个模块<br>2.通过export和export default导出模块</p>\n<pre><code>两个的区别：\n    1.  通过export导出的对象属性方法，在导入时也必须安其导出时的名字进行导入\n    2.  通过export default 导出的对象属性方法时，\n        导入可以任意起名，然后通过该名来调用导入文件内部的成员</code></pre>\n<p>3.通过import {<strong>*}  from *</strong>导入模块<br>4.编译时加载，ES6模块不时对象，而是通过export指定输出的代码，再通过import输入</p>\n<p><strong><em>实例：在vue-cli脚手架环境中编写</em></strong></p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**使用export导出  */</span><br> <span class=\"hljs-comment\">// one.js</span><br> <span class=\"hljs-keyword\">let</span> sayhi=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是one.js文件的sayhi函数&#x27;</span>);<br> &#125;;<br> <span class=\"hljs-keyword\">export</span> &#123;sayhi&#125;;<br> <span class=\"hljs-comment\">// main.js</span><br> <span class=\"hljs-comment\">/*真实开发时注意导入路径*/</span><br> <span class=\"hljs-keyword\">import</span> &#123;sayhi&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;one&#x27;</span>;<br> sayhi();<span class=\"hljs-comment\">//这是one.js文件的sayhi函数</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*使用export default导出  */</span><br><span class=\"hljs-comment\">// one.js</span><br><span class=\"hljs-keyword\">let</span> sayhi=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是one.js文件的sayhi函数&#x27;</span>);<br>&#125;;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>    sayhi<br>&#125;;<br><span class=\"hljs-comment\">// main.js</span><br><span class=\"hljs-comment\">/*真实开发时注意导入路径*/</span><br><span class=\"hljs-keyword\">import</span> one <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;one&#x27;</span>;<br>one.sayhi();<span class=\"hljs-comment\">//这是one.js文件的sayhi函数</span><br></code></pre></td></tr></table></figure></code></pre>\n<h1 id=\"AMD-的-RequireJS-学习更多\"><a href=\"#AMD-的-RequireJS-学习更多\" class=\"headerlink\" title=\"AMD 的 RequireJS 学习更多\"></a>AMD 的 RequireJS <a href=\"http://javascript.ruanyifeng.com/tool/requirejs.html\">学习更多</a></h1><p>1.在es6出来之前，主要使用就是CommonJS和RequireJS<br>2.不同于CommonJS的同步加载，RequireJS是异步加载(所以支持回调函数)<br>3.通过defin定义模块<br>4.通过require加载模块(注意require中的依赖是一个数组，即使只有一个依赖，你也必须使用数组来定义))</p>\n<p><strong><em>实例：引入requirejs后编写</em></strong></p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// one.js</span><br>    define(&#123;<br>        sayhi()&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是sayhi&#x27;</span>);<br>        &#125;<br>    &#125;);<br><span class=\"hljs-comment\">// 以上也可以写成</span><br>    define(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            sayhi() &#123;<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;这是saihi&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br><span class=\"hljs-comment\">// main.js  注意实际开发时的路径</span><br>&lt;script src=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/require.js/2.3.6/require.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>&#123;<br>        a.sayhi();<span class=\"hljs-comment\">//这是sayhi</span><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></code></pre>\n<p>5.当定义模块中依赖其他模块时，把导入的模块当作参数传递进去，再使用</p>\n<pre><code> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// one.js</span><br>    define([<span class=\"hljs-string\">&#x27;./b&#x27;</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">b</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> &#123;<br>            sayhi() &#123;<br>                <span class=\"hljs-comment\">// console.log(&#x27;这是saihi&#x27;);</span><br>                b.sayhi();<br>            &#125;<br>        &#125;<br>    &#125;);<br><span class=\"hljs-comment\">// main.js  注意实际开发时的路径</span><br>&lt;script src=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/require.js/2.3.6/require.js&quot;</span>&gt;&lt;/script&gt;<br> &lt;script&gt;<br>    <span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>],<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>&#123;<br>        a.sayhi();<span class=\"hljs-comment\">//这是sayhi</span><br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></code></pre>"},{"title":"懒加载","abbrlink":54404,"date":"2020-04-19T09:32:26.000Z","_content":"\n# 开头\n作为最常见的优化页面的一种手段，记录一下学习笔记\n\n<!-- more -->\n\n# 正文\n\n### 什么是懒加载\n- 也叫延迟加载，即让页面依赖的一些非关键资源，先不加载，在后期达到某些触发条件时，在加载\n- 这里的关键资源指决定和影响当前访问页面的一些资源；非关键资源，比如针对页面某一部分的一些脚本、动态切换的样式等\n\n### 目的\n减少资源加载带来的响应时间过长，造成用户体验不好\n\n### 具体表现\n- 在页面滚动到某一部分，加载当前位置需要显示的图片和相关资源\n- 面板切换，要切换时，在加载将要显示的资源\n- 等等\n\n### 实现\n- 对上述第一种情况进行一个简单的效果实现\n- 页面有3部分，每一部分都占满整个屏幕，显示一张图片\n\n>思路\n- 对一部分的图片不作处理\n- 对剩下的2部分的图片的src不先不设置，把资源路径添加到data-src里\n- 对整个文档添加一个滚动事件\n- 每次滚动事件的函数触发时，获取当前文档滚动的height\n- 当滚动的位置达到我们指定的值后，通过js给图片的src添加资源路径\n\n>用到的api\n- data-***：不具有表现意义的一个属性，用于给dom添加自定的片段数据\n- 滚动事件：mousewheel\n- 获取文档滚动的高度：scrollTop\n\n>代码\n```html\n<!-- CSS&HTML -->\n <style>\n    body {\n        margin: 0;\n        overflow-x: hidden;\n    }\n\n    .box>div {\n        width: 100vw;\n        height: 100vh;\n        margin: 0 auto;\n    }\n\n    img {\n        width: 100%;\n        height: 100%;\n    }\n\n    .two,\n    .three {\n        visibility: hidden;\n        opacity: 0;\n        transition: all 0.5s;\n    }\n</style>\n<!-- HTML -->\n<div class=\"box\" id=\"box\">\n        <div class=\"one\">\n            <img src=\"./img/a.jpg\" alt=\"\">\n        </div>\n        <div class=\"two\">\n            <img src=\"\" data-src=\"./img/b.jpg\" alt=\"\">\n        </div>\n        <div class=\"three\">\n            <img src=\"\" data-src=\"./img/c.jpg\" alt=\"\">\n        </div>\n</div>\n<script>\nlet box = document.querySelector('#box')\nbox.addEventListener('mousewheel', () => {\n    if (document.documentElement.scrollTop > 10) {\n        document.querySelector('.two').style.visibility = 'visible'\n        document.querySelector('.two').style.opacity = '1'\n        document.querySelector('.two img').src = document.querySelector('.two img').getAttribute(\n            'data-src')\n    }\n    if (document.documentElement.scrollTop > 722) {\n        document.querySelector('.three').style.visibility = 'visible'\n        document.querySelector('.three').style.opacity = '1'\n        document.querySelector('.three img').src = document.querySelector('.three img').getAttribute(\n            'data-src')\n    }\n})\n</script>\n```\n- 打开chrome调试工具，查看network，发现页面一开始只加载了a图片\n- 当滚动到指定位置后，才开始加载需要后面的资源\n\n### 关于获取dom的大小、位置\n提到了scrollTop，顺带总结一下这几个api的区别\n\n>clientHeight、clientWidth\n- 获取dom的height（width）+padding（如果没设置，为0）\n- 这里还有一个同样功能的api：getClientRects\n- 两者的区别：前者对小数取整；后者保留\n\n>clientTop、clientLeft\n- 获取dom的border-top（left）\n\n>scrollHeight、scrollWidth\n- 获取dom的整个内容长度（比如div的height是100px，并设置了overflow-y：scroll后，div内部内容的height长度）\n- 后者同理\n\n>scrollTop、scrollLeft\n- 获取dom滑动出可视区域的部分的height（width）\n\n>offsetheight、offsetWidth\n- 获取dom的height（width）+padding+border\n\n>offsetTop、offsetLeft\n- 获取目标dom离最近的已定位元素的margintop（left）\n- 这里还有个api，offsetParent用来获取离目标元素最近的已定位的元素\n\n\n\n\n","source":"_posts/JS/懒加载.md","raw":"---\ntitle: 懒加载\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - CSS&HTML\n  - 前端\nabbrlink: 54404\ndate: 2020-04-19 17:32:26\n---\n\n# 开头\n作为最常见的优化页面的一种手段，记录一下学习笔记\n\n<!-- more -->\n\n# 正文\n\n### 什么是懒加载\n- 也叫延迟加载，即让页面依赖的一些非关键资源，先不加载，在后期达到某些触发条件时，在加载\n- 这里的关键资源指决定和影响当前访问页面的一些资源；非关键资源，比如针对页面某一部分的一些脚本、动态切换的样式等\n\n### 目的\n减少资源加载带来的响应时间过长，造成用户体验不好\n\n### 具体表现\n- 在页面滚动到某一部分，加载当前位置需要显示的图片和相关资源\n- 面板切换，要切换时，在加载将要显示的资源\n- 等等\n\n### 实现\n- 对上述第一种情况进行一个简单的效果实现\n- 页面有3部分，每一部分都占满整个屏幕，显示一张图片\n\n>思路\n- 对一部分的图片不作处理\n- 对剩下的2部分的图片的src不先不设置，把资源路径添加到data-src里\n- 对整个文档添加一个滚动事件\n- 每次滚动事件的函数触发时，获取当前文档滚动的height\n- 当滚动的位置达到我们指定的值后，通过js给图片的src添加资源路径\n\n>用到的api\n- data-***：不具有表现意义的一个属性，用于给dom添加自定的片段数据\n- 滚动事件：mousewheel\n- 获取文档滚动的高度：scrollTop\n\n>代码\n```html\n<!-- CSS&HTML -->\n <style>\n    body {\n        margin: 0;\n        overflow-x: hidden;\n    }\n\n    .box>div {\n        width: 100vw;\n        height: 100vh;\n        margin: 0 auto;\n    }\n\n    img {\n        width: 100%;\n        height: 100%;\n    }\n\n    .two,\n    .three {\n        visibility: hidden;\n        opacity: 0;\n        transition: all 0.5s;\n    }\n</style>\n<!-- HTML -->\n<div class=\"box\" id=\"box\">\n        <div class=\"one\">\n            <img src=\"./img/a.jpg\" alt=\"\">\n        </div>\n        <div class=\"two\">\n            <img src=\"\" data-src=\"./img/b.jpg\" alt=\"\">\n        </div>\n        <div class=\"three\">\n            <img src=\"\" data-src=\"./img/c.jpg\" alt=\"\">\n        </div>\n</div>\n<script>\nlet box = document.querySelector('#box')\nbox.addEventListener('mousewheel', () => {\n    if (document.documentElement.scrollTop > 10) {\n        document.querySelector('.two').style.visibility = 'visible'\n        document.querySelector('.two').style.opacity = '1'\n        document.querySelector('.two img').src = document.querySelector('.two img').getAttribute(\n            'data-src')\n    }\n    if (document.documentElement.scrollTop > 722) {\n        document.querySelector('.three').style.visibility = 'visible'\n        document.querySelector('.three').style.opacity = '1'\n        document.querySelector('.three img').src = document.querySelector('.three img').getAttribute(\n            'data-src')\n    }\n})\n</script>\n```\n- 打开chrome调试工具，查看network，发现页面一开始只加载了a图片\n- 当滚动到指定位置后，才开始加载需要后面的资源\n\n### 关于获取dom的大小、位置\n提到了scrollTop，顺带总结一下这几个api的区别\n\n>clientHeight、clientWidth\n- 获取dom的height（width）+padding（如果没设置，为0）\n- 这里还有一个同样功能的api：getClientRects\n- 两者的区别：前者对小数取整；后者保留\n\n>clientTop、clientLeft\n- 获取dom的border-top（left）\n\n>scrollHeight、scrollWidth\n- 获取dom的整个内容长度（比如div的height是100px，并设置了overflow-y：scroll后，div内部内容的height长度）\n- 后者同理\n\n>scrollTop、scrollLeft\n- 获取dom滑动出可视区域的部分的height（width）\n\n>offsetheight、offsetWidth\n- 获取dom的height（width）+padding+border\n\n>offsetTop、offsetLeft\n- 获取目标dom离最近的已定位元素的margintop（left）\n- 这里还有个api，offsetParent用来获取离目标元素最近的已定位的元素\n\n\n\n\n","slug":"JS/懒加载","published":1,"updated":"2021-12-31T12:01:59.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1k004uj7jf64chh2sx","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>作为最常见的优化页面的一种手段，记录一下学习笔记</p>\n<a id=\"more\"></a>\n\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h3 id=\"什么是懒加载\"><a href=\"#什么是懒加载\" class=\"headerlink\" title=\"什么是懒加载\"></a>什么是懒加载</h3><ul>\n<li>也叫延迟加载，即让页面依赖的一些非关键资源，先不加载，在后期达到某些触发条件时，在加载</li>\n<li>这里的关键资源指决定和影响当前访问页面的一些资源；非关键资源，比如针对页面某一部分的一些脚本、动态切换的样式等</li>\n</ul>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>减少资源加载带来的响应时间过长，造成用户体验不好</p>\n<h3 id=\"具体表现\"><a href=\"#具体表现\" class=\"headerlink\" title=\"具体表现\"></a>具体表现</h3><ul>\n<li>在页面滚动到某一部分，加载当前位置需要显示的图片和相关资源</li>\n<li>面板切换，要切换时，在加载将要显示的资源</li>\n<li>等等</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><ul>\n<li>对上述第一种情况进行一个简单的效果实现</li>\n<li>页面有3部分，每一部分都占满整个屏幕，显示一张图片</li>\n</ul>\n<blockquote>\n<p>思路</p>\n</blockquote>\n<ul>\n<li>对一部分的图片不作处理</li>\n<li>对剩下的2部分的图片的src不先不设置，把资源路径添加到data-src里</li>\n<li>对整个文档添加一个滚动事件</li>\n<li>每次滚动事件的函数触发时，获取当前文档滚动的height</li>\n<li>当滚动的位置达到我们指定的值后，通过js给图片的src添加资源路径</li>\n</ul>\n<blockquote>\n<p>用到的api</p>\n</blockquote>\n<ul>\n<li>data-***：不具有表现意义的一个属性，用于给dom添加自定的片段数据</li>\n<li>滚动事件：mousewheel</li>\n<li>获取文档滚动的高度：scrollTop</li>\n</ul>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- CSS&amp;HTML --&gt;</span><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br>    body &#123;<br>        margin: 0;<br>        overflow-x: hidden;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-class\">.box</span>&gt;<span class=\"hljs-selector-tag\">div</span> &#123;</span><br>        width: 100vw;<br>        height: 100vh;<br>        margin: 0 auto;<br>    &#125;<br><br>    img &#123;<br>        width: 100%;<br>        height: 100%;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-class\">.two</span>,</span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.three</span> &#123;</span><br>        visibility: hidden;<br>        opacity: 0;<br><span class=\"css\">        <span class=\"hljs-selector-tag\">transition</span>: <span class=\"hljs-selector-tag\">all</span> 0<span class=\"hljs-selector-class\">.5s</span>;</span><br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- HTML --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;box&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;box&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;one&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./img/a.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;two&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">data-src</span>=<span class=\"hljs-string\">&quot;./img/b.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;three&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">data-src</span>=<span class=\"hljs-string\">&quot;./img/c.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> box = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#box&#x27;</span>)</span><br><span class=\"javascript\">box.addEventListener(<span class=\"hljs-string\">&#x27;mousewheel&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.documentElement.scrollTop &gt; <span class=\"hljs-number\">10</span>) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.two&#x27;</span>).style.visibility = <span class=\"hljs-string\">&#x27;visible&#x27;</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.two&#x27;</span>).style.opacity = <span class=\"hljs-string\">&#x27;1&#x27;</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.two img&#x27;</span>).src = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.two img&#x27;</span>).getAttribute(</span><br><span class=\"javascript\">            <span class=\"hljs-string\">&#x27;data-src&#x27;</span>)</span><br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.documentElement.scrollTop &gt; <span class=\"hljs-number\">722</span>) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.three&#x27;</span>).style.visibility = <span class=\"hljs-string\">&#x27;visible&#x27;</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.three&#x27;</span>).style.opacity = <span class=\"hljs-string\">&#x27;1&#x27;</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.three img&#x27;</span>).src = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.three img&#x27;</span>).getAttribute(</span><br><span class=\"javascript\">            <span class=\"hljs-string\">&#x27;data-src&#x27;</span>)</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>打开chrome调试工具，查看network，发现页面一开始只加载了a图片</li>\n<li>当滚动到指定位置后，才开始加载需要后面的资源</li>\n</ul>\n<h3 id=\"关于获取dom的大小、位置\"><a href=\"#关于获取dom的大小、位置\" class=\"headerlink\" title=\"关于获取dom的大小、位置\"></a>关于获取dom的大小、位置</h3><p>提到了scrollTop，顺带总结一下这几个api的区别</p>\n<blockquote>\n<p>clientHeight、clientWidth</p>\n</blockquote>\n<ul>\n<li>获取dom的height（width）+padding（如果没设置，为0）</li>\n<li>这里还有一个同样功能的api：getClientRects</li>\n<li>两者的区别：前者对小数取整；后者保留</li>\n</ul>\n<blockquote>\n<p>clientTop、clientLeft</p>\n</blockquote>\n<ul>\n<li>获取dom的border-top（left）</li>\n</ul>\n<blockquote>\n<p>scrollHeight、scrollWidth</p>\n</blockquote>\n<ul>\n<li>获取dom的整个内容长度（比如div的height是100px，并设置了overflow-y：scroll后，div内部内容的height长度）</li>\n<li>后者同理</li>\n</ul>\n<blockquote>\n<p>scrollTop、scrollLeft</p>\n</blockquote>\n<ul>\n<li>获取dom滑动出可视区域的部分的height（width）</li>\n</ul>\n<blockquote>\n<p>offsetheight、offsetWidth</p>\n</blockquote>\n<ul>\n<li>获取dom的height（width）+padding+border</li>\n</ul>\n<blockquote>\n<p>offsetTop、offsetLeft</p>\n</blockquote>\n<ul>\n<li>获取目标dom离最近的已定位元素的margintop（left）</li>\n<li>这里还有个api，offsetParent用来获取离目标元素最近的已定位的元素</li>\n</ul>\n","site":{"data":{}},"wordcount":2593,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>作为最常见的优化页面的一种手段，记录一下学习笔记</p>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h3 id=\"什么是懒加载\"><a href=\"#什么是懒加载\" class=\"headerlink\" title=\"什么是懒加载\"></a>什么是懒加载</h3><ul>\n<li>也叫延迟加载，即让页面依赖的一些非关键资源，先不加载，在后期达到某些触发条件时，在加载</li>\n<li>这里的关键资源指决定和影响当前访问页面的一些资源；非关键资源，比如针对页面某一部分的一些脚本、动态切换的样式等</li>\n</ul>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>减少资源加载带来的响应时间过长，造成用户体验不好</p>\n<h3 id=\"具体表现\"><a href=\"#具体表现\" class=\"headerlink\" title=\"具体表现\"></a>具体表现</h3><ul>\n<li>在页面滚动到某一部分，加载当前位置需要显示的图片和相关资源</li>\n<li>面板切换，要切换时，在加载将要显示的资源</li>\n<li>等等</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><ul>\n<li>对上述第一种情况进行一个简单的效果实现</li>\n<li>页面有3部分，每一部分都占满整个屏幕，显示一张图片</li>\n</ul>\n<blockquote>\n<p>思路</p>\n</blockquote>\n<ul>\n<li>对一部分的图片不作处理</li>\n<li>对剩下的2部分的图片的src不先不设置，把资源路径添加到data-src里</li>\n<li>对整个文档添加一个滚动事件</li>\n<li>每次滚动事件的函数触发时，获取当前文档滚动的height</li>\n<li>当滚动的位置达到我们指定的值后，通过js给图片的src添加资源路径</li>\n</ul>\n<blockquote>\n<p>用到的api</p>\n</blockquote>\n<ul>\n<li>data-***：不具有表现意义的一个属性，用于给dom添加自定的片段数据</li>\n<li>滚动事件：mousewheel</li>\n<li>获取文档滚动的高度：scrollTop</li>\n</ul>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- CSS&amp;HTML --&gt;</span><br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br>    body &#123;<br>        margin: 0;<br>        overflow-x: hidden;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-class\">.box</span>&gt;<span class=\"hljs-selector-tag\">div</span> &#123;</span><br>        width: 100vw;<br>        height: 100vh;<br>        margin: 0 auto;<br>    &#125;<br><br>    img &#123;<br>        width: 100%;<br>        height: 100%;<br>    &#125;<br><br><span class=\"css\">    <span class=\"hljs-selector-class\">.two</span>,</span><br><span class=\"css\">    <span class=\"hljs-selector-class\">.three</span> &#123;</span><br>        visibility: hidden;<br>        opacity: 0;<br><span class=\"css\">        <span class=\"hljs-selector-tag\">transition</span>: <span class=\"hljs-selector-tag\">all</span> 0<span class=\"hljs-selector-class\">.5s</span>;</span><br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- HTML --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;box&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;box&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;one&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./img/a.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;two&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">data-src</span>=<span class=\"hljs-string\">&quot;./img/b.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;three&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">data-src</span>=<span class=\"hljs-string\">&quot;./img/c.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-keyword\">let</span> box = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#box&#x27;</span>)</span><br><span class=\"javascript\">box.addEventListener(<span class=\"hljs-string\">&#x27;mousewheel&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.documentElement.scrollTop &gt; <span class=\"hljs-number\">10</span>) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.two&#x27;</span>).style.visibility = <span class=\"hljs-string\">&#x27;visible&#x27;</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.two&#x27;</span>).style.opacity = <span class=\"hljs-string\">&#x27;1&#x27;</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.two img&#x27;</span>).src = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.two img&#x27;</span>).getAttribute(</span><br><span class=\"javascript\">            <span class=\"hljs-string\">&#x27;data-src&#x27;</span>)</span><br>    &#125;<br><span class=\"javascript\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.documentElement.scrollTop &gt; <span class=\"hljs-number\">722</span>) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.three&#x27;</span>).style.visibility = <span class=\"hljs-string\">&#x27;visible&#x27;</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.three&#x27;</span>).style.opacity = <span class=\"hljs-string\">&#x27;1&#x27;</span></span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.three img&#x27;</span>).src = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.three img&#x27;</span>).getAttribute(</span><br><span class=\"javascript\">            <span class=\"hljs-string\">&#x27;data-src&#x27;</span>)</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>打开chrome调试工具，查看network，发现页面一开始只加载了a图片</li>\n<li>当滚动到指定位置后，才开始加载需要后面的资源</li>\n</ul>\n<h3 id=\"关于获取dom的大小、位置\"><a href=\"#关于获取dom的大小、位置\" class=\"headerlink\" title=\"关于获取dom的大小、位置\"></a>关于获取dom的大小、位置</h3><p>提到了scrollTop，顺带总结一下这几个api的区别</p>\n<blockquote>\n<p>clientHeight、clientWidth</p>\n</blockquote>\n<ul>\n<li>获取dom的height（width）+padding（如果没设置，为0）</li>\n<li>这里还有一个同样功能的api：getClientRects</li>\n<li>两者的区别：前者对小数取整；后者保留</li>\n</ul>\n<blockquote>\n<p>clientTop、clientLeft</p>\n</blockquote>\n<ul>\n<li>获取dom的border-top（left）</li>\n</ul>\n<blockquote>\n<p>scrollHeight、scrollWidth</p>\n</blockquote>\n<ul>\n<li>获取dom的整个内容长度（比如div的height是100px，并设置了overflow-y：scroll后，div内部内容的height长度）</li>\n<li>后者同理</li>\n</ul>\n<blockquote>\n<p>scrollTop、scrollLeft</p>\n</blockquote>\n<ul>\n<li>获取dom滑动出可视区域的部分的height（width）</li>\n</ul>\n<blockquote>\n<p>offsetheight、offsetWidth</p>\n</blockquote>\n<ul>\n<li>获取dom的height（width）+padding+border</li>\n</ul>\n<blockquote>\n<p>offsetTop、offsetLeft</p>\n</blockquote>\n<ul>\n<li>获取目标dom离最近的已定位元素的margintop（left）</li>\n<li>这里还有个api，offsetParent用来获取离目标元素最近的已定位的元素</li>\n</ul>"},{"title":"关于防抖和节流","abbrlink":58045,"date":"2019-11-21T12:16:17.000Z","_content":"\n# 防抖和节流\n> **作用**\n- 这两个名词是两种解决方案的称呼，为了解决频繁触发某一个函数时，限制它的调用次数，让它不要那么频繁的被调用。\n\n> **为啥要这么做**\n- 首先呢，在浏览器中，有2个概念，一个叫**重绘**，一个叫***回流***。这两个现象，是在浏览器渲染页面的时候会发生的，当页面的布局不改变，仅仅是字体大小颜色等改变时就会发生重绘；当页面布局发生改变(比如width、height、margin、padding等)，会发生回流。\n- 上述的这两个现象挺影响性能的，所以当我们的操作会导致发生这两个现象时，一般就可以使用防抖和节流来，尽可能的减少这样的操作，不至于让我们的程序挂掉。当然不止这样情况下才能用哈，比如触发ajax请求的时候其实也可以用，根据需要来判断。\n<!-- more -->\n\n# 使用\n\n### 防抖\n>\n- 原理：通过定时器来限制我们的操作只能在一个限制的时间后才能执行，当在这个限制时间内再次触发这一操作，重新开始计时，时间到后，在执行操作。\n- 举例：根据显示器窗口的宽来实时的设置合适的高，让背景图可以以最完美的比例，完全显示。([具体实现看这里](http://localhost:4000/2019/11/18/css/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%B9%E5%99%A8%E5%A4%A7%E5%B0%8F/)),这里对window的resize事件，进行防抖的操作\n```js\n// 保存定时器\nlet timeout = null;\n/**\n    des:防抖函数\n    @params:{fun:要调用的函数}\n    @params:{wait:设置定时器延迟执行的时间}\n*/  \nlet debounce = function (fun,wait) {\n    // 清除上次保存的定时器\n    clearTimeout(timeout);\n    // 创建新定时器 并保存\n    timeout = setTimeout(() => {\n        // 执行要操作的函数\n        fun();\n    }, wait);\n}\n// 监听窗口变化事件\nwindow.addEventListener('resize', () => {\n    debounce(changeH,1000);\n});\n```\n\n### 节流\n- 原理：持续触发某一个函数(事件)的时候，每隔一段时间只执行一次；\n- 实现：有两种方式，一种是通过时间戳一种是通过设置定时器。\n- 时间戳版本：触发事件前记录一个时间，当触发事件时再记录当前时间，然后让2个时间做差在和我们设置的事件周期比较，如果大，执行事件并更新时间；小于，不执行。\n```js\n// 节流函数---时间戳版本\n// 设置初始化时间\nlet initDate = Date.now();\n/**\n    des:防抖函数\n    @params:{fun:要调用的函数}\n    @params:{wait:设置定时器延迟执行的时间}\n*/ \nlet throttleOne = function (fun, wait) {\n    // 获取当前时间\n    let currentDate = Date.now();\n    // 当执行函数的时间戳和第一次的时间戳做差大于设置的周期时，才执行函数，并更新时间戳\n    if (currentDate - initDate > wait) {\n        fun();\n        // 更新初始化的时间为当前时间\n        initDate = currentDate;\n    } else {\n        console.log('没执行');\n    }\n}\n// 监听窗口变化事件\nwindow.addEventListener('resize', () => {\n    throttleByTimeStamp(changeH, 1000);\n});\n```\n- 设置定时器版本：设置一个变量用来保存定时器，然后每次每次触发事件前，判断改变量是否有定时器，没有正常执行，执行后清楚触发器；如果有触发器，则不进行操作，等待上次的触发器执行完毕。\n- 特点：这个形式就是，第一次操作一定会触发事件的执行。\n```js\n // 节流函数---定时器版本\n// 用来保存定时器\nlet timer = null;\nlet throttleTwo = function (fun, wait) {\n    // 定时器存在不执行函数，不存在就执行函数\n    if (timer == null) {\n        timer = setTimeout(\n            () => {\n                fun();\n                timer=null;\n            }, wait\n        );\n    }else{\n        console.log('没有执行');\n    }\n}\n// 监听窗口变化事件\nwindow.addEventListener('resize', () => {\n    throttleTwo(changeH, 1000);\n});\n```\n\n\n# 总结\n\n\n### 2者的不同\n>防抖是在一段时间后，一定会执行一次\n>节流是在一段时间内，一定会执行一次\n\n### 使用场景\n>这两种操作要达到的目的是一样的，但是因为特点不同，所以使用场景有时候也会有一点不同；\n>防抖\n- 比如我们这个例子，用防抖比较好，因为当窗口一直在变化，最后还是会停止，一但停止，就必须要保证容器大小一定要按背景图比例调整好，显示完美的效果给用户。\n\n>节流\n- 当我们的页面在无线加载的场景下，需要用户在滑动滚动条的时候，来不断的请求ajax，所以用节流就比较好。\n\n\n\n# 学习参考链接\n[冴羽-重学JS之防抖节流](https://github.com/mqyqingfeng/Blog/issues/26)\n[JS的防抖与节流](https://mp.weixin.qq.com/s/Vkshf-nEDwo2ODUJhxgzVA)\n\n","source":"_posts/JS/关于防抖和节流.md","raw":"---\ntitle: 关于防抖和节流\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 前端\nabbrlink: 58045\ndate: 2019-11-21 20:16:17\n---\n\n# 防抖和节流\n> **作用**\n- 这两个名词是两种解决方案的称呼，为了解决频繁触发某一个函数时，限制它的调用次数，让它不要那么频繁的被调用。\n\n> **为啥要这么做**\n- 首先呢，在浏览器中，有2个概念，一个叫**重绘**，一个叫***回流***。这两个现象，是在浏览器渲染页面的时候会发生的，当页面的布局不改变，仅仅是字体大小颜色等改变时就会发生重绘；当页面布局发生改变(比如width、height、margin、padding等)，会发生回流。\n- 上述的这两个现象挺影响性能的，所以当我们的操作会导致发生这两个现象时，一般就可以使用防抖和节流来，尽可能的减少这样的操作，不至于让我们的程序挂掉。当然不止这样情况下才能用哈，比如触发ajax请求的时候其实也可以用，根据需要来判断。\n<!-- more -->\n\n# 使用\n\n### 防抖\n>\n- 原理：通过定时器来限制我们的操作只能在一个限制的时间后才能执行，当在这个限制时间内再次触发这一操作，重新开始计时，时间到后，在执行操作。\n- 举例：根据显示器窗口的宽来实时的设置合适的高，让背景图可以以最完美的比例，完全显示。([具体实现看这里](http://localhost:4000/2019/11/18/css/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%B9%E5%99%A8%E5%A4%A7%E5%B0%8F/)),这里对window的resize事件，进行防抖的操作\n```js\n// 保存定时器\nlet timeout = null;\n/**\n    des:防抖函数\n    @params:{fun:要调用的函数}\n    @params:{wait:设置定时器延迟执行的时间}\n*/  \nlet debounce = function (fun,wait) {\n    // 清除上次保存的定时器\n    clearTimeout(timeout);\n    // 创建新定时器 并保存\n    timeout = setTimeout(() => {\n        // 执行要操作的函数\n        fun();\n    }, wait);\n}\n// 监听窗口变化事件\nwindow.addEventListener('resize', () => {\n    debounce(changeH,1000);\n});\n```\n\n### 节流\n- 原理：持续触发某一个函数(事件)的时候，每隔一段时间只执行一次；\n- 实现：有两种方式，一种是通过时间戳一种是通过设置定时器。\n- 时间戳版本：触发事件前记录一个时间，当触发事件时再记录当前时间，然后让2个时间做差在和我们设置的事件周期比较，如果大，执行事件并更新时间；小于，不执行。\n```js\n// 节流函数---时间戳版本\n// 设置初始化时间\nlet initDate = Date.now();\n/**\n    des:防抖函数\n    @params:{fun:要调用的函数}\n    @params:{wait:设置定时器延迟执行的时间}\n*/ \nlet throttleOne = function (fun, wait) {\n    // 获取当前时间\n    let currentDate = Date.now();\n    // 当执行函数的时间戳和第一次的时间戳做差大于设置的周期时，才执行函数，并更新时间戳\n    if (currentDate - initDate > wait) {\n        fun();\n        // 更新初始化的时间为当前时间\n        initDate = currentDate;\n    } else {\n        console.log('没执行');\n    }\n}\n// 监听窗口变化事件\nwindow.addEventListener('resize', () => {\n    throttleByTimeStamp(changeH, 1000);\n});\n```\n- 设置定时器版本：设置一个变量用来保存定时器，然后每次每次触发事件前，判断改变量是否有定时器，没有正常执行，执行后清楚触发器；如果有触发器，则不进行操作，等待上次的触发器执行完毕。\n- 特点：这个形式就是，第一次操作一定会触发事件的执行。\n```js\n // 节流函数---定时器版本\n// 用来保存定时器\nlet timer = null;\nlet throttleTwo = function (fun, wait) {\n    // 定时器存在不执行函数，不存在就执行函数\n    if (timer == null) {\n        timer = setTimeout(\n            () => {\n                fun();\n                timer=null;\n            }, wait\n        );\n    }else{\n        console.log('没有执行');\n    }\n}\n// 监听窗口变化事件\nwindow.addEventListener('resize', () => {\n    throttleTwo(changeH, 1000);\n});\n```\n\n\n# 总结\n\n\n### 2者的不同\n>防抖是在一段时间后，一定会执行一次\n>节流是在一段时间内，一定会执行一次\n\n### 使用场景\n>这两种操作要达到的目的是一样的，但是因为特点不同，所以使用场景有时候也会有一点不同；\n>防抖\n- 比如我们这个例子，用防抖比较好，因为当窗口一直在变化，最后还是会停止，一但停止，就必须要保证容器大小一定要按背景图比例调整好，显示完美的效果给用户。\n\n>节流\n- 当我们的页面在无线加载的场景下，需要用户在滑动滚动条的时候，来不断的请求ajax，所以用节流就比较好。\n\n\n\n# 学习参考链接\n[冴羽-重学JS之防抖节流](https://github.com/mqyqingfeng/Blog/issues/26)\n[JS的防抖与节流](https://mp.weixin.qq.com/s/Vkshf-nEDwo2ODUJhxgzVA)\n\n","slug":"JS/关于防抖和节流","published":1,"updated":"2021-12-31T12:01:59.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1n004vj7jfhjlj3ml6","content":"<h1 id=\"防抖和节流\"><a href=\"#防抖和节流\" class=\"headerlink\" title=\"防抖和节流\"></a>防抖和节流</h1><blockquote>\n<p><strong>作用</strong></p>\n</blockquote>\n<ul>\n<li>这两个名词是两种解决方案的称呼，为了解决频繁触发某一个函数时，限制它的调用次数，让它不要那么频繁的被调用。</li>\n</ul>\n<blockquote>\n<p><strong>为啥要这么做</strong></p>\n</blockquote>\n<ul>\n<li>首先呢，在浏览器中，有2个概念，一个叫<strong>重绘</strong>，一个叫**<em>回流**</em>。这两个现象，是在浏览器渲染页面的时候会发生的，当页面的布局不改变，仅仅是字体大小颜色等改变时就会发生重绘；当页面布局发生改变(比如width、height、margin、padding等)，会发生回流。</li>\n<li>上述的这两个现象挺影响性能的，所以当我们的操作会导致发生这两个现象时，一般就可以使用防抖和节流来，尽可能的减少这样的操作，不至于让我们的程序挂掉。当然不止这样情况下才能用哈，比如触发ajax请求的时候其实也可以用，根据需要来判断。<a id=\"more\"></a>\n\n</li>\n</ul>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><blockquote>\n</blockquote>\n<ul>\n<li>原理：通过定时器来限制我们的操作只能在一个限制的时间后才能执行，当在这个限制时间内再次触发这一操作，重新开始计时，时间到后，在执行操作。</li>\n<li>举例：根据显示器窗口的宽来实时的设置合适的高，让背景图可以以最完美的比例，完全显示。(<a href=\"http://localhost:4000/2019/11/18/css/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%B9%E5%99%A8%E5%A4%A7%E5%B0%8F/\">具体实现看这里</a>),这里对window的resize事件，进行防抖的操作<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 保存定时器</span><br><span class=\"hljs-keyword\">let</span> timeout = <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    des:防抖函数</span><br><span class=\"hljs-comment\">    <span class=\"hljs-doctag\">@params</span>:&#123;fun:要调用的函数&#125;</span><br><span class=\"hljs-comment\">    <span class=\"hljs-doctag\">@params</span>:&#123;wait:设置定时器延迟执行的时间&#125;</span><br><span class=\"hljs-comment\">*/</span>  <br><span class=\"hljs-keyword\">let</span> debounce = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fun,wait</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 清除上次保存的定时器</span><br>    <span class=\"hljs-built_in\">clearTimeout</span>(timeout);<br>    <span class=\"hljs-comment\">// 创建新定时器 并保存</span><br>    timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 执行要操作的函数</span><br>        fun();<br>    &#125;, wait);<br>&#125;<br><span class=\"hljs-comment\">// 监听窗口变化事件</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    debounce(changeH,<span class=\"hljs-number\">1000</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><ul>\n<li>原理：持续触发某一个函数(事件)的时候，每隔一段时间只执行一次；</li>\n<li>实现：有两种方式，一种是通过时间戳一种是通过设置定时器。</li>\n<li>时间戳版本：触发事件前记录一个时间，当触发事件时再记录当前时间，然后让2个时间做差在和我们设置的事件周期比较，如果大，执行事件并更新时间；小于，不执行。<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 节流函数---时间戳版本</span><br><span class=\"hljs-comment\">// 设置初始化时间</span><br><span class=\"hljs-keyword\">let</span> initDate = <span class=\"hljs-built_in\">Date</span>.now();<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    des:防抖函数</span><br><span class=\"hljs-comment\">    <span class=\"hljs-doctag\">@params</span>:&#123;fun:要调用的函数&#125;</span><br><span class=\"hljs-comment\">    <span class=\"hljs-doctag\">@params</span>:&#123;wait:设置定时器延迟执行的时间&#125;</span><br><span class=\"hljs-comment\">*/</span> <br><span class=\"hljs-keyword\">let</span> throttleOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fun, wait</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 获取当前时间</span><br>    <span class=\"hljs-keyword\">let</span> currentDate = <span class=\"hljs-built_in\">Date</span>.now();<br>    <span class=\"hljs-comment\">// 当执行函数的时间戳和第一次的时间戳做差大于设置的周期时，才执行函数，并更新时间戳</span><br>    <span class=\"hljs-keyword\">if</span> (currentDate - initDate &gt; wait) &#123;<br>        fun();<br>        <span class=\"hljs-comment\">// 更新初始化的时间为当前时间</span><br>        initDate = currentDate;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;没执行&#x27;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 监听窗口变化事件</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    throttleByTimeStamp(changeH, <span class=\"hljs-number\">1000</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li>\n<li>设置定时器版本：设置一个变量用来保存定时器，然后每次每次触发事件前，判断改变量是否有定时器，没有正常执行，执行后清楚触发器；如果有触发器，则不进行操作，等待上次的触发器执行完毕。</li>\n<li>特点：这个形式就是，第一次操作一定会触发事件的执行。<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"> <span class=\"hljs-comment\">// 节流函数---定时器版本</span><br><span class=\"hljs-comment\">// 用来保存定时器</span><br><span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-keyword\">let</span> throttleTwo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fun, wait</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 定时器存在不执行函数，不存在就执行函数</span><br>    <span class=\"hljs-keyword\">if</span> (timer == <span class=\"hljs-literal\">null</span>) &#123;<br>        timer = <span class=\"hljs-built_in\">setTimeout</span>(<br>            () =&gt; &#123;<br>                fun();<br>                timer=<span class=\"hljs-literal\">null</span>;<br>            &#125;, wait<br>        );<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;没有执行&#x27;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 监听窗口变化事件</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    throttleTwo(changeH, <span class=\"hljs-number\">1000</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h3 id=\"2者的不同\"><a href=\"#2者的不同\" class=\"headerlink\" title=\"2者的不同\"></a>2者的不同</h3><blockquote>\n<p>防抖是在一段时间后，一定会执行一次<br>节流是在一段时间内，一定会执行一次</p>\n</blockquote>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><blockquote>\n<p>这两种操作要达到的目的是一样的，但是因为特点不同，所以使用场景有时候也会有一点不同；<br>防抖</p>\n</blockquote>\n<ul>\n<li>比如我们这个例子，用防抖比较好，因为当窗口一直在变化，最后还是会停止，一但停止，就必须要保证容器大小一定要按背景图比例调整好，显示完美的效果给用户。</li>\n</ul>\n<blockquote>\n<p>节流</p>\n</blockquote>\n<ul>\n<li>当我们的页面在无线加载的场景下，需要用户在滑动滚动条的时候，来不断的请求ajax，所以用节流就比较好。</li>\n</ul>\n<h1 id=\"学习参考链接\"><a href=\"#学习参考链接\" class=\"headerlink\" title=\"学习参考链接\"></a>学习参考链接</h1><p><a href=\"https://github.com/mqyqingfeng/Blog/issues/26\">冴羽-重学JS之防抖节流</a><br><a href=\"https://mp.weixin.qq.com/s/Vkshf-nEDwo2ODUJhxgzVA\">JS的防抖与节流</a></p>\n","site":{"data":{}},"wordcount":2230,"excerpt":"<h1 id=\"防抖和节流\"><a href=\"#防抖和节流\" class=\"headerlink\" title=\"防抖和节流\"></a>防抖和节流</h1><blockquote>\n<p><strong>作用</strong></p>\n</blockquote>\n<ul>\n<li>这两个名词是两种解决方案的称呼，为了解决频繁触发某一个函数时，限制它的调用次数，让它不要那么频繁的被调用。</li>\n</ul>\n<blockquote>\n<p><strong>为啥要这么做</strong></p>\n</blockquote>\n<ul>\n<li>首先呢，在浏览器中，有2个概念，一个叫<strong>重绘</strong>，一个叫**<em>回流**</em>。这两个现象，是在浏览器渲染页面的时候会发生的，当页面的布局不改变，仅仅是字体大小颜色等改变时就会发生重绘；当页面布局发生改变(比如width、height、margin、padding等)，会发生回流。</li>\n<li>上述的这两个现象挺影响性能的，所以当我们的操作会导致发生这两个现象时，一般就可以使用防抖和节流来，尽可能的减少这样的操作，不至于让我们的程序挂掉。当然不止这样情况下才能用哈，比如触发ajax请求的时候其实也可以用，根据需要来判断。","more":"</li>\n</ul>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><blockquote>\n</blockquote>\n<ul>\n<li>原理：通过定时器来限制我们的操作只能在一个限制的时间后才能执行，当在这个限制时间内再次触发这一操作，重新开始计时，时间到后，在执行操作。</li>\n<li>举例：根据显示器窗口的宽来实时的设置合适的高，让背景图可以以最完美的比例，完全显示。(<a href=\"http://localhost:4000/2019/11/18/css/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%B9%E5%99%A8%E5%A4%A7%E5%B0%8F/\">具体实现看这里</a>),这里对window的resize事件，进行防抖的操作<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 保存定时器</span><br><span class=\"hljs-keyword\">let</span> timeout = <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    des:防抖函数</span><br><span class=\"hljs-comment\">    <span class=\"hljs-doctag\">@params</span>:&#123;fun:要调用的函数&#125;</span><br><span class=\"hljs-comment\">    <span class=\"hljs-doctag\">@params</span>:&#123;wait:设置定时器延迟执行的时间&#125;</span><br><span class=\"hljs-comment\">*/</span>  <br><span class=\"hljs-keyword\">let</span> debounce = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fun,wait</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 清除上次保存的定时器</span><br>    <span class=\"hljs-built_in\">clearTimeout</span>(timeout);<br>    <span class=\"hljs-comment\">// 创建新定时器 并保存</span><br>    timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 执行要操作的函数</span><br>        fun();<br>    &#125;, wait);<br>&#125;<br><span class=\"hljs-comment\">// 监听窗口变化事件</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    debounce(changeH,<span class=\"hljs-number\">1000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><ul>\n<li>原理：持续触发某一个函数(事件)的时候，每隔一段时间只执行一次；</li>\n<li>实现：有两种方式，一种是通过时间戳一种是通过设置定时器。</li>\n<li>时间戳版本：触发事件前记录一个时间，当触发事件时再记录当前时间，然后让2个时间做差在和我们设置的事件周期比较，如果大，执行事件并更新时间；小于，不执行。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 节流函数---时间戳版本</span><br><span class=\"hljs-comment\">// 设置初始化时间</span><br><span class=\"hljs-keyword\">let</span> initDate = <span class=\"hljs-built_in\">Date</span>.now();<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    des:防抖函数</span><br><span class=\"hljs-comment\">    <span class=\"hljs-doctag\">@params</span>:&#123;fun:要调用的函数&#125;</span><br><span class=\"hljs-comment\">    <span class=\"hljs-doctag\">@params</span>:&#123;wait:设置定时器延迟执行的时间&#125;</span><br><span class=\"hljs-comment\">*/</span> <br><span class=\"hljs-keyword\">let</span> throttleOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fun, wait</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 获取当前时间</span><br>    <span class=\"hljs-keyword\">let</span> currentDate = <span class=\"hljs-built_in\">Date</span>.now();<br>    <span class=\"hljs-comment\">// 当执行函数的时间戳和第一次的时间戳做差大于设置的周期时，才执行函数，并更新时间戳</span><br>    <span class=\"hljs-keyword\">if</span> (currentDate - initDate &gt; wait) &#123;<br>        fun();<br>        <span class=\"hljs-comment\">// 更新初始化的时间为当前时间</span><br>        initDate = currentDate;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;没执行&#x27;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 监听窗口变化事件</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    throttleByTimeStamp(changeH, <span class=\"hljs-number\">1000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li>\n<li>设置定时器版本：设置一个变量用来保存定时器，然后每次每次触发事件前，判断改变量是否有定时器，没有正常执行，执行后清楚触发器；如果有触发器，则不进行操作，等待上次的触发器执行完毕。</li>\n<li>特点：这个形式就是，第一次操作一定会触发事件的执行。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-comment\">// 节流函数---定时器版本</span><br><span class=\"hljs-comment\">// 用来保存定时器</span><br><span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-keyword\">let</span> throttleTwo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fun, wait</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 定时器存在不执行函数，不存在就执行函数</span><br>    <span class=\"hljs-keyword\">if</span> (timer == <span class=\"hljs-literal\">null</span>) &#123;<br>        timer = <span class=\"hljs-built_in\">setTimeout</span>(<br>            () =&gt; &#123;<br>                fun();<br>                timer=<span class=\"hljs-literal\">null</span>;<br>            &#125;, wait<br>        );<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;没有执行&#x27;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 监听窗口变化事件</span><br><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">&#x27;resize&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> &#123;<br>    throttleTwo(changeH, <span class=\"hljs-number\">1000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h3 id=\"2者的不同\"><a href=\"#2者的不同\" class=\"headerlink\" title=\"2者的不同\"></a>2者的不同</h3><blockquote>\n<p>防抖是在一段时间后，一定会执行一次<br>节流是在一段时间内，一定会执行一次</p>\n</blockquote>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><blockquote>\n<p>这两种操作要达到的目的是一样的，但是因为特点不同，所以使用场景有时候也会有一点不同；<br>防抖</p>\n</blockquote>\n<ul>\n<li>比如我们这个例子，用防抖比较好，因为当窗口一直在变化，最后还是会停止，一但停止，就必须要保证容器大小一定要按背景图比例调整好，显示完美的效果给用户。</li>\n</ul>\n<blockquote>\n<p>节流</p>\n</blockquote>\n<ul>\n<li>当我们的页面在无线加载的场景下，需要用户在滑动滚动条的时候，来不断的请求ajax，所以用节流就比较好。</li>\n</ul>\n<h1 id=\"学习参考链接\"><a href=\"#学习参考链接\" class=\"headerlink\" title=\"学习参考链接\"></a>学习参考链接</h1><p><a href=\"https://github.com/mqyqingfeng/Blog/issues/26\">冴羽-重学JS之防抖节流</a><br><a href=\"https://mp.weixin.qq.com/s/Vkshf-nEDwo2ODUJhxgzVA\">JS的防抖与节流</a></p>"},{"title":"iterm2-配置","date":"2021-12-08T01:16:38.000Z","index_img":"https://img.shuaxindiary.cn/zsh.png","banner_img":"https://img.shuaxindiary.cn/zsh.png","_content":"\n# 记录iterm2配置\n\n记录一下自己常用的 **iterm** 终端的配置，效果图如下，主要分为两部分：针对外观和功能扩展\n\n![preview](https://img.shuaxindiary.cn/iterm%E9%85%8D%E7%BD%AE.png)\n\n### 外观\n\n#### 主题配置\n\n- 设置路径：iterm -> preference -> Appperence\n- Theme：minimal\n- status bar localtion：bottom\n\n#### 配色方案\n\n- 下载地址：https://draculatheme.com/iterm\n- 设置：Preferences -> Profiles -> Color -> Color Presets-Import\n\n#### 状态栏展示\n\n- 设置路径：iterm -> preference -> profile -> session\n- 勾上status bar enabled\n- 点击旁边的 configure status bar\n- 根据自己需要选择\n\n### 功能\n\n#### 安装 oh-my-zsh\n\n- 下载安装文件：https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\n- 建议访问copy内容到本地文件然后 sh运行直接安装\n\n#### 插件\n\noh-my-zsh 的插件和主题都有单独的目录：\n```shell\n# 进入\ncd $ZSH_CUSTOM\n\n# 当前目录 下会有一个theme和plugin分别存放oh-my-zsh的主题和插件\nls\n# theme plugins\n\n```\n\n下载插件到plugin目录后，编辑 .zshrc 文件，找到plugin，里面填自己下的插件，然后 source 一下 .zshrc 即可\n\n##### 输入建议\n\n- 插件地址：https://github.com/zsh-users/zsh-autosuggestions\n\n##### git扩展\n\n- 插件地址：https://github.com/tj/git-extras\n","source":"_posts/技术笔记/iterm2-配置.md","raw":"---\ntitle: iterm2-配置\ncategory:\n  - 技术笔记\ndate: 2021-12-08 09:16:38\ntag:\n  - 工具\n  - zsh\nindex_img: https://img.shuaxindiary.cn/zsh.png\nbanner_img: https://img.shuaxindiary.cn/zsh.png\n---\n\n# 记录iterm2配置\n\n记录一下自己常用的 **iterm** 终端的配置，效果图如下，主要分为两部分：针对外观和功能扩展\n\n![preview](https://img.shuaxindiary.cn/iterm%E9%85%8D%E7%BD%AE.png)\n\n### 外观\n\n#### 主题配置\n\n- 设置路径：iterm -> preference -> Appperence\n- Theme：minimal\n- status bar localtion：bottom\n\n#### 配色方案\n\n- 下载地址：https://draculatheme.com/iterm\n- 设置：Preferences -> Profiles -> Color -> Color Presets-Import\n\n#### 状态栏展示\n\n- 设置路径：iterm -> preference -> profile -> session\n- 勾上status bar enabled\n- 点击旁边的 configure status bar\n- 根据自己需要选择\n\n### 功能\n\n#### 安装 oh-my-zsh\n\n- 下载安装文件：https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\n- 建议访问copy内容到本地文件然后 sh运行直接安装\n\n#### 插件\n\noh-my-zsh 的插件和主题都有单独的目录：\n```shell\n# 进入\ncd $ZSH_CUSTOM\n\n# 当前目录 下会有一个theme和plugin分别存放oh-my-zsh的主题和插件\nls\n# theme plugins\n\n```\n\n下载插件到plugin目录后，编辑 .zshrc 文件，找到plugin，里面填自己下的插件，然后 source 一下 .zshrc 即可\n\n##### 输入建议\n\n- 插件地址：https://github.com/zsh-users/zsh-autosuggestions\n\n##### git扩展\n\n- 插件地址：https://github.com/tj/git-extras\n","slug":"技术笔记/iterm2-配置","published":1,"updated":"2021-12-31T12:01:59.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1n004xj7jfclu71too","content":"<h1 id=\"记录iterm2配置\"><a href=\"#记录iterm2配置\" class=\"headerlink\" title=\"记录iterm2配置\"></a>记录iterm2配置</h1><p>记录一下自己常用的 <strong>iterm</strong> 终端的配置，效果图如下，主要分为两部分：针对外观和功能扩展</p>\n<p><img src=\"https://img.shuaxindiary.cn/iterm%E9%85%8D%E7%BD%AE.png\" alt=\"preview\"></p>\n<h3 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h3><h4 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h4><ul>\n<li>设置路径：iterm -&gt; preference -&gt; Appperence</li>\n<li>Theme：minimal</li>\n<li>status bar localtion：bottom</li>\n</ul>\n<h4 id=\"配色方案\"><a href=\"#配色方案\" class=\"headerlink\" title=\"配色方案\"></a>配色方案</h4><ul>\n<li>下载地址：<a href=\"https://draculatheme.com/iterm\">https://draculatheme.com/iterm</a></li>\n<li>设置：Preferences -&gt; Profiles -&gt; Color -&gt; Color Presets-Import</li>\n</ul>\n<h4 id=\"状态栏展示\"><a href=\"#状态栏展示\" class=\"headerlink\" title=\"状态栏展示\"></a>状态栏展示</h4><ul>\n<li>设置路径：iterm -&gt; preference -&gt; profile -&gt; session</li>\n<li>勾上status bar enabled</li>\n<li>点击旁边的 configure status bar</li>\n<li>根据自己需要选择</li>\n</ul>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><h4 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh-my-zsh\"></a>安装 oh-my-zsh</h4><ul>\n<li>下载安装文件：<a href=\"https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh</a></li>\n<li>建议访问copy内容到本地文件然后 sh运行直接安装</li>\n</ul>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p>oh-my-zsh 的插件和主题都有单独的目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 进入</span><br>cd $ZSH_CUSTOM<br><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 当前目录 下会有一个theme和plugin分别存放oh-my-zsh的主题和插件</span><br>ls<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> theme plugins</span><br><br></code></pre></div></td></tr></table></figure>\n\n<p>下载插件到plugin目录后，编辑 .zshrc 文件，找到plugin，里面填自己下的插件，然后 source 一下 .zshrc 即可</p>\n<h5 id=\"输入建议\"><a href=\"#输入建议\" class=\"headerlink\" title=\"输入建议\"></a>输入建议</h5><ul>\n<li>插件地址：<a href=\"https://github.com/zsh-users/zsh-autosuggestions\">https://github.com/zsh-users/zsh-autosuggestions</a></li>\n</ul>\n<h5 id=\"git扩展\"><a href=\"#git扩展\" class=\"headerlink\" title=\"git扩展\"></a>git扩展</h5><ul>\n<li>插件地址：<a href=\"https://github.com/tj/git-extras\">https://github.com/tj/git-extras</a></li>\n</ul>\n","site":{"data":{}},"wordcount":724,"excerpt":"","more":"<h1 id=\"记录iterm2配置\"><a href=\"#记录iterm2配置\" class=\"headerlink\" title=\"记录iterm2配置\"></a>记录iterm2配置</h1><p>记录一下自己常用的 <strong>iterm</strong> 终端的配置，效果图如下，主要分为两部分：针对外观和功能扩展</p>\n<p><img src=\"https://img.shuaxindiary.cn/iterm%E9%85%8D%E7%BD%AE.png\" alt=\"preview\"></p>\n<h3 id=\"外观\"><a href=\"#外观\" class=\"headerlink\" title=\"外观\"></a>外观</h3><h4 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h4><ul>\n<li>设置路径：iterm -&gt; preference -&gt; Appperence</li>\n<li>Theme：minimal</li>\n<li>status bar localtion：bottom</li>\n</ul>\n<h4 id=\"配色方案\"><a href=\"#配色方案\" class=\"headerlink\" title=\"配色方案\"></a>配色方案</h4><ul>\n<li>下载地址：<a href=\"https://draculatheme.com/iterm\">https://draculatheme.com/iterm</a></li>\n<li>设置：Preferences -&gt; Profiles -&gt; Color -&gt; Color Presets-Import</li>\n</ul>\n<h4 id=\"状态栏展示\"><a href=\"#状态栏展示\" class=\"headerlink\" title=\"状态栏展示\"></a>状态栏展示</h4><ul>\n<li>设置路径：iterm -&gt; preference -&gt; profile -&gt; session</li>\n<li>勾上status bar enabled</li>\n<li>点击旁边的 configure status bar</li>\n<li>根据自己需要选择</li>\n</ul>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><h4 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh-my-zsh\"></a>安装 oh-my-zsh</h4><ul>\n<li>下载安装文件：<a href=\"https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh</a></li>\n<li>建议访问copy内容到本地文件然后 sh运行直接安装</li>\n</ul>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p>oh-my-zsh 的插件和主题都有单独的目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 进入</span><br>cd $ZSH_CUSTOM<br><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 当前目录 下会有一个theme和plugin分别存放oh-my-zsh的主题和插件</span><br>ls<br><span class=\"hljs-meta\">#</span><span class=\"bash\"> theme plugins</span><br><br></code></pre></td></tr></table></figure>\n\n<p>下载插件到plugin目录后，编辑 .zshrc 文件，找到plugin，里面填自己下的插件，然后 source 一下 .zshrc 即可</p>\n<h5 id=\"输入建议\"><a href=\"#输入建议\" class=\"headerlink\" title=\"输入建议\"></a>输入建议</h5><ul>\n<li>插件地址：<a href=\"https://github.com/zsh-users/zsh-autosuggestions\">https://github.com/zsh-users/zsh-autosuggestions</a></li>\n</ul>\n<h5 id=\"git扩展\"><a href=\"#git扩展\" class=\"headerlink\" title=\"git扩展\"></a>git扩展</h5><ul>\n<li>插件地址：<a href=\"https://github.com/tj/git-extras\">https://github.com/tj/git-extras</a></li>\n</ul>\n"},{"title":"关于对象","abbrlink":19981,"date":"2020-04-04T14:51:30.000Z","_content":"\n# 开头\n因为js特性的原因，所以创建对象有很多中形式，各自有各自的优缺点/对应使用的场景，而且关于对象也会涉及到原型等比较重要的知识，所以总结一下\n<!-- more -->\n# 正文\n## 关于js对象\n>定义\n- 根据红皮书的描述：无序属性的集合，属性可包含基本值、对象、函数。\n- 总结：包含多个键值对的无序集合。\n\n>属性类型\n- 根据红皮书地址，ECMA-262标准定义了一些对象的内部属性\n- 主要分为***数据属性*** 和***访问器属性***\n- 数据属性就是对象存放数据的属性\n- 访问器属性不包含数据(一个内部机制)，包含一对getter/setter函数的属性，在读写数据时调用\n\n>数据属性的4个描述行为的特性\n- configurable-表示该属性能否被delete删除\n- enumerable-表示该属性能否被for-in循环\n- writable-表示该属性的值能否被修改\n- value-存储数据的发那个\n- 代码示范\n```js\n let sx = {\n    name: 'sx',\n    age: 22\n}\n// 通过Object.defineProperty来管理目标对象的属性行为\n// 添加对sx对象的name属性的拦截器\nObject.defineProperty(sx, 'name', {\n    // 定义能否delete删除该属性 默认为true\n    configurable: false,\n    // 定义能否通过forin循环到该属性，默认为true\n    enumerable: false,\n    // 定义能否修改该属性，默认为true\n    writable: false,\n    // 如果这里定义，会覆盖初始化对象时的值\n    // value:\"wade\"\n})\n// 即使做出了修改/删除的操作，但无效\nsx.name = \"shuaxin\"\ndelete sx.name\nconsole.log(sx)\nfor (let key in sx) {\n    console.log(`${key}=${sx[key]}`)\n}\n```\n>访问器属性(属性的描述符)\n- 不包含数据\n- 包含一对getter、setter函数，不是必须，无需定义，是对象内部的机制\n- 当读取对象的属性时，默认调用getter函数，返回属性值\n- 当对属性进行数据写入时，默认调用setter，并传入新值\n- 代码示范\n```js\nlet sx = {\n    name: \"shuaxin\",\n    age: 0,\n    // _的属性表示该属性只能通过对象方法来访问\n    _sex: '女'\n}\n// 创建属性拦截器\nObject.defineProperty(sx, \"sex\", {\n    // 当读取sex属性的值时，触发，返回_sex的值\n    get() {\n        console.log(this._sex)\n        return this._sex\n    },\n    // 当对sex属性进行写入操作时触发\n    set(newVal) {\n        // 判断_sex和sex是否一致，否在做修改\n        if (this._sex !== newVal) {\n            this._sex = newVal\n        }\n    }\n})\nsx.sex = '男'\n```\n>定义多个属性\n- 可以同时创建对多个属性的拦截器\n- 使用defineProperties\n```js\nlet obj = {\n    name: \"shuaxin\",\n    age: 22,\n    _sex: \"男\"\n}\nObject.defineProperties(obj, {\n    name: {\n        configurable: false,\n        enumerable: false,\n        writable: false\n    },\n    age: {\n        configurable: false,\n        enumerable: false,\n        writable: false\n    },\n    sex: {\n        get() {\n            console.log(this._sex)\n            return this._sex\n        },\n        // 当对sex属性进行写入操作时触发\n        set(newVal) {\n            // 判断_sex和sex是否一致，否在做修改\n            if (this._sex !== newVal) {\n                this._sex = newVal\n            }\n        }\n    }\n})\n```\n\n## 关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）\n### 无法识别对象类型的\n无法识别对象类型的表现为，typeof的结果都是Object\n\n>字面量创建\n```js\nlet obj={\n    name:\"obj\"\n}\n```\n- 优点：创建简单、直观\n- 缺点：会产生大量重复的代码，而且无法识别对象类型\n\n>使用object构造函数创建\n```js\nlet obj=new Object()\nobj.name=\"obj\"\n```\n- 优缺点和字面量创建一样\n\n>工厂模式创建\n```js\nfunction createObj(name){\n    let obj=new Object()\n    obj.name=name\n    return obj\n}\nlet obj=createObj('obj')\n```\n- 工厂模式是设计模式的一种\n- 优点：封装了创建对象时的细节，减少了代码的冗余\n- 缺点：同样这种方式也无法判断对象的类型 \n\n>寄生构造函数模式\n```js\nfunction Person(name){\n    let obj=new Object()\n    obj.name=name\n    return obj\n}\nlet sx=new Person('sx')\n```\n- 优缺点和工厂模式一致\n\n>稳妥构造函数模式\n```js\nfunction Person(str) {\n    let name = str\n    let obj = new Object()\n    obj.getName = function () {\n        return name\n    }\n    obj.setName = function (str) {\n        name = str\n    }\n    return obj\n}\nlet sx = Person('sx')\nconsole.log(sx.name) //undefined\nconsole.log(sx.getName()) //sx\n```\n- 优点：保证数据安全性，除非对外提供可操作函数，否则无法访问\n- 缺点：无法判断实例的对象类型\n\n### 可以识别对象类型的\n表现为可以使用instanceof来判断具体的类型，比如\n```js\nlet obj=new Object()\nconsole.log(typeof obj)//object\nfunction Person(name){\n    this.name=name\n}\nlet sx=new Person('sx')\nconsole.log(sx instanceof Person) //true\n```\n>自定义构造函数创建\n```js\nfunction Person(name){\n    this.name=name\n}\nlet shuaxin=new Person('shuaxin')\n```\n- 优点：可以定义对象的类型\n- 缺点：因为每次调用一次该构造函数都会创建一片空间来存储一模一样的对象的属性，当创建许多个该类型对象时，会存在内存空间浪费的问题\n\n>使用原型创建\n- 关于原型：每一个函数都有一个prototype属性，该属性指向一个对象（原型对象），该对象保存的是该类型对象的所有实例共享的属性/方法\n- 对象实例可以通过__proto__来访问原型对象\n```js\nfunction Person(){\n} \nPerson.prototype.name='shuaxin'\n```\n- 优点：可以把属性存到原型对象里\n- 缺点：因为所有实例共享同样的属性，所以导致数据读写会出现混乱\n>组合使用构造函数模式和原型模式\n```js\nfunction Person(name){\n    this.name=name\n} \nPerson.prototype.sayHi=function(){\n    console.log(`你好我是${this.name}`)\n}\n```\n- 优点：结合了构造函数和原型模式2者的优点\n- 缺点：需要合理分配那些存储在函数内部，哪些在原型，否则适得其反；其次就是封装性相对来说不是很好\n>动态原型模式\n```js\nfunction Person(name) {\n    this.name = name\n    if (typeof this.sayhi !== 'function') {\n        Person.prototype.sayhi = function () {\n            console.log(`大家好，我是${this.name}`)\n        }\n    }\n}\nlet shuaxin = new Person('shuaxin')\n```\n- 优点：结局了封装原型、组合模式封装性不好的问题\n\n# 关于对象的一些api\n\n>Object.assign(target,...source)\n- 给对象复制源对象的可枚举属性,返回操作完成后的目标对象\n- 参数：目标对象，源对象(可支持多个)\n```js\nconst man={\n    name:\"shuaxin\"\n}\nconst sex={\n    sex:\"男\"\n}\nlet res=Object.assign(man,sex)\nconsole.log(man)// {name:\"shuaxin\",sex:\"男\"}\nconsole.log(res)// {name:\"shuaxin\",sex:\"男\"}\n```\n\n>Object.create(proto,{propertiesObject})\n- 创建一个新对象\n- 参数：新建对象的原型对象，要添加到自身的属性(以及访问器属性)\n- 应用：实现继承\n```js\nlet man={\n    sex:\"男\"\n}\nlet sx = Object.create(man, {\n    // 注：这里如果不设置枚举属性为true，默认为false，即不能被forin遍历到\n    age: {\n        value: 22\n    },\n    name: {\n        value: \"shuaxin\"\n    }\n})\nconsole.log(sx)//{name:\"shauxin\",age:22}\nconsole.log(sx.__proto__)//{sex:\"男\"}\n```\n\n>Object.entries(target)\n- 返回目标对象的可枚举(enumerable)属性\n```js\nlet sx = {}\nObject.defineProperties(sx, {\n    name: {\n        value: \"shuaxin\",\n        enumerable: true\n    },\n    idCard: {\n        value: '199x-x-x-x',\n        enumerable: false\n    }\n})\nconsole.log(Object.entries(sx)) //[[\"name\", \"shuaxin\"]]\n```\n\n>Object.freeze(target)/Object.isFrozen(target)/ Object.isExtensible(targst)\n-  freeze：冻结对象，使其属性不能删除、修改，也不能增加属性\n-  isFrozen：检查对象是否被冻结，返回Boolean \n-  isExtensible：判断对象是否可扩展（即也可以判断对象是否被冻结）\n- 注：影响对象是否可扩展的操作有 Object.preventExtensions，Object.seal 或 Object.freeze\n```js\nlet sx = {\n    name: \"shuaxin\"\n}\nObject.freeze(sx)\nsx.name = 'update'\nsx.sex = '男'\ndelete sx.name\nconsole.log(sx) //{name:\"shuaxin\"}\nconsole.log(Object.isFrozen(sx))\n```\n\n>Object.fromEntries(obj)\n- 把键值对结构(ES6的map)转换成对象\n```js\nlet list = [\n    [\"name\", \"shuaxin\"],\n    [\"sex\", \"男\"]\n]\nlet map = new Map([\n    [\"name\", \"shuaxin\"],\n    [\"sex\", \"男\"]\n])\nconsole.log(Object.fromEntries(list)) //{name: \"shuaxin\", sex: \"男\"}\nconsole.log(Object.fromEntries(map)) //{name: \"shuaxin\", sex: \"男\"}\n```\n>Object.getOwnPropertyDescriptor(obj)/Object.getOwnPropertyDescriptors(obj)\n- 获取目标对象某个属性的访问器属性情况\n- 需注意：只能指定存储在对象自身的属性，原型的属性无效\n```js\n let shuaxin = {\n    name: \"shuaxin\"\n}\n// {value: \"shuaxin\", writable: true, enumerable: true, configurable: true}\nconsole.log(Object.getOwnPropertyDescriptor(shuaxin, 'name'))\n\n let sx = {\n    name: \"shuaxin\",\n    sex: \"男\"\n}\n// { name: {value: \"shuaxin\", writable: true, enumerable: true, configurable: true}, sex: {…}}\nconsole.log(Object.getOwnPropertyDescriptors(sx));\n```\n\n>Object.values(target)\n- 以数组形式返回对象自身所有属性的值\n- symbol作key的无法获取到\n```js\nconst SEX=Symbol()\nlet shuaxin={\n    [SEX]:\"男\",\n    name:\"shuaxin\"\n}\nconsole.log(Object.values(shuaxin))\n```\n\n>Object.getOwnPropertyNames(target)/Object.getOwnPropertySymbols(target)/Object.keys(target)\n- getOwnPropertyNames:以数组形式返回对象自身的所有属性名,除过以symbol作为key的属性\n- getOwnPropertySymbols:以数组形式返回对象自身的所有symbol做key的属性名\n- keys:以数组格式返回对象自身可枚举的属性\n```js\nconst sex = Symbol('sex')\nlet sx = {\n    [sex]: \"男\"\n}\nObject.defineProperties(sx, {\n    name: {\n        value: \"shuaxin\",\n        enumerable: true\n    },\n    idCard: {\n        value: '199x-x-x-x',\n        enumerable: false\n    }\n})\n// {name: \"shuaxin\", idCard: \"199x-x-x-x\", Symbol(sex): \"男\"}\nconsole.log(sx)\n// [\"name\", \"idCard\"]\nconsole.log(Object.getOwnPropertyNames(sx));\n // [Symbol(sex)]\nconsole.log(Object.getOwnPropertySymbols(sx));\n// [\"name\"]\nconsole.log(Object.keys(sx))\n```\n\n>Object.getPrototypeOf(target)\n- 获取对象的原型对象\n```js\n let man = {\n    sex: \"男\"\n}\nlet sx = Object.create(man, {\n    name: {\n        value: \"shuaxin\"\n    }\n})\n// {sex: \"男\"}\nconsole.log(Object.getPrototypeOf(sx))\n// 同上\nconsole.log(sx.__proto__)\n```\n\n>Object.is()\n- 判断2个值是不是相同，判断规则如下\n- 两个值都是 undefined\n- 两个值都是 null\n- 两个值都是 true 或者都是 false\n- 两个值是由相同个数的字符按照相同的顺序组成的字符串\n- 两个值指向同一个对象\n- 两个值都是数字并且\n- *都是正零 +0*\n- *都是负零 -0*\n- *都是 NaN*\n- *都是除零和 NaN 外的其它同一个数字*\n- 和==还有===的区别：\n- 这种相等性判断逻辑和传统的 == 运算不同，== 运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 \"\" == false 等于 true 的现象），但 Object.is 不会做这种类型转换。\n这与 === 运算符的判定方式也不一样。=== 运算符（和== 运算符）将数字值 -0 和 +0 视为相等，并认为 Number.NaN 不等于 NaN\n\n>Object.seal(target)/Object.isSealed(target)\n- 判断对象是否密封\n- 表现为不能对以存在属性进行删除，不能新增属性\n- 可以修改已存在属性，这也是与freeze的区别\n- isSealed用来判断对象是否是密封\n- isExtensible也可以判断\n\n>Object.preventExtensions(target)/Object.isExtensible(target)\n- 让对象无法扩展\n- 表现形式为，无法新增属性；但是可以对已存在属性进行修改和删除\n- isExtensible判断对象是否可扩展\n```js\nlet sx = {\n    name: \"shuaxin\"\n}\nObject.preventExtensions(sx)\nsx.name = 'update'\nsx.sex = '男'\n// {name: \"update\"}\nconsole.log(sx);\ndelete sx.name\n// {}\nconsole.log(sx);\n```\n## Object原型上的一些api\n\n>isPrototypeOf\n- 判断一个对象是否存在于另一个对象的原型链上\n```js\n let man = {\n    sex: '男'\n}\nlet sx = Object.create(man)\n// true\nconsole.log(man.isPrototypeOf(sx))\n```\n\n>hasOwnProperty\n- 判断对象自身是否含有某个属性\n```js\nlet man = {\n    sex: '男'\n}\nlet sx = Object.create(man, {\n    name: {\n        value: 'shuaxin'\n    }\n})\n// false\nconsole.log(sx.hasOwnProperty('sex'))\n// true\nconsole.log(sx.hasOwnProperty('name'))\n```\n\n>propertyIsEnumerable\n- 判断该属性属性是否可枚举\n- 如果没有该属性，返回false","source":"_posts/JS/关于对象.md","raw":"---\ntitle: 关于对象\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 前端\nabbrlink: 19981\ndate: 2020-04-04 22:51:30\n---\n\n# 开头\n因为js特性的原因，所以创建对象有很多中形式，各自有各自的优缺点/对应使用的场景，而且关于对象也会涉及到原型等比较重要的知识，所以总结一下\n<!-- more -->\n# 正文\n## 关于js对象\n>定义\n- 根据红皮书的描述：无序属性的集合，属性可包含基本值、对象、函数。\n- 总结：包含多个键值对的无序集合。\n\n>属性类型\n- 根据红皮书地址，ECMA-262标准定义了一些对象的内部属性\n- 主要分为***数据属性*** 和***访问器属性***\n- 数据属性就是对象存放数据的属性\n- 访问器属性不包含数据(一个内部机制)，包含一对getter/setter函数的属性，在读写数据时调用\n\n>数据属性的4个描述行为的特性\n- configurable-表示该属性能否被delete删除\n- enumerable-表示该属性能否被for-in循环\n- writable-表示该属性的值能否被修改\n- value-存储数据的发那个\n- 代码示范\n```js\n let sx = {\n    name: 'sx',\n    age: 22\n}\n// 通过Object.defineProperty来管理目标对象的属性行为\n// 添加对sx对象的name属性的拦截器\nObject.defineProperty(sx, 'name', {\n    // 定义能否delete删除该属性 默认为true\n    configurable: false,\n    // 定义能否通过forin循环到该属性，默认为true\n    enumerable: false,\n    // 定义能否修改该属性，默认为true\n    writable: false,\n    // 如果这里定义，会覆盖初始化对象时的值\n    // value:\"wade\"\n})\n// 即使做出了修改/删除的操作，但无效\nsx.name = \"shuaxin\"\ndelete sx.name\nconsole.log(sx)\nfor (let key in sx) {\n    console.log(`${key}=${sx[key]}`)\n}\n```\n>访问器属性(属性的描述符)\n- 不包含数据\n- 包含一对getter、setter函数，不是必须，无需定义，是对象内部的机制\n- 当读取对象的属性时，默认调用getter函数，返回属性值\n- 当对属性进行数据写入时，默认调用setter，并传入新值\n- 代码示范\n```js\nlet sx = {\n    name: \"shuaxin\",\n    age: 0,\n    // _的属性表示该属性只能通过对象方法来访问\n    _sex: '女'\n}\n// 创建属性拦截器\nObject.defineProperty(sx, \"sex\", {\n    // 当读取sex属性的值时，触发，返回_sex的值\n    get() {\n        console.log(this._sex)\n        return this._sex\n    },\n    // 当对sex属性进行写入操作时触发\n    set(newVal) {\n        // 判断_sex和sex是否一致，否在做修改\n        if (this._sex !== newVal) {\n            this._sex = newVal\n        }\n    }\n})\nsx.sex = '男'\n```\n>定义多个属性\n- 可以同时创建对多个属性的拦截器\n- 使用defineProperties\n```js\nlet obj = {\n    name: \"shuaxin\",\n    age: 22,\n    _sex: \"男\"\n}\nObject.defineProperties(obj, {\n    name: {\n        configurable: false,\n        enumerable: false,\n        writable: false\n    },\n    age: {\n        configurable: false,\n        enumerable: false,\n        writable: false\n    },\n    sex: {\n        get() {\n            console.log(this._sex)\n            return this._sex\n        },\n        // 当对sex属性进行写入操作时触发\n        set(newVal) {\n            // 判断_sex和sex是否一致，否在做修改\n            if (this._sex !== newVal) {\n                this._sex = newVal\n            }\n        }\n    }\n})\n```\n\n## 关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）\n### 无法识别对象类型的\n无法识别对象类型的表现为，typeof的结果都是Object\n\n>字面量创建\n```js\nlet obj={\n    name:\"obj\"\n}\n```\n- 优点：创建简单、直观\n- 缺点：会产生大量重复的代码，而且无法识别对象类型\n\n>使用object构造函数创建\n```js\nlet obj=new Object()\nobj.name=\"obj\"\n```\n- 优缺点和字面量创建一样\n\n>工厂模式创建\n```js\nfunction createObj(name){\n    let obj=new Object()\n    obj.name=name\n    return obj\n}\nlet obj=createObj('obj')\n```\n- 工厂模式是设计模式的一种\n- 优点：封装了创建对象时的细节，减少了代码的冗余\n- 缺点：同样这种方式也无法判断对象的类型 \n\n>寄生构造函数模式\n```js\nfunction Person(name){\n    let obj=new Object()\n    obj.name=name\n    return obj\n}\nlet sx=new Person('sx')\n```\n- 优缺点和工厂模式一致\n\n>稳妥构造函数模式\n```js\nfunction Person(str) {\n    let name = str\n    let obj = new Object()\n    obj.getName = function () {\n        return name\n    }\n    obj.setName = function (str) {\n        name = str\n    }\n    return obj\n}\nlet sx = Person('sx')\nconsole.log(sx.name) //undefined\nconsole.log(sx.getName()) //sx\n```\n- 优点：保证数据安全性，除非对外提供可操作函数，否则无法访问\n- 缺点：无法判断实例的对象类型\n\n### 可以识别对象类型的\n表现为可以使用instanceof来判断具体的类型，比如\n```js\nlet obj=new Object()\nconsole.log(typeof obj)//object\nfunction Person(name){\n    this.name=name\n}\nlet sx=new Person('sx')\nconsole.log(sx instanceof Person) //true\n```\n>自定义构造函数创建\n```js\nfunction Person(name){\n    this.name=name\n}\nlet shuaxin=new Person('shuaxin')\n```\n- 优点：可以定义对象的类型\n- 缺点：因为每次调用一次该构造函数都会创建一片空间来存储一模一样的对象的属性，当创建许多个该类型对象时，会存在内存空间浪费的问题\n\n>使用原型创建\n- 关于原型：每一个函数都有一个prototype属性，该属性指向一个对象（原型对象），该对象保存的是该类型对象的所有实例共享的属性/方法\n- 对象实例可以通过__proto__来访问原型对象\n```js\nfunction Person(){\n} \nPerson.prototype.name='shuaxin'\n```\n- 优点：可以把属性存到原型对象里\n- 缺点：因为所有实例共享同样的属性，所以导致数据读写会出现混乱\n>组合使用构造函数模式和原型模式\n```js\nfunction Person(name){\n    this.name=name\n} \nPerson.prototype.sayHi=function(){\n    console.log(`你好我是${this.name}`)\n}\n```\n- 优点：结合了构造函数和原型模式2者的优点\n- 缺点：需要合理分配那些存储在函数内部，哪些在原型，否则适得其反；其次就是封装性相对来说不是很好\n>动态原型模式\n```js\nfunction Person(name) {\n    this.name = name\n    if (typeof this.sayhi !== 'function') {\n        Person.prototype.sayhi = function () {\n            console.log(`大家好，我是${this.name}`)\n        }\n    }\n}\nlet shuaxin = new Person('shuaxin')\n```\n- 优点：结局了封装原型、组合模式封装性不好的问题\n\n# 关于对象的一些api\n\n>Object.assign(target,...source)\n- 给对象复制源对象的可枚举属性,返回操作完成后的目标对象\n- 参数：目标对象，源对象(可支持多个)\n```js\nconst man={\n    name:\"shuaxin\"\n}\nconst sex={\n    sex:\"男\"\n}\nlet res=Object.assign(man,sex)\nconsole.log(man)// {name:\"shuaxin\",sex:\"男\"}\nconsole.log(res)// {name:\"shuaxin\",sex:\"男\"}\n```\n\n>Object.create(proto,{propertiesObject})\n- 创建一个新对象\n- 参数：新建对象的原型对象，要添加到自身的属性(以及访问器属性)\n- 应用：实现继承\n```js\nlet man={\n    sex:\"男\"\n}\nlet sx = Object.create(man, {\n    // 注：这里如果不设置枚举属性为true，默认为false，即不能被forin遍历到\n    age: {\n        value: 22\n    },\n    name: {\n        value: \"shuaxin\"\n    }\n})\nconsole.log(sx)//{name:\"shauxin\",age:22}\nconsole.log(sx.__proto__)//{sex:\"男\"}\n```\n\n>Object.entries(target)\n- 返回目标对象的可枚举(enumerable)属性\n```js\nlet sx = {}\nObject.defineProperties(sx, {\n    name: {\n        value: \"shuaxin\",\n        enumerable: true\n    },\n    idCard: {\n        value: '199x-x-x-x',\n        enumerable: false\n    }\n})\nconsole.log(Object.entries(sx)) //[[\"name\", \"shuaxin\"]]\n```\n\n>Object.freeze(target)/Object.isFrozen(target)/ Object.isExtensible(targst)\n-  freeze：冻结对象，使其属性不能删除、修改，也不能增加属性\n-  isFrozen：检查对象是否被冻结，返回Boolean \n-  isExtensible：判断对象是否可扩展（即也可以判断对象是否被冻结）\n- 注：影响对象是否可扩展的操作有 Object.preventExtensions，Object.seal 或 Object.freeze\n```js\nlet sx = {\n    name: \"shuaxin\"\n}\nObject.freeze(sx)\nsx.name = 'update'\nsx.sex = '男'\ndelete sx.name\nconsole.log(sx) //{name:\"shuaxin\"}\nconsole.log(Object.isFrozen(sx))\n```\n\n>Object.fromEntries(obj)\n- 把键值对结构(ES6的map)转换成对象\n```js\nlet list = [\n    [\"name\", \"shuaxin\"],\n    [\"sex\", \"男\"]\n]\nlet map = new Map([\n    [\"name\", \"shuaxin\"],\n    [\"sex\", \"男\"]\n])\nconsole.log(Object.fromEntries(list)) //{name: \"shuaxin\", sex: \"男\"}\nconsole.log(Object.fromEntries(map)) //{name: \"shuaxin\", sex: \"男\"}\n```\n>Object.getOwnPropertyDescriptor(obj)/Object.getOwnPropertyDescriptors(obj)\n- 获取目标对象某个属性的访问器属性情况\n- 需注意：只能指定存储在对象自身的属性，原型的属性无效\n```js\n let shuaxin = {\n    name: \"shuaxin\"\n}\n// {value: \"shuaxin\", writable: true, enumerable: true, configurable: true}\nconsole.log(Object.getOwnPropertyDescriptor(shuaxin, 'name'))\n\n let sx = {\n    name: \"shuaxin\",\n    sex: \"男\"\n}\n// { name: {value: \"shuaxin\", writable: true, enumerable: true, configurable: true}, sex: {…}}\nconsole.log(Object.getOwnPropertyDescriptors(sx));\n```\n\n>Object.values(target)\n- 以数组形式返回对象自身所有属性的值\n- symbol作key的无法获取到\n```js\nconst SEX=Symbol()\nlet shuaxin={\n    [SEX]:\"男\",\n    name:\"shuaxin\"\n}\nconsole.log(Object.values(shuaxin))\n```\n\n>Object.getOwnPropertyNames(target)/Object.getOwnPropertySymbols(target)/Object.keys(target)\n- getOwnPropertyNames:以数组形式返回对象自身的所有属性名,除过以symbol作为key的属性\n- getOwnPropertySymbols:以数组形式返回对象自身的所有symbol做key的属性名\n- keys:以数组格式返回对象自身可枚举的属性\n```js\nconst sex = Symbol('sex')\nlet sx = {\n    [sex]: \"男\"\n}\nObject.defineProperties(sx, {\n    name: {\n        value: \"shuaxin\",\n        enumerable: true\n    },\n    idCard: {\n        value: '199x-x-x-x',\n        enumerable: false\n    }\n})\n// {name: \"shuaxin\", idCard: \"199x-x-x-x\", Symbol(sex): \"男\"}\nconsole.log(sx)\n// [\"name\", \"idCard\"]\nconsole.log(Object.getOwnPropertyNames(sx));\n // [Symbol(sex)]\nconsole.log(Object.getOwnPropertySymbols(sx));\n// [\"name\"]\nconsole.log(Object.keys(sx))\n```\n\n>Object.getPrototypeOf(target)\n- 获取对象的原型对象\n```js\n let man = {\n    sex: \"男\"\n}\nlet sx = Object.create(man, {\n    name: {\n        value: \"shuaxin\"\n    }\n})\n// {sex: \"男\"}\nconsole.log(Object.getPrototypeOf(sx))\n// 同上\nconsole.log(sx.__proto__)\n```\n\n>Object.is()\n- 判断2个值是不是相同，判断规则如下\n- 两个值都是 undefined\n- 两个值都是 null\n- 两个值都是 true 或者都是 false\n- 两个值是由相同个数的字符按照相同的顺序组成的字符串\n- 两个值指向同一个对象\n- 两个值都是数字并且\n- *都是正零 +0*\n- *都是负零 -0*\n- *都是 NaN*\n- *都是除零和 NaN 外的其它同一个数字*\n- 和==还有===的区别：\n- 这种相等性判断逻辑和传统的 == 运算不同，== 运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 \"\" == false 等于 true 的现象），但 Object.is 不会做这种类型转换。\n这与 === 运算符的判定方式也不一样。=== 运算符（和== 运算符）将数字值 -0 和 +0 视为相等，并认为 Number.NaN 不等于 NaN\n\n>Object.seal(target)/Object.isSealed(target)\n- 判断对象是否密封\n- 表现为不能对以存在属性进行删除，不能新增属性\n- 可以修改已存在属性，这也是与freeze的区别\n- isSealed用来判断对象是否是密封\n- isExtensible也可以判断\n\n>Object.preventExtensions(target)/Object.isExtensible(target)\n- 让对象无法扩展\n- 表现形式为，无法新增属性；但是可以对已存在属性进行修改和删除\n- isExtensible判断对象是否可扩展\n```js\nlet sx = {\n    name: \"shuaxin\"\n}\nObject.preventExtensions(sx)\nsx.name = 'update'\nsx.sex = '男'\n// {name: \"update\"}\nconsole.log(sx);\ndelete sx.name\n// {}\nconsole.log(sx);\n```\n## Object原型上的一些api\n\n>isPrototypeOf\n- 判断一个对象是否存在于另一个对象的原型链上\n```js\n let man = {\n    sex: '男'\n}\nlet sx = Object.create(man)\n// true\nconsole.log(man.isPrototypeOf(sx))\n```\n\n>hasOwnProperty\n- 判断对象自身是否含有某个属性\n```js\nlet man = {\n    sex: '男'\n}\nlet sx = Object.create(man, {\n    name: {\n        value: 'shuaxin'\n    }\n})\n// false\nconsole.log(sx.hasOwnProperty('sex'))\n// true\nconsole.log(sx.hasOwnProperty('name'))\n```\n\n>propertyIsEnumerable\n- 判断该属性属性是否可枚举\n- 如果没有该属性，返回false","slug":"JS/关于对象","published":1,"updated":"2021-12-31T12:01:59.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv1n004zj7jfaysph5j1","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>因为js特性的原因，所以创建对象有很多中形式，各自有各自的优缺点/对应使用的场景，而且关于对象也会涉及到原型等比较重要的知识，所以总结一下</p>\n<a id=\"more\"></a>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"关于js对象\"><a href=\"#关于js对象\" class=\"headerlink\" title=\"关于js对象\"></a>关于js对象</h2><blockquote>\n<p>定义</p>\n</blockquote>\n<ul>\n<li>根据红皮书的描述：无序属性的集合，属性可包含基本值、对象、函数。</li>\n<li>总结：包含多个键值对的无序集合。</li>\n</ul>\n<blockquote>\n<p>属性类型</p>\n</blockquote>\n<ul>\n<li>根据红皮书地址，ECMA-262标准定义了一些对象的内部属性</li>\n<li>主要分为*<strong>数据属性*** 和*</strong>访问器属性***</li>\n<li>数据属性就是对象存放数据的属性</li>\n<li>访问器属性不包含数据(一个内部机制)，包含一对getter/setter函数的属性，在读写数据时调用</li>\n</ul>\n<blockquote>\n<p>数据属性的4个描述行为的特性</p>\n</blockquote>\n<ul>\n<li>configurable-表示该属性能否被delete删除</li>\n<li>enumerable-表示该属性能否被for-in循环</li>\n<li>writable-表示该属性的值能否被修改</li>\n<li>value-存储数据的发那个</li>\n<li>代码示范<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"> <span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&#x27;sx&#x27;</span>,<br>    age: <span class=\"hljs-number\">22</span><br>&#125;<br><span class=\"hljs-comment\">// 通过Object.defineProperty来管理目标对象的属性行为</span><br><span class=\"hljs-comment\">// 添加对sx对象的name属性的拦截器</span><br><span class=\"hljs-built_in\">Object</span>.defineProperty(sx, <span class=\"hljs-string\">&#x27;name&#x27;</span>, &#123;<br>    <span class=\"hljs-comment\">// 定义能否delete删除该属性 默认为true</span><br>    configurable: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 定义能否通过forin循环到该属性，默认为true</span><br>    enumerable: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 定义能否修改该属性，默认为true</span><br>    writable: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 如果这里定义，会覆盖初始化对象时的值</span><br>    <span class=\"hljs-comment\">// value:&quot;wade&quot;</span><br>&#125;)<br><span class=\"hljs-comment\">// 即使做出了修改/删除的操作，但无效</span><br>sx.name = <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br><span class=\"hljs-keyword\">delete</span> sx.name<br><span class=\"hljs-built_in\">console</span>.log(sx)<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> sx) &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;key&#125;</span>=<span class=\"hljs-subst\">$&#123;sx[key]&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>访问器属性(属性的描述符)</p>\n</blockquote>\n</li>\n<li>不包含数据</li>\n<li>包含一对getter、setter函数，不是必须，无需定义，是对象内部的机制</li>\n<li>当读取对象的属性时，默认调用getter函数，返回属性值</li>\n<li>当对属性进行数据写入时，默认调用setter，并传入新值</li>\n<li>代码示范<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>    age: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-comment\">// _的属性表示该属性只能通过对象方法来访问</span><br>    _sex: <span class=\"hljs-string\">&#x27;女&#x27;</span><br>&#125;<br><span class=\"hljs-comment\">// 创建属性拦截器</span><br><span class=\"hljs-built_in\">Object</span>.defineProperty(sx, <span class=\"hljs-string\">&quot;sex&quot;</span>, &#123;<br>    <span class=\"hljs-comment\">// 当读取sex属性的值时，触发，返回_sex的值</span><br>    get() &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>._sex)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._sex<br>    &#125;,<br>    <span class=\"hljs-comment\">// 当对sex属性进行写入操作时触发</span><br>    set(newVal) &#123;<br>        <span class=\"hljs-comment\">// 判断_sex和sex是否一致，否在做修改</span><br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>._sex !== newVal) &#123;<br>            <span class=\"hljs-built_in\">this</span>._sex = newVal<br>        &#125;<br>    &#125;<br>&#125;)<br>sx.sex = <span class=\"hljs-string\">&#x27;男&#x27;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>定义多个属性</p>\n</blockquote>\n</li>\n<li>可以同时创建对多个属性的拦截器</li>\n<li>使用defineProperties<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>    age: <span class=\"hljs-number\">22</span>,<br>    _sex: <span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">Object</span>.defineProperties(obj, &#123;<br>    name: &#123;<br>        configurable: <span class=\"hljs-literal\">false</span>,<br>        enumerable: <span class=\"hljs-literal\">false</span>,<br>        writable: <span class=\"hljs-literal\">false</span><br>    &#125;,<br>    age: &#123;<br>        configurable: <span class=\"hljs-literal\">false</span>,<br>        enumerable: <span class=\"hljs-literal\">false</span>,<br>        writable: <span class=\"hljs-literal\">false</span><br>    &#125;,<br>    sex: &#123;<br>        get() &#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>._sex)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._sex<br>        &#125;,<br>        <span class=\"hljs-comment\">// 当对sex属性进行写入操作时触发</span><br>        set(newVal) &#123;<br>            <span class=\"hljs-comment\">// 判断_sex和sex是否一致，否在做修改</span><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>._sex !== newVal) &#123;<br>                <span class=\"hljs-built_in\">this</span>._sex = newVal<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）\"><a href=\"#关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）\" class=\"headerlink\" title=\"关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）\"></a>关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）</h2><h3 id=\"无法识别对象类型的\"><a href=\"#无法识别对象类型的\" class=\"headerlink\" title=\"无法识别对象类型的\"></a>无法识别对象类型的</h3><p>无法识别对象类型的表现为，typeof的结果都是Object</p>\n<blockquote>\n<p>字面量创建</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj=&#123;<br>    name:<span class=\"hljs-string\">&quot;obj&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>优点：创建简单、直观</li>\n<li>缺点：会产生大量重复的代码，而且无法识别对象类型</li>\n</ul>\n<blockquote>\n<p>使用object构造函数创建</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br>obj.name=<span class=\"hljs-string\">&quot;obj&quot;</span><br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>优缺点和字面量创建一样</li>\n</ul>\n<blockquote>\n<p>工厂模式创建</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createObj</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> obj=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br>    obj.name=name<br>    <span class=\"hljs-keyword\">return</span> obj<br>&#125;<br><span class=\"hljs-keyword\">let</span> obj=createObj(<span class=\"hljs-string\">&#x27;obj&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>工厂模式是设计模式的一种</li>\n<li>优点：封装了创建对象时的细节，减少了代码的冗余</li>\n<li>缺点：同样这种方式也无法判断对象的类型 </li>\n</ul>\n<blockquote>\n<p>寄生构造函数模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> obj=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br>    obj.name=name<br>    <span class=\"hljs-keyword\">return</span> obj<br>&#125;<br><span class=\"hljs-keyword\">let</span> sx=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;sx&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>优缺点和工厂模式一致</li>\n</ul>\n<blockquote>\n<p>稳妥构造函数模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">str</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> name = str<br>    <span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br>    obj.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name<br>    &#125;<br>    obj.setName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) </span>&#123;<br>        name = str<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj<br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = Person(<span class=\"hljs-string\">&#x27;sx&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(sx.name) <span class=\"hljs-comment\">//undefined</span><br><span class=\"hljs-built_in\">console</span>.log(sx.getName()) <span class=\"hljs-comment\">//sx</span><br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>优点：保证数据安全性，除非对外提供可操作函数，否则无法访问</li>\n<li>缺点：无法判断实例的对象类型</li>\n</ul>\n<h3 id=\"可以识别对象类型的\"><a href=\"#可以识别对象类型的\" class=\"headerlink\" title=\"可以识别对象类型的\"></a>可以识别对象类型的</h3><p>表现为可以使用instanceof来判断具体的类型，比如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> obj)<span class=\"hljs-comment\">//object</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name<br>&#125;<br><span class=\"hljs-keyword\">let</span> sx=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;sx&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(sx <span class=\"hljs-keyword\">instanceof</span> Person) <span class=\"hljs-comment\">//true</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>自定义构造函数创建</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name<br>&#125;<br><span class=\"hljs-keyword\">let</span> shuaxin=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span>)<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>优点：可以定义对象的类型</li>\n<li>缺点：因为每次调用一次该构造函数都会创建一片空间来存储一模一样的对象的属性，当创建许多个该类型对象时，会存在内存空间浪费的问题</li>\n</ul>\n<blockquote>\n<p>使用原型创建</p>\n</blockquote>\n<ul>\n<li>关于原型：每一个函数都有一个prototype属性，该属性指向一个对象（原型对象），该对象保存的是该类型对象的所有实例共享的属性/方法</li>\n<li>对象实例可以通过__proto__来访问原型对象<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>&#125; <br>Person.prototype.name=<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br></code></pre></div></td></tr></table></figure></li>\n<li>优点：可以把属性存到原型对象里</li>\n<li>缺点：因为所有实例共享同样的属性，所以导致数据读写会出现混乱<blockquote>\n<p>组合使用构造函数模式和原型模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name<br>&#125; <br>Person.prototype.sayHi=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`你好我是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure></li>\n<li>优点：结合了构造函数和原型模式2者的优点</li>\n<li>缺点：需要合理分配那些存储在函数内部，哪些在原型，否则适得其反；其次就是封装性相对来说不是很好<blockquote>\n<p>动态原型模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span>.sayhi !== <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        Person.prototype.sayhi = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`大家好，我是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> shuaxin = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span>)<br></code></pre></div></td></tr></table></figure></li>\n<li>优点：结局了封装原型、组合模式封装性不好的问题</li>\n</ul>\n<h1 id=\"关于对象的一些api\"><a href=\"#关于对象的一些api\" class=\"headerlink\" title=\"关于对象的一些api\"></a>关于对象的一些api</h1><blockquote>\n<p>Object.assign(target,…source)</p>\n</blockquote>\n<ul>\n<li>给对象复制源对象的可枚举属性,返回操作完成后的目标对象</li>\n<li>参数：目标对象，源对象(可支持多个)<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> man=&#123;<br>    name:<span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> sex=&#123;<br>    sex:<span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-built_in\">Object</span>.assign(man,sex)<br><span class=\"hljs-built_in\">console</span>.log(man)<span class=\"hljs-comment\">// &#123;name:&quot;shuaxin&quot;,sex:&quot;男&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(res)<span class=\"hljs-comment\">// &#123;name:&quot;shuaxin&quot;,sex:&quot;男&quot;&#125;</span><br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.create(proto,{propertiesObject})</p>\n</blockquote>\n<ul>\n<li>创建一个新对象</li>\n<li>参数：新建对象的原型对象，要添加到自身的属性(以及访问器属性)</li>\n<li>应用：实现继承<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> man=&#123;<br>    sex:<span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = <span class=\"hljs-built_in\">Object</span>.create(man, &#123;<br>    <span class=\"hljs-comment\">// 注：这里如果不设置枚举属性为true，默认为false，即不能被forin遍历到</span><br>    age: &#123;<br>        value: <span class=\"hljs-number\">22</span><br>    &#125;,<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(sx)<span class=\"hljs-comment\">//&#123;name:&quot;shauxin&quot;,age:22&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(sx.__proto__)<span class=\"hljs-comment\">//&#123;sex:&quot;男&quot;&#125;</span><br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.entries(target)</p>\n</blockquote>\n<ul>\n<li>返回目标对象的可枚举(enumerable)属性<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> sx = &#123;&#125;<br><span class=\"hljs-built_in\">Object</span>.defineProperties(sx, &#123;<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>        enumerable: <span class=\"hljs-literal\">true</span><br>    &#125;,<br>    idCard: &#123;<br>        value: <span class=\"hljs-string\">&#x27;199x-x-x-x&#x27;</span>,<br>        enumerable: <span class=\"hljs-literal\">false</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.entries(sx)) <span class=\"hljs-comment\">//[[&quot;name&quot;, &quot;shuaxin&quot;]]</span><br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.freeze(target)/Object.isFrozen(target)/ Object.isExtensible(targst)</p>\n</blockquote>\n<ul>\n<li>freeze：冻结对象，使其属性不能删除、修改，也不能增加属性</li>\n<li>isFrozen：检查对象是否被冻结，返回Boolean </li>\n<li>isExtensible：判断对象是否可扩展（即也可以判断对象是否被冻结）</li>\n<li>注：影响对象是否可扩展的操作有 Object.preventExtensions，Object.seal 或 Object.freeze<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">Object</span>.freeze(sx)<br>sx.name = <span class=\"hljs-string\">&#x27;update&#x27;</span><br>sx.sex = <span class=\"hljs-string\">&#x27;男&#x27;</span><br><span class=\"hljs-keyword\">delete</span> sx.name<br><span class=\"hljs-built_in\">console</span>.log(sx) <span class=\"hljs-comment\">//&#123;name:&quot;shuaxin&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.isFrozen(sx))<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.fromEntries(obj)</p>\n</blockquote>\n<ul>\n<li>把键值对结构(ES6的map)转换成对象<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> list = [<br>    [<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;shuaxin&quot;</span>],<br>    [<span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>]<br>]<br><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([<br>    [<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;shuaxin&quot;</span>],<br>    [<span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>]<br>])<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.fromEntries(list)) <span class=\"hljs-comment\">//&#123;name: &quot;shuaxin&quot;, sex: &quot;男&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.fromEntries(map)) <span class=\"hljs-comment\">//&#123;name: &quot;shuaxin&quot;, sex: &quot;男&quot;&#125;</span><br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>Object.getOwnPropertyDescriptor(obj)/Object.getOwnPropertyDescriptors(obj)</p>\n</blockquote>\n</li>\n<li>获取目标对象某个属性的访问器属性情况</li>\n<li>需注意：只能指定存储在对象自身的属性，原型的属性无效<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"> <span class=\"hljs-keyword\">let</span> shuaxin = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-comment\">// &#123;value: &quot;shuaxin&quot;, writable: true, enumerable: true, configurable: true&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(shuaxin, <span class=\"hljs-string\">&#x27;name&#x27;</span>))<br><br> <span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>    sex: <span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-comment\">// &#123; name: &#123;value: &quot;shuaxin&quot;, writable: true, enumerable: true, configurable: true&#125;, sex: &#123;…&#125;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptors(sx));<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.values(target)</p>\n</blockquote>\n<ul>\n<li>以数组形式返回对象自身所有属性的值</li>\n<li>symbol作key的无法获取到<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> SEX=<span class=\"hljs-built_in\">Symbol</span>()<br><span class=\"hljs-keyword\">let</span> shuaxin=&#123;<br>    [SEX]:<span class=\"hljs-string\">&quot;男&quot;</span>,<br>    name:<span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.values(shuaxin))<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.getOwnPropertyNames(target)/Object.getOwnPropertySymbols(target)/Object.keys(target)</p>\n</blockquote>\n<ul>\n<li>getOwnPropertyNames:以数组形式返回对象自身的所有属性名,除过以symbol作为key的属性</li>\n<li>getOwnPropertySymbols:以数组形式返回对象自身的所有symbol做key的属性名</li>\n<li>keys:以数组格式返回对象自身可枚举的属性<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> sex = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;sex&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> sx = &#123;<br>    [sex]: <span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">Object</span>.defineProperties(sx, &#123;<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>        enumerable: <span class=\"hljs-literal\">true</span><br>    &#125;,<br>    idCard: &#123;<br>        value: <span class=\"hljs-string\">&#x27;199x-x-x-x&#x27;</span>,<br>        enumerable: <span class=\"hljs-literal\">false</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-comment\">// &#123;name: &quot;shuaxin&quot;, idCard: &quot;199x-x-x-x&quot;, Symbol(sex): &quot;男&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(sx)<br><span class=\"hljs-comment\">// [&quot;name&quot;, &quot;idCard&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getOwnPropertyNames(sx));<br> <span class=\"hljs-comment\">// [Symbol(sex)]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getOwnPropertySymbols(sx));<br><span class=\"hljs-comment\">// [&quot;name&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.keys(sx))<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.getPrototypeOf(target)</p>\n</blockquote>\n<ul>\n<li>获取对象的原型对象<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"> <span class=\"hljs-keyword\">let</span> man = &#123;<br>    sex: <span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = <span class=\"hljs-built_in\">Object</span>.create(man, &#123;<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-comment\">// &#123;sex: &quot;男&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getPrototypeOf(sx))<br><span class=\"hljs-comment\">// 同上</span><br><span class=\"hljs-built_in\">console</span>.log(sx.__proto__)<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.is()</p>\n</blockquote>\n<ul>\n<li>判断2个值是不是相同，判断规则如下</li>\n<li>两个值都是 undefined</li>\n<li>两个值都是 null</li>\n<li>两个值都是 true 或者都是 false</li>\n<li>两个值是由相同个数的字符按照相同的顺序组成的字符串</li>\n<li>两个值指向同一个对象</li>\n<li>两个值都是数字并且</li>\n<li><em>都是正零 +0</em></li>\n<li><em>都是负零 -0</em></li>\n<li><em>都是 NaN</em></li>\n<li><em>都是除零和 NaN 外的其它同一个数字</em></li>\n<li>和==还有===的区别：</li>\n<li>这种相等性判断逻辑和传统的 == 运算不同，== 运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 “” == false 等于 true 的现象），但 Object.is 不会做这种类型转换。<br>这与 === 运算符的判定方式也不一样。=== 运算符（和== 运算符）将数字值 -0 和 +0 视为相等，并认为 Number.NaN 不等于 NaN</li>\n</ul>\n<blockquote>\n<p>Object.seal(target)/Object.isSealed(target)</p>\n</blockquote>\n<ul>\n<li>判断对象是否密封</li>\n<li>表现为不能对以存在属性进行删除，不能新增属性</li>\n<li>可以修改已存在属性，这也是与freeze的区别</li>\n<li>isSealed用来判断对象是否是密封</li>\n<li>isExtensible也可以判断</li>\n</ul>\n<blockquote>\n<p>Object.preventExtensions(target)/Object.isExtensible(target)</p>\n</blockquote>\n<ul>\n<li>让对象无法扩展</li>\n<li>表现形式为，无法新增属性；但是可以对已存在属性进行修改和删除</li>\n<li>isExtensible判断对象是否可扩展<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">Object</span>.preventExtensions(sx)<br>sx.name = <span class=\"hljs-string\">&#x27;update&#x27;</span><br>sx.sex = <span class=\"hljs-string\">&#x27;男&#x27;</span><br><span class=\"hljs-comment\">// &#123;name: &quot;update&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(sx);<br><span class=\"hljs-keyword\">delete</span> sx.name<br><span class=\"hljs-comment\">// &#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(sx);<br></code></pre></div></td></tr></table></figure>\n<h2 id=\"Object原型上的一些api\"><a href=\"#Object原型上的一些api\" class=\"headerlink\" title=\"Object原型上的一些api\"></a>Object原型上的一些api</h2></li>\n</ul>\n<blockquote>\n<p>isPrototypeOf</p>\n</blockquote>\n<ul>\n<li>判断一个对象是否存在于另一个对象的原型链上<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"> <span class=\"hljs-keyword\">let</span> man = &#123;<br>    sex: <span class=\"hljs-string\">&#x27;男&#x27;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = <span class=\"hljs-built_in\">Object</span>.create(man)<br><span class=\"hljs-comment\">// true</span><br><span class=\"hljs-built_in\">console</span>.log(man.isPrototypeOf(sx))<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>hasOwnProperty</p>\n</blockquote>\n<ul>\n<li>判断对象自身是否含有某个属性<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> man = &#123;<br>    sex: <span class=\"hljs-string\">&#x27;男&#x27;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = <span class=\"hljs-built_in\">Object</span>.create(man, &#123;<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-comment\">// false</span><br><span class=\"hljs-built_in\">console</span>.log(sx.hasOwnProperty(<span class=\"hljs-string\">&#x27;sex&#x27;</span>))<br><span class=\"hljs-comment\">// true</span><br><span class=\"hljs-built_in\">console</span>.log(sx.hasOwnProperty(<span class=\"hljs-string\">&#x27;name&#x27;</span>))<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>propertyIsEnumerable</p>\n</blockquote>\n<ul>\n<li>判断该属性属性是否可枚举</li>\n<li>如果没有该属性，返回false</li>\n</ul>\n","site":{"data":{}},"wordcount":8823,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><p>因为js特性的原因，所以创建对象有很多中形式，各自有各自的优缺点/对应使用的场景，而且关于对象也会涉及到原型等比较重要的知识，所以总结一下</p>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"关于js对象\"><a href=\"#关于js对象\" class=\"headerlink\" title=\"关于js对象\"></a>关于js对象</h2><blockquote>\n<p>定义</p>\n</blockquote>\n<ul>\n<li>根据红皮书的描述：无序属性的集合，属性可包含基本值、对象、函数。</li>\n<li>总结：包含多个键值对的无序集合。</li>\n</ul>\n<blockquote>\n<p>属性类型</p>\n</blockquote>\n<ul>\n<li>根据红皮书地址，ECMA-262标准定义了一些对象的内部属性</li>\n<li>主要分为*<strong>数据属性*** 和*</strong>访问器属性***</li>\n<li>数据属性就是对象存放数据的属性</li>\n<li>访问器属性不包含数据(一个内部机制)，包含一对getter/setter函数的属性，在读写数据时调用</li>\n</ul>\n<blockquote>\n<p>数据属性的4个描述行为的特性</p>\n</blockquote>\n<ul>\n<li>configurable-表示该属性能否被delete删除</li>\n<li>enumerable-表示该属性能否被for-in循环</li>\n<li>writable-表示该属性的值能否被修改</li>\n<li>value-存储数据的发那个</li>\n<li>代码示范<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&#x27;sx&#x27;</span>,<br>    age: <span class=\"hljs-number\">22</span><br>&#125;<br><span class=\"hljs-comment\">// 通过Object.defineProperty来管理目标对象的属性行为</span><br><span class=\"hljs-comment\">// 添加对sx对象的name属性的拦截器</span><br><span class=\"hljs-built_in\">Object</span>.defineProperty(sx, <span class=\"hljs-string\">&#x27;name&#x27;</span>, &#123;<br>    <span class=\"hljs-comment\">// 定义能否delete删除该属性 默认为true</span><br>    configurable: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 定义能否通过forin循环到该属性，默认为true</span><br>    enumerable: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 定义能否修改该属性，默认为true</span><br>    writable: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 如果这里定义，会覆盖初始化对象时的值</span><br>    <span class=\"hljs-comment\">// value:&quot;wade&quot;</span><br>&#125;)<br><span class=\"hljs-comment\">// 即使做出了修改/删除的操作，但无效</span><br>sx.name = <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br><span class=\"hljs-keyword\">delete</span> sx.name<br><span class=\"hljs-built_in\">console</span>.log(sx)<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> sx) &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;key&#125;</span>=<span class=\"hljs-subst\">$&#123;sx[key]&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>访问器属性(属性的描述符)</p>\n</blockquote>\n</li>\n<li>不包含数据</li>\n<li>包含一对getter、setter函数，不是必须，无需定义，是对象内部的机制</li>\n<li>当读取对象的属性时，默认调用getter函数，返回属性值</li>\n<li>当对属性进行数据写入时，默认调用setter，并传入新值</li>\n<li>代码示范<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>    age: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-comment\">// _的属性表示该属性只能通过对象方法来访问</span><br>    _sex: <span class=\"hljs-string\">&#x27;女&#x27;</span><br>&#125;<br><span class=\"hljs-comment\">// 创建属性拦截器</span><br><span class=\"hljs-built_in\">Object</span>.defineProperty(sx, <span class=\"hljs-string\">&quot;sex&quot;</span>, &#123;<br>    <span class=\"hljs-comment\">// 当读取sex属性的值时，触发，返回_sex的值</span><br>    get() &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>._sex)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._sex<br>    &#125;,<br>    <span class=\"hljs-comment\">// 当对sex属性进行写入操作时触发</span><br>    set(newVal) &#123;<br>        <span class=\"hljs-comment\">// 判断_sex和sex是否一致，否在做修改</span><br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>._sex !== newVal) &#123;<br>            <span class=\"hljs-built_in\">this</span>._sex = newVal<br>        &#125;<br>    &#125;<br>&#125;)<br>sx.sex = <span class=\"hljs-string\">&#x27;男&#x27;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>定义多个属性</p>\n</blockquote>\n</li>\n<li>可以同时创建对多个属性的拦截器</li>\n<li>使用defineProperties<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>    age: <span class=\"hljs-number\">22</span>,<br>    _sex: <span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">Object</span>.defineProperties(obj, &#123;<br>    name: &#123;<br>        configurable: <span class=\"hljs-literal\">false</span>,<br>        enumerable: <span class=\"hljs-literal\">false</span>,<br>        writable: <span class=\"hljs-literal\">false</span><br>    &#125;,<br>    age: &#123;<br>        configurable: <span class=\"hljs-literal\">false</span>,<br>        enumerable: <span class=\"hljs-literal\">false</span>,<br>        writable: <span class=\"hljs-literal\">false</span><br>    &#125;,<br>    sex: &#123;<br>        get() &#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>._sex)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._sex<br>        &#125;,<br>        <span class=\"hljs-comment\">// 当对sex属性进行写入操作时触发</span><br>        set(newVal) &#123;<br>            <span class=\"hljs-comment\">// 判断_sex和sex是否一致，否在做修改</span><br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>._sex !== newVal) &#123;<br>                <span class=\"hljs-built_in\">this</span>._sex = newVal<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）\"><a href=\"#关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）\" class=\"headerlink\" title=\"关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）\"></a>关于创建对象的各种方式（下面按创建对象实例后能否识别对象类型来划分）</h2><h3 id=\"无法识别对象类型的\"><a href=\"#无法识别对象类型的\" class=\"headerlink\" title=\"无法识别对象类型的\"></a>无法识别对象类型的</h3><p>无法识别对象类型的表现为，typeof的结果都是Object</p>\n<blockquote>\n<p>字面量创建</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj=&#123;<br>    name:<span class=\"hljs-string\">&quot;obj&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>优点：创建简单、直观</li>\n<li>缺点：会产生大量重复的代码，而且无法识别对象类型</li>\n</ul>\n<blockquote>\n<p>使用object构造函数创建</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br>obj.name=<span class=\"hljs-string\">&quot;obj&quot;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>优缺点和字面量创建一样</li>\n</ul>\n<blockquote>\n<p>工厂模式创建</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createObj</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> obj=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br>    obj.name=name<br>    <span class=\"hljs-keyword\">return</span> obj<br>&#125;<br><span class=\"hljs-keyword\">let</span> obj=createObj(<span class=\"hljs-string\">&#x27;obj&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>工厂模式是设计模式的一种</li>\n<li>优点：封装了创建对象时的细节，减少了代码的冗余</li>\n<li>缺点：同样这种方式也无法判断对象的类型 </li>\n</ul>\n<blockquote>\n<p>寄生构造函数模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">let</span> obj=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br>    obj.name=name<br>    <span class=\"hljs-keyword\">return</span> obj<br>&#125;<br><span class=\"hljs-keyword\">let</span> sx=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;sx&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>优缺点和工厂模式一致</li>\n</ul>\n<blockquote>\n<p>稳妥构造函数模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">str</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> name = str<br>    <span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br>    obj.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name<br>    &#125;<br>    obj.setName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) </span>&#123;<br>        name = str<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> obj<br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = Person(<span class=\"hljs-string\">&#x27;sx&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(sx.name) <span class=\"hljs-comment\">//undefined</span><br><span class=\"hljs-built_in\">console</span>.log(sx.getName()) <span class=\"hljs-comment\">//sx</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>优点：保证数据安全性，除非对外提供可操作函数，否则无法访问</li>\n<li>缺点：无法判断实例的对象类型</li>\n</ul>\n<h3 id=\"可以识别对象类型的\"><a href=\"#可以识别对象类型的\" class=\"headerlink\" title=\"可以识别对象类型的\"></a>可以识别对象类型的</h3><p>表现为可以使用instanceof来判断具体的类型，比如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> obj)<span class=\"hljs-comment\">//object</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name<br>&#125;<br><span class=\"hljs-keyword\">let</span> sx=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;sx&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(sx <span class=\"hljs-keyword\">instanceof</span> Person) <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>自定义构造函数创建</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name<br>&#125;<br><span class=\"hljs-keyword\">let</span> shuaxin=<span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>优点：可以定义对象的类型</li>\n<li>缺点：因为每次调用一次该构造函数都会创建一片空间来存储一模一样的对象的属性，当创建许多个该类型对象时，会存在内存空间浪费的问题</li>\n</ul>\n<blockquote>\n<p>使用原型创建</p>\n</blockquote>\n<ul>\n<li>关于原型：每一个函数都有一个prototype属性，该属性指向一个对象（原型对象），该对象保存的是该类型对象的所有实例共享的属性/方法</li>\n<li>对象实例可以通过__proto__来访问原型对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>&#125; <br>Person.prototype.name=<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br></code></pre></td></tr></table></figure></li>\n<li>优点：可以把属性存到原型对象里</li>\n<li>缺点：因为所有实例共享同样的属性，所以导致数据读写会出现混乱<blockquote>\n<p>组合使用构造函数模式和原型模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name=name<br>&#125; <br>Person.prototype.sayHi=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`你好我是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>优点：结合了构造函数和原型模式2者的优点</li>\n<li>缺点：需要合理分配那些存储在函数内部，哪些在原型，否则适得其反；其次就是封装性相对来说不是很好<blockquote>\n<p>动态原型模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span>.sayhi !== <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>        Person.prototype.sayhi = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`大家好，我是<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">let</span> shuaxin = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span>)<br></code></pre></td></tr></table></figure></li>\n<li>优点：结局了封装原型、组合模式封装性不好的问题</li>\n</ul>\n<h1 id=\"关于对象的一些api\"><a href=\"#关于对象的一些api\" class=\"headerlink\" title=\"关于对象的一些api\"></a>关于对象的一些api</h1><blockquote>\n<p>Object.assign(target,…source)</p>\n</blockquote>\n<ul>\n<li>给对象复制源对象的可枚举属性,返回操作完成后的目标对象</li>\n<li>参数：目标对象，源对象(可支持多个)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> man=&#123;<br>    name:<span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> sex=&#123;<br>    sex:<span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> res=<span class=\"hljs-built_in\">Object</span>.assign(man,sex)<br><span class=\"hljs-built_in\">console</span>.log(man)<span class=\"hljs-comment\">// &#123;name:&quot;shuaxin&quot;,sex:&quot;男&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(res)<span class=\"hljs-comment\">// &#123;name:&quot;shuaxin&quot;,sex:&quot;男&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.create(proto,{propertiesObject})</p>\n</blockquote>\n<ul>\n<li>创建一个新对象</li>\n<li>参数：新建对象的原型对象，要添加到自身的属性(以及访问器属性)</li>\n<li>应用：实现继承<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> man=&#123;<br>    sex:<span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = <span class=\"hljs-built_in\">Object</span>.create(man, &#123;<br>    <span class=\"hljs-comment\">// 注：这里如果不设置枚举属性为true，默认为false，即不能被forin遍历到</span><br>    age: &#123;<br>        value: <span class=\"hljs-number\">22</span><br>    &#125;,<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(sx)<span class=\"hljs-comment\">//&#123;name:&quot;shauxin&quot;,age:22&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(sx.__proto__)<span class=\"hljs-comment\">//&#123;sex:&quot;男&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.entries(target)</p>\n</blockquote>\n<ul>\n<li>返回目标对象的可枚举(enumerable)属性<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> sx = &#123;&#125;<br><span class=\"hljs-built_in\">Object</span>.defineProperties(sx, &#123;<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>        enumerable: <span class=\"hljs-literal\">true</span><br>    &#125;,<br>    idCard: &#123;<br>        value: <span class=\"hljs-string\">&#x27;199x-x-x-x&#x27;</span>,<br>        enumerable: <span class=\"hljs-literal\">false</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.entries(sx)) <span class=\"hljs-comment\">//[[&quot;name&quot;, &quot;shuaxin&quot;]]</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.freeze(target)/Object.isFrozen(target)/ Object.isExtensible(targst)</p>\n</blockquote>\n<ul>\n<li>freeze：冻结对象，使其属性不能删除、修改，也不能增加属性</li>\n<li>isFrozen：检查对象是否被冻结，返回Boolean </li>\n<li>isExtensible：判断对象是否可扩展（即也可以判断对象是否被冻结）</li>\n<li>注：影响对象是否可扩展的操作有 Object.preventExtensions，Object.seal 或 Object.freeze<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">Object</span>.freeze(sx)<br>sx.name = <span class=\"hljs-string\">&#x27;update&#x27;</span><br>sx.sex = <span class=\"hljs-string\">&#x27;男&#x27;</span><br><span class=\"hljs-keyword\">delete</span> sx.name<br><span class=\"hljs-built_in\">console</span>.log(sx) <span class=\"hljs-comment\">//&#123;name:&quot;shuaxin&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.isFrozen(sx))<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.fromEntries(obj)</p>\n</blockquote>\n<ul>\n<li>把键值对结构(ES6的map)转换成对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> list = [<br>    [<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;shuaxin&quot;</span>],<br>    [<span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>]<br>]<br><span class=\"hljs-keyword\">let</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([<br>    [<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;shuaxin&quot;</span>],<br>    [<span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>]<br>])<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.fromEntries(list)) <span class=\"hljs-comment\">//&#123;name: &quot;shuaxin&quot;, sex: &quot;男&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.fromEntries(map)) <span class=\"hljs-comment\">//&#123;name: &quot;shuaxin&quot;, sex: &quot;男&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>Object.getOwnPropertyDescriptor(obj)/Object.getOwnPropertyDescriptors(obj)</p>\n</blockquote>\n</li>\n<li>获取目标对象某个属性的访问器属性情况</li>\n<li>需注意：只能指定存储在对象自身的属性，原型的属性无效<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-keyword\">let</span> shuaxin = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-comment\">// &#123;value: &quot;shuaxin&quot;, writable: true, enumerable: true, configurable: true&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptor(shuaxin, <span class=\"hljs-string\">&#x27;name&#x27;</span>))<br><br> <span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>    sex: <span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-comment\">// &#123; name: &#123;value: &quot;shuaxin&quot;, writable: true, enumerable: true, configurable: true&#125;, sex: &#123;…&#125;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getOwnPropertyDescriptors(sx));<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.values(target)</p>\n</blockquote>\n<ul>\n<li>以数组形式返回对象自身所有属性的值</li>\n<li>symbol作key的无法获取到<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> SEX=<span class=\"hljs-built_in\">Symbol</span>()<br><span class=\"hljs-keyword\">let</span> shuaxin=&#123;<br>    [SEX]:<span class=\"hljs-string\">&quot;男&quot;</span>,<br>    name:<span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.values(shuaxin))<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.getOwnPropertyNames(target)/Object.getOwnPropertySymbols(target)/Object.keys(target)</p>\n</blockquote>\n<ul>\n<li>getOwnPropertyNames:以数组形式返回对象自身的所有属性名,除过以symbol作为key的属性</li>\n<li>getOwnPropertySymbols:以数组形式返回对象自身的所有symbol做key的属性名</li>\n<li>keys:以数组格式返回对象自身可枚举的属性<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> sex = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">&#x27;sex&#x27;</span>)<br><span class=\"hljs-keyword\">let</span> sx = &#123;<br>    [sex]: <span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">Object</span>.defineProperties(sx, &#123;<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>        enumerable: <span class=\"hljs-literal\">true</span><br>    &#125;,<br>    idCard: &#123;<br>        value: <span class=\"hljs-string\">&#x27;199x-x-x-x&#x27;</span>,<br>        enumerable: <span class=\"hljs-literal\">false</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-comment\">// &#123;name: &quot;shuaxin&quot;, idCard: &quot;199x-x-x-x&quot;, Symbol(sex): &quot;男&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(sx)<br><span class=\"hljs-comment\">// [&quot;name&quot;, &quot;idCard&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getOwnPropertyNames(sx));<br> <span class=\"hljs-comment\">// [Symbol(sex)]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getOwnPropertySymbols(sx));<br><span class=\"hljs-comment\">// [&quot;name&quot;]</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.keys(sx))<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.getPrototypeOf(target)</p>\n</blockquote>\n<ul>\n<li>获取对象的原型对象<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-keyword\">let</span> man = &#123;<br>    sex: <span class=\"hljs-string\">&quot;男&quot;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = <span class=\"hljs-built_in\">Object</span>.create(man, &#123;<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-comment\">// &#123;sex: &quot;男&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.getPrototypeOf(sx))<br><span class=\"hljs-comment\">// 同上</span><br><span class=\"hljs-built_in\">console</span>.log(sx.__proto__)<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>Object.is()</p>\n</blockquote>\n<ul>\n<li>判断2个值是不是相同，判断规则如下</li>\n<li>两个值都是 undefined</li>\n<li>两个值都是 null</li>\n<li>两个值都是 true 或者都是 false</li>\n<li>两个值是由相同个数的字符按照相同的顺序组成的字符串</li>\n<li>两个值指向同一个对象</li>\n<li>两个值都是数字并且</li>\n<li><em>都是正零 +0</em></li>\n<li><em>都是负零 -0</em></li>\n<li><em>都是 NaN</em></li>\n<li><em>都是除零和 NaN 外的其它同一个数字</em></li>\n<li>和==还有===的区别：</li>\n<li>这种相等性判断逻辑和传统的 == 运算不同，== 运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 “” == false 等于 true 的现象），但 Object.is 不会做这种类型转换。<br>这与 === 运算符的判定方式也不一样。=== 运算符（和== 运算符）将数字值 -0 和 +0 视为相等，并认为 Number.NaN 不等于 NaN</li>\n</ul>\n<blockquote>\n<p>Object.seal(target)/Object.isSealed(target)</p>\n</blockquote>\n<ul>\n<li>判断对象是否密封</li>\n<li>表现为不能对以存在属性进行删除，不能新增属性</li>\n<li>可以修改已存在属性，这也是与freeze的区别</li>\n<li>isSealed用来判断对象是否是密封</li>\n<li>isExtensible也可以判断</li>\n</ul>\n<blockquote>\n<p>Object.preventExtensions(target)/Object.isExtensible(target)</p>\n</blockquote>\n<ul>\n<li>让对象无法扩展</li>\n<li>表现形式为，无法新增属性；但是可以对已存在属性进行修改和删除</li>\n<li>isExtensible判断对象是否可扩展<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> sx = &#123;<br>    name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span><br>&#125;<br><span class=\"hljs-built_in\">Object</span>.preventExtensions(sx)<br>sx.name = <span class=\"hljs-string\">&#x27;update&#x27;</span><br>sx.sex = <span class=\"hljs-string\">&#x27;男&#x27;</span><br><span class=\"hljs-comment\">// &#123;name: &quot;update&quot;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(sx);<br><span class=\"hljs-keyword\">delete</span> sx.name<br><span class=\"hljs-comment\">// &#123;&#125;</span><br><span class=\"hljs-built_in\">console</span>.log(sx);<br></code></pre></td></tr></table></figure>\n<h2 id=\"Object原型上的一些api\"><a href=\"#Object原型上的一些api\" class=\"headerlink\" title=\"Object原型上的一些api\"></a>Object原型上的一些api</h2></li>\n</ul>\n<blockquote>\n<p>isPrototypeOf</p>\n</blockquote>\n<ul>\n<li>判断一个对象是否存在于另一个对象的原型链上<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-keyword\">let</span> man = &#123;<br>    sex: <span class=\"hljs-string\">&#x27;男&#x27;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = <span class=\"hljs-built_in\">Object</span>.create(man)<br><span class=\"hljs-comment\">// true</span><br><span class=\"hljs-built_in\">console</span>.log(man.isPrototypeOf(sx))<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>hasOwnProperty</p>\n</blockquote>\n<ul>\n<li>判断对象自身是否含有某个属性<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> man = &#123;<br>    sex: <span class=\"hljs-string\">&#x27;男&#x27;</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> sx = <span class=\"hljs-built_in\">Object</span>.create(man, &#123;<br>    name: &#123;<br>        value: <span class=\"hljs-string\">&#x27;shuaxin&#x27;</span><br>    &#125;<br>&#125;)<br><span class=\"hljs-comment\">// false</span><br><span class=\"hljs-built_in\">console</span>.log(sx.hasOwnProperty(<span class=\"hljs-string\">&#x27;sex&#x27;</span>))<br><span class=\"hljs-comment\">// true</span><br><span class=\"hljs-built_in\">console</span>.log(sx.hasOwnProperty(<span class=\"hljs-string\">&#x27;name&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>propertyIsEnumerable</p>\n</blockquote>\n<ul>\n<li>判断该属性属性是否可枚举</li>\n<li>如果没有该属性，返回false</li>\n</ul>"},{"title":"2020总结","date":"2020-12-31T02:56:08.000Z","index_img":"https://img.shuaxindiary.cn/avatar.jpg","banner_img":"https://img.shuaxindiary.cn/avatar.jpg","comment":true,"_content":"\n> 封面图作者：[待秋日繁星满天\n](https://weibo.com/n/%E5%BE%85%E7%A7%8B%E6%97%A5%E7%B9%81%E6%98%9F%E6%BB%A1%E5%A4%A9)\n\n# 前言\n与其说是年终总结，不如说是下半年的总结。今年5月份，春招期间有写对春招期间面试的总结顺带的对上半年做了简单的回顾，最后也有写了对下半年的一些期望和补足的计划，转眼就已经到了2020的最后一天。半年里待过了2座城市，也在2个不同规模的团队经历了两段实习；也参加了秋招，遇到了喜欢的女孩子，杂七杂八一堆琐碎的事情，感觉也有不少东西可以梳理一下。\n\n# 正文\n\n## 对于上半年总结的不足计划\n春招的时候让自己发现了自己的基础十分不扎实，不仅仅是计算机基础，还有对前端技术栈的基础知识，完全停留在了语言、框架的api调用，没有去深究其中原因和底层的原理是怎样；\n春招之后到现在，一直有在提醒自己，当遇到问题的时候多去了解一下出现的原因，以及探索更多的解决方案并对比其中的优劣选择最适合当前场景的，这个过程中不仅可以复习到基础的知识，也会在对比各种方案时带来更多的思考和扩大知识面；除过这方面，也有看了几本js相关的书籍，来补足：《你不知道的javascript》、《JavaScript权威指南》这是在前端技术上的补足。\n计算机基础方面的知识，也越来越觉得十分重要，数据结构基本算法能力和网络操作系统、编译原理相关的知识的不扎实甚至是没有，让自己在很多方面都会很束手束脚，不过这是个长期的内功修炼，这段时间也算是意识到了问题的存在，之后也需要慢慢持续的投入来学习，这下半年主要是整理了相关需要自己接下来投入学习的方面，再就是阅读了网络相关的几本书籍，《图解HTTP》、《HTTP权威指南》。\n\n## 关于实习\n今年先后在杭州和北京2地的2家公司进行了实习，不同的团队规模，不同的工作方式，也是让自己很有收获。算上去年寒假的实习，一共是有三段实习经验。三家公司也是从小公司->小独角兽->大公司都有待过，三段给我的感受都大不相同。\n第一段实习，是接触前端不久后去的，第一次参与了线上项目的开发，虽然都是在写HTML&&CSS这些静态页面，但是大量的编写，让我对前端三件套中有了更熟悉的掌握，对于ui图的还原几乎可以独立完成。\n第二段实习去了一家安全公司，团队也是有了一定的规模，在这里算是正式的接触了如何去和其他成员协作开发，以及怎么更规范的开发；还有一点就是，快速学习能力吧，来这里之前完全没接触过react以及相关生态，一周的时间过了一遍文档和公司在使用的相关生态的文档，之后就顺利的融入了开发，虽然中间还有不熟练带来的一些坑，但是整体还是比较顺利。\n第三段实习是来了之前很向往的一个团队，在这里技术上主要还是在阅读之前项目代码的效率上提升了很多，以前没有这么大面积的读过别人的代码，来了这里要维护和迭代很多老项目，保证不影响之前逻辑基础上二次开发或者维护就需要很快速的过一遍之前的逻辑，然后开始思考怎么开发新需求；其次最大的收货应该是沟通上，之前都是leader告诉我应该开发什么，给定期限做完即可。来了这里，自己开始独立参与排期，讨论需求的可行性，给出具体排期时间，以及开发过程中实时的和QA、PD、后端进行沟通，这是之前实习所不曾有的经历。\n\n## 关于技术上\n今年主要集中在下半年，学习了TS+React+Vue3，也有尝试使用express写一些后端服务，也初步涉猎了一下服务器部署相关：Linux基本操作和Nginx。\n最近在写毕设，主要是用React做一个集图床客户端+md在线编辑器+todo的一个任务平台。下半年的话，想专注在Node上面，多了解和使用Node做一些有趣的尝试，初步想法是把之前gulp封装的cli，进行一下优化，让实用性提起来，然后使用node封装一下，做成类似Vue-cli那样。\n\n## 关于最近在做的\n因为一直在实习，导致时间只有晚上，有一段时间还在复习面试和学校考试的事，所以写自己代码的时间比较有限，但还是写了一部分，首先毕设的前端基本架构已经搭建完毕，然后自己写的在线MD编辑器，在用Vue3在写，也写了一部分；剩下的只能明年写了。然后有clone（自己写）了一下，之前google的一个前端工程师用grid布局来实现常见布局的一个demo站点，不过也是写了一部分，写完在放链接吧。\n\n# 最后\n最近冬天，疫情又开始反反复复，不知道是因为什么，随着年龄越来越大，反而更在乎健康情况，反正新的一年还是希望大家都平平安安，快快乐乐！\n","source":"_posts/随笔/2020总结.md","raw":"---\ntitle: 2020总结\ndate: 2020-12-31 10:56:08\nindex_img: https://img.shuaxindiary.cn/avatar.jpg\nbanner_img: https://img.shuaxindiary.cn/avatar.jpg\ncategory:\n  - 随笔\ntag:\n  - 总结\ncomment: true\n---\n\n> 封面图作者：[待秋日繁星满天\n](https://weibo.com/n/%E5%BE%85%E7%A7%8B%E6%97%A5%E7%B9%81%E6%98%9F%E6%BB%A1%E5%A4%A9)\n\n# 前言\n与其说是年终总结，不如说是下半年的总结。今年5月份，春招期间有写对春招期间面试的总结顺带的对上半年做了简单的回顾，最后也有写了对下半年的一些期望和补足的计划，转眼就已经到了2020的最后一天。半年里待过了2座城市，也在2个不同规模的团队经历了两段实习；也参加了秋招，遇到了喜欢的女孩子，杂七杂八一堆琐碎的事情，感觉也有不少东西可以梳理一下。\n\n# 正文\n\n## 对于上半年总结的不足计划\n春招的时候让自己发现了自己的基础十分不扎实，不仅仅是计算机基础，还有对前端技术栈的基础知识，完全停留在了语言、框架的api调用，没有去深究其中原因和底层的原理是怎样；\n春招之后到现在，一直有在提醒自己，当遇到问题的时候多去了解一下出现的原因，以及探索更多的解决方案并对比其中的优劣选择最适合当前场景的，这个过程中不仅可以复习到基础的知识，也会在对比各种方案时带来更多的思考和扩大知识面；除过这方面，也有看了几本js相关的书籍，来补足：《你不知道的javascript》、《JavaScript权威指南》这是在前端技术上的补足。\n计算机基础方面的知识，也越来越觉得十分重要，数据结构基本算法能力和网络操作系统、编译原理相关的知识的不扎实甚至是没有，让自己在很多方面都会很束手束脚，不过这是个长期的内功修炼，这段时间也算是意识到了问题的存在，之后也需要慢慢持续的投入来学习，这下半年主要是整理了相关需要自己接下来投入学习的方面，再就是阅读了网络相关的几本书籍，《图解HTTP》、《HTTP权威指南》。\n\n## 关于实习\n今年先后在杭州和北京2地的2家公司进行了实习，不同的团队规模，不同的工作方式，也是让自己很有收获。算上去年寒假的实习，一共是有三段实习经验。三家公司也是从小公司->小独角兽->大公司都有待过，三段给我的感受都大不相同。\n第一段实习，是接触前端不久后去的，第一次参与了线上项目的开发，虽然都是在写HTML&&CSS这些静态页面，但是大量的编写，让我对前端三件套中有了更熟悉的掌握，对于ui图的还原几乎可以独立完成。\n第二段实习去了一家安全公司，团队也是有了一定的规模，在这里算是正式的接触了如何去和其他成员协作开发，以及怎么更规范的开发；还有一点就是，快速学习能力吧，来这里之前完全没接触过react以及相关生态，一周的时间过了一遍文档和公司在使用的相关生态的文档，之后就顺利的融入了开发，虽然中间还有不熟练带来的一些坑，但是整体还是比较顺利。\n第三段实习是来了之前很向往的一个团队，在这里技术上主要还是在阅读之前项目代码的效率上提升了很多，以前没有这么大面积的读过别人的代码，来了这里要维护和迭代很多老项目，保证不影响之前逻辑基础上二次开发或者维护就需要很快速的过一遍之前的逻辑，然后开始思考怎么开发新需求；其次最大的收货应该是沟通上，之前都是leader告诉我应该开发什么，给定期限做完即可。来了这里，自己开始独立参与排期，讨论需求的可行性，给出具体排期时间，以及开发过程中实时的和QA、PD、后端进行沟通，这是之前实习所不曾有的经历。\n\n## 关于技术上\n今年主要集中在下半年，学习了TS+React+Vue3，也有尝试使用express写一些后端服务，也初步涉猎了一下服务器部署相关：Linux基本操作和Nginx。\n最近在写毕设，主要是用React做一个集图床客户端+md在线编辑器+todo的一个任务平台。下半年的话，想专注在Node上面，多了解和使用Node做一些有趣的尝试，初步想法是把之前gulp封装的cli，进行一下优化，让实用性提起来，然后使用node封装一下，做成类似Vue-cli那样。\n\n## 关于最近在做的\n因为一直在实习，导致时间只有晚上，有一段时间还在复习面试和学校考试的事，所以写自己代码的时间比较有限，但还是写了一部分，首先毕设的前端基本架构已经搭建完毕，然后自己写的在线MD编辑器，在用Vue3在写，也写了一部分；剩下的只能明年写了。然后有clone（自己写）了一下，之前google的一个前端工程师用grid布局来实现常见布局的一个demo站点，不过也是写了一部分，写完在放链接吧。\n\n# 最后\n最近冬天，疫情又开始反反复复，不知道是因为什么，随着年龄越来越大，反而更在乎健康情况，反正新的一年还是希望大家都平平安安，快快乐乐！\n","slug":"随笔/2020总结","published":1,"updated":"2021-12-31T12:01:59.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv39005bj7jf4lux5jsu","content":"<blockquote>\n<p>封面图作者：<a href=\"https://weibo.com/n/%E5%BE%85%E7%A7%8B%E6%97%A5%E7%B9%81%E6%98%9F%E6%BB%A1%E5%A4%A9\">待秋日繁星满天\n</a></p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>与其说是年终总结，不如说是下半年的总结。今年5月份，春招期间有写对春招期间面试的总结顺带的对上半年做了简单的回顾，最后也有写了对下半年的一些期望和补足的计划，转眼就已经到了2020的最后一天。半年里待过了2座城市，也在2个不同规模的团队经历了两段实习；也参加了秋招，遇到了喜欢的女孩子，杂七杂八一堆琐碎的事情，感觉也有不少东西可以梳理一下。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"对于上半年总结的不足计划\"><a href=\"#对于上半年总结的不足计划\" class=\"headerlink\" title=\"对于上半年总结的不足计划\"></a>对于上半年总结的不足计划</h2><p>春招的时候让自己发现了自己的基础十分不扎实，不仅仅是计算机基础，还有对前端技术栈的基础知识，完全停留在了语言、框架的api调用，没有去深究其中原因和底层的原理是怎样；<br>春招之后到现在，一直有在提醒自己，当遇到问题的时候多去了解一下出现的原因，以及探索更多的解决方案并对比其中的优劣选择最适合当前场景的，这个过程中不仅可以复习到基础的知识，也会在对比各种方案时带来更多的思考和扩大知识面；除过这方面，也有看了几本js相关的书籍，来补足：《你不知道的javascript》、《JavaScript权威指南》这是在前端技术上的补足。<br>计算机基础方面的知识，也越来越觉得十分重要，数据结构基本算法能力和网络操作系统、编译原理相关的知识的不扎实甚至是没有，让自己在很多方面都会很束手束脚，不过这是个长期的内功修炼，这段时间也算是意识到了问题的存在，之后也需要慢慢持续的投入来学习，这下半年主要是整理了相关需要自己接下来投入学习的方面，再就是阅读了网络相关的几本书籍，《图解HTTP》、《HTTP权威指南》。</p>\n<h2 id=\"关于实习\"><a href=\"#关于实习\" class=\"headerlink\" title=\"关于实习\"></a>关于实习</h2><p>今年先后在杭州和北京2地的2家公司进行了实习，不同的团队规模，不同的工作方式，也是让自己很有收获。算上去年寒假的实习，一共是有三段实习经验。三家公司也是从小公司-&gt;小独角兽-&gt;大公司都有待过，三段给我的感受都大不相同。<br>第一段实习，是接触前端不久后去的，第一次参与了线上项目的开发，虽然都是在写HTML&amp;&amp;CSS这些静态页面，但是大量的编写，让我对前端三件套中有了更熟悉的掌握，对于ui图的还原几乎可以独立完成。<br>第二段实习去了一家安全公司，团队也是有了一定的规模，在这里算是正式的接触了如何去和其他成员协作开发，以及怎么更规范的开发；还有一点就是，快速学习能力吧，来这里之前完全没接触过react以及相关生态，一周的时间过了一遍文档和公司在使用的相关生态的文档，之后就顺利的融入了开发，虽然中间还有不熟练带来的一些坑，但是整体还是比较顺利。<br>第三段实习是来了之前很向往的一个团队，在这里技术上主要还是在阅读之前项目代码的效率上提升了很多，以前没有这么大面积的读过别人的代码，来了这里要维护和迭代很多老项目，保证不影响之前逻辑基础上二次开发或者维护就需要很快速的过一遍之前的逻辑，然后开始思考怎么开发新需求；其次最大的收货应该是沟通上，之前都是leader告诉我应该开发什么，给定期限做完即可。来了这里，自己开始独立参与排期，讨论需求的可行性，给出具体排期时间，以及开发过程中实时的和QA、PD、后端进行沟通，这是之前实习所不曾有的经历。</p>\n<h2 id=\"关于技术上\"><a href=\"#关于技术上\" class=\"headerlink\" title=\"关于技术上\"></a>关于技术上</h2><p>今年主要集中在下半年，学习了TS+React+Vue3，也有尝试使用express写一些后端服务，也初步涉猎了一下服务器部署相关：Linux基本操作和Nginx。<br>最近在写毕设，主要是用React做一个集图床客户端+md在线编辑器+todo的一个任务平台。下半年的话，想专注在Node上面，多了解和使用Node做一些有趣的尝试，初步想法是把之前gulp封装的cli，进行一下优化，让实用性提起来，然后使用node封装一下，做成类似Vue-cli那样。</p>\n<h2 id=\"关于最近在做的\"><a href=\"#关于最近在做的\" class=\"headerlink\" title=\"关于最近在做的\"></a>关于最近在做的</h2><p>因为一直在实习，导致时间只有晚上，有一段时间还在复习面试和学校考试的事，所以写自己代码的时间比较有限，但还是写了一部分，首先毕设的前端基本架构已经搭建完毕，然后自己写的在线MD编辑器，在用Vue3在写，也写了一部分；剩下的只能明年写了。然后有clone（自己写）了一下，之前google的一个前端工程师用grid布局来实现常见布局的一个demo站点，不过也是写了一部分，写完在放链接吧。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>最近冬天，疫情又开始反反复复，不知道是因为什么，随着年龄越来越大，反而更在乎健康情况，反正新的一年还是希望大家都平平安安，快快乐乐！</p>\n","site":{"data":{}},"wordcount":1776,"excerpt":"","more":"<blockquote>\n<p>封面图作者：<a href=\"https://weibo.com/n/%E5%BE%85%E7%A7%8B%E6%97%A5%E7%B9%81%E6%98%9F%E6%BB%A1%E5%A4%A9\">待秋日繁星满天\n</a></p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>与其说是年终总结，不如说是下半年的总结。今年5月份，春招期间有写对春招期间面试的总结顺带的对上半年做了简单的回顾，最后也有写了对下半年的一些期望和补足的计划，转眼就已经到了2020的最后一天。半年里待过了2座城市，也在2个不同规模的团队经历了两段实习；也参加了秋招，遇到了喜欢的女孩子，杂七杂八一堆琐碎的事情，感觉也有不少东西可以梳理一下。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"对于上半年总结的不足计划\"><a href=\"#对于上半年总结的不足计划\" class=\"headerlink\" title=\"对于上半年总结的不足计划\"></a>对于上半年总结的不足计划</h2><p>春招的时候让自己发现了自己的基础十分不扎实，不仅仅是计算机基础，还有对前端技术栈的基础知识，完全停留在了语言、框架的api调用，没有去深究其中原因和底层的原理是怎样；<br>春招之后到现在，一直有在提醒自己，当遇到问题的时候多去了解一下出现的原因，以及探索更多的解决方案并对比其中的优劣选择最适合当前场景的，这个过程中不仅可以复习到基础的知识，也会在对比各种方案时带来更多的思考和扩大知识面；除过这方面，也有看了几本js相关的书籍，来补足：《你不知道的javascript》、《JavaScript权威指南》这是在前端技术上的补足。<br>计算机基础方面的知识，也越来越觉得十分重要，数据结构基本算法能力和网络操作系统、编译原理相关的知识的不扎实甚至是没有，让自己在很多方面都会很束手束脚，不过这是个长期的内功修炼，这段时间也算是意识到了问题的存在，之后也需要慢慢持续的投入来学习，这下半年主要是整理了相关需要自己接下来投入学习的方面，再就是阅读了网络相关的几本书籍，《图解HTTP》、《HTTP权威指南》。</p>\n<h2 id=\"关于实习\"><a href=\"#关于实习\" class=\"headerlink\" title=\"关于实习\"></a>关于实习</h2><p>今年先后在杭州和北京2地的2家公司进行了实习，不同的团队规模，不同的工作方式，也是让自己很有收获。算上去年寒假的实习，一共是有三段实习经验。三家公司也是从小公司-&gt;小独角兽-&gt;大公司都有待过，三段给我的感受都大不相同。<br>第一段实习，是接触前端不久后去的，第一次参与了线上项目的开发，虽然都是在写HTML&amp;&amp;CSS这些静态页面，但是大量的编写，让我对前端三件套中有了更熟悉的掌握，对于ui图的还原几乎可以独立完成。<br>第二段实习去了一家安全公司，团队也是有了一定的规模，在这里算是正式的接触了如何去和其他成员协作开发，以及怎么更规范的开发；还有一点就是，快速学习能力吧，来这里之前完全没接触过react以及相关生态，一周的时间过了一遍文档和公司在使用的相关生态的文档，之后就顺利的融入了开发，虽然中间还有不熟练带来的一些坑，但是整体还是比较顺利。<br>第三段实习是来了之前很向往的一个团队，在这里技术上主要还是在阅读之前项目代码的效率上提升了很多，以前没有这么大面积的读过别人的代码，来了这里要维护和迭代很多老项目，保证不影响之前逻辑基础上二次开发或者维护就需要很快速的过一遍之前的逻辑，然后开始思考怎么开发新需求；其次最大的收货应该是沟通上，之前都是leader告诉我应该开发什么，给定期限做完即可。来了这里，自己开始独立参与排期，讨论需求的可行性，给出具体排期时间，以及开发过程中实时的和QA、PD、后端进行沟通，这是之前实习所不曾有的经历。</p>\n<h2 id=\"关于技术上\"><a href=\"#关于技术上\" class=\"headerlink\" title=\"关于技术上\"></a>关于技术上</h2><p>今年主要集中在下半年，学习了TS+React+Vue3，也有尝试使用express写一些后端服务，也初步涉猎了一下服务器部署相关：Linux基本操作和Nginx。<br>最近在写毕设，主要是用React做一个集图床客户端+md在线编辑器+todo的一个任务平台。下半年的话，想专注在Node上面，多了解和使用Node做一些有趣的尝试，初步想法是把之前gulp封装的cli，进行一下优化，让实用性提起来，然后使用node封装一下，做成类似Vue-cli那样。</p>\n<h2 id=\"关于最近在做的\"><a href=\"#关于最近在做的\" class=\"headerlink\" title=\"关于最近在做的\"></a>关于最近在做的</h2><p>因为一直在实习，导致时间只有晚上，有一段时间还在复习面试和学校考试的事，所以写自己代码的时间比较有限，但还是写了一部分，首先毕设的前端基本架构已经搭建完毕，然后自己写的在线MD编辑器，在用Vue3在写，也写了一部分；剩下的只能明年写了。然后有clone（自己写）了一下，之前google的一个前端工程师用grid布局来实现常见布局的一个demo站点，不过也是写了一部分，写完在放链接吧。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>最近冬天，疫情又开始反反复复，不知道是因为什么，随着年龄越来越大，反而更在乎健康情况，反正新的一年还是希望大家都平平安安，快快乐乐！</p>\n"},{"title":"关于面试","abbrlink":54586,"date":"2019-10-17T11:27:32.000Z","_content":"\n# 关于面试\n因为之前有找过实习，以及当时准备面试时一些大佬有给过一些建议，最近恰好一个朋友又在准备校招面试，于是聊了各自关于面试的一些感受，所以想总结一些自己对于面试的想法。\n<!-- more -->\n## 关于面试的心态准备\n>第一次面试\n- 关于面试心态上的准备，很多第一次面试的同学，都会去搜一些面试指南一类的东西(我也是)，这主要是因为没有经验，不清楚面试流程，但很多所谓的面试指南(不是指全部，有的还是很有针对性，主要看岗位)大多都是在说一些不痛不痒的东西;其实只要穿着得体(有的岗位会在面试通知告诉你着装要求)，面试过程中回答面试官的问题时，咬字清楚，准确的表达自己的意思即可;真正要核心准备的是与你应聘岗位对应的***职业技能！***\n\n>温馨提示1\n- 这里要提一点的是，关于一些指南的所谓的说话模板，假造实习经验的一些建议，真心劝大家，尤其是在校的同学们，切勿模仿，你要知道面试你的前辈，可是比你早进入社会很多年的，他会意识不到你的小心思吗？切记，一定要诚实，踏实的去准备。\n\n<!-- >还有一点是对于刚进入大学的学弟学妹们的一点建议，摆脱了高三繁重的学习生活后，体验大学生活固然是一方面，但最好在大二大三就确定下自己以后的从业方向，提早的去了解这个职业的相关知识，以及需要具备的职业技能，并提早的去准备；因为有很多同学(牛逼的大学不知道，我身边的一些普通本科大多是这样)，都在进入大学后抱着锻炼自己能力的想去参加更多的社团，学生会；但很多时候，这些事情只会浪费你很多的精力(是我太菜了，只能专注做一件事)； -->\n>温馨提示2\n- 很多同学在对于找工作的认识上有一些误区(我身边有很多)，觉得自己在学校有过一些社团、学生会的经验，就足以胜任一些岗位，忽略了相关技能准备，认为这些东西都是去了公司，公司会培训，教给你的，一定要更正这个想法，学校的社团经验有了当然更好，但这不是重点，你要知道公司招你的第一目的还是为公司带来利益，至于对于你能力的一些培训，也是在你具备投入公司正常工作的基础上，为了让你更好融入工作环境，和熟悉公司业务的一些培训，而不是从0开始培养你(当然很多公司是会有一些学习培训，等等的)。\n## 关于面试的技能准备\n>职业技能的准备一定是面试准备的重点(因岗位而议，但比重一定是最大的)，这方面是决定了你面试成败的很大的一部分，试想一个只会加法和四则运算都会的同学你觉得老师喜欢哪个呢(原谅我只能举出这样过于简单的例子)；你的技能准备充分，带给面试官的印象一般就比较好，因为不谈别的至少面试官会觉得你具备一定的工作能力，考虑时肯定也会优先考虑你。\n\n>该如何准备呢?\n- 首先肯定要很早就确定自己以后的就业方向(这也是一个很大的话题，同学们自己想咯)，然后利用搜索引擎去搜集相关的信息，比如做什么的，怎么做，职业路线是怎么样等等，最后就是去一些招聘网站看看，一般公司会对这个职位有哪些要求，这样一圈下来，你至少对这个职位有了一定的了解，也有了一定的头绪去准备，接下来的就是靠时间去不停的学习，提升自己的能力。\n<!-- ## 关于大厂的面试造火箭 -->\n\n## 关于面试官\n关于这一点呢，我就从我面试时对面试官的感觉，和准备过程一些做过面试官的大佬给我的建议来谈谈我的看法(毕竟我这种菜鸟，自己还在学习中，哪有资格面试别人，hhh)。\n其实要展示给面试官的，就是我有这个职位应该具备的能力，而且我还很喜欢这个岗位，我也有积极向上学习的这个心态；但是面试就短短的半个多小时到一个小时左右，怎么就通过这么短的时间来展示自己有这个能力呢！\n我自己想法就是，首先肯定是扎实自己知识储备，面试官的问题怎么也要回答的相差不大，另外就是在一些开放性问题上，能提出一些自己的想法；关于这一点就真的需要自己平时一直在了解，关注这些才能做到的。其次技术岗位(画画啊设计啊程序员啊)，平时是否有自己的项目，数量和技术深度上的一些实践和探索，以上2点都是充分向面试官证明自己真的有学习能力以及积极学习的心态的机会。\n\n## 关于面试结果\n其实我觉得面试这东西还是挺讲究运气(运气也是建立在一定的实力上的)，和相亲真的很像(虽然我没相过，但是能想象),有时候其实什么都对了，要求也符合，问的问题也回答上了，但是还是挂了，那真的就是没缘分，两个人感觉对不上，毕竟以后要一起工作的，人呢，就是有时候有这种感觉，也不知道怎么解释，暂时就称这个叫所谓的气场不和吧。所以同学也别在意，如果是自己的问题，觉得不足，就加以改正，如果觉得也没什么，就继续找和自己有缘的公司咯。\n\n# 总结\n以上所有的观点和想法，都是个人所见。每个人对于事情都有自己的想法，和观点，在第一次面对一些事情的时候，都会很慌企图有经验的人能告诉自己该怎么做，但别人的话无非也只是一种参考，你自己心里其实有自己的想法，只是你不确定，所以最重要的还是自己去亲身经历感受一遍，那才是属于你自己的东西，别人的建议有用就吸收，无用就自动排除掉即可，最后希望各位同学都能找到自己心仪的工作呀！\n\n","source":"_posts/随笔/关于面试.md","raw":"---\ntitle: 关于面试\ncategory:\n  - 随笔\ntag:\n  - 随笔\nabbrlink: 54586\ndate: 2019-10-17 19:27:32\n---\n\n# 关于面试\n因为之前有找过实习，以及当时准备面试时一些大佬有给过一些建议，最近恰好一个朋友又在准备校招面试，于是聊了各自关于面试的一些感受，所以想总结一些自己对于面试的想法。\n<!-- more -->\n## 关于面试的心态准备\n>第一次面试\n- 关于面试心态上的准备，很多第一次面试的同学，都会去搜一些面试指南一类的东西(我也是)，这主要是因为没有经验，不清楚面试流程，但很多所谓的面试指南(不是指全部，有的还是很有针对性，主要看岗位)大多都是在说一些不痛不痒的东西;其实只要穿着得体(有的岗位会在面试通知告诉你着装要求)，面试过程中回答面试官的问题时，咬字清楚，准确的表达自己的意思即可;真正要核心准备的是与你应聘岗位对应的***职业技能！***\n\n>温馨提示1\n- 这里要提一点的是，关于一些指南的所谓的说话模板，假造实习经验的一些建议，真心劝大家，尤其是在校的同学们，切勿模仿，你要知道面试你的前辈，可是比你早进入社会很多年的，他会意识不到你的小心思吗？切记，一定要诚实，踏实的去准备。\n\n<!-- >还有一点是对于刚进入大学的学弟学妹们的一点建议，摆脱了高三繁重的学习生活后，体验大学生活固然是一方面，但最好在大二大三就确定下自己以后的从业方向，提早的去了解这个职业的相关知识，以及需要具备的职业技能，并提早的去准备；因为有很多同学(牛逼的大学不知道，我身边的一些普通本科大多是这样)，都在进入大学后抱着锻炼自己能力的想去参加更多的社团，学生会；但很多时候，这些事情只会浪费你很多的精力(是我太菜了，只能专注做一件事)； -->\n>温馨提示2\n- 很多同学在对于找工作的认识上有一些误区(我身边有很多)，觉得自己在学校有过一些社团、学生会的经验，就足以胜任一些岗位，忽略了相关技能准备，认为这些东西都是去了公司，公司会培训，教给你的，一定要更正这个想法，学校的社团经验有了当然更好，但这不是重点，你要知道公司招你的第一目的还是为公司带来利益，至于对于你能力的一些培训，也是在你具备投入公司正常工作的基础上，为了让你更好融入工作环境，和熟悉公司业务的一些培训，而不是从0开始培养你(当然很多公司是会有一些学习培训，等等的)。\n## 关于面试的技能准备\n>职业技能的准备一定是面试准备的重点(因岗位而议，但比重一定是最大的)，这方面是决定了你面试成败的很大的一部分，试想一个只会加法和四则运算都会的同学你觉得老师喜欢哪个呢(原谅我只能举出这样过于简单的例子)；你的技能准备充分，带给面试官的印象一般就比较好，因为不谈别的至少面试官会觉得你具备一定的工作能力，考虑时肯定也会优先考虑你。\n\n>该如何准备呢?\n- 首先肯定要很早就确定自己以后的就业方向(这也是一个很大的话题，同学们自己想咯)，然后利用搜索引擎去搜集相关的信息，比如做什么的，怎么做，职业路线是怎么样等等，最后就是去一些招聘网站看看，一般公司会对这个职位有哪些要求，这样一圈下来，你至少对这个职位有了一定的了解，也有了一定的头绪去准备，接下来的就是靠时间去不停的学习，提升自己的能力。\n<!-- ## 关于大厂的面试造火箭 -->\n\n## 关于面试官\n关于这一点呢，我就从我面试时对面试官的感觉，和准备过程一些做过面试官的大佬给我的建议来谈谈我的看法(毕竟我这种菜鸟，自己还在学习中，哪有资格面试别人，hhh)。\n其实要展示给面试官的，就是我有这个职位应该具备的能力，而且我还很喜欢这个岗位，我也有积极向上学习的这个心态；但是面试就短短的半个多小时到一个小时左右，怎么就通过这么短的时间来展示自己有这个能力呢！\n我自己想法就是，首先肯定是扎实自己知识储备，面试官的问题怎么也要回答的相差不大，另外就是在一些开放性问题上，能提出一些自己的想法；关于这一点就真的需要自己平时一直在了解，关注这些才能做到的。其次技术岗位(画画啊设计啊程序员啊)，平时是否有自己的项目，数量和技术深度上的一些实践和探索，以上2点都是充分向面试官证明自己真的有学习能力以及积极学习的心态的机会。\n\n## 关于面试结果\n其实我觉得面试这东西还是挺讲究运气(运气也是建立在一定的实力上的)，和相亲真的很像(虽然我没相过，但是能想象),有时候其实什么都对了，要求也符合，问的问题也回答上了，但是还是挂了，那真的就是没缘分，两个人感觉对不上，毕竟以后要一起工作的，人呢，就是有时候有这种感觉，也不知道怎么解释，暂时就称这个叫所谓的气场不和吧。所以同学也别在意，如果是自己的问题，觉得不足，就加以改正，如果觉得也没什么，就继续找和自己有缘的公司咯。\n\n# 总结\n以上所有的观点和想法，都是个人所见。每个人对于事情都有自己的想法，和观点，在第一次面对一些事情的时候，都会很慌企图有经验的人能告诉自己该怎么做，但别人的话无非也只是一种参考，你自己心里其实有自己的想法，只是你不确定，所以最重要的还是自己去亲身经历感受一遍，那才是属于你自己的东西，别人的建议有用就吸收，无用就自动排除掉即可，最后希望各位同学都能找到自己心仪的工作呀！\n\n","slug":"随笔/关于面试","published":1,"updated":"2021-12-31T12:01:59.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3a005cj7jf0vg8alff","content":"<h1 id=\"关于面试\"><a href=\"#关于面试\" class=\"headerlink\" title=\"关于面试\"></a>关于面试</h1><p>因为之前有找过实习，以及当时准备面试时一些大佬有给过一些建议，最近恰好一个朋友又在准备校招面试，于是聊了各自关于面试的一些感受，所以想总结一些自己对于面试的想法。</p>\n<a id=\"more\"></a>\n<h2 id=\"关于面试的心态准备\"><a href=\"#关于面试的心态准备\" class=\"headerlink\" title=\"关于面试的心态准备\"></a>关于面试的心态准备</h2><blockquote>\n<p>第一次面试</p>\n</blockquote>\n<ul>\n<li>关于面试心态上的准备，很多第一次面试的同学，都会去搜一些面试指南一类的东西(我也是)，这主要是因为没有经验，不清楚面试流程，但很多所谓的面试指南(不是指全部，有的还是很有针对性，主要看岗位)大多都是在说一些不痛不痒的东西;其实只要穿着得体(有的岗位会在面试通知告诉你着装要求)，面试过程中回答面试官的问题时，咬字清楚，准确的表达自己的意思即可;真正要核心准备的是与你应聘岗位对应的**<em>职业技能！**</em></li>\n</ul>\n<blockquote>\n<p>温馨提示1</p>\n</blockquote>\n<ul>\n<li>这里要提一点的是，关于一些指南的所谓的说话模板，假造实习经验的一些建议，真心劝大家，尤其是在校的同学们，切勿模仿，你要知道面试你的前辈，可是比你早进入社会很多年的，他会意识不到你的小心思吗？切记，一定要诚实，踏实的去准备。</li>\n</ul>\n<!-- >还有一点是对于刚进入大学的学弟学妹们的一点建议，摆脱了高三繁重的学习生活后，体验大学生活固然是一方面，但最好在大二大三就确定下自己以后的从业方向，提早的去了解这个职业的相关知识，以及需要具备的职业技能，并提早的去准备；因为有很多同学(牛逼的大学不知道，我身边的一些普通本科大多是这样)，都在进入大学后抱着锻炼自己能力的想去参加更多的社团，学生会；但很多时候，这些事情只会浪费你很多的精力(是我太菜了，只能专注做一件事)； -->\n<blockquote>\n<p>温馨提示2</p>\n</blockquote>\n<ul>\n<li>很多同学在对于找工作的认识上有一些误区(我身边有很多)，觉得自己在学校有过一些社团、学生会的经验，就足以胜任一些岗位，忽略了相关技能准备，认为这些东西都是去了公司，公司会培训，教给你的，一定要更正这个想法，学校的社团经验有了当然更好，但这不是重点，你要知道公司招你的第一目的还是为公司带来利益，至于对于你能力的一些培训，也是在你具备投入公司正常工作的基础上，为了让你更好融入工作环境，和熟悉公司业务的一些培训，而不是从0开始培养你(当然很多公司是会有一些学习培训，等等的)。<h2 id=\"关于面试的技能准备\"><a href=\"#关于面试的技能准备\" class=\"headerlink\" title=\"关于面试的技能准备\"></a>关于面试的技能准备</h2><blockquote>\n<p>职业技能的准备一定是面试准备的重点(因岗位而议，但比重一定是最大的)，这方面是决定了你面试成败的很大的一部分，试想一个只会加法和四则运算都会的同学你觉得老师喜欢哪个呢(原谅我只能举出这样过于简单的例子)；你的技能准备充分，带给面试官的印象一般就比较好，因为不谈别的至少面试官会觉得你具备一定的工作能力，考虑时肯定也会优先考虑你。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>该如何准备呢?</p>\n</blockquote>\n<ul>\n<li>首先肯定要很早就确定自己以后的就业方向(这也是一个很大的话题，同学们自己想咯)，然后利用搜索引擎去搜集相关的信息，比如做什么的，怎么做，职业路线是怎么样等等，最后就是去一些招聘网站看看，一般公司会对这个职位有哪些要求，这样一圈下来，你至少对这个职位有了一定的了解，也有了一定的头绪去准备，接下来的就是靠时间去不停的学习，提升自己的能力。<!-- ## 关于大厂的面试造火箭 -->\n\n</li>\n</ul>\n<h2 id=\"关于面试官\"><a href=\"#关于面试官\" class=\"headerlink\" title=\"关于面试官\"></a>关于面试官</h2><p>关于这一点呢，我就从我面试时对面试官的感觉，和准备过程一些做过面试官的大佬给我的建议来谈谈我的看法(毕竟我这种菜鸟，自己还在学习中，哪有资格面试别人，hhh)。<br>其实要展示给面试官的，就是我有这个职位应该具备的能力，而且我还很喜欢这个岗位，我也有积极向上学习的这个心态；但是面试就短短的半个多小时到一个小时左右，怎么就通过这么短的时间来展示自己有这个能力呢！<br>我自己想法就是，首先肯定是扎实自己知识储备，面试官的问题怎么也要回答的相差不大，另外就是在一些开放性问题上，能提出一些自己的想法；关于这一点就真的需要自己平时一直在了解，关注这些才能做到的。其次技术岗位(画画啊设计啊程序员啊)，平时是否有自己的项目，数量和技术深度上的一些实践和探索，以上2点都是充分向面试官证明自己真的有学习能力以及积极学习的心态的机会。</p>\n<h2 id=\"关于面试结果\"><a href=\"#关于面试结果\" class=\"headerlink\" title=\"关于面试结果\"></a>关于面试结果</h2><p>其实我觉得面试这东西还是挺讲究运气(运气也是建立在一定的实力上的)，和相亲真的很像(虽然我没相过，但是能想象),有时候其实什么都对了，要求也符合，问的问题也回答上了，但是还是挂了，那真的就是没缘分，两个人感觉对不上，毕竟以后要一起工作的，人呢，就是有时候有这种感觉，也不知道怎么解释，暂时就称这个叫所谓的气场不和吧。所以同学也别在意，如果是自己的问题，觉得不足，就加以改正，如果觉得也没什么，就继续找和自己有缘的公司咯。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以上所有的观点和想法，都是个人所见。每个人对于事情都有自己的想法，和观点，在第一次面对一些事情的时候，都会很慌企图有经验的人能告诉自己该怎么做，但别人的话无非也只是一种参考，你自己心里其实有自己的想法，只是你不确定，所以最重要的还是自己去亲身经历感受一遍，那才是属于你自己的东西，别人的建议有用就吸收，无用就自动排除掉即可，最后希望各位同学都能找到自己心仪的工作呀！</p>\n","site":{"data":{}},"wordcount":1766,"excerpt":"<h1 id=\"关于面试\"><a href=\"#关于面试\" class=\"headerlink\" title=\"关于面试\"></a>关于面试</h1><p>因为之前有找过实习，以及当时准备面试时一些大佬有给过一些建议，最近恰好一个朋友又在准备校招面试，于是聊了各自关于面试的一些感受，所以想总结一些自己对于面试的想法。</p>","more":"<h2 id=\"关于面试的心态准备\"><a href=\"#关于面试的心态准备\" class=\"headerlink\" title=\"关于面试的心态准备\"></a>关于面试的心态准备</h2><blockquote>\n<p>第一次面试</p>\n</blockquote>\n<ul>\n<li>关于面试心态上的准备，很多第一次面试的同学，都会去搜一些面试指南一类的东西(我也是)，这主要是因为没有经验，不清楚面试流程，但很多所谓的面试指南(不是指全部，有的还是很有针对性，主要看岗位)大多都是在说一些不痛不痒的东西;其实只要穿着得体(有的岗位会在面试通知告诉你着装要求)，面试过程中回答面试官的问题时，咬字清楚，准确的表达自己的意思即可;真正要核心准备的是与你应聘岗位对应的**<em>职业技能！**</em></li>\n</ul>\n<blockquote>\n<p>温馨提示1</p>\n</blockquote>\n<ul>\n<li>这里要提一点的是，关于一些指南的所谓的说话模板，假造实习经验的一些建议，真心劝大家，尤其是在校的同学们，切勿模仿，你要知道面试你的前辈，可是比你早进入社会很多年的，他会意识不到你的小心思吗？切记，一定要诚实，踏实的去准备。</li>\n</ul>\n<!-- >还有一点是对于刚进入大学的学弟学妹们的一点建议，摆脱了高三繁重的学习生活后，体验大学生活固然是一方面，但最好在大二大三就确定下自己以后的从业方向，提早的去了解这个职业的相关知识，以及需要具备的职业技能，并提早的去准备；因为有很多同学(牛逼的大学不知道，我身边的一些普通本科大多是这样)，都在进入大学后抱着锻炼自己能力的想去参加更多的社团，学生会；但很多时候，这些事情只会浪费你很多的精力(是我太菜了，只能专注做一件事)； -->\n<blockquote>\n<p>温馨提示2</p>\n</blockquote>\n<ul>\n<li>很多同学在对于找工作的认识上有一些误区(我身边有很多)，觉得自己在学校有过一些社团、学生会的经验，就足以胜任一些岗位，忽略了相关技能准备，认为这些东西都是去了公司，公司会培训，教给你的，一定要更正这个想法，学校的社团经验有了当然更好，但这不是重点，你要知道公司招你的第一目的还是为公司带来利益，至于对于你能力的一些培训，也是在你具备投入公司正常工作的基础上，为了让你更好融入工作环境，和熟悉公司业务的一些培训，而不是从0开始培养你(当然很多公司是会有一些学习培训，等等的)。<h2 id=\"关于面试的技能准备\"><a href=\"#关于面试的技能准备\" class=\"headerlink\" title=\"关于面试的技能准备\"></a>关于面试的技能准备</h2><blockquote>\n<p>职业技能的准备一定是面试准备的重点(因岗位而议，但比重一定是最大的)，这方面是决定了你面试成败的很大的一部分，试想一个只会加法和四则运算都会的同学你觉得老师喜欢哪个呢(原谅我只能举出这样过于简单的例子)；你的技能准备充分，带给面试官的印象一般就比较好，因为不谈别的至少面试官会觉得你具备一定的工作能力，考虑时肯定也会优先考虑你。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>该如何准备呢?</p>\n</blockquote>\n<ul>\n<li>首先肯定要很早就确定自己以后的就业方向(这也是一个很大的话题，同学们自己想咯)，然后利用搜索引擎去搜集相关的信息，比如做什么的，怎么做，职业路线是怎么样等等，最后就是去一些招聘网站看看，一般公司会对这个职位有哪些要求，这样一圈下来，你至少对这个职位有了一定的了解，也有了一定的头绪去准备，接下来的就是靠时间去不停的学习，提升自己的能力。<!-- ## 关于大厂的面试造火箭 -->\n\n</li>\n</ul>\n<h2 id=\"关于面试官\"><a href=\"#关于面试官\" class=\"headerlink\" title=\"关于面试官\"></a>关于面试官</h2><p>关于这一点呢，我就从我面试时对面试官的感觉，和准备过程一些做过面试官的大佬给我的建议来谈谈我的看法(毕竟我这种菜鸟，自己还在学习中，哪有资格面试别人，hhh)。<br>其实要展示给面试官的，就是我有这个职位应该具备的能力，而且我还很喜欢这个岗位，我也有积极向上学习的这个心态；但是面试就短短的半个多小时到一个小时左右，怎么就通过这么短的时间来展示自己有这个能力呢！<br>我自己想法就是，首先肯定是扎实自己知识储备，面试官的问题怎么也要回答的相差不大，另外就是在一些开放性问题上，能提出一些自己的想法；关于这一点就真的需要自己平时一直在了解，关注这些才能做到的。其次技术岗位(画画啊设计啊程序员啊)，平时是否有自己的项目，数量和技术深度上的一些实践和探索，以上2点都是充分向面试官证明自己真的有学习能力以及积极学习的心态的机会。</p>\n<h2 id=\"关于面试结果\"><a href=\"#关于面试结果\" class=\"headerlink\" title=\"关于面试结果\"></a>关于面试结果</h2><p>其实我觉得面试这东西还是挺讲究运气(运气也是建立在一定的实力上的)，和相亲真的很像(虽然我没相过，但是能想象),有时候其实什么都对了，要求也符合，问的问题也回答上了，但是还是挂了，那真的就是没缘分，两个人感觉对不上，毕竟以后要一起工作的，人呢，就是有时候有这种感觉，也不知道怎么解释，暂时就称这个叫所谓的气场不和吧。所以同学也别在意，如果是自己的问题，觉得不足，就加以改正，如果觉得也没什么，就继续找和自己有缘的公司咯。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以上所有的观点和想法，都是个人所见。每个人对于事情都有自己的想法，和观点，在第一次面对一些事情的时候，都会很慌企图有经验的人能告诉自己该怎么做，但别人的话无非也只是一种参考，你自己心里其实有自己的想法，只是你不确定，所以最重要的还是自己去亲身经历感受一遍，那才是属于你自己的东西，别人的建议有用就吸收，无用就自动排除掉即可，最后希望各位同学都能找到自己心仪的工作呀！</p>"},{"title":"关于毕业生图像采集","abbrlink":42696,"date":"2020-10-13T10:02:06.000Z","_content":"\n# 开头\n- 毕业生图像采集：毕业要用在毕业证+学位证+学信网的照片的拍摄工作\n- 拍摄时间：一般在大四，学校会组织集体参加拍摄\n- 重要性：这东西会影响拿证时间，所以请重视\n- 记录一下没有参加集体拍摄的，个人怎么补拍\n<!-- more -->\n\n\n# 正文\n补拍方式有两种：**网上上传** 和 **线下拍摄**\n\n**网上上传**\n- 登陆 [大学生图像采集网](http://www.xinhuacu.com/#/login)，注册登录上传符合要求的照片\n- 照片要求再上传的时候会有说明\n- 通过审核后，会帮你传到学信网，然后将上传的照片洗好连同电子存档（一个u盘里）一起发给你或者你填写的地址\n- 缴费60元\n\n**线下拍摄**\n- 在[大学生图像采集网-采集中心](http://www.xinhuacu.com/#/home/collectionCenter)查找你所在地的新华社联系方式和地点\n- 按照要求时间去拍摄即可，因为是蓝底照片建议穿深色系衣服\n- 需要携带证件：身份证+学生证+你学校的代号（网上有类似软件，采集中心也有，可以查询）\n- 缴费60元（有的会有后期ps等服务会不止60，根据需要考虑）\n- 有的地方支持现场即拍即取，有的不可以，登记的时候会有说明\n\n# 额外说明\n- 那个采集中心没有北京的地点，网上也是说哪里的都有，这里因为我在北京拍的，额外说明\n- 地址：宣武门H口右边-环球财经中心一楼-中国图片社\n- 地图可以搜：中国图片社全国高校毕业生像信息采集中心，那栋楼长下面这个样子\n- ![](http://img.shuaxindiary.cn/IMG_4496.JPG)\n\n# 结束\n希望大家都可以顺利毕业（包括我自己）\n\n\n","source":"_posts/随笔/关于毕业生图像采集.md","raw":"---\ntitle: 关于毕业生图像采集\ncategory:\n  - 随笔\ntag:\n  - 随笔\nabbrlink: 42696\ndate: 2020-10-13 18:02:06\n---\n\n# 开头\n- 毕业生图像采集：毕业要用在毕业证+学位证+学信网的照片的拍摄工作\n- 拍摄时间：一般在大四，学校会组织集体参加拍摄\n- 重要性：这东西会影响拿证时间，所以请重视\n- 记录一下没有参加集体拍摄的，个人怎么补拍\n<!-- more -->\n\n\n# 正文\n补拍方式有两种：**网上上传** 和 **线下拍摄**\n\n**网上上传**\n- 登陆 [大学生图像采集网](http://www.xinhuacu.com/#/login)，注册登录上传符合要求的照片\n- 照片要求再上传的时候会有说明\n- 通过审核后，会帮你传到学信网，然后将上传的照片洗好连同电子存档（一个u盘里）一起发给你或者你填写的地址\n- 缴费60元\n\n**线下拍摄**\n- 在[大学生图像采集网-采集中心](http://www.xinhuacu.com/#/home/collectionCenter)查找你所在地的新华社联系方式和地点\n- 按照要求时间去拍摄即可，因为是蓝底照片建议穿深色系衣服\n- 需要携带证件：身份证+学生证+你学校的代号（网上有类似软件，采集中心也有，可以查询）\n- 缴费60元（有的会有后期ps等服务会不止60，根据需要考虑）\n- 有的地方支持现场即拍即取，有的不可以，登记的时候会有说明\n\n# 额外说明\n- 那个采集中心没有北京的地点，网上也是说哪里的都有，这里因为我在北京拍的，额外说明\n- 地址：宣武门H口右边-环球财经中心一楼-中国图片社\n- 地图可以搜：中国图片社全国高校毕业生像信息采集中心，那栋楼长下面这个样子\n- ![](http://img.shuaxindiary.cn/IMG_4496.JPG)\n\n# 结束\n希望大家都可以顺利毕业（包括我自己）\n\n\n","slug":"随笔/关于毕业生图像采集","published":1,"updated":"2021-12-31T12:01:59.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3a005ej7jf804470mh","content":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><ul>\n<li>毕业生图像采集：毕业要用在毕业证+学位证+学信网的照片的拍摄工作</li>\n<li>拍摄时间：一般在大四，学校会组织集体参加拍摄</li>\n<li>重要性：这东西会影响拿证时间，所以请重视</li>\n<li>记录一下没有参加集体拍摄的，个人怎么补拍<a id=\"more\"></a>\n\n\n</li>\n</ul>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>补拍方式有两种：<strong>网上上传</strong> 和 <strong>线下拍摄</strong></p>\n<p><strong>网上上传</strong></p>\n<ul>\n<li>登陆 <a href=\"http://www.xinhuacu.com/#/login\">大学生图像采集网</a>，注册登录上传符合要求的照片</li>\n<li>照片要求再上传的时候会有说明</li>\n<li>通过审核后，会帮你传到学信网，然后将上传的照片洗好连同电子存档（一个u盘里）一起发给你或者你填写的地址</li>\n<li>缴费60元</li>\n</ul>\n<p><strong>线下拍摄</strong></p>\n<ul>\n<li>在<a href=\"http://www.xinhuacu.com/#/home/collectionCenter\">大学生图像采集网-采集中心</a>查找你所在地的新华社联系方式和地点</li>\n<li>按照要求时间去拍摄即可，因为是蓝底照片建议穿深色系衣服</li>\n<li>需要携带证件：身份证+学生证+你学校的代号（网上有类似软件，采集中心也有，可以查询）</li>\n<li>缴费60元（有的会有后期ps等服务会不止60，根据需要考虑）</li>\n<li>有的地方支持现场即拍即取，有的不可以，登记的时候会有说明</li>\n</ul>\n<h1 id=\"额外说明\"><a href=\"#额外说明\" class=\"headerlink\" title=\"额外说明\"></a>额外说明</h1><ul>\n<li>那个采集中心没有北京的地点，网上也是说哪里的都有，这里因为我在北京拍的，额外说明</li>\n<li>地址：宣武门H口右边-环球财经中心一楼-中国图片社</li>\n<li>地图可以搜：中国图片社全国高校毕业生像信息采集中心，那栋楼长下面这个样子</li>\n<li><img src=\"http://img.shuaxindiary.cn/IMG_4496.JPG\"></li>\n</ul>\n<h1 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h1><p>希望大家都可以顺利毕业（包括我自己）</p>\n","site":{"data":{}},"wordcount":500,"excerpt":"<h1 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h1><ul>\n<li>毕业生图像采集：毕业要用在毕业证+学位证+学信网的照片的拍摄工作</li>\n<li>拍摄时间：一般在大四，学校会组织集体参加拍摄</li>\n<li>重要性：这东西会影响拿证时间，所以请重视</li>\n<li>记录一下没有参加集体拍摄的，个人怎么补拍","more":"</li>\n</ul>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>补拍方式有两种：<strong>网上上传</strong> 和 <strong>线下拍摄</strong></p>\n<p><strong>网上上传</strong></p>\n<ul>\n<li>登陆 <a href=\"http://www.xinhuacu.com/#/login\">大学生图像采集网</a>，注册登录上传符合要求的照片</li>\n<li>照片要求再上传的时候会有说明</li>\n<li>通过审核后，会帮你传到学信网，然后将上传的照片洗好连同电子存档（一个u盘里）一起发给你或者你填写的地址</li>\n<li>缴费60元</li>\n</ul>\n<p><strong>线下拍摄</strong></p>\n<ul>\n<li>在<a href=\"http://www.xinhuacu.com/#/home/collectionCenter\">大学生图像采集网-采集中心</a>查找你所在地的新华社联系方式和地点</li>\n<li>按照要求时间去拍摄即可，因为是蓝底照片建议穿深色系衣服</li>\n<li>需要携带证件：身份证+学生证+你学校的代号（网上有类似软件，采集中心也有，可以查询）</li>\n<li>缴费60元（有的会有后期ps等服务会不止60，根据需要考虑）</li>\n<li>有的地方支持现场即拍即取，有的不可以，登记的时候会有说明</li>\n</ul>\n<h1 id=\"额外说明\"><a href=\"#额外说明\" class=\"headerlink\" title=\"额外说明\"></a>额外说明</h1><ul>\n<li>那个采集中心没有北京的地点，网上也是说哪里的都有，这里因为我在北京拍的，额外说明</li>\n<li>地址：宣武门H口右边-环球财经中心一楼-中国图片社</li>\n<li>地图可以搜：中国图片社全国高校毕业生像信息采集中心，那栋楼长下面这个样子</li>\n<li><img src=\"http://img.shuaxindiary.cn/IMG_4496.JPG\"></li>\n</ul>\n<h1 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h1><p>希望大家都可以顺利毕业（包括我自己）</p>"},{"title":"北京","date":"2021-01-02T02:24:55.000Z","index_img":"https://img.shuaxindiary.cn/2021.png","banner_img":"https://img.shuaxindiary.cn/2021.png","_content":"> 封面图作者：[AJIU_](https://www.zcool.com.cn/work/ZNDk4NTY4MTI=.html)\n\n# 前言\n新年的第一天，想从记录点不一样的开始，来帝都三个月了，零零散散和女票一起也打卡了不少北京的景点；人尽皆知的、不为人知的都有；所以想着以北京开始，之后也记录一些出去旅游的“游记”，也算是除过照片之外的另一种记录回忆的方式。\n\n\n# 正文\n\n### 天安门/故宫\n这两个可以安排在同一天，因为去故宫，选择从天安门那边进去就好，天安门附近有地铁站可直达；天安门不要门票，故宫门票微信公众号可预约；宫里有两个单独收费的馆：**珍宝馆**和**钟表阁**，还是很推荐的。\n![天安门](https://img.shuaxindiary.cn/IMG_4443.JPG)\n\n### 香山\n说实话，我觉得挺普通的山，可能我是西北的孩子对爬山已经见怪不怪了；香山的旺季是在秋季，枫叶会红，官图也很好看，但是时间要选好，不然一定会失望；去的话有地铁直达，虽然远一点但是也算方便，时间充裕在秋天来北京的话，可以适当考虑。下图是我那天去见到的唯一一棵比较红的好看的树。门票在微信公众号预约\n![](https://img.shuaxindiary.cn/IMG_4623.JPG)\n\n### 中央美术学院美术馆\n这种地方，比较见仁见智了，我是很享受各种色彩组合在一起对视觉的那种冲击，所以有时间且条件允许都会挑几个美术馆去看看。不过这回去虽然没看到什么水彩（很喜欢水彩和油画），但是看到了不少马赛克主题的作品，主要就是各种材质、形状的碎石组成一幅画，还是很壮观。门票现场买，也是通过猫眼这种扫码买。\n![](https://img.shuaxindiary.cn/IMG_4707.JPG)\n\n### 798\n提到艺术中心+各种相关展览，总是能看到798的名字；最巧的是，住的小区就在它对面；然后女票提议去看一个电影手稿的展览，就进去转了转；整体艺术氛围很浓厚，吧？（我也不懂）；但是有很多涂鸦非常壮观，很喜欢。下图是里面的一个玩具馆，酸了，叹息之墙；电影手稿展的哈利波特手稿；很喜欢的涂鸦墙。不收门票，里面单独展览会有单独收取门票的。\n![](https://img.shuaxindiary.cn/IMG_4562.JPG)\n![](https://img.shuaxindiary.cn/IMG_4837.JPG)\n![](https://img.shuaxindiary.cn/IMG_4842.JPG)\n\n### 博物馆\n北京有非常多的博物馆，很多都值得一去，门票都可以在各个馆的公众号进行预约。其实以前觉得博物馆非常无聊，或许是长大了不少，自己的知识积累比起以前稍微好了一点，很多东西不是很懂但也听过，再加上有个一起同行的人，可以一边聊天一边转，还是非常有意思的；最主要的还是帝都的博物馆都还是很有牌面hhh，以下顺序是按个人觉得非常值得一去的顺序做排名\n\n**首都博物馆**\n这个博物馆在木樨地地铁站附近，有5层，占地面积还是非常大的；一层是大厅，负一楼是北京一些建筑的简单模型和科普还有些周边店；二楼是一些历史文物和关于宗教的一些佛像展览；三楼没开；四楼是北京传统习俗文化展览。不让拍摄，就没拍图了。\n\n**中国人民革命军事博物馆**\n和首都博物馆就差一站，该馆在军事博物馆站出来就是，因为2个都很大，所以时间充裕，可以单独拿出一天来看看；如其名，主要就是围绕军事、中国革命时期的一些背景和题材的一些展览；军事迷可以来，有很多相关的展览。负一楼还有坦克、一些军用机车的展！\n![](https://img.shuaxindiary.cn/IMG_5187.JPG)\n![](https://img.shuaxindiary.cn/IMG_5186.JPG)\n![](https://img.shuaxindiary.cn/IMG_5191.JPG)\n![](https://img.shuaxindiary.cn/IMG_5192.JPG)\n\n\n**国家博物馆**\n这个博物馆在天安门对面，也非常大，很有牌面，一楼主要是一些雕塑+油画，还有一个展厅是中国从古到今的一些发展记录的展览；二三楼是一些瓷器相关的展览；负一层是一些石器时代的展览。\n![](https://img.shuaxindiary.cn/IMG_5086.JPG)\n![](https://img.shuaxindiary.cn/IMG_5194.JPG)\n\n**其他**\n剩下的就是一些比较小，但也很有意思的博物馆，因为实在太多就只发给一下去过的图和博物馆名称：中国钱币博物馆、中国邮政邮票博物馆、中国铁道博物馆\n![](https://img.shuaxindiary.cn/IMG_4963.JPG)\n![](https://img.shuaxindiary.cn/186E692204D762C0AAA29D4450C8793F.png)\n![](https://img.shuaxindiary.cn/IMG_4967.JPG)\n\n\n### 公园\n以圆明园和颐和园为首，北京也有很多这种户外的公园一类的地方；这类觉得更适合时间充足，去散散步这样；去过的：颐和园、圆明园、天坛、后海、北海、玉渊潭、景山。印象较深的，景山可以一览故宫全貌，冬天下过雪后上去看应该会很棒；北海公园的湖水很清，而且有很多喵喵出没；颐和园有很多不怕人的松鼠；后海有小吃街。这些公园都有一个特点，都有湖，有很多冬天结冰后都可以滑冰。\n![](https://img.shuaxindiary.cn/IMG_4910.JPG)\n![](https://img.shuaxindiary.cn/IMG_4969.JPG)\n![](https://img.shuaxindiary.cn/IMG_4971.JPG)\n![](https://img.shuaxindiary.cn/IMG_4970.JPG)\n![](https://img.shuaxindiary.cn/IMG_5084.JPG)\n\n\n### 中国美术馆\n主要以画、书法、印章、雕塑为主。\n![](https://img.shuaxindiary.cn/IMG_5020.JPG)\n![](https://img.shuaxindiary.cn/IMG_5021.JPG)\n\n### 书店\n大学的时候，因为时间很充足，每次去一个新地方，都会提前做一下功课，找一找当地有什么书店，然后去探一下店；现在因为实习时间的缘故，来了北京只去了一家书店，其实还有一方面原因就是觉得现在的书店都很大同小异，只是在装修上做文章，渐渐的失去了兴趣；这次去的这一家店也只是因为之前被安利，特地来拔草一下。多抓鱼：二手书店。\n![](https://img.shuaxindiary.cn/IMG_4430.JPG)\n\n\n# 结尾\n\n<!-- 之前呢因为觉得现在国内所有的地方都在全力发展经济，每个地方越来越繁荣，不可避免的就是同质化越来越严重，哪怕是三、四线小城市也都俨然一副国际化都市的感觉，越是这样就越没有出去的动力；因为去哪里都只是换了一个地方在商场里徘徊。所以一直能吸引我移动一下懒惰的身体出去玩的理由，一直都只有2个；一个是那个地方确实有着其他地方不曾有的*独占*的特色（景点、小吃、文化等等），虽然去之前可能也不知道是否真的如自己所想的那样有趣，但是抱着探索世界的好奇心，也不管旁人是否推荐，自己都还是会毅然决然前往\"探索\"一番，这个过程在之后回想起来无论是否愉快，但都非常满足；另一个就是单纯的去找朋友一起小聚一下，只有这种时候才会忽略其他，单纯的沉浸在和好友相聚的氛围中。\n所以出去的次数相对来说非常少，但是 -->\n今年就是在学校的最后一学期了，彻底毕业投入工作中后，可以自由支配的出去玩的时间只会越来越少，希望可以在工作之外还是尽量的多的出去看看，保持对世界的好奇心，哪怕没有任何计划，只是单纯的出去放松也是好的。\n","source":"_posts/随笔/北京游玩指南.md","raw":"---\ntitle: 北京\ndate: 2021-01-02 10:24:55\nindex_img: https://img.shuaxindiary.cn/2021.png\nbanner_img: https://img.shuaxindiary.cn/2021.png\ncategory:\n  - 随笔\ntag:\n  - 旅游\n---\n> 封面图作者：[AJIU_](https://www.zcool.com.cn/work/ZNDk4NTY4MTI=.html)\n\n# 前言\n新年的第一天，想从记录点不一样的开始，来帝都三个月了，零零散散和女票一起也打卡了不少北京的景点；人尽皆知的、不为人知的都有；所以想着以北京开始，之后也记录一些出去旅游的“游记”，也算是除过照片之外的另一种记录回忆的方式。\n\n\n# 正文\n\n### 天安门/故宫\n这两个可以安排在同一天，因为去故宫，选择从天安门那边进去就好，天安门附近有地铁站可直达；天安门不要门票，故宫门票微信公众号可预约；宫里有两个单独收费的馆：**珍宝馆**和**钟表阁**，还是很推荐的。\n![天安门](https://img.shuaxindiary.cn/IMG_4443.JPG)\n\n### 香山\n说实话，我觉得挺普通的山，可能我是西北的孩子对爬山已经见怪不怪了；香山的旺季是在秋季，枫叶会红，官图也很好看，但是时间要选好，不然一定会失望；去的话有地铁直达，虽然远一点但是也算方便，时间充裕在秋天来北京的话，可以适当考虑。下图是我那天去见到的唯一一棵比较红的好看的树。门票在微信公众号预约\n![](https://img.shuaxindiary.cn/IMG_4623.JPG)\n\n### 中央美术学院美术馆\n这种地方，比较见仁见智了，我是很享受各种色彩组合在一起对视觉的那种冲击，所以有时间且条件允许都会挑几个美术馆去看看。不过这回去虽然没看到什么水彩（很喜欢水彩和油画），但是看到了不少马赛克主题的作品，主要就是各种材质、形状的碎石组成一幅画，还是很壮观。门票现场买，也是通过猫眼这种扫码买。\n![](https://img.shuaxindiary.cn/IMG_4707.JPG)\n\n### 798\n提到艺术中心+各种相关展览，总是能看到798的名字；最巧的是，住的小区就在它对面；然后女票提议去看一个电影手稿的展览，就进去转了转；整体艺术氛围很浓厚，吧？（我也不懂）；但是有很多涂鸦非常壮观，很喜欢。下图是里面的一个玩具馆，酸了，叹息之墙；电影手稿展的哈利波特手稿；很喜欢的涂鸦墙。不收门票，里面单独展览会有单独收取门票的。\n![](https://img.shuaxindiary.cn/IMG_4562.JPG)\n![](https://img.shuaxindiary.cn/IMG_4837.JPG)\n![](https://img.shuaxindiary.cn/IMG_4842.JPG)\n\n### 博物馆\n北京有非常多的博物馆，很多都值得一去，门票都可以在各个馆的公众号进行预约。其实以前觉得博物馆非常无聊，或许是长大了不少，自己的知识积累比起以前稍微好了一点，很多东西不是很懂但也听过，再加上有个一起同行的人，可以一边聊天一边转，还是非常有意思的；最主要的还是帝都的博物馆都还是很有牌面hhh，以下顺序是按个人觉得非常值得一去的顺序做排名\n\n**首都博物馆**\n这个博物馆在木樨地地铁站附近，有5层，占地面积还是非常大的；一层是大厅，负一楼是北京一些建筑的简单模型和科普还有些周边店；二楼是一些历史文物和关于宗教的一些佛像展览；三楼没开；四楼是北京传统习俗文化展览。不让拍摄，就没拍图了。\n\n**中国人民革命军事博物馆**\n和首都博物馆就差一站，该馆在军事博物馆站出来就是，因为2个都很大，所以时间充裕，可以单独拿出一天来看看；如其名，主要就是围绕军事、中国革命时期的一些背景和题材的一些展览；军事迷可以来，有很多相关的展览。负一楼还有坦克、一些军用机车的展！\n![](https://img.shuaxindiary.cn/IMG_5187.JPG)\n![](https://img.shuaxindiary.cn/IMG_5186.JPG)\n![](https://img.shuaxindiary.cn/IMG_5191.JPG)\n![](https://img.shuaxindiary.cn/IMG_5192.JPG)\n\n\n**国家博物馆**\n这个博物馆在天安门对面，也非常大，很有牌面，一楼主要是一些雕塑+油画，还有一个展厅是中国从古到今的一些发展记录的展览；二三楼是一些瓷器相关的展览；负一层是一些石器时代的展览。\n![](https://img.shuaxindiary.cn/IMG_5086.JPG)\n![](https://img.shuaxindiary.cn/IMG_5194.JPG)\n\n**其他**\n剩下的就是一些比较小，但也很有意思的博物馆，因为实在太多就只发给一下去过的图和博物馆名称：中国钱币博物馆、中国邮政邮票博物馆、中国铁道博物馆\n![](https://img.shuaxindiary.cn/IMG_4963.JPG)\n![](https://img.shuaxindiary.cn/186E692204D762C0AAA29D4450C8793F.png)\n![](https://img.shuaxindiary.cn/IMG_4967.JPG)\n\n\n### 公园\n以圆明园和颐和园为首，北京也有很多这种户外的公园一类的地方；这类觉得更适合时间充足，去散散步这样；去过的：颐和园、圆明园、天坛、后海、北海、玉渊潭、景山。印象较深的，景山可以一览故宫全貌，冬天下过雪后上去看应该会很棒；北海公园的湖水很清，而且有很多喵喵出没；颐和园有很多不怕人的松鼠；后海有小吃街。这些公园都有一个特点，都有湖，有很多冬天结冰后都可以滑冰。\n![](https://img.shuaxindiary.cn/IMG_4910.JPG)\n![](https://img.shuaxindiary.cn/IMG_4969.JPG)\n![](https://img.shuaxindiary.cn/IMG_4971.JPG)\n![](https://img.shuaxindiary.cn/IMG_4970.JPG)\n![](https://img.shuaxindiary.cn/IMG_5084.JPG)\n\n\n### 中国美术馆\n主要以画、书法、印章、雕塑为主。\n![](https://img.shuaxindiary.cn/IMG_5020.JPG)\n![](https://img.shuaxindiary.cn/IMG_5021.JPG)\n\n### 书店\n大学的时候，因为时间很充足，每次去一个新地方，都会提前做一下功课，找一找当地有什么书店，然后去探一下店；现在因为实习时间的缘故，来了北京只去了一家书店，其实还有一方面原因就是觉得现在的书店都很大同小异，只是在装修上做文章，渐渐的失去了兴趣；这次去的这一家店也只是因为之前被安利，特地来拔草一下。多抓鱼：二手书店。\n![](https://img.shuaxindiary.cn/IMG_4430.JPG)\n\n\n# 结尾\n\n<!-- 之前呢因为觉得现在国内所有的地方都在全力发展经济，每个地方越来越繁荣，不可避免的就是同质化越来越严重，哪怕是三、四线小城市也都俨然一副国际化都市的感觉，越是这样就越没有出去的动力；因为去哪里都只是换了一个地方在商场里徘徊。所以一直能吸引我移动一下懒惰的身体出去玩的理由，一直都只有2个；一个是那个地方确实有着其他地方不曾有的*独占*的特色（景点、小吃、文化等等），虽然去之前可能也不知道是否真的如自己所想的那样有趣，但是抱着探索世界的好奇心，也不管旁人是否推荐，自己都还是会毅然决然前往\"探索\"一番，这个过程在之后回想起来无论是否愉快，但都非常满足；另一个就是单纯的去找朋友一起小聚一下，只有这种时候才会忽略其他，单纯的沉浸在和好友相聚的氛围中。\n所以出去的次数相对来说非常少，但是 -->\n今年就是在学校的最后一学期了，彻底毕业投入工作中后，可以自由支配的出去玩的时间只会越来越少，希望可以在工作之外还是尽量的多的出去看看，保持对世界的好奇心，哪怕没有任何计划，只是单纯的出去放松也是好的。\n","slug":"随笔/北京游玩指南","published":1,"updated":"2021-12-31T12:01:59.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3a005kj7jf50ey7d1l","content":"<blockquote>\n<p>封面图作者：<a href=\"https://www.zcool.com.cn/work/ZNDk4NTY4MTI=.html\">AJIU_</a></p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>新年的第一天，想从记录点不一样的开始，来帝都三个月了，零零散散和女票一起也打卡了不少北京的景点；人尽皆知的、不为人知的都有；所以想着以北京开始，之后也记录一些出去旅游的“游记”，也算是除过照片之外的另一种记录回忆的方式。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h3 id=\"天安门-故宫\"><a href=\"#天安门-故宫\" class=\"headerlink\" title=\"天安门/故宫\"></a>天安门/故宫</h3><p>这两个可以安排在同一天，因为去故宫，选择从天安门那边进去就好，天安门附近有地铁站可直达；天安门不要门票，故宫门票微信公众号可预约；宫里有两个单独收费的馆：<strong>珍宝馆</strong>和<strong>钟表阁</strong>，还是很推荐的。<br><img src=\"https://img.shuaxindiary.cn/IMG_4443.JPG\" alt=\"天安门\"></p>\n<h3 id=\"香山\"><a href=\"#香山\" class=\"headerlink\" title=\"香山\"></a>香山</h3><p>说实话，我觉得挺普通的山，可能我是西北的孩子对爬山已经见怪不怪了；香山的旺季是在秋季，枫叶会红，官图也很好看，但是时间要选好，不然一定会失望；去的话有地铁直达，虽然远一点但是也算方便，时间充裕在秋天来北京的话，可以适当考虑。下图是我那天去见到的唯一一棵比较红的好看的树。门票在微信公众号预约<br><img src=\"https://img.shuaxindiary.cn/IMG_4623.JPG\"></p>\n<h3 id=\"中央美术学院美术馆\"><a href=\"#中央美术学院美术馆\" class=\"headerlink\" title=\"中央美术学院美术馆\"></a>中央美术学院美术馆</h3><p>这种地方，比较见仁见智了，我是很享受各种色彩组合在一起对视觉的那种冲击，所以有时间且条件允许都会挑几个美术馆去看看。不过这回去虽然没看到什么水彩（很喜欢水彩和油画），但是看到了不少马赛克主题的作品，主要就是各种材质、形状的碎石组成一幅画，还是很壮观。门票现场买，也是通过猫眼这种扫码买。<br><img src=\"https://img.shuaxindiary.cn/IMG_4707.JPG\"></p>\n<h3 id=\"798\"><a href=\"#798\" class=\"headerlink\" title=\"798\"></a>798</h3><p>提到艺术中心+各种相关展览，总是能看到798的名字；最巧的是，住的小区就在它对面；然后女票提议去看一个电影手稿的展览，就进去转了转；整体艺术氛围很浓厚，吧？（我也不懂）；但是有很多涂鸦非常壮观，很喜欢。下图是里面的一个玩具馆，酸了，叹息之墙；电影手稿展的哈利波特手稿；很喜欢的涂鸦墙。不收门票，里面单独展览会有单独收取门票的。<br><img src=\"https://img.shuaxindiary.cn/IMG_4562.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4837.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4842.JPG\"></p>\n<h3 id=\"博物馆\"><a href=\"#博物馆\" class=\"headerlink\" title=\"博物馆\"></a>博物馆</h3><p>北京有非常多的博物馆，很多都值得一去，门票都可以在各个馆的公众号进行预约。其实以前觉得博物馆非常无聊，或许是长大了不少，自己的知识积累比起以前稍微好了一点，很多东西不是很懂但也听过，再加上有个一起同行的人，可以一边聊天一边转，还是非常有意思的；最主要的还是帝都的博物馆都还是很有牌面hhh，以下顺序是按个人觉得非常值得一去的顺序做排名</p>\n<p><strong>首都博物馆</strong><br>这个博物馆在木樨地地铁站附近，有5层，占地面积还是非常大的；一层是大厅，负一楼是北京一些建筑的简单模型和科普还有些周边店；二楼是一些历史文物和关于宗教的一些佛像展览；三楼没开；四楼是北京传统习俗文化展览。不让拍摄，就没拍图了。</p>\n<p><strong>中国人民革命军事博物馆</strong><br>和首都博物馆就差一站，该馆在军事博物馆站出来就是，因为2个都很大，所以时间充裕，可以单独拿出一天来看看；如其名，主要就是围绕军事、中国革命时期的一些背景和题材的一些展览；军事迷可以来，有很多相关的展览。负一楼还有坦克、一些军用机车的展！<br><img src=\"https://img.shuaxindiary.cn/IMG_5187.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5186.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5191.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5192.JPG\"></p>\n<p><strong>国家博物馆</strong><br>这个博物馆在天安门对面，也非常大，很有牌面，一楼主要是一些雕塑+油画，还有一个展厅是中国从古到今的一些发展记录的展览；二三楼是一些瓷器相关的展览；负一层是一些石器时代的展览。<br><img src=\"https://img.shuaxindiary.cn/IMG_5086.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5194.JPG\"></p>\n<p><strong>其他</strong><br>剩下的就是一些比较小，但也很有意思的博物馆，因为实在太多就只发给一下去过的图和博物馆名称：中国钱币博物馆、中国邮政邮票博物馆、中国铁道博物馆<br><img src=\"https://img.shuaxindiary.cn/IMG_4963.JPG\"><br><img src=\"https://img.shuaxindiary.cn/186E692204D762C0AAA29D4450C8793F.png\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4967.JPG\"></p>\n<h3 id=\"公园\"><a href=\"#公园\" class=\"headerlink\" title=\"公园\"></a>公园</h3><p>以圆明园和颐和园为首，北京也有很多这种户外的公园一类的地方；这类觉得更适合时间充足，去散散步这样；去过的：颐和园、圆明园、天坛、后海、北海、玉渊潭、景山。印象较深的，景山可以一览故宫全貌，冬天下过雪后上去看应该会很棒；北海公园的湖水很清，而且有很多喵喵出没；颐和园有很多不怕人的松鼠；后海有小吃街。这些公园都有一个特点，都有湖，有很多冬天结冰后都可以滑冰。<br><img src=\"https://img.shuaxindiary.cn/IMG_4910.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4969.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4971.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4970.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5084.JPG\"></p>\n<h3 id=\"中国美术馆\"><a href=\"#中国美术馆\" class=\"headerlink\" title=\"中国美术馆\"></a>中国美术馆</h3><p>主要以画、书法、印章、雕塑为主。<br><img src=\"https://img.shuaxindiary.cn/IMG_5020.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5021.JPG\"></p>\n<h3 id=\"书店\"><a href=\"#书店\" class=\"headerlink\" title=\"书店\"></a>书店</h3><p>大学的时候，因为时间很充足，每次去一个新地方，都会提前做一下功课，找一找当地有什么书店，然后去探一下店；现在因为实习时间的缘故，来了北京只去了一家书店，其实还有一方面原因就是觉得现在的书店都很大同小异，只是在装修上做文章，渐渐的失去了兴趣；这次去的这一家店也只是因为之前被安利，特地来拔草一下。多抓鱼：二手书店。<br><img src=\"https://img.shuaxindiary.cn/IMG_4430.JPG\"></p>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><!-- 之前呢因为觉得现在国内所有的地方都在全力发展经济，每个地方越来越繁荣，不可避免的就是同质化越来越严重，哪怕是三、四线小城市也都俨然一副国际化都市的感觉，越是这样就越没有出去的动力；因为去哪里都只是换了一个地方在商场里徘徊。所以一直能吸引我移动一下懒惰的身体出去玩的理由，一直都只有2个；一个是那个地方确实有着其他地方不曾有的*独占*的特色（景点、小吃、文化等等），虽然去之前可能也不知道是否真的如自己所想的那样有趣，但是抱着探索世界的好奇心，也不管旁人是否推荐，自己都还是会毅然决然前往\"探索\"一番，这个过程在之后回想起来无论是否愉快，但都非常满足；另一个就是单纯的去找朋友一起小聚一下，只有这种时候才会忽略其他，单纯的沉浸在和好友相聚的氛围中。\n所以出去的次数相对来说非常少，但是 -->\n<p>今年就是在学校的最后一学期了，彻底毕业投入工作中后，可以自由支配的出去玩的时间只会越来越少，希望可以在工作之外还是尽量的多的出去看看，保持对世界的好奇心，哪怕没有任何计划，只是单纯的出去放松也是好的。</p>\n","site":{"data":{}},"wordcount":1730,"excerpt":"","more":"<blockquote>\n<p>封面图作者：<a href=\"https://www.zcool.com.cn/work/ZNDk4NTY4MTI=.html\">AJIU_</a></p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>新年的第一天，想从记录点不一样的开始，来帝都三个月了，零零散散和女票一起也打卡了不少北京的景点；人尽皆知的、不为人知的都有；所以想着以北京开始，之后也记录一些出去旅游的“游记”，也算是除过照片之外的另一种记录回忆的方式。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h3 id=\"天安门-故宫\"><a href=\"#天安门-故宫\" class=\"headerlink\" title=\"天安门/故宫\"></a>天安门/故宫</h3><p>这两个可以安排在同一天，因为去故宫，选择从天安门那边进去就好，天安门附近有地铁站可直达；天安门不要门票，故宫门票微信公众号可预约；宫里有两个单独收费的馆：<strong>珍宝馆</strong>和<strong>钟表阁</strong>，还是很推荐的。<br><img src=\"https://img.shuaxindiary.cn/IMG_4443.JPG\" alt=\"天安门\"></p>\n<h3 id=\"香山\"><a href=\"#香山\" class=\"headerlink\" title=\"香山\"></a>香山</h3><p>说实话，我觉得挺普通的山，可能我是西北的孩子对爬山已经见怪不怪了；香山的旺季是在秋季，枫叶会红，官图也很好看，但是时间要选好，不然一定会失望；去的话有地铁直达，虽然远一点但是也算方便，时间充裕在秋天来北京的话，可以适当考虑。下图是我那天去见到的唯一一棵比较红的好看的树。门票在微信公众号预约<br><img src=\"https://img.shuaxindiary.cn/IMG_4623.JPG\"></p>\n<h3 id=\"中央美术学院美术馆\"><a href=\"#中央美术学院美术馆\" class=\"headerlink\" title=\"中央美术学院美术馆\"></a>中央美术学院美术馆</h3><p>这种地方，比较见仁见智了，我是很享受各种色彩组合在一起对视觉的那种冲击，所以有时间且条件允许都会挑几个美术馆去看看。不过这回去虽然没看到什么水彩（很喜欢水彩和油画），但是看到了不少马赛克主题的作品，主要就是各种材质、形状的碎石组成一幅画，还是很壮观。门票现场买，也是通过猫眼这种扫码买。<br><img src=\"https://img.shuaxindiary.cn/IMG_4707.JPG\"></p>\n<h3 id=\"798\"><a href=\"#798\" class=\"headerlink\" title=\"798\"></a>798</h3><p>提到艺术中心+各种相关展览，总是能看到798的名字；最巧的是，住的小区就在它对面；然后女票提议去看一个电影手稿的展览，就进去转了转；整体艺术氛围很浓厚，吧？（我也不懂）；但是有很多涂鸦非常壮观，很喜欢。下图是里面的一个玩具馆，酸了，叹息之墙；电影手稿展的哈利波特手稿；很喜欢的涂鸦墙。不收门票，里面单独展览会有单独收取门票的。<br><img src=\"https://img.shuaxindiary.cn/IMG_4562.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4837.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4842.JPG\"></p>\n<h3 id=\"博物馆\"><a href=\"#博物馆\" class=\"headerlink\" title=\"博物馆\"></a>博物馆</h3><p>北京有非常多的博物馆，很多都值得一去，门票都可以在各个馆的公众号进行预约。其实以前觉得博物馆非常无聊，或许是长大了不少，自己的知识积累比起以前稍微好了一点，很多东西不是很懂但也听过，再加上有个一起同行的人，可以一边聊天一边转，还是非常有意思的；最主要的还是帝都的博物馆都还是很有牌面hhh，以下顺序是按个人觉得非常值得一去的顺序做排名</p>\n<p><strong>首都博物馆</strong><br>这个博物馆在木樨地地铁站附近，有5层，占地面积还是非常大的；一层是大厅，负一楼是北京一些建筑的简单模型和科普还有些周边店；二楼是一些历史文物和关于宗教的一些佛像展览；三楼没开；四楼是北京传统习俗文化展览。不让拍摄，就没拍图了。</p>\n<p><strong>中国人民革命军事博物馆</strong><br>和首都博物馆就差一站，该馆在军事博物馆站出来就是，因为2个都很大，所以时间充裕，可以单独拿出一天来看看；如其名，主要就是围绕军事、中国革命时期的一些背景和题材的一些展览；军事迷可以来，有很多相关的展览。负一楼还有坦克、一些军用机车的展！<br><img src=\"https://img.shuaxindiary.cn/IMG_5187.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5186.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5191.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5192.JPG\"></p>\n<p><strong>国家博物馆</strong><br>这个博物馆在天安门对面，也非常大，很有牌面，一楼主要是一些雕塑+油画，还有一个展厅是中国从古到今的一些发展记录的展览；二三楼是一些瓷器相关的展览；负一层是一些石器时代的展览。<br><img src=\"https://img.shuaxindiary.cn/IMG_5086.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5194.JPG\"></p>\n<p><strong>其他</strong><br>剩下的就是一些比较小，但也很有意思的博物馆，因为实在太多就只发给一下去过的图和博物馆名称：中国钱币博物馆、中国邮政邮票博物馆、中国铁道博物馆<br><img src=\"https://img.shuaxindiary.cn/IMG_4963.JPG\"><br><img src=\"https://img.shuaxindiary.cn/186E692204D762C0AAA29D4450C8793F.png\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4967.JPG\"></p>\n<h3 id=\"公园\"><a href=\"#公园\" class=\"headerlink\" title=\"公园\"></a>公园</h3><p>以圆明园和颐和园为首，北京也有很多这种户外的公园一类的地方；这类觉得更适合时间充足，去散散步这样；去过的：颐和园、圆明园、天坛、后海、北海、玉渊潭、景山。印象较深的，景山可以一览故宫全貌，冬天下过雪后上去看应该会很棒；北海公园的湖水很清，而且有很多喵喵出没；颐和园有很多不怕人的松鼠；后海有小吃街。这些公园都有一个特点，都有湖，有很多冬天结冰后都可以滑冰。<br><img src=\"https://img.shuaxindiary.cn/IMG_4910.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4969.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4971.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_4970.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5084.JPG\"></p>\n<h3 id=\"中国美术馆\"><a href=\"#中国美术馆\" class=\"headerlink\" title=\"中国美术馆\"></a>中国美术馆</h3><p>主要以画、书法、印章、雕塑为主。<br><img src=\"https://img.shuaxindiary.cn/IMG_5020.JPG\"><br><img src=\"https://img.shuaxindiary.cn/IMG_5021.JPG\"></p>\n<h3 id=\"书店\"><a href=\"#书店\" class=\"headerlink\" title=\"书店\"></a>书店</h3><p>大学的时候，因为时间很充足，每次去一个新地方，都会提前做一下功课，找一找当地有什么书店，然后去探一下店；现在因为实习时间的缘故，来了北京只去了一家书店，其实还有一方面原因就是觉得现在的书店都很大同小异，只是在装修上做文章，渐渐的失去了兴趣；这次去的这一家店也只是因为之前被安利，特地来拔草一下。多抓鱼：二手书店。<br><img src=\"https://img.shuaxindiary.cn/IMG_4430.JPG\"></p>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><!-- 之前呢因为觉得现在国内所有的地方都在全力发展经济，每个地方越来越繁荣，不可避免的就是同质化越来越严重，哪怕是三、四线小城市也都俨然一副国际化都市的感觉，越是这样就越没有出去的动力；因为去哪里都只是换了一个地方在商场里徘徊。所以一直能吸引我移动一下懒惰的身体出去玩的理由，一直都只有2个；一个是那个地方确实有着其他地方不曾有的*独占*的特色（景点、小吃、文化等等），虽然去之前可能也不知道是否真的如自己所想的那样有趣，但是抱着探索世界的好奇心，也不管旁人是否推荐，自己都还是会毅然决然前往\"探索\"一番，这个过程在之后回想起来无论是否愉快，但都非常满足；另一个就是单纯的去找朋友一起小聚一下，只有这种时候才会忽略其他，单纯的沉浸在和好友相聚的氛围中。\n所以出去的次数相对来说非常少，但是 -->\n<p>今年就是在学校的最后一学期了，彻底毕业投入工作中后，可以自由支配的出去玩的时间只会越来越少，希望可以在工作之外还是尽量的多的出去看看，保持对世界的好奇心，哪怕没有任何计划，只是单纯的出去放松也是好的。</p>\n"},{"title":"塞尔达通关","abbrlink":47036,"date":"2020-05-13T09:39:40.000Z","_content":"\n突如其来的疫情，导致过了一个及其长的寒假，长到现在还在假期（2020-5-13）；在家除了继续自己的充电计划和偶尔上上学校的网课外，谈不上清闲，但也觉得很无聊，所以冲动的跟风了一波，买了今年的第一件理财产品---switch\n<!-- more -->\n![switch](/img/jottings/switch.png)\n# 关于游戏机和游戏\n- 上一次有游戏机，印象里还是小学五六年级，买的那种国产十来块钱的黑白像素的“掌机”；再往前就是幼儿园到刚升小学那段时间的小霸王\n\n- 因为家里一直以督促学习为由，在升入初中后，把我的玩具漫画等一切他们觉得会影响我学习的东西都处理掉了，就连电脑也是一会没有鼠标，一会没有键盘的存在；不过现在想想也是很庆幸，最容易沉迷游戏的年龄，因为家里的限制，不仅没有沉迷其中，还为了解决无聊，养成了看书的习惯\n\n# 关于选择switch\n- 虽然很长时间与游戏没有什么联系，但还是很想在休息的时候多一种休闲的方式；游戏肯定是一个很好的选择，但是对于网游的娱乐模式实在提不起兴趣，社交属性大于娱乐属性，所以一直三分钟热度；pc买游戏呢，因为常年在学校，笔记本性能堪忧，也一直作罢\n\n- 难得这个假期时间过长，所以想着就入手一台游戏主机就好；最开始瞄准了大法的4公主，加上某东的优惠，很良心；就要剁手的时候，动森火了起来，switch再次进入了眼里；对任天堂的好感全部来自小时候在小霸王上玩的马里奥，于是查了一波switch游戏阵容，然后又正好因为动森很火，很喜欢这种养生游戏，于是就有了现在的故事\n\n# 入手的游戏\n随机器一起买了誉为神作的《塞尔达旷野之息》卡带，和《动物森友会》电子版\n![游戏](/img/jottings/games.png)\n\n# 塞尔达\n最开始玩的那几天，因为第一次接触开放世界游戏，会有点蒙逼，get不到玩点；于是跟着攻略玩了一天，大概清楚了游戏基本套路后，于是开始了自己的海拉鲁之旅\n>优点\n- 足够大的地图和各种丰富的道具，都带来了不一样的体验，四处乱跑解锁新地图，遇到新地方的那种感觉真的很有代入感\n- 外加相对比较丰富的装备系统，不仅是装备效果不同，还有不同的穿戴效果，还可以玩出奇迹暖暖的感觉？！而且很喜欢的一点，装备没有升级系统，只存在攻击等级和耐久度的限制以及属性装备的属性效果；这样就一部分摆脱了需要去肝装备等级的乏味过程；耐久度的存在，又避免了一把武器走天下的问题，会督促玩家去不停的探索和发现新装备，这个过程就很有乐趣\n- 有意思的打斗过程，因为装备和技能的随时切换，于是打斗就可以玩出很多sao操作，带了很不一样的体验\n- 我最喜欢的2套装备\n![1](/img/jottings/outfit1.JPG)\n![2](/img/jottings/outfit2.JPG)\n\n\n>缺点\n- 也不能算是缺点，只能说是为了后期DLC和续作让路，所以剧情比较简单；但是也能理解，因为游戏的开放性很大，很多地方都需要一点点的去探索、摸索，所以剧情也不是这个游戏的主要卖点，所以这个因人而异；\n\n# 总结\n- 不愧被称为神作，吹爆\n- 另外最近找到了小时候的小霸王游戏机，只可惜手柄坏了，卡带，主机还是好的，上一张对比图\n- 两个时代\n![2个时代](/img/jottings/two.JPG)\n![氪金条](/img/jottings/cards.JPG)\n\n\n\n","source":"_posts/随笔/塞尔达通关.md","raw":"---\ntitle: 塞尔达通关\ncategory:\n  - 随笔\ntag:\n  - 随笔\n  - switch\nabbrlink: 47036\ndate: 2020-05-13 17:39:40\n---\n\n突如其来的疫情，导致过了一个及其长的寒假，长到现在还在假期（2020-5-13）；在家除了继续自己的充电计划和偶尔上上学校的网课外，谈不上清闲，但也觉得很无聊，所以冲动的跟风了一波，买了今年的第一件理财产品---switch\n<!-- more -->\n![switch](/img/jottings/switch.png)\n# 关于游戏机和游戏\n- 上一次有游戏机，印象里还是小学五六年级，买的那种国产十来块钱的黑白像素的“掌机”；再往前就是幼儿园到刚升小学那段时间的小霸王\n\n- 因为家里一直以督促学习为由，在升入初中后，把我的玩具漫画等一切他们觉得会影响我学习的东西都处理掉了，就连电脑也是一会没有鼠标，一会没有键盘的存在；不过现在想想也是很庆幸，最容易沉迷游戏的年龄，因为家里的限制，不仅没有沉迷其中，还为了解决无聊，养成了看书的习惯\n\n# 关于选择switch\n- 虽然很长时间与游戏没有什么联系，但还是很想在休息的时候多一种休闲的方式；游戏肯定是一个很好的选择，但是对于网游的娱乐模式实在提不起兴趣，社交属性大于娱乐属性，所以一直三分钟热度；pc买游戏呢，因为常年在学校，笔记本性能堪忧，也一直作罢\n\n- 难得这个假期时间过长，所以想着就入手一台游戏主机就好；最开始瞄准了大法的4公主，加上某东的优惠，很良心；就要剁手的时候，动森火了起来，switch再次进入了眼里；对任天堂的好感全部来自小时候在小霸王上玩的马里奥，于是查了一波switch游戏阵容，然后又正好因为动森很火，很喜欢这种养生游戏，于是就有了现在的故事\n\n# 入手的游戏\n随机器一起买了誉为神作的《塞尔达旷野之息》卡带，和《动物森友会》电子版\n![游戏](/img/jottings/games.png)\n\n# 塞尔达\n最开始玩的那几天，因为第一次接触开放世界游戏，会有点蒙逼，get不到玩点；于是跟着攻略玩了一天，大概清楚了游戏基本套路后，于是开始了自己的海拉鲁之旅\n>优点\n- 足够大的地图和各种丰富的道具，都带来了不一样的体验，四处乱跑解锁新地图，遇到新地方的那种感觉真的很有代入感\n- 外加相对比较丰富的装备系统，不仅是装备效果不同，还有不同的穿戴效果，还可以玩出奇迹暖暖的感觉？！而且很喜欢的一点，装备没有升级系统，只存在攻击等级和耐久度的限制以及属性装备的属性效果；这样就一部分摆脱了需要去肝装备等级的乏味过程；耐久度的存在，又避免了一把武器走天下的问题，会督促玩家去不停的探索和发现新装备，这个过程就很有乐趣\n- 有意思的打斗过程，因为装备和技能的随时切换，于是打斗就可以玩出很多sao操作，带了很不一样的体验\n- 我最喜欢的2套装备\n![1](/img/jottings/outfit1.JPG)\n![2](/img/jottings/outfit2.JPG)\n\n\n>缺点\n- 也不能算是缺点，只能说是为了后期DLC和续作让路，所以剧情比较简单；但是也能理解，因为游戏的开放性很大，很多地方都需要一点点的去探索、摸索，所以剧情也不是这个游戏的主要卖点，所以这个因人而异；\n\n# 总结\n- 不愧被称为神作，吹爆\n- 另外最近找到了小时候的小霸王游戏机，只可惜手柄坏了，卡带，主机还是好的，上一张对比图\n- 两个时代\n![2个时代](/img/jottings/two.JPG)\n![氪金条](/img/jottings/cards.JPG)\n\n\n\n","slug":"随笔/塞尔达通关","published":1,"updated":"2021-12-31T12:01:59.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3b005lj7jf4drtegpk","content":"<p>突如其来的疫情，导致过了一个及其长的寒假，长到现在还在假期（2020-5-13）；在家除了继续自己的充电计划和偶尔上上学校的网课外，谈不上清闲，但也觉得很无聊，所以冲动的跟风了一波，买了今年的第一件理财产品—switch</p>\n<a id=\"more\"></a>\n<p><img src=\"/img/jottings/switch.png\" alt=\"switch\"></p>\n<h1 id=\"关于游戏机和游戏\"><a href=\"#关于游戏机和游戏\" class=\"headerlink\" title=\"关于游戏机和游戏\"></a>关于游戏机和游戏</h1><ul>\n<li><p>上一次有游戏机，印象里还是小学五六年级，买的那种国产十来块钱的黑白像素的“掌机”；再往前就是幼儿园到刚升小学那段时间的小霸王</p>\n</li>\n<li><p>因为家里一直以督促学习为由，在升入初中后，把我的玩具漫画等一切他们觉得会影响我学习的东西都处理掉了，就连电脑也是一会没有鼠标，一会没有键盘的存在；不过现在想想也是很庆幸，最容易沉迷游戏的年龄，因为家里的限制，不仅没有沉迷其中，还为了解决无聊，养成了看书的习惯</p>\n</li>\n</ul>\n<h1 id=\"关于选择switch\"><a href=\"#关于选择switch\" class=\"headerlink\" title=\"关于选择switch\"></a>关于选择switch</h1><ul>\n<li><p>虽然很长时间与游戏没有什么联系，但还是很想在休息的时候多一种休闲的方式；游戏肯定是一个很好的选择，但是对于网游的娱乐模式实在提不起兴趣，社交属性大于娱乐属性，所以一直三分钟热度；pc买游戏呢，因为常年在学校，笔记本性能堪忧，也一直作罢</p>\n</li>\n<li><p>难得这个假期时间过长，所以想着就入手一台游戏主机就好；最开始瞄准了大法的4公主，加上某东的优惠，很良心；就要剁手的时候，动森火了起来，switch再次进入了眼里；对任天堂的好感全部来自小时候在小霸王上玩的马里奥，于是查了一波switch游戏阵容，然后又正好因为动森很火，很喜欢这种养生游戏，于是就有了现在的故事</p>\n</li>\n</ul>\n<h1 id=\"入手的游戏\"><a href=\"#入手的游戏\" class=\"headerlink\" title=\"入手的游戏\"></a>入手的游戏</h1><p>随机器一起买了誉为神作的《塞尔达旷野之息》卡带，和《动物森友会》电子版<br><img src=\"/img/jottings/games.png\" alt=\"游戏\"></p>\n<h1 id=\"塞尔达\"><a href=\"#塞尔达\" class=\"headerlink\" title=\"塞尔达\"></a>塞尔达</h1><p>最开始玩的那几天，因为第一次接触开放世界游戏，会有点蒙逼，get不到玩点；于是跟着攻略玩了一天，大概清楚了游戏基本套路后，于是开始了自己的海拉鲁之旅</p>\n<blockquote>\n<p>优点</p>\n</blockquote>\n<ul>\n<li>足够大的地图和各种丰富的道具，都带来了不一样的体验，四处乱跑解锁新地图，遇到新地方的那种感觉真的很有代入感</li>\n<li>外加相对比较丰富的装备系统，不仅是装备效果不同，还有不同的穿戴效果，还可以玩出奇迹暖暖的感觉？！而且很喜欢的一点，装备没有升级系统，只存在攻击等级和耐久度的限制以及属性装备的属性效果；这样就一部分摆脱了需要去肝装备等级的乏味过程；耐久度的存在，又避免了一把武器走天下的问题，会督促玩家去不停的探索和发现新装备，这个过程就很有乐趣</li>\n<li>有意思的打斗过程，因为装备和技能的随时切换，于是打斗就可以玩出很多sao操作，带了很不一样的体验</li>\n<li>我最喜欢的2套装备<br><img src=\"/img/jottings/outfit1.JPG\" alt=\"1\"><br><img src=\"/img/jottings/outfit2.JPG\" alt=\"2\"></li>\n</ul>\n<blockquote>\n<p>缺点</p>\n</blockquote>\n<ul>\n<li>也不能算是缺点，只能说是为了后期DLC和续作让路，所以剧情比较简单；但是也能理解，因为游戏的开放性很大，很多地方都需要一点点的去探索、摸索，所以剧情也不是这个游戏的主要卖点，所以这个因人而异；</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>不愧被称为神作，吹爆</li>\n<li>另外最近找到了小时候的小霸王游戏机，只可惜手柄坏了，卡带，主机还是好的，上一张对比图</li>\n<li>两个时代<br><img src=\"/img/jottings/two.JPG\" alt=\"2个时代\"><br><img src=\"/img/jottings/cards.JPG\" alt=\"氪金条\"></li>\n</ul>\n","site":{"data":{}},"wordcount":1140,"excerpt":"<p>突如其来的疫情，导致过了一个及其长的寒假，长到现在还在假期（2020-5-13）；在家除了继续自己的充电计划和偶尔上上学校的网课外，谈不上清闲，但也觉得很无聊，所以冲动的跟风了一波，买了今年的第一件理财产品—switch</p>","more":"<p><img src=\"/img/jottings/switch.png\" alt=\"switch\"></p>\n<h1 id=\"关于游戏机和游戏\"><a href=\"#关于游戏机和游戏\" class=\"headerlink\" title=\"关于游戏机和游戏\"></a>关于游戏机和游戏</h1><ul>\n<li><p>上一次有游戏机，印象里还是小学五六年级，买的那种国产十来块钱的黑白像素的“掌机”；再往前就是幼儿园到刚升小学那段时间的小霸王</p>\n</li>\n<li><p>因为家里一直以督促学习为由，在升入初中后，把我的玩具漫画等一切他们觉得会影响我学习的东西都处理掉了，就连电脑也是一会没有鼠标，一会没有键盘的存在；不过现在想想也是很庆幸，最容易沉迷游戏的年龄，因为家里的限制，不仅没有沉迷其中，还为了解决无聊，养成了看书的习惯</p>\n</li>\n</ul>\n<h1 id=\"关于选择switch\"><a href=\"#关于选择switch\" class=\"headerlink\" title=\"关于选择switch\"></a>关于选择switch</h1><ul>\n<li><p>虽然很长时间与游戏没有什么联系，但还是很想在休息的时候多一种休闲的方式；游戏肯定是一个很好的选择，但是对于网游的娱乐模式实在提不起兴趣，社交属性大于娱乐属性，所以一直三分钟热度；pc买游戏呢，因为常年在学校，笔记本性能堪忧，也一直作罢</p>\n</li>\n<li><p>难得这个假期时间过长，所以想着就入手一台游戏主机就好；最开始瞄准了大法的4公主，加上某东的优惠，很良心；就要剁手的时候，动森火了起来，switch再次进入了眼里；对任天堂的好感全部来自小时候在小霸王上玩的马里奥，于是查了一波switch游戏阵容，然后又正好因为动森很火，很喜欢这种养生游戏，于是就有了现在的故事</p>\n</li>\n</ul>\n<h1 id=\"入手的游戏\"><a href=\"#入手的游戏\" class=\"headerlink\" title=\"入手的游戏\"></a>入手的游戏</h1><p>随机器一起买了誉为神作的《塞尔达旷野之息》卡带，和《动物森友会》电子版<br><img src=\"/img/jottings/games.png\" alt=\"游戏\"></p>\n<h1 id=\"塞尔达\"><a href=\"#塞尔达\" class=\"headerlink\" title=\"塞尔达\"></a>塞尔达</h1><p>最开始玩的那几天，因为第一次接触开放世界游戏，会有点蒙逼，get不到玩点；于是跟着攻略玩了一天，大概清楚了游戏基本套路后，于是开始了自己的海拉鲁之旅</p>\n<blockquote>\n<p>优点</p>\n</blockquote>\n<ul>\n<li>足够大的地图和各种丰富的道具，都带来了不一样的体验，四处乱跑解锁新地图，遇到新地方的那种感觉真的很有代入感</li>\n<li>外加相对比较丰富的装备系统，不仅是装备效果不同，还有不同的穿戴效果，还可以玩出奇迹暖暖的感觉？！而且很喜欢的一点，装备没有升级系统，只存在攻击等级和耐久度的限制以及属性装备的属性效果；这样就一部分摆脱了需要去肝装备等级的乏味过程；耐久度的存在，又避免了一把武器走天下的问题，会督促玩家去不停的探索和发现新装备，这个过程就很有乐趣</li>\n<li>有意思的打斗过程，因为装备和技能的随时切换，于是打斗就可以玩出很多sao操作，带了很不一样的体验</li>\n<li>我最喜欢的2套装备<br><img src=\"/img/jottings/outfit1.JPG\" alt=\"1\"><br><img src=\"/img/jottings/outfit2.JPG\" alt=\"2\"></li>\n</ul>\n<blockquote>\n<p>缺点</p>\n</blockquote>\n<ul>\n<li>也不能算是缺点，只能说是为了后期DLC和续作让路，所以剧情比较简单；但是也能理解，因为游戏的开放性很大，很多地方都需要一点点的去探索、摸索，所以剧情也不是这个游戏的主要卖点，所以这个因人而异；</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>不愧被称为神作，吹爆</li>\n<li>另外最近找到了小时候的小霸王游戏机，只可惜手柄坏了，卡带，主机还是好的，上一张对比图</li>\n<li>两个时代<br><img src=\"/img/jottings/two.JPG\" alt=\"2个时代\"><br><img src=\"/img/jottings/cards.JPG\" alt=\"氪金条\"></li>\n</ul>"},{"title":"资源推荐","abbrlink":1312,"date":"2020-04-29T08:52:09.000Z","_content":"\n\n# 说明\n- 平时水的社区比较多，总是忘记哪些地方收藏了哪些东西，所以准备不定期的把一些自己觉得很不错的、很有价值的内容收录在这里\n- 没有标注语言的都是中文或者有中文版本\n\n<!-- more -->\n\n# 正文\n\n## 技术指南合集\n\n>前端\n- [冴羽js深入](https://github.com/mqyqingfeng/Blog)\n- [ES6入门-阮一峰](https://es6.ruanyifeng.com/)\n- [Vue技术解密](https://ustbhuangyi.github.io/vue-analysis/v2/vue-router/)\n- [MDN](https://developer.mozilla.org/zh-CN/)\n- [深入浅出webpack](https://webpack.wuhaolin.cn/)\n- [常见js考题](https://github.com/lydiahallie/javascript-questions) 英文\n- [virtual-dom学习](https://github.com/livoras/simple-virtual-dom)\n- [狼叔的如何学习nodejs](https://github.com/i5ting/How-to-learn-node-correctly)\n- [Node最佳实战](https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md) 非项目，实战规范一类\n- [AirbnbJs规范](https://github.com/airbnb/javascript)\n- [Vue原理解析](https://github.com/answershuto/learnVue)\n- [Node面试指南](https://github.com/ElemeFE/node-interview) 饿了么出品，算是自家对node工程的事的要求，可以拿来查漏补缺\n- [Node中文资料合集](https://github.com/youyudehexie/node123)\n\n>运维\n- [Linux学习指南](https://github.com/jaywcjlove/linux-command)\n- [Docker](https://yeasy.gitbooks.io/docker_practice/content/?from=groupmessage&isappinstalled=0)\n- [Nginx实战](https://github.com/jaywcjlove/nginx-tutorial)\n- [Nginx开发](http://tengine.taobao.org/book/index.html)\n\n\n>算法\n- [leetcode题解](https://github.com/labuladong/fucking-algorithm)\n- [数据结构-js版](https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md)\n\n>练习demo、第三方库等\n- [Electron模仿QQ音乐](https://github.com/SmallRuralDog/electron-vue-music)\n- [Vue开源项目合集](https://github.com/opendigg/awesome-github-vue)\n- [nuxt模仿掘金](https://github.com/xuqiang521/nuxt-ssr-demo)\n- [V-charts](https://v-charts.js.org/#/pie) 饿了么基于echarts封装的vue版\n- [Vue+koa全栈demo](https://github.com/huangwei9527/quark-h5)\n- [Hello World](https://github.com/Aniket965/Hello-world) 所有语言的helloworld\n- [React+Electron音乐客户端](https://github.com/caijinyc/Here)\n- [手绘风图表](https://github.com/timqian/chart.xkcd)\n\n>其他\n- [中华人民共和国行政区划数据](https://github.com/LittleXiaosi/Administrative-divisions-of-China)\n- [设计模式](https://www.runoob.com/design-pattern/design-pattern-tutorial.html) java版，会java语法那就没问题了，毕竟思想，和语言没啥关系\n- [设计模式](https://github.com/guanguans/design-patterns-for-humans-cn)\n- [Google面试指南](https://github.com/xitu/google-interview-university)\n- [canvas练习demo](https://github.com/bxm0927/canvas-special)\n- [Go入门指南](https://github.com/unknwon/the-way-to-go_ZH_CN)\n- [HTTP指南核心笔记](https://github.com/woai30231/http)\n\n## 技术干货文章\n- [花椒前端CICD](https://mp.weixin.qq.com/s/vViJnwy2NlCs99cBObbidg)\n- [跨域常见解决方案](https://mp.weixin.qq.com/s/OC9yEU6JasHxXH_M2b6bHA)\n- [前端架构指南](https://mp.weixin.qq.com/s/yDWm57w10lpFeq8z91-L8Q)\n- [前端性能优化](https://juejin.im/post/5e7723636fb9a07cc321675d?from=groupmessage&isappinstalled=0)\n- [前端性能优化2](https://mp.weixin.qq.com/s/PDD3GxFyYptwEl0q_XaW2g)\n- [HTTP常见面试题](https://mp.weixin.qq.com/s/FJGKObVnU61ve_ioejLrtw)\n- [手写代码的一些技巧](https://mp.weixin.qq.com/s/zEq3TbOVtG9BadUgPm1YnA)\n- [封装自己的UI组件](https://mp.weixin.qq.com/s/OfzhdCE1pxyQhk7m_UM7ZQ)\n- [web图片优化](https://mp.weixin.qq.com/s/_3rub0q6R0me_1m7KIye6w)\n- [前端缓存](https://juejin.im/post/5c22ee806fb9a049fb43b2c5)","source":"_posts/随笔/资源推荐.md","raw":"---\ntitle: 资源推荐\ncategory:\n  - 随笔\ntag:\n  - 随笔\nabbrlink: 1312\ndate: 2020-04-29 16:52:09\n---\n\n\n# 说明\n- 平时水的社区比较多，总是忘记哪些地方收藏了哪些东西，所以准备不定期的把一些自己觉得很不错的、很有价值的内容收录在这里\n- 没有标注语言的都是中文或者有中文版本\n\n<!-- more -->\n\n# 正文\n\n## 技术指南合集\n\n>前端\n- [冴羽js深入](https://github.com/mqyqingfeng/Blog)\n- [ES6入门-阮一峰](https://es6.ruanyifeng.com/)\n- [Vue技术解密](https://ustbhuangyi.github.io/vue-analysis/v2/vue-router/)\n- [MDN](https://developer.mozilla.org/zh-CN/)\n- [深入浅出webpack](https://webpack.wuhaolin.cn/)\n- [常见js考题](https://github.com/lydiahallie/javascript-questions) 英文\n- [virtual-dom学习](https://github.com/livoras/simple-virtual-dom)\n- [狼叔的如何学习nodejs](https://github.com/i5ting/How-to-learn-node-correctly)\n- [Node最佳实战](https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md) 非项目，实战规范一类\n- [AirbnbJs规范](https://github.com/airbnb/javascript)\n- [Vue原理解析](https://github.com/answershuto/learnVue)\n- [Node面试指南](https://github.com/ElemeFE/node-interview) 饿了么出品，算是自家对node工程的事的要求，可以拿来查漏补缺\n- [Node中文资料合集](https://github.com/youyudehexie/node123)\n\n>运维\n- [Linux学习指南](https://github.com/jaywcjlove/linux-command)\n- [Docker](https://yeasy.gitbooks.io/docker_practice/content/?from=groupmessage&isappinstalled=0)\n- [Nginx实战](https://github.com/jaywcjlove/nginx-tutorial)\n- [Nginx开发](http://tengine.taobao.org/book/index.html)\n\n\n>算法\n- [leetcode题解](https://github.com/labuladong/fucking-algorithm)\n- [数据结构-js版](https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md)\n\n>练习demo、第三方库等\n- [Electron模仿QQ音乐](https://github.com/SmallRuralDog/electron-vue-music)\n- [Vue开源项目合集](https://github.com/opendigg/awesome-github-vue)\n- [nuxt模仿掘金](https://github.com/xuqiang521/nuxt-ssr-demo)\n- [V-charts](https://v-charts.js.org/#/pie) 饿了么基于echarts封装的vue版\n- [Vue+koa全栈demo](https://github.com/huangwei9527/quark-h5)\n- [Hello World](https://github.com/Aniket965/Hello-world) 所有语言的helloworld\n- [React+Electron音乐客户端](https://github.com/caijinyc/Here)\n- [手绘风图表](https://github.com/timqian/chart.xkcd)\n\n>其他\n- [中华人民共和国行政区划数据](https://github.com/LittleXiaosi/Administrative-divisions-of-China)\n- [设计模式](https://www.runoob.com/design-pattern/design-pattern-tutorial.html) java版，会java语法那就没问题了，毕竟思想，和语言没啥关系\n- [设计模式](https://github.com/guanguans/design-patterns-for-humans-cn)\n- [Google面试指南](https://github.com/xitu/google-interview-university)\n- [canvas练习demo](https://github.com/bxm0927/canvas-special)\n- [Go入门指南](https://github.com/unknwon/the-way-to-go_ZH_CN)\n- [HTTP指南核心笔记](https://github.com/woai30231/http)\n\n## 技术干货文章\n- [花椒前端CICD](https://mp.weixin.qq.com/s/vViJnwy2NlCs99cBObbidg)\n- [跨域常见解决方案](https://mp.weixin.qq.com/s/OC9yEU6JasHxXH_M2b6bHA)\n- [前端架构指南](https://mp.weixin.qq.com/s/yDWm57w10lpFeq8z91-L8Q)\n- [前端性能优化](https://juejin.im/post/5e7723636fb9a07cc321675d?from=groupmessage&isappinstalled=0)\n- [前端性能优化2](https://mp.weixin.qq.com/s/PDD3GxFyYptwEl0q_XaW2g)\n- [HTTP常见面试题](https://mp.weixin.qq.com/s/FJGKObVnU61ve_ioejLrtw)\n- [手写代码的一些技巧](https://mp.weixin.qq.com/s/zEq3TbOVtG9BadUgPm1YnA)\n- [封装自己的UI组件](https://mp.weixin.qq.com/s/OfzhdCE1pxyQhk7m_UM7ZQ)\n- [web图片优化](https://mp.weixin.qq.com/s/_3rub0q6R0me_1m7KIye6w)\n- [前端缓存](https://juejin.im/post/5c22ee806fb9a049fb43b2c5)","slug":"随笔/资源推荐","published":1,"updated":"2021-12-31T12:01:59.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3b005nj7jf3hdbch0c","content":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ul>\n<li>平时水的社区比较多，总是忘记哪些地方收藏了哪些东西，所以准备不定期的把一些自己觉得很不错的、很有价值的内容收录在这里</li>\n<li>没有标注语言的都是中文或者有中文版本</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"技术指南合集\"><a href=\"#技术指南合集\" class=\"headerlink\" title=\"技术指南合集\"></a>技术指南合集</h2><blockquote>\n<p>前端</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/mqyqingfeng/Blog\">冴羽js深入</a></li>\n<li><a href=\"https://es6.ruanyifeng.com/\">ES6入门-阮一峰</a></li>\n<li><a href=\"https://ustbhuangyi.github.io/vue-analysis/v2/vue-router/\">Vue技术解密</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/\">MDN</a></li>\n<li><a href=\"https://webpack.wuhaolin.cn/\">深入浅出webpack</a></li>\n<li><a href=\"https://github.com/lydiahallie/javascript-questions\">常见js考题</a> 英文</li>\n<li><a href=\"https://github.com/livoras/simple-virtual-dom\">virtual-dom学习</a></li>\n<li><a href=\"https://github.com/i5ting/How-to-learn-node-correctly\">狼叔的如何学习nodejs</a></li>\n<li><a href=\"https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md\">Node最佳实战</a> 非项目，实战规范一类</li>\n<li><a href=\"https://github.com/airbnb/javascript\">AirbnbJs规范</a></li>\n<li><a href=\"https://github.com/answershuto/learnVue\">Vue原理解析</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview\">Node面试指南</a> 饿了么出品，算是自家对node工程的事的要求，可以拿来查漏补缺</li>\n<li><a href=\"https://github.com/youyudehexie/node123\">Node中文资料合集</a></li>\n</ul>\n<blockquote>\n<p>运维</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/linux-command\">Linux学习指南</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/content/?from=groupmessage&isappinstalled=0\">Docker</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial\">Nginx实战</a></li>\n<li><a href=\"http://tengine.taobao.org/book/index.html\">Nginx开发</a></li>\n</ul>\n<blockquote>\n<p>算法</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/labuladong/fucking-algorithm\">leetcode题解</a></li>\n<li><a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md\">数据结构-js版</a></li>\n</ul>\n<blockquote>\n<p>练习demo、第三方库等</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/SmallRuralDog/electron-vue-music\">Electron模仿QQ音乐</a></li>\n<li><a href=\"https://github.com/opendigg/awesome-github-vue\">Vue开源项目合集</a></li>\n<li><a href=\"https://github.com/xuqiang521/nuxt-ssr-demo\">nuxt模仿掘金</a></li>\n<li><a href=\"https://v-charts.js.org/#/pie\">V-charts</a> 饿了么基于echarts封装的vue版</li>\n<li><a href=\"https://github.com/huangwei9527/quark-h5\">Vue+koa全栈demo</a></li>\n<li><a href=\"https://github.com/Aniket965/Hello-world\">Hello World</a> 所有语言的helloworld</li>\n<li><a href=\"https://github.com/caijinyc/Here\">React+Electron音乐客户端</a></li>\n<li><a href=\"https://github.com/timqian/chart.xkcd\">手绘风图表</a></li>\n</ul>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/LittleXiaosi/Administrative-divisions-of-China\">中华人民共和国行政区划数据</a></li>\n<li><a href=\"https://www.runoob.com/design-pattern/design-pattern-tutorial.html\">设计模式</a> java版，会java语法那就没问题了，毕竟思想，和语言没啥关系</li>\n<li><a href=\"https://github.com/guanguans/design-patterns-for-humans-cn\">设计模式</a></li>\n<li><a href=\"https://github.com/xitu/google-interview-university\">Google面试指南</a></li>\n<li><a href=\"https://github.com/bxm0927/canvas-special\">canvas练习demo</a></li>\n<li><a href=\"https://github.com/unknwon/the-way-to-go_ZH_CN\">Go入门指南</a></li>\n<li><a href=\"https://github.com/woai30231/http\">HTTP指南核心笔记</a></li>\n</ul>\n<h2 id=\"技术干货文章\"><a href=\"#技术干货文章\" class=\"headerlink\" title=\"技术干货文章\"></a>技术干货文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/vViJnwy2NlCs99cBObbidg\">花椒前端CICD</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/OC9yEU6JasHxXH_M2b6bHA\">跨域常见解决方案</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/yDWm57w10lpFeq8z91-L8Q\">前端架构指南</a></li>\n<li><a href=\"https://juejin.im/post/5e7723636fb9a07cc321675d?from=groupmessage&isappinstalled=0\">前端性能优化</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/PDD3GxFyYptwEl0q_XaW2g\">前端性能优化2</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/FJGKObVnU61ve_ioejLrtw\">HTTP常见面试题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/zEq3TbOVtG9BadUgPm1YnA\">手写代码的一些技巧</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/OfzhdCE1pxyQhk7m_UM7ZQ\">封装自己的UI组件</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/_3rub0q6R0me_1m7KIye6w\">web图片优化</a></li>\n<li><a href=\"https://juejin.im/post/5c22ee806fb9a049fb43b2c5\">前端缓存</a></li>\n</ul>\n","site":{"data":{}},"wordcount":597,"excerpt":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ul>\n<li>平时水的社区比较多，总是忘记哪些地方收藏了哪些东西，所以准备不定期的把一些自己觉得很不错的、很有价值的内容收录在这里</li>\n<li>没有标注语言的都是中文或者有中文版本</li>\n</ul>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"技术指南合集\"><a href=\"#技术指南合集\" class=\"headerlink\" title=\"技术指南合集\"></a>技术指南合集</h2><blockquote>\n<p>前端</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/mqyqingfeng/Blog\">冴羽js深入</a></li>\n<li><a href=\"https://es6.ruanyifeng.com/\">ES6入门-阮一峰</a></li>\n<li><a href=\"https://ustbhuangyi.github.io/vue-analysis/v2/vue-router/\">Vue技术解密</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/\">MDN</a></li>\n<li><a href=\"https://webpack.wuhaolin.cn/\">深入浅出webpack</a></li>\n<li><a href=\"https://github.com/lydiahallie/javascript-questions\">常见js考题</a> 英文</li>\n<li><a href=\"https://github.com/livoras/simple-virtual-dom\">virtual-dom学习</a></li>\n<li><a href=\"https://github.com/i5ting/How-to-learn-node-correctly\">狼叔的如何学习nodejs</a></li>\n<li><a href=\"https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md\">Node最佳实战</a> 非项目，实战规范一类</li>\n<li><a href=\"https://github.com/airbnb/javascript\">AirbnbJs规范</a></li>\n<li><a href=\"https://github.com/answershuto/learnVue\">Vue原理解析</a></li>\n<li><a href=\"https://github.com/ElemeFE/node-interview\">Node面试指南</a> 饿了么出品，算是自家对node工程的事的要求，可以拿来查漏补缺</li>\n<li><a href=\"https://github.com/youyudehexie/node123\">Node中文资料合集</a></li>\n</ul>\n<blockquote>\n<p>运维</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/jaywcjlove/linux-command\">Linux学习指南</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/content/?from=groupmessage&isappinstalled=0\">Docker</a></li>\n<li><a href=\"https://github.com/jaywcjlove/nginx-tutorial\">Nginx实战</a></li>\n<li><a href=\"http://tengine.taobao.org/book/index.html\">Nginx开发</a></li>\n</ul>\n<blockquote>\n<p>算法</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/labuladong/fucking-algorithm\">leetcode题解</a></li>\n<li><a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md\">数据结构-js版</a></li>\n</ul>\n<blockquote>\n<p>练习demo、第三方库等</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/SmallRuralDog/electron-vue-music\">Electron模仿QQ音乐</a></li>\n<li><a href=\"https://github.com/opendigg/awesome-github-vue\">Vue开源项目合集</a></li>\n<li><a href=\"https://github.com/xuqiang521/nuxt-ssr-demo\">nuxt模仿掘金</a></li>\n<li><a href=\"https://v-charts.js.org/#/pie\">V-charts</a> 饿了么基于echarts封装的vue版</li>\n<li><a href=\"https://github.com/huangwei9527/quark-h5\">Vue+koa全栈demo</a></li>\n<li><a href=\"https://github.com/Aniket965/Hello-world\">Hello World</a> 所有语言的helloworld</li>\n<li><a href=\"https://github.com/caijinyc/Here\">React+Electron音乐客户端</a></li>\n<li><a href=\"https://github.com/timqian/chart.xkcd\">手绘风图表</a></li>\n</ul>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/LittleXiaosi/Administrative-divisions-of-China\">中华人民共和国行政区划数据</a></li>\n<li><a href=\"https://www.runoob.com/design-pattern/design-pattern-tutorial.html\">设计模式</a> java版，会java语法那就没问题了，毕竟思想，和语言没啥关系</li>\n<li><a href=\"https://github.com/guanguans/design-patterns-for-humans-cn\">设计模式</a></li>\n<li><a href=\"https://github.com/xitu/google-interview-university\">Google面试指南</a></li>\n<li><a href=\"https://github.com/bxm0927/canvas-special\">canvas练习demo</a></li>\n<li><a href=\"https://github.com/unknwon/the-way-to-go_ZH_CN\">Go入门指南</a></li>\n<li><a href=\"https://github.com/woai30231/http\">HTTP指南核心笔记</a></li>\n</ul>\n<h2 id=\"技术干货文章\"><a href=\"#技术干货文章\" class=\"headerlink\" title=\"技术干货文章\"></a>技术干货文章</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/vViJnwy2NlCs99cBObbidg\">花椒前端CICD</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/OC9yEU6JasHxXH_M2b6bHA\">跨域常见解决方案</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/yDWm57w10lpFeq8z91-L8Q\">前端架构指南</a></li>\n<li><a href=\"https://juejin.im/post/5e7723636fb9a07cc321675d?from=groupmessage&isappinstalled=0\">前端性能优化</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/PDD3GxFyYptwEl0q_XaW2g\">前端性能优化2</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/FJGKObVnU61ve_ioejLrtw\">HTTP常见面试题</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/zEq3TbOVtG9BadUgPm1YnA\">手写代码的一些技巧</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/OfzhdCE1pxyQhk7m_UM7ZQ\">封装自己的UI组件</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/_3rub0q6R0me_1m7KIye6w\">web图片优化</a></li>\n<li><a href=\"https://juejin.im/post/5c22ee806fb9a049fb43b2c5\">前端缓存</a></li>\n</ul>"},{"title":"软件著作权申请","abbrlink":26928,"date":"2020-08-31T02:52:15.000Z","_content":"\n# 简述\n关于申请这个证书的原因是因为学校说申请后就可以不用写毕业论文和参加毕业答辩，然后恰巧当时答辩写了一套前后端都有的带管理系统的webapp；索性就查了查相关信息，就去申请了，刚才（2020-8-31：10:30）看到已经制证发证完成只需要等待快递送到就行；所以来记录一下相关流程。\n<!-- more -->\n\n###  个人情况概述\n- 首先贴一下我当时申请时候参考的教程链接：[链接](https://zhuanlan.zhihu.com/p/72729628)\n- 因为帖子内容很久远了，后来他们对系统进行了升级，所以只记录一些和帖子不一样的地方\n- 关于软件著作权，指的是对申请的软件的内容（具体代码等）保护；需要区分和专利的区别，专利是对软件构思（可以理解成功能）的保护\n- 申请时间是从7-10申请到8-27状态显示制证发证\n\n- ![](http://img.shuaxindiary.cn/zhuzuoquan.png)\n\n# 流程\n**改版后选择板块不太一样，其他流程需要的材料都是一致的**\n- 去官网注册账号：[官网](https://register.ccopyright.com.cn/registration.html#/registerSoft)\n- 登陆后，如果没在软件登记页，点击头部的软件登记按钮，如下图（实名认证完成后也是回到该页）\n- ![](http://img.shuaxindiary.cn/zhuzuoquan2.png)\n- 到该页后选择下图选项，第一次登陆，会提示你去实名认证，选择个人就好；审核需要3个工作日。\n- ![](http://img.shuaxindiary.cn/zhuzuoquan3.png)\n- 剩下的就和链接的差不多；按着操作即可\n\n\n","source":"_posts/随笔/软件著作权申请.md","raw":"---\ntitle: 软件著作权申请\ncategory:\n  - 随笔\ntag:\n  - 总结\nabbrlink: 26928\ndate: 2020-08-31 10:52:15\n---\n\n# 简述\n关于申请这个证书的原因是因为学校说申请后就可以不用写毕业论文和参加毕业答辩，然后恰巧当时答辩写了一套前后端都有的带管理系统的webapp；索性就查了查相关信息，就去申请了，刚才（2020-8-31：10:30）看到已经制证发证完成只需要等待快递送到就行；所以来记录一下相关流程。\n<!-- more -->\n\n###  个人情况概述\n- 首先贴一下我当时申请时候参考的教程链接：[链接](https://zhuanlan.zhihu.com/p/72729628)\n- 因为帖子内容很久远了，后来他们对系统进行了升级，所以只记录一些和帖子不一样的地方\n- 关于软件著作权，指的是对申请的软件的内容（具体代码等）保护；需要区分和专利的区别，专利是对软件构思（可以理解成功能）的保护\n- 申请时间是从7-10申请到8-27状态显示制证发证\n\n- ![](http://img.shuaxindiary.cn/zhuzuoquan.png)\n\n# 流程\n**改版后选择板块不太一样，其他流程需要的材料都是一致的**\n- 去官网注册账号：[官网](https://register.ccopyright.com.cn/registration.html#/registerSoft)\n- 登陆后，如果没在软件登记页，点击头部的软件登记按钮，如下图（实名认证完成后也是回到该页）\n- ![](http://img.shuaxindiary.cn/zhuzuoquan2.png)\n- 到该页后选择下图选项，第一次登陆，会提示你去实名认证，选择个人就好；审核需要3个工作日。\n- ![](http://img.shuaxindiary.cn/zhuzuoquan3.png)\n- 剩下的就和链接的差不多；按着操作即可\n\n\n","slug":"随笔/软件著作权申请","published":1,"updated":"2021-12-31T12:01:59.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3b005pj7jfh3r9g495","content":"<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>关于申请这个证书的原因是因为学校说申请后就可以不用写毕业论文和参加毕业答辩，然后恰巧当时答辩写了一套前后端都有的带管理系统的webapp；索性就查了查相关信息，就去申请了，刚才（2020-8-31：10:30）看到已经制证发证完成只需要等待快递送到就行；所以来记录一下相关流程。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"个人情况概述\"><a href=\"#个人情况概述\" class=\"headerlink\" title=\"个人情况概述\"></a>个人情况概述</h3><ul>\n<li><p>首先贴一下我当时申请时候参考的教程链接：<a href=\"https://zhuanlan.zhihu.com/p/72729628\">链接</a></p>\n</li>\n<li><p>因为帖子内容很久远了，后来他们对系统进行了升级，所以只记录一些和帖子不一样的地方</p>\n</li>\n<li><p>关于软件著作权，指的是对申请的软件的内容（具体代码等）保护；需要区分和专利的区别，专利是对软件构思（可以理解成功能）的保护</p>\n</li>\n<li><p>申请时间是从7-10申请到8-27状态显示制证发证</p>\n</li>\n<li><p><img src=\"http://img.shuaxindiary.cn/zhuzuoquan.png\"></p>\n</li>\n</ul>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><p><strong>改版后选择板块不太一样，其他流程需要的材料都是一致的</strong></p>\n<ul>\n<li>去官网注册账号：<a href=\"https://register.ccopyright.com.cn/registration.html#/registerSoft\">官网</a></li>\n<li>登陆后，如果没在软件登记页，点击头部的软件登记按钮，如下图（实名认证完成后也是回到该页）</li>\n<li><img src=\"http://img.shuaxindiary.cn/zhuzuoquan2.png\"></li>\n<li>到该页后选择下图选项，第一次登陆，会提示你去实名认证，选择个人就好；审核需要3个工作日。</li>\n<li><img src=\"http://img.shuaxindiary.cn/zhuzuoquan3.png\"></li>\n<li>剩下的就和链接的差不多；按着操作即可</li>\n</ul>\n","site":{"data":{}},"wordcount":439,"excerpt":"<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>关于申请这个证书的原因是因为学校说申请后就可以不用写毕业论文和参加毕业答辩，然后恰巧当时答辩写了一套前后端都有的带管理系统的webapp；索性就查了查相关信息，就去申请了，刚才（2020-8-31：10:30）看到已经制证发证完成只需要等待快递送到就行；所以来记录一下相关流程。</p>","more":"<h3 id=\"个人情况概述\"><a href=\"#个人情况概述\" class=\"headerlink\" title=\"个人情况概述\"></a>个人情况概述</h3><ul>\n<li><p>首先贴一下我当时申请时候参考的教程链接：<a href=\"https://zhuanlan.zhihu.com/p/72729628\">链接</a></p>\n</li>\n<li><p>因为帖子内容很久远了，后来他们对系统进行了升级，所以只记录一些和帖子不一样的地方</p>\n</li>\n<li><p>关于软件著作权，指的是对申请的软件的内容（具体代码等）保护；需要区分和专利的区别，专利是对软件构思（可以理解成功能）的保护</p>\n</li>\n<li><p>申请时间是从7-10申请到8-27状态显示制证发证</p>\n</li>\n<li><p><img src=\"http://img.shuaxindiary.cn/zhuzuoquan.png\"></p>\n</li>\n</ul>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><p><strong>改版后选择板块不太一样，其他流程需要的材料都是一致的</strong></p>\n<ul>\n<li>去官网注册账号：<a href=\"https://register.ccopyright.com.cn/registration.html#/registerSoft\">官网</a></li>\n<li>登陆后，如果没在软件登记页，点击头部的软件登记按钮，如下图（实名认证完成后也是回到该页）</li>\n<li><img src=\"http://img.shuaxindiary.cn/zhuzuoquan2.png\"></li>\n<li>到该页后选择下图选项，第一次登陆，会提示你去实名认证，选择个人就好；审核需要3个工作日。</li>\n<li><img src=\"http://img.shuaxindiary.cn/zhuzuoquan3.png\"></li>\n<li>剩下的就和链接的差不多；按着操作即可</li>\n</ul>"},{"title":"近期总结","abbrlink":36199,"date":"2020-05-21T14:02:07.000Z","_content":"\n# 写在前面\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今年真的很不平凡，因为疫情，开学推迟、假期延长，在家待的时间变的非常长（19-12-26到家，现在2020-5-21），但是虽然这样说，这小半年的在家时间，也还是经历了很多事情，家里的一些事、春招、自己的一些反思等等，所以想着就借这次机会开始慢慢的学习写写阶段性的总结\n<!-- more -->\n# 关于疫情\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从发生，到爆发，到现在慢慢可控；还是觉得很不真实，我们这代人（90后晚期）从小到大都在很和平很美好的生活环境下长大，如果要说经历过什么类似这样的大事情，可能就是非典、汶川大地震，但是碍于当时年龄很小，对事情的严重性和记忆非常模糊；所以对这些事情总觉得离自己很遥远，是电视、书里才会发生的；可是生活就是这么戏剧性，在自己开始慢慢成熟、懂事即将进入社会的时候，被生活上了一课；再次为那些逝世的同胞默哀，向那些为此次事件奔波的工作人员致敬\n# 关于kobe去世\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这个消息，是我醒来看到非常多朋友发来的微信，然后知道的；其实我并不是科密，在我开始看球的那几年，有一段时间我还是科黑，因为周围太多人喜欢他，太多人吹他，因为他太过冷血，对自己，对队友，我就越发的不喜欢他，因为我是一个比较喜欢和和气气的人，所以每次看见他和自己心仪的球队对阵时，他投进一球，领先一分，我都会咬牙切齿的口吐芬芳；对他态度的转变是在他退役的那一年，看到了关于他的一部纪录片《muse》\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;《muse》里了解到了他是如何维持自己的竞技状态，是怎么坚持数十年如一日的去训练，怎么在伤病困扰下调整自己的状态；这些都是我不曾了解到的，尤其在自己面对同样的一些处境的时候，才越发的体会到他的伟大；极强的自律和对达成目标的强烈渴望，造就了他不平凡的职业生涯，RIP\n\n# 关于博客\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个博客是在自己的第一份实习结束的时候搭起来的，一开始就是抱着记录一些自己的学习笔记，然后可以在面试的成为一个加分点；非常结果导向型的一个目的；所以导致更新真的很不频繁，百般不情愿；但是这回春招的经历和这段时间学习过程让我对写博客这件事有了不一样的看法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先就是对内容这块，因为平时无论哪里看到的技术博客，都非常的正式、教程导向；所以就导致自己无形中觉得博客就得这样写，虽然这样也没错，毕竟是要发布在网络上会有人浏览到，所以肯定不能胡扯；但是最核心的目的应该还是记录自己学习的心得和过程，严谨保证记录的东西没有错误，风格其实可以更多元化一点，可以是很简短的经历描述自己踩坑的一点经验或者对一些技术点的认识；只要是自己的收货即可；再者就是自己本身也一直想培养一个记录的习惯，可以记录自己各个阶段的一个思考的状态，也可以锻炼一下自己的语言文字总结能力等等\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;希望接下来的半年乃至以后，可以一直保持好这个习惯\n# 关于春招\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次春招投递了腾讯的前端实习，然后前后算上提前批一共面试了3次；最后都gg了，其实有点受打击，但是调整过来后，觉得收获还是很多；\n\n>***感受***\n对这几次面试的感受还是很不错，面试官都很nice，过程中会对没有思路的地方进行一些引导，然后来进行提问；也会对不知道的地方进行一些说明，所以整体的感受还是很奈斯，只怪自己太菜，有很多地方都一知半解\n\n>***反思***\n- 之前就听过大厂面试造火箭，这种说法；所以在一开始也有点畏惧，导致第一次面试的时候很紧张，自己知道的问题都回答的非常糟糕；后面调整好状态后，相对第一次还是好不少\n- 关于造火箭这里，我觉得其实也没那么夸张，问的东西都是非常基础，只是这个基础可能范围比较广和深，但是这些东西都是自己平时可以看到学到查到的东西，不像社招的一些经验是必须去实战一定规模的项目，参与进去才会体会到的，所以我觉得整体还是很基础，只是之前自己的学习习惯有些问题，导致面试结果不是很理想\n- 关于学习习惯这里，确实在一开始自己对技术的学习只停留在api使用，达到效果即可；浅尝辄止，经不住推敲就是现在自己的状态，所以还是很感谢这次面试，让自己意识到了自己的问题，可以让自己再接下来秋招的准备中去更正\n\n# 最后\n距离秋招还有接近四个月多的时间，准备接下来调整好节奏，开始好好准备，奥利给！\n\n","source":"_posts/随笔/近期总结.md","raw":"---\ntitle: 近期总结\ncategory:\n  - 随笔\ntag:\n  - 总结\nabbrlink: 36199\ndate: 2020-05-21 22:02:07\n---\n\n# 写在前面\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今年真的很不平凡，因为疫情，开学推迟、假期延长，在家待的时间变的非常长（19-12-26到家，现在2020-5-21），但是虽然这样说，这小半年的在家时间，也还是经历了很多事情，家里的一些事、春招、自己的一些反思等等，所以想着就借这次机会开始慢慢的学习写写阶段性的总结\n<!-- more -->\n# 关于疫情\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从发生，到爆发，到现在慢慢可控；还是觉得很不真实，我们这代人（90后晚期）从小到大都在很和平很美好的生活环境下长大，如果要说经历过什么类似这样的大事情，可能就是非典、汶川大地震，但是碍于当时年龄很小，对事情的严重性和记忆非常模糊；所以对这些事情总觉得离自己很遥远，是电视、书里才会发生的；可是生活就是这么戏剧性，在自己开始慢慢成熟、懂事即将进入社会的时候，被生活上了一课；再次为那些逝世的同胞默哀，向那些为此次事件奔波的工作人员致敬\n# 关于kobe去世\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这个消息，是我醒来看到非常多朋友发来的微信，然后知道的；其实我并不是科密，在我开始看球的那几年，有一段时间我还是科黑，因为周围太多人喜欢他，太多人吹他，因为他太过冷血，对自己，对队友，我就越发的不喜欢他，因为我是一个比较喜欢和和气气的人，所以每次看见他和自己心仪的球队对阵时，他投进一球，领先一分，我都会咬牙切齿的口吐芬芳；对他态度的转变是在他退役的那一年，看到了关于他的一部纪录片《muse》\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;《muse》里了解到了他是如何维持自己的竞技状态，是怎么坚持数十年如一日的去训练，怎么在伤病困扰下调整自己的状态；这些都是我不曾了解到的，尤其在自己面对同样的一些处境的时候，才越发的体会到他的伟大；极强的自律和对达成目标的强烈渴望，造就了他不平凡的职业生涯，RIP\n\n# 关于博客\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个博客是在自己的第一份实习结束的时候搭起来的，一开始就是抱着记录一些自己的学习笔记，然后可以在面试的成为一个加分点；非常结果导向型的一个目的；所以导致更新真的很不频繁，百般不情愿；但是这回春招的经历和这段时间学习过程让我对写博客这件事有了不一样的看法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先就是对内容这块，因为平时无论哪里看到的技术博客，都非常的正式、教程导向；所以就导致自己无形中觉得博客就得这样写，虽然这样也没错，毕竟是要发布在网络上会有人浏览到，所以肯定不能胡扯；但是最核心的目的应该还是记录自己学习的心得和过程，严谨保证记录的东西没有错误，风格其实可以更多元化一点，可以是很简短的经历描述自己踩坑的一点经验或者对一些技术点的认识；只要是自己的收货即可；再者就是自己本身也一直想培养一个记录的习惯，可以记录自己各个阶段的一个思考的状态，也可以锻炼一下自己的语言文字总结能力等等\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;希望接下来的半年乃至以后，可以一直保持好这个习惯\n# 关于春招\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次春招投递了腾讯的前端实习，然后前后算上提前批一共面试了3次；最后都gg了，其实有点受打击，但是调整过来后，觉得收获还是很多；\n\n>***感受***\n对这几次面试的感受还是很不错，面试官都很nice，过程中会对没有思路的地方进行一些引导，然后来进行提问；也会对不知道的地方进行一些说明，所以整体的感受还是很奈斯，只怪自己太菜，有很多地方都一知半解\n\n>***反思***\n- 之前就听过大厂面试造火箭，这种说法；所以在一开始也有点畏惧，导致第一次面试的时候很紧张，自己知道的问题都回答的非常糟糕；后面调整好状态后，相对第一次还是好不少\n- 关于造火箭这里，我觉得其实也没那么夸张，问的东西都是非常基础，只是这个基础可能范围比较广和深，但是这些东西都是自己平时可以看到学到查到的东西，不像社招的一些经验是必须去实战一定规模的项目，参与进去才会体会到的，所以我觉得整体还是很基础，只是之前自己的学习习惯有些问题，导致面试结果不是很理想\n- 关于学习习惯这里，确实在一开始自己对技术的学习只停留在api使用，达到效果即可；浅尝辄止，经不住推敲就是现在自己的状态，所以还是很感谢这次面试，让自己意识到了自己的问题，可以让自己再接下来秋招的准备中去更正\n\n# 最后\n距离秋招还有接近四个月多的时间，准备接下来调整好节奏，开始好好准备，奥利给！\n\n","slug":"随笔/近期总结","published":1,"updated":"2021-12-31T12:01:59.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3b005sj7jfdryv1kzy","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今年真的很不平凡，因为疫情，开学推迟、假期延长，在家待的时间变的非常长（19-12-26到家，现在2020-5-21），但是虽然这样说，这小半年的在家时间，也还是经历了很多事情，家里的一些事、春招、自己的一些反思等等，所以想着就借这次机会开始慢慢的学习写写阶段性的总结</p>\n<a id=\"more\"></a>\n<h1 id=\"关于疫情\"><a href=\"#关于疫情\" class=\"headerlink\" title=\"关于疫情\"></a>关于疫情</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从发生，到爆发，到现在慢慢可控；还是觉得很不真实，我们这代人（90后晚期）从小到大都在很和平很美好的生活环境下长大，如果要说经历过什么类似这样的大事情，可能就是非典、汶川大地震，但是碍于当时年龄很小，对事情的严重性和记忆非常模糊；所以对这些事情总觉得离自己很遥远，是电视、书里才会发生的；可是生活就是这么戏剧性，在自己开始慢慢成熟、懂事即将进入社会的时候，被生活上了一课；再次为那些逝世的同胞默哀，向那些为此次事件奔波的工作人员致敬</p>\n<h1 id=\"关于kobe去世\"><a href=\"#关于kobe去世\" class=\"headerlink\" title=\"关于kobe去世\"></a>关于kobe去世</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这个消息，是我醒来看到非常多朋友发来的微信，然后知道的；其实我并不是科密，在我开始看球的那几年，有一段时间我还是科黑，因为周围太多人喜欢他，太多人吹他，因为他太过冷血，对自己，对队友，我就越发的不喜欢他，因为我是一个比较喜欢和和气气的人，所以每次看见他和自己心仪的球队对阵时，他投进一球，领先一分，我都会咬牙切齿的口吐芬芳；对他态度的转变是在他退役的那一年，看到了关于他的一部纪录片《muse》<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;《muse》里了解到了他是如何维持自己的竞技状态，是怎么坚持数十年如一日的去训练，怎么在伤病困扰下调整自己的状态；这些都是我不曾了解到的，尤其在自己面对同样的一些处境的时候，才越发的体会到他的伟大；极强的自律和对达成目标的强烈渴望，造就了他不平凡的职业生涯，RIP</p>\n<h1 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个博客是在自己的第一份实习结束的时候搭起来的，一开始就是抱着记录一些自己的学习笔记，然后可以在面试的成为一个加分点；非常结果导向型的一个目的；所以导致更新真的很不频繁，百般不情愿；但是这回春招的经历和这段时间学习过程让我对写博客这件事有了不一样的看法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先就是对内容这块，因为平时无论哪里看到的技术博客，都非常的正式、教程导向；所以就导致自己无形中觉得博客就得这样写，虽然这样也没错，毕竟是要发布在网络上会有人浏览到，所以肯定不能胡扯；但是最核心的目的应该还是记录自己学习的心得和过程，严谨保证记录的东西没有错误，风格其实可以更多元化一点，可以是很简短的经历描述自己踩坑的一点经验或者对一些技术点的认识；只要是自己的收货即可；再者就是自己本身也一直想培养一个记录的习惯，可以记录自己各个阶段的一个思考的状态，也可以锻炼一下自己的语言文字总结能力等等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;希望接下来的半年乃至以后，可以一直保持好这个习惯</p>\n<h1 id=\"关于春招\"><a href=\"#关于春招\" class=\"headerlink\" title=\"关于春招\"></a>关于春招</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次春招投递了腾讯的前端实习，然后前后算上提前批一共面试了3次；最后都gg了，其实有点受打击，但是调整过来后，觉得收获还是很多；</p>\n<blockquote>\n<p><strong><em>感受</em></strong><br>对这几次面试的感受还是很不错，面试官都很nice，过程中会对没有思路的地方进行一些引导，然后来进行提问；也会对不知道的地方进行一些说明，所以整体的感受还是很奈斯，只怪自己太菜，有很多地方都一知半解</p>\n</blockquote>\n<blockquote>\n<p><strong><em>反思</em></strong></p>\n</blockquote>\n<ul>\n<li>之前就听过大厂面试造火箭，这种说法；所以在一开始也有点畏惧，导致第一次面试的时候很紧张，自己知道的问题都回答的非常糟糕；后面调整好状态后，相对第一次还是好不少</li>\n<li>关于造火箭这里，我觉得其实也没那么夸张，问的东西都是非常基础，只是这个基础可能范围比较广和深，但是这些东西都是自己平时可以看到学到查到的东西，不像社招的一些经验是必须去实战一定规模的项目，参与进去才会体会到的，所以我觉得整体还是很基础，只是之前自己的学习习惯有些问题，导致面试结果不是很理想</li>\n<li>关于学习习惯这里，确实在一开始自己对技术的学习只停留在api使用，达到效果即可；浅尝辄止，经不住推敲就是现在自己的状态，所以还是很感谢这次面试，让自己意识到了自己的问题，可以让自己再接下来秋招的准备中去更正</li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>距离秋招还有接近四个月多的时间，准备接下来调整好节奏，开始好好准备，奥利给！</p>\n","site":{"data":{}},"wordcount":2020,"excerpt":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今年真的很不平凡，因为疫情，开学推迟、假期延长，在家待的时间变的非常长（19-12-26到家，现在2020-5-21），但是虽然这样说，这小半年的在家时间，也还是经历了很多事情，家里的一些事、春招、自己的一些反思等等，所以想着就借这次机会开始慢慢的学习写写阶段性的总结</p>","more":"<h1 id=\"关于疫情\"><a href=\"#关于疫情\" class=\"headerlink\" title=\"关于疫情\"></a>关于疫情</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从发生，到爆发，到现在慢慢可控；还是觉得很不真实，我们这代人（90后晚期）从小到大都在很和平很美好的生活环境下长大，如果要说经历过什么类似这样的大事情，可能就是非典、汶川大地震，但是碍于当时年龄很小，对事情的严重性和记忆非常模糊；所以对这些事情总觉得离自己很遥远，是电视、书里才会发生的；可是生活就是这么戏剧性，在自己开始慢慢成熟、懂事即将进入社会的时候，被生活上了一课；再次为那些逝世的同胞默哀，向那些为此次事件奔波的工作人员致敬</p>\n<h1 id=\"关于kobe去世\"><a href=\"#关于kobe去世\" class=\"headerlink\" title=\"关于kobe去世\"></a>关于kobe去世</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;知道这个消息，是我醒来看到非常多朋友发来的微信，然后知道的；其实我并不是科密，在我开始看球的那几年，有一段时间我还是科黑，因为周围太多人喜欢他，太多人吹他，因为他太过冷血，对自己，对队友，我就越发的不喜欢他，因为我是一个比较喜欢和和气气的人，所以每次看见他和自己心仪的球队对阵时，他投进一球，领先一分，我都会咬牙切齿的口吐芬芳；对他态度的转变是在他退役的那一年，看到了关于他的一部纪录片《muse》<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;《muse》里了解到了他是如何维持自己的竞技状态，是怎么坚持数十年如一日的去训练，怎么在伤病困扰下调整自己的状态；这些都是我不曾了解到的，尤其在自己面对同样的一些处境的时候，才越发的体会到他的伟大；极强的自律和对达成目标的强烈渴望，造就了他不平凡的职业生涯，RIP</p>\n<h1 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个博客是在自己的第一份实习结束的时候搭起来的，一开始就是抱着记录一些自己的学习笔记，然后可以在面试的成为一个加分点；非常结果导向型的一个目的；所以导致更新真的很不频繁，百般不情愿；但是这回春招的经历和这段时间学习过程让我对写博客这件事有了不一样的看法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先就是对内容这块，因为平时无论哪里看到的技术博客，都非常的正式、教程导向；所以就导致自己无形中觉得博客就得这样写，虽然这样也没错，毕竟是要发布在网络上会有人浏览到，所以肯定不能胡扯；但是最核心的目的应该还是记录自己学习的心得和过程，严谨保证记录的东西没有错误，风格其实可以更多元化一点，可以是很简短的经历描述自己踩坑的一点经验或者对一些技术点的认识；只要是自己的收货即可；再者就是自己本身也一直想培养一个记录的习惯，可以记录自己各个阶段的一个思考的状态，也可以锻炼一下自己的语言文字总结能力等等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;希望接下来的半年乃至以后，可以一直保持好这个习惯</p>\n<h1 id=\"关于春招\"><a href=\"#关于春招\" class=\"headerlink\" title=\"关于春招\"></a>关于春招</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这次春招投递了腾讯的前端实习，然后前后算上提前批一共面试了3次；最后都gg了，其实有点受打击，但是调整过来后，觉得收获还是很多；</p>\n<blockquote>\n<p><strong><em>感受</em></strong><br>对这几次面试的感受还是很不错，面试官都很nice，过程中会对没有思路的地方进行一些引导，然后来进行提问；也会对不知道的地方进行一些说明，所以整体的感受还是很奈斯，只怪自己太菜，有很多地方都一知半解</p>\n</blockquote>\n<blockquote>\n<p><strong><em>反思</em></strong></p>\n</blockquote>\n<ul>\n<li>之前就听过大厂面试造火箭，这种说法；所以在一开始也有点畏惧，导致第一次面试的时候很紧张，自己知道的问题都回答的非常糟糕；后面调整好状态后，相对第一次还是好不少</li>\n<li>关于造火箭这里，我觉得其实也没那么夸张，问的东西都是非常基础，只是这个基础可能范围比较广和深，但是这些东西都是自己平时可以看到学到查到的东西，不像社招的一些经验是必须去实战一定规模的项目，参与进去才会体会到的，所以我觉得整体还是很基础，只是之前自己的学习习惯有些问题，导致面试结果不是很理想</li>\n<li>关于学习习惯这里，确实在一开始自己对技术的学习只停留在api使用，达到效果即可；浅尝辄止，经不住推敲就是现在自己的状态，所以还是很感谢这次面试，让自己意识到了自己的问题，可以让自己再接下来秋招的准备中去更正</li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>距离秋招还有接近四个月多的时间，准备接下来调整好节奏，开始好好准备，奥利给！</p>"},{"title":"工作漂流","date":"2020-11-29T03:48:57.000Z","_content":"\n# 新坑\n\n学校的事情几乎就剩下走流程等待着毕业拿证了，工作的事情也在实习的公司顺利拿到了转正的机会；工作的环境也慢慢开始适应，因为工作性质导致的每天还是会有零散的一些时间可以支配，于是开始准备重新规律的拾起读书的习惯，顺带的简单的记录一些读书笔记\n\n<!-- more -->\n\n# 关于本书\n\n- 书名：《工作漂流》\n- 出版社：上海译文出版社\n- 作者：稻泉连\n- 译者：窦心浩-谭婉心\n\n# 读后感\n\n- 反正都要去工作，不如找份喜欢的工作，让满足基本生活的前提下，赋予一点其他的含义，自己也充实一点\n- 学习本身没有什么意义，有意义的是让你开始学习的那件事，以及这个过程中带给你的收货\n\n# 一些摘录\n\n| ![](https://img.shuaxindiary.cn/book_note1.jpg_20201129115117.jpg) | ![](https://img.shuaxindiary.cn/book_note2.jpg_20201129115109.jpg) |\n| ---------------------------------------------------------- | ---------------------------------------------------------- |\n| ![](https://img.shuaxindiary.cn/book_note3.jpg_20201129115121.jpg) | ![](https://img.shuaxindiary.cn/book_note4.jpg_20201129115124.jpg) |\n\n","source":"_posts/读书笔记/工作漂流.md","raw":"---\ntitle: 工作漂流\ndate: 2020-11-29 11:48:57\ncategory:\n    - 读书笔记\ntags:\n    - 读书笔记\n    - 日本文学\n---\n\n# 新坑\n\n学校的事情几乎就剩下走流程等待着毕业拿证了，工作的事情也在实习的公司顺利拿到了转正的机会；工作的环境也慢慢开始适应，因为工作性质导致的每天还是会有零散的一些时间可以支配，于是开始准备重新规律的拾起读书的习惯，顺带的简单的记录一些读书笔记\n\n<!-- more -->\n\n# 关于本书\n\n- 书名：《工作漂流》\n- 出版社：上海译文出版社\n- 作者：稻泉连\n- 译者：窦心浩-谭婉心\n\n# 读后感\n\n- 反正都要去工作，不如找份喜欢的工作，让满足基本生活的前提下，赋予一点其他的含义，自己也充实一点\n- 学习本身没有什么意义，有意义的是让你开始学习的那件事，以及这个过程中带给你的收货\n\n# 一些摘录\n\n| ![](https://img.shuaxindiary.cn/book_note1.jpg_20201129115117.jpg) | ![](https://img.shuaxindiary.cn/book_note2.jpg_20201129115109.jpg) |\n| ---------------------------------------------------------- | ---------------------------------------------------------- |\n| ![](https://img.shuaxindiary.cn/book_note3.jpg_20201129115121.jpg) | ![](https://img.shuaxindiary.cn/book_note4.jpg_20201129115124.jpg) |\n\n","slug":"读书笔记/工作漂流","published":1,"updated":"2021-12-31T12:01:59.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3t0061j7jf7341c2n4","content":"<h1 id=\"新坑\"><a href=\"#新坑\" class=\"headerlink\" title=\"新坑\"></a>新坑</h1><p>学校的事情几乎就剩下走流程等待着毕业拿证了，工作的事情也在实习的公司顺利拿到了转正的机会；工作的环境也慢慢开始适应，因为工作性质导致的每天还是会有零散的一些时间可以支配，于是开始准备重新规律的拾起读书的习惯，顺带的简单的记录一些读书笔记</p>\n<a id=\"more\"></a>\n\n<h1 id=\"关于本书\"><a href=\"#关于本书\" class=\"headerlink\" title=\"关于本书\"></a>关于本书</h1><ul>\n<li>书名：《工作漂流》</li>\n<li>出版社：上海译文出版社</li>\n<li>作者：稻泉连</li>\n<li>译者：窦心浩-谭婉心</li>\n</ul>\n<h1 id=\"读后感\"><a href=\"#读后感\" class=\"headerlink\" title=\"读后感\"></a>读后感</h1><ul>\n<li>反正都要去工作，不如找份喜欢的工作，让满足基本生活的前提下，赋予一点其他的含义，自己也充实一点</li>\n<li>学习本身没有什么意义，有意义的是让你开始学习的那件事，以及这个过程中带给你的收货</li>\n</ul>\n<h1 id=\"一些摘录\"><a href=\"#一些摘录\" class=\"headerlink\" title=\"一些摘录\"></a>一些摘录</h1><table>\n<thead>\n<tr>\n<th><img src=\"https://img.shuaxindiary.cn/book_note1.jpg_20201129115117.jpg\"></th>\n<th><img src=\"https://img.shuaxindiary.cn/book_note2.jpg_20201129115109.jpg\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://img.shuaxindiary.cn/book_note3.jpg_20201129115121.jpg\"></td>\n<td><img src=\"https://img.shuaxindiary.cn/book_note4.jpg_20201129115124.jpg\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"wordcount":254,"excerpt":"<h1 id=\"新坑\"><a href=\"#新坑\" class=\"headerlink\" title=\"新坑\"></a>新坑</h1><p>学校的事情几乎就剩下走流程等待着毕业拿证了，工作的事情也在实习的公司顺利拿到了转正的机会；工作的环境也慢慢开始适应，因为工作性质导致的每天还是会有零散的一些时间可以支配，于是开始准备重新规律的拾起读书的习惯，顺带的简单的记录一些读书笔记</p>","more":"<h1 id=\"关于本书\"><a href=\"#关于本书\" class=\"headerlink\" title=\"关于本书\"></a>关于本书</h1><ul>\n<li>书名：《工作漂流》</li>\n<li>出版社：上海译文出版社</li>\n<li>作者：稻泉连</li>\n<li>译者：窦心浩-谭婉心</li>\n</ul>\n<h1 id=\"读后感\"><a href=\"#读后感\" class=\"headerlink\" title=\"读后感\"></a>读后感</h1><ul>\n<li>反正都要去工作，不如找份喜欢的工作，让满足基本生活的前提下，赋予一点其他的含义，自己也充实一点</li>\n<li>学习本身没有什么意义，有意义的是让你开始学习的那件事，以及这个过程中带给你的收货</li>\n</ul>\n<h1 id=\"一些摘录\"><a href=\"#一些摘录\" class=\"headerlink\" title=\"一些摘录\"></a>一些摘录</h1><table>\n<thead>\n<tr>\n<th><img src=\"https://img.shuaxindiary.cn/book_note1.jpg_20201129115117.jpg\"></th>\n<th><img src=\"https://img.shuaxindiary.cn/book_note2.jpg_20201129115109.jpg\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://img.shuaxindiary.cn/book_note3.jpg_20201129115121.jpg\"></td>\n<td><img src=\"https://img.shuaxindiary.cn/book_note4.jpg_20201129115124.jpg\"></td>\n</tr>\n</tbody></table>"},{"title":"http协议学习笔记","abbrlink":39553,"date":"2019-11-28T02:53:09.000Z","_content":"\n# 关于HTTP协议\n位于网络协议7层(如下图)中的应用层，主要用来进行客户端和服务按数据交互。\n![OSI七层模型](/img/url4.jfif)\n<!-- more -->\n# 为什么用它呢\n因为简单、灵活、无状态。\n- 简单：只需要通过请求方法请求资源路径即可\n- 灵活：传输数据类型可以是任意类型\n- 无状态：链接只负责数据交互，不进行保存，所以彼此间不存在依赖，比较简单明了。当然是有好处，但是也导致了需要做一些请求验证时，就需要使用一些其他的手段，比如session、token。\n\n\n# 关于HTTP协议的版本的内容(就写了自己知道的=.=，毕竟东西太多了[我太菜了])\n\n### 0.9版本\n- 只有GET一个请求方法\n- 没有header等描述数据的信息\n- 为短连接，当服务器发送完毕数据后，就关闭TCP通道。\n\n### 1.0版本\n- 增加了很多请求方法(POST等)\n- 怎么加了状态码和header等描述数据的信息\n- 有了If-Modified-Since,Expires处理缓存\n\n\n### 1.1版本(现在使用)\n- 增加了持续链接！重点！\n- 增加host域，可以在同一台服务器，跑多个web服务\n- 增加了更多的缓存处理策略，如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等\n\n### 未来---2.0版本\n- 所有数据都以2进制传递\n- 支持同一通道的多有请求，同时发送，1.1中。可以开多个TCP通道，但每个通道上的请求，一次一个，需要按照顺序进行发送\n- 支持服务端向客户端推送消息等\n\n# HTTP协议的组成\n![OSI七层模型](/img/url5.png)\nHTTP有请求和响应报文两种类型，但是组成部分如图所示，都是有三部分组成\n>1.起始行，一般由一下三部分构成,空格隔开每一部分；通过换行和首部隔开。\n- 请求地址\n- 请求的方法(methods)，有GET/POST/DELETE/PUT/HEAD\n- http协议版本号\n- 状态码\n![请求头](/img/url6.png)\n\n>2.首部(Headers)\n- 由 ***关键字/值*** 组成，不同的关键字和值，有不同的作用；每一行一对；最后一个请求头后是一个空行来和主体隔开\n- 比较重要的 ***[跨域](http://localhost:4000/2019/11/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F/)***、***[缓存](http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/)***、***CSP*** 都是在这里进行设置\n![首部](/img/header.png)\n\n>3.主体(要发送的内容、接受到的内容)\n\n\n\n","source":"_posts/计算机基础/http协议学习笔记.md","raw":"---\ntitle: http协议学习笔记\ncategory:\n  - 技术笔记\ntags:\n  - 网络\nabbrlink: 39553\ndate: 2019-11-28 10:53:09\n---\n\n# 关于HTTP协议\n位于网络协议7层(如下图)中的应用层，主要用来进行客户端和服务按数据交互。\n![OSI七层模型](/img/url4.jfif)\n<!-- more -->\n# 为什么用它呢\n因为简单、灵活、无状态。\n- 简单：只需要通过请求方法请求资源路径即可\n- 灵活：传输数据类型可以是任意类型\n- 无状态：链接只负责数据交互，不进行保存，所以彼此间不存在依赖，比较简单明了。当然是有好处，但是也导致了需要做一些请求验证时，就需要使用一些其他的手段，比如session、token。\n\n\n# 关于HTTP协议的版本的内容(就写了自己知道的=.=，毕竟东西太多了[我太菜了])\n\n### 0.9版本\n- 只有GET一个请求方法\n- 没有header等描述数据的信息\n- 为短连接，当服务器发送完毕数据后，就关闭TCP通道。\n\n### 1.0版本\n- 增加了很多请求方法(POST等)\n- 怎么加了状态码和header等描述数据的信息\n- 有了If-Modified-Since,Expires处理缓存\n\n\n### 1.1版本(现在使用)\n- 增加了持续链接！重点！\n- 增加host域，可以在同一台服务器，跑多个web服务\n- 增加了更多的缓存处理策略，如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等\n\n### 未来---2.0版本\n- 所有数据都以2进制传递\n- 支持同一通道的多有请求，同时发送，1.1中。可以开多个TCP通道，但每个通道上的请求，一次一个，需要按照顺序进行发送\n- 支持服务端向客户端推送消息等\n\n# HTTP协议的组成\n![OSI七层模型](/img/url5.png)\nHTTP有请求和响应报文两种类型，但是组成部分如图所示，都是有三部分组成\n>1.起始行，一般由一下三部分构成,空格隔开每一部分；通过换行和首部隔开。\n- 请求地址\n- 请求的方法(methods)，有GET/POST/DELETE/PUT/HEAD\n- http协议版本号\n- 状态码\n![请求头](/img/url6.png)\n\n>2.首部(Headers)\n- 由 ***关键字/值*** 组成，不同的关键字和值，有不同的作用；每一行一对；最后一个请求头后是一个空行来和主体隔开\n- 比较重要的 ***[跨域](http://localhost:4000/2019/11/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F/)***、***[缓存](http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/)***、***CSP*** 都是在这里进行设置\n![首部](/img/header.png)\n\n>3.主体(要发送的内容、接受到的内容)\n\n\n\n","slug":"计算机基础/http协议学习笔记","published":1,"updated":"2021-12-31T12:01:59.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3t0063j7jf3slx0zah","content":"<h1 id=\"关于HTTP协议\"><a href=\"#关于HTTP协议\" class=\"headerlink\" title=\"关于HTTP协议\"></a>关于HTTP协议</h1><p>位于网络协议7层(如下图)中的应用层，主要用来进行客户端和服务按数据交互。<br><img src=\"/img/url4.jfif\" alt=\"OSI七层模型\"></p>\n<a id=\"more\"></a>\n<h1 id=\"为什么用它呢\"><a href=\"#为什么用它呢\" class=\"headerlink\" title=\"为什么用它呢\"></a>为什么用它呢</h1><p>因为简单、灵活、无状态。</p>\n<ul>\n<li>简单：只需要通过请求方法请求资源路径即可</li>\n<li>灵活：传输数据类型可以是任意类型</li>\n<li>无状态：链接只负责数据交互，不进行保存，所以彼此间不存在依赖，比较简单明了。当然是有好处，但是也导致了需要做一些请求验证时，就需要使用一些其他的手段，比如session、token。</li>\n</ul>\n<h1 id=\"关于HTTP协议的版本的内容-就写了自己知道的-，毕竟东西太多了-我太菜了\"><a href=\"#关于HTTP协议的版本的内容-就写了自己知道的-，毕竟东西太多了-我太菜了\" class=\"headerlink\" title=\"关于HTTP协议的版本的内容(就写了自己知道的=.=，毕竟东西太多了[我太菜了])\"></a>关于HTTP协议的版本的内容(就写了自己知道的=.=，毕竟东西太多了[我太菜了])</h1><h3 id=\"0-9版本\"><a href=\"#0-9版本\" class=\"headerlink\" title=\"0.9版本\"></a>0.9版本</h3><ul>\n<li>只有GET一个请求方法</li>\n<li>没有header等描述数据的信息</li>\n<li>为短连接，当服务器发送完毕数据后，就关闭TCP通道。</li>\n</ul>\n<h3 id=\"1-0版本\"><a href=\"#1-0版本\" class=\"headerlink\" title=\"1.0版本\"></a>1.0版本</h3><ul>\n<li>增加了很多请求方法(POST等)</li>\n<li>怎么加了状态码和header等描述数据的信息</li>\n<li>有了If-Modified-Since,Expires处理缓存</li>\n</ul>\n<h3 id=\"1-1版本-现在使用\"><a href=\"#1-1版本-现在使用\" class=\"headerlink\" title=\"1.1版本(现在使用)\"></a>1.1版本(现在使用)</h3><ul>\n<li>增加了持续链接！重点！</li>\n<li>增加host域，可以在同一台服务器，跑多个web服务</li>\n<li>增加了更多的缓存处理策略，如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等</li>\n</ul>\n<h3 id=\"未来—2-0版本\"><a href=\"#未来—2-0版本\" class=\"headerlink\" title=\"未来—2.0版本\"></a>未来—2.0版本</h3><ul>\n<li>所有数据都以2进制传递</li>\n<li>支持同一通道的多有请求，同时发送，1.1中。可以开多个TCP通道，但每个通道上的请求，一次一个，需要按照顺序进行发送</li>\n<li>支持服务端向客户端推送消息等</li>\n</ul>\n<h1 id=\"HTTP协议的组成\"><a href=\"#HTTP协议的组成\" class=\"headerlink\" title=\"HTTP协议的组成\"></a>HTTP协议的组成</h1><p><img src=\"/img/url5.png\" alt=\"OSI七层模型\"><br>HTTP有请求和响应报文两种类型，但是组成部分如图所示，都是有三部分组成</p>\n<blockquote>\n<p>1.起始行，一般由一下三部分构成,空格隔开每一部分；通过换行和首部隔开。</p>\n</blockquote>\n<ul>\n<li>请求地址</li>\n<li>请求的方法(methods)，有GET/POST/DELETE/PUT/HEAD</li>\n<li>http协议版本号</li>\n<li>状态码<br><img src=\"/img/url6.png\" alt=\"请求头\"></li>\n</ul>\n<blockquote>\n<p>2.首部(Headers)</p>\n</blockquote>\n<ul>\n<li>由 <strong><em>关键字/值</em></strong> 组成，不同的关键字和值，有不同的作用；每一行一对；最后一个请求头后是一个空行来和主体隔开</li>\n<li>比较重要的 <strong><em><a href=\"http://localhost:4000/2019/11/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F/\">跨域</a></em></strong>、*<strong><a href=\"http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/\">缓存</a>**<em>、</em></strong>CSP*** 都是在这里进行设置<br><img src=\"/img/header.png\" alt=\"首部\"></li>\n</ul>\n<blockquote>\n<p>3.主体(要发送的内容、接受到的内容)</p>\n</blockquote>\n","site":{"data":{}},"wordcount":817,"excerpt":"<h1 id=\"关于HTTP协议\"><a href=\"#关于HTTP协议\" class=\"headerlink\" title=\"关于HTTP协议\"></a>关于HTTP协议</h1><p>位于网络协议7层(如下图)中的应用层，主要用来进行客户端和服务按数据交互。<br><img src=\"/img/url4.jfif\" alt=\"OSI七层模型\"></p>","more":"<h1 id=\"为什么用它呢\"><a href=\"#为什么用它呢\" class=\"headerlink\" title=\"为什么用它呢\"></a>为什么用它呢</h1><p>因为简单、灵活、无状态。</p>\n<ul>\n<li>简单：只需要通过请求方法请求资源路径即可</li>\n<li>灵活：传输数据类型可以是任意类型</li>\n<li>无状态：链接只负责数据交互，不进行保存，所以彼此间不存在依赖，比较简单明了。当然是有好处，但是也导致了需要做一些请求验证时，就需要使用一些其他的手段，比如session、token。</li>\n</ul>\n<h1 id=\"关于HTTP协议的版本的内容-就写了自己知道的-，毕竟东西太多了-我太菜了\"><a href=\"#关于HTTP协议的版本的内容-就写了自己知道的-，毕竟东西太多了-我太菜了\" class=\"headerlink\" title=\"关于HTTP协议的版本的内容(就写了自己知道的=.=，毕竟东西太多了[我太菜了])\"></a>关于HTTP协议的版本的内容(就写了自己知道的=.=，毕竟东西太多了[我太菜了])</h1><h3 id=\"0-9版本\"><a href=\"#0-9版本\" class=\"headerlink\" title=\"0.9版本\"></a>0.9版本</h3><ul>\n<li>只有GET一个请求方法</li>\n<li>没有header等描述数据的信息</li>\n<li>为短连接，当服务器发送完毕数据后，就关闭TCP通道。</li>\n</ul>\n<h3 id=\"1-0版本\"><a href=\"#1-0版本\" class=\"headerlink\" title=\"1.0版本\"></a>1.0版本</h3><ul>\n<li>增加了很多请求方法(POST等)</li>\n<li>怎么加了状态码和header等描述数据的信息</li>\n<li>有了If-Modified-Since,Expires处理缓存</li>\n</ul>\n<h3 id=\"1-1版本-现在使用\"><a href=\"#1-1版本-现在使用\" class=\"headerlink\" title=\"1.1版本(现在使用)\"></a>1.1版本(现在使用)</h3><ul>\n<li>增加了持续链接！重点！</li>\n<li>增加host域，可以在同一台服务器，跑多个web服务</li>\n<li>增加了更多的缓存处理策略，如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等</li>\n</ul>\n<h3 id=\"未来—2-0版本\"><a href=\"#未来—2-0版本\" class=\"headerlink\" title=\"未来—2.0版本\"></a>未来—2.0版本</h3><ul>\n<li>所有数据都以2进制传递</li>\n<li>支持同一通道的多有请求，同时发送，1.1中。可以开多个TCP通道，但每个通道上的请求，一次一个，需要按照顺序进行发送</li>\n<li>支持服务端向客户端推送消息等</li>\n</ul>\n<h1 id=\"HTTP协议的组成\"><a href=\"#HTTP协议的组成\" class=\"headerlink\" title=\"HTTP协议的组成\"></a>HTTP协议的组成</h1><p><img src=\"/img/url5.png\" alt=\"OSI七层模型\"><br>HTTP有请求和响应报文两种类型，但是组成部分如图所示，都是有三部分组成</p>\n<blockquote>\n<p>1.起始行，一般由一下三部分构成,空格隔开每一部分；通过换行和首部隔开。</p>\n</blockquote>\n<ul>\n<li>请求地址</li>\n<li>请求的方法(methods)，有GET/POST/DELETE/PUT/HEAD</li>\n<li>http协议版本号</li>\n<li>状态码<br><img src=\"/img/url6.png\" alt=\"请求头\"></li>\n</ul>\n<blockquote>\n<p>2.首部(Headers)</p>\n</blockquote>\n<ul>\n<li>由 <strong><em>关键字/值</em></strong> 组成，不同的关键字和值，有不同的作用；每一行一对；最后一个请求头后是一个空行来和主体隔开</li>\n<li>比较重要的 <strong><em><a href=\"http://localhost:4000/2019/11/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F/\">跨域</a></em></strong>、*<strong><a href=\"http://localhost:4000/2019/11/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%85%B3%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/\">缓存</a>**<em>、</em></strong>CSP*** 都是在这里进行设置<br><img src=\"/img/header.png\" alt=\"首部\"></li>\n</ul>\n<blockquote>\n<p>3.主体(要发送的内容、接受到的内容)</p>\n</blockquote>"},{"title":"《学习JavaScript数据结构与算法》笔记---图论","abbrlink":24808,"date":"2019-09-23T05:44:45.000Z","_content":"\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%9B%BE%E8%AE%BA.html)\n\n# 什么是图\n\n1.图是网络结构的抽象模型\n2.由一组边连接的顶点(或节点)组成\n\n![图](/img/Graph.jpg)\n\n# 图和树的区别\n1.树和链表也是图的一种\n2.但是和树不同，树的左右两个子树的节点不可以相连，图可以(如上图)\n\n<!-- more -->\n\n# 图可以干嘛\n>用来抽象实际生活中某些关系网的结构，比如\n- 1.人际关系网抽象成图，每个人就是这张图中的点，人与人之间的关系就是点点之间的连线\n- 2.地铁站点图，每个站就是一个顶点，站与站之间的路线就是一条边\n\n# 关于图的术语\n\n>***顶点***：图中的一个点；比如在地铁图中的某一站；人际关系网中某个人\n\n>***边***：顶点之间的距离；比如地铁图中两站之间的距离\n\n>***相邻顶点***：一条边链接在一起的2个顶点称为相邻顶点\n\n>***度***：一个顶点的度是相邻顶点的数量\n\n>***出度***：某个顶点指向别的顶点的数量\n\n>***入度***：别的顶点指向某个顶点的数量\n\n>***路径***：两顶点之间经过的所有顶点构成的一个顶点序列称为路径，可以有多个；\n\n- **简单路径**：顶点序列中不包含重复的顶点\n- **回路**：顶点序列的第一项和最后一项是同一个顶点；就是从一个顶点出发转一圈又回到该点\n\n>**无向图**：假设有AB两个顶点通过一条边连接在一起，可以从A-B也可以从B-A，这条边没有方向，就称为无向图；(如上图)\n\n>**有向图**：假设有AB两个顶点通过一条边连接在一起，只可以从A->B或B->A，称为有向图(下图)\n\n![有向图](/img/graph2.png)\n\n>**无权图**：图中的边没有携带权重，称为无权图(上面两个图都是)\n\n>**带权图**：边有一定的权重；这个权重可以表示各种想表示的数据，比如花费时间，顺序，等等\n\n![带权图](/img/graph3.png)\n\n# 用代码表示图\n\n>***使用邻接矩阵(表示顶点之间相邻关系的矩阵)***\n- 1.用数字或者字母表示顶点，然后用一维数组存放顶点(和顶点包含的数据)\n- 2.用一个二维数组表示顶点之间的链接(边);\n    - 2.1假设a-b相连，即表示1，不相连表示0;\n    - 2.2顶点到自己本身没有边，成为自回路，也用0表示\n    - 2.3如果边带权重，当两点相连时，可以把这个数字按一定规则来表示\n    - 2.4邻接矩阵表示无向图时，一定是对称的\n- 3.邻接矩阵的问题：\n    - 3.1表示稀疏图(顶点之间的边很少的图)的时候会浪费很多内存空间,因为用0表示了很多不存在的边\n- 4.多用于表示无向图\n\n![邻接矩阵](/img/graph4.png)\n\n>***使用邻接表(本文也是用这种方式)***\n- 1.邻接表由顶点和相邻顶点的顶点列表组成\n- 2.数组/链表/字典(哈希表)都可以实现\n- 3.多用于表示有向图\n- 4.邻接表的问题\n  -  4.1计算出度比较简单\n  -  4.2计算入度非常麻烦\n\n![邻接表](/img/graph5.png)\n\n# 关于图的遍历\n\n>1.需要注意的时，遍历时不能重复访问某个节点，且需要指定第一个要访问的节点，一般对图的遍历常用的有一下2种算法\n\n>2.广度优先算法(BFS)\n- 特点：优先遍历当前访问节点的相邻节点 ，属于一层一层遍历\n- 使用队列实现\n\n>3.深度优先算法(DFS)\n- 特点：有点类似树的先序遍历，沿着路径，一条路径的节点全部访问完毕后，再返回有分支路径的节点去访问另一条路径；\n- 可以使用栈，或者递归(本文使用递归)来实现\n\n>4.上述的两种方式遍历结果的区别：如图\n\n![遍历](/img/graph6.png)\n\n# 表示节点的状态\n>***白色***：表示顶点还没有被访问\n>***灰色***：表示该顶点被访问过，但未被探索过(就是和他连接的点还未被访问)\n>***黑色***：表示该顶点被访问过且被完全探索过(该点和该点相连的顶点都被访问过)\n\n# 遍历算法\n\n>开始前先做一点说明\n- 1.我们用一个数组存储所有的顶点\n- 2.然后用一个对象存储相连点的关系：key为一个点，value是一个数组，存储和该点相连的点\n```javascript\n function Graph() {\n    this.vertexes = [];\n    this.eage = {};\n }\n```\n\n\n>***BFS***\n>实现思路：\n- 1.每次访问一个节点时，把和它相连的节点插入队列\n- 2.一个节点访问完毕后，在读取队列中先进队列的节点开始访问，\n- 3.然后重复执行12，直到队列为空，结束\n```javascript\n// 参数：指定第一个访问节点  callback\nGraph.prototype.BFS = function (initV, handler) {\n    if (this.check(initV)) {\n        // 1.初始化颜色\n        let color = this.initColor();\n        // 2.创建队列\n        let que = new Queue();\n        // 3.将第一个顶点插入队列\n        que.enqueue(initV);\n        // 4.循环队列取出元素\n        while (!que.isEmpty()) {\n            // 4.1取出顶点\n            let v = que.dequeue();\n            // 4.2获取顶点的相邻顶点\n            let vList = this.eage[v];\n            // 4.3将v颜色设置成灰色\n            color[v] = 'gray';\n            // 4.4把相邻顶点插入队列 \n            for (let i = 0; i < vList.length; i++) {\n                // 遍历相邻节点\n                let e = vList[i];\n                // 检查该点之前有没有被访问过\n                if (color[e] == 'white') {\n                    console.log(e);\n                    color[e] = 'gray';\n                    que.enqueue(e);\n                }\n            }\n            // 4.5.访问v节点\n            handler(v);\n            // 4.6访问完毕\n            color[v] = 'black';\n        }\n    } else {\n        console.error('检查顶点是否存在');\n    }\n};\n```\n\n>***DFS***\n>实现思路：\n- 通过递归函数，访问一个节点的相邻节点\n\n```javascript\n// 参数：指定第一个访问节点  callback\nGraph.prototype.DFS = function (initV, handler) {\n    if (this.check(initV)) {\n        // 1.初始化颜色\n        let color = this.initColor();\n        this.recurrence(initV, color, handler);\n    } else {\n        console.error('检查顶点是否存在');\n    }\n\n    };\n    // 递归访问顶点\n    Graph.prototype.recurrence = function (v, color, handler) {\n        // 1标记正在访问\n        color[v] = 'gray';\n        // 2处理顶点\n        handler(v);\n        // 3探索该点相邻顶点\n        let vList = this.eage[v];\n        for (let i in vList) {\n            let e = vList[i];\n            if (color[e] == 'white') {\n                color[e] = 'gray';\n                // 递归探索该点\n                this.recurrence(e, color, handler);\n            }\n    };\n    // 4标记探索完成\n    color[v] = \"black\";\n};\n```","source":"_posts/计算机基础/js数据结构笔记10.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---图论\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 24808\ndate: 2019-09-23 13:44:45\n---\n\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%9B%BE%E8%AE%BA.html)\n\n# 什么是图\n\n1.图是网络结构的抽象模型\n2.由一组边连接的顶点(或节点)组成\n\n![图](/img/Graph.jpg)\n\n# 图和树的区别\n1.树和链表也是图的一种\n2.但是和树不同，树的左右两个子树的节点不可以相连，图可以(如上图)\n\n<!-- more -->\n\n# 图可以干嘛\n>用来抽象实际生活中某些关系网的结构，比如\n- 1.人际关系网抽象成图，每个人就是这张图中的点，人与人之间的关系就是点点之间的连线\n- 2.地铁站点图，每个站就是一个顶点，站与站之间的路线就是一条边\n\n# 关于图的术语\n\n>***顶点***：图中的一个点；比如在地铁图中的某一站；人际关系网中某个人\n\n>***边***：顶点之间的距离；比如地铁图中两站之间的距离\n\n>***相邻顶点***：一条边链接在一起的2个顶点称为相邻顶点\n\n>***度***：一个顶点的度是相邻顶点的数量\n\n>***出度***：某个顶点指向别的顶点的数量\n\n>***入度***：别的顶点指向某个顶点的数量\n\n>***路径***：两顶点之间经过的所有顶点构成的一个顶点序列称为路径，可以有多个；\n\n- **简单路径**：顶点序列中不包含重复的顶点\n- **回路**：顶点序列的第一项和最后一项是同一个顶点；就是从一个顶点出发转一圈又回到该点\n\n>**无向图**：假设有AB两个顶点通过一条边连接在一起，可以从A-B也可以从B-A，这条边没有方向，就称为无向图；(如上图)\n\n>**有向图**：假设有AB两个顶点通过一条边连接在一起，只可以从A->B或B->A，称为有向图(下图)\n\n![有向图](/img/graph2.png)\n\n>**无权图**：图中的边没有携带权重，称为无权图(上面两个图都是)\n\n>**带权图**：边有一定的权重；这个权重可以表示各种想表示的数据，比如花费时间，顺序，等等\n\n![带权图](/img/graph3.png)\n\n# 用代码表示图\n\n>***使用邻接矩阵(表示顶点之间相邻关系的矩阵)***\n- 1.用数字或者字母表示顶点，然后用一维数组存放顶点(和顶点包含的数据)\n- 2.用一个二维数组表示顶点之间的链接(边);\n    - 2.1假设a-b相连，即表示1，不相连表示0;\n    - 2.2顶点到自己本身没有边，成为自回路，也用0表示\n    - 2.3如果边带权重，当两点相连时，可以把这个数字按一定规则来表示\n    - 2.4邻接矩阵表示无向图时，一定是对称的\n- 3.邻接矩阵的问题：\n    - 3.1表示稀疏图(顶点之间的边很少的图)的时候会浪费很多内存空间,因为用0表示了很多不存在的边\n- 4.多用于表示无向图\n\n![邻接矩阵](/img/graph4.png)\n\n>***使用邻接表(本文也是用这种方式)***\n- 1.邻接表由顶点和相邻顶点的顶点列表组成\n- 2.数组/链表/字典(哈希表)都可以实现\n- 3.多用于表示有向图\n- 4.邻接表的问题\n  -  4.1计算出度比较简单\n  -  4.2计算入度非常麻烦\n\n![邻接表](/img/graph5.png)\n\n# 关于图的遍历\n\n>1.需要注意的时，遍历时不能重复访问某个节点，且需要指定第一个要访问的节点，一般对图的遍历常用的有一下2种算法\n\n>2.广度优先算法(BFS)\n- 特点：优先遍历当前访问节点的相邻节点 ，属于一层一层遍历\n- 使用队列实现\n\n>3.深度优先算法(DFS)\n- 特点：有点类似树的先序遍历，沿着路径，一条路径的节点全部访问完毕后，再返回有分支路径的节点去访问另一条路径；\n- 可以使用栈，或者递归(本文使用递归)来实现\n\n>4.上述的两种方式遍历结果的区别：如图\n\n![遍历](/img/graph6.png)\n\n# 表示节点的状态\n>***白色***：表示顶点还没有被访问\n>***灰色***：表示该顶点被访问过，但未被探索过(就是和他连接的点还未被访问)\n>***黑色***：表示该顶点被访问过且被完全探索过(该点和该点相连的顶点都被访问过)\n\n# 遍历算法\n\n>开始前先做一点说明\n- 1.我们用一个数组存储所有的顶点\n- 2.然后用一个对象存储相连点的关系：key为一个点，value是一个数组，存储和该点相连的点\n```javascript\n function Graph() {\n    this.vertexes = [];\n    this.eage = {};\n }\n```\n\n\n>***BFS***\n>实现思路：\n- 1.每次访问一个节点时，把和它相连的节点插入队列\n- 2.一个节点访问完毕后，在读取队列中先进队列的节点开始访问，\n- 3.然后重复执行12，直到队列为空，结束\n```javascript\n// 参数：指定第一个访问节点  callback\nGraph.prototype.BFS = function (initV, handler) {\n    if (this.check(initV)) {\n        // 1.初始化颜色\n        let color = this.initColor();\n        // 2.创建队列\n        let que = new Queue();\n        // 3.将第一个顶点插入队列\n        que.enqueue(initV);\n        // 4.循环队列取出元素\n        while (!que.isEmpty()) {\n            // 4.1取出顶点\n            let v = que.dequeue();\n            // 4.2获取顶点的相邻顶点\n            let vList = this.eage[v];\n            // 4.3将v颜色设置成灰色\n            color[v] = 'gray';\n            // 4.4把相邻顶点插入队列 \n            for (let i = 0; i < vList.length; i++) {\n                // 遍历相邻节点\n                let e = vList[i];\n                // 检查该点之前有没有被访问过\n                if (color[e] == 'white') {\n                    console.log(e);\n                    color[e] = 'gray';\n                    que.enqueue(e);\n                }\n            }\n            // 4.5.访问v节点\n            handler(v);\n            // 4.6访问完毕\n            color[v] = 'black';\n        }\n    } else {\n        console.error('检查顶点是否存在');\n    }\n};\n```\n\n>***DFS***\n>实现思路：\n- 通过递归函数，访问一个节点的相邻节点\n\n```javascript\n// 参数：指定第一个访问节点  callback\nGraph.prototype.DFS = function (initV, handler) {\n    if (this.check(initV)) {\n        // 1.初始化颜色\n        let color = this.initColor();\n        this.recurrence(initV, color, handler);\n    } else {\n        console.error('检查顶点是否存在');\n    }\n\n    };\n    // 递归访问顶点\n    Graph.prototype.recurrence = function (v, color, handler) {\n        // 1标记正在访问\n        color[v] = 'gray';\n        // 2处理顶点\n        handler(v);\n        // 3探索该点相邻顶点\n        let vList = this.eage[v];\n        for (let i in vList) {\n            let e = vList[i];\n            if (color[e] == 'white') {\n                color[e] = 'gray';\n                // 递归探索该点\n                this.recurrence(e, color, handler);\n            }\n    };\n    // 4标记探索完成\n    color[v] = \"black\";\n};\n```","slug":"计算机基础/js数据结构笔记10","published":1,"updated":"2021-12-31T12:01:59.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3u0066j7jf14d5gn58","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%9B%BE%E8%AE%BA.html\">这里</a></h1><h1 id=\"什么是图\"><a href=\"#什么是图\" class=\"headerlink\" title=\"什么是图\"></a>什么是图</h1><p>1.图是网络结构的抽象模型<br>2.由一组边连接的顶点(或节点)组成</p>\n<p><img src=\"/img/Graph.jpg\" alt=\"图\"></p>\n<h1 id=\"图和树的区别\"><a href=\"#图和树的区别\" class=\"headerlink\" title=\"图和树的区别\"></a>图和树的区别</h1><p>1.树和链表也是图的一种<br>2.但是和树不同，树的左右两个子树的节点不可以相连，图可以(如上图)</p>\n<a id=\"more\"></a>\n\n<h1 id=\"图可以干嘛\"><a href=\"#图可以干嘛\" class=\"headerlink\" title=\"图可以干嘛\"></a>图可以干嘛</h1><blockquote>\n<p>用来抽象实际生活中某些关系网的结构，比如</p>\n</blockquote>\n<ul>\n<li>1.人际关系网抽象成图，每个人就是这张图中的点，人与人之间的关系就是点点之间的连线</li>\n<li>2.地铁站点图，每个站就是一个顶点，站与站之间的路线就是一条边</li>\n</ul>\n<h1 id=\"关于图的术语\"><a href=\"#关于图的术语\" class=\"headerlink\" title=\"关于图的术语\"></a>关于图的术语</h1><blockquote>\n<p><strong><em>顶点</em></strong>：图中的一个点；比如在地铁图中的某一站；人际关系网中某个人</p>\n</blockquote>\n<blockquote>\n<p><strong><em>边</em></strong>：顶点之间的距离；比如地铁图中两站之间的距离</p>\n</blockquote>\n<blockquote>\n<p><strong><em>相邻顶点</em></strong>：一条边链接在一起的2个顶点称为相邻顶点</p>\n</blockquote>\n<blockquote>\n<p><strong><em>度</em></strong>：一个顶点的度是相邻顶点的数量</p>\n</blockquote>\n<blockquote>\n<p><strong><em>出度</em></strong>：某个顶点指向别的顶点的数量</p>\n</blockquote>\n<blockquote>\n<p><strong><em>入度</em></strong>：别的顶点指向某个顶点的数量</p>\n</blockquote>\n<blockquote>\n<p><strong><em>路径</em></strong>：两顶点之间经过的所有顶点构成的一个顶点序列称为路径，可以有多个；</p>\n</blockquote>\n<ul>\n<li><strong>简单路径</strong>：顶点序列中不包含重复的顶点</li>\n<li><strong>回路</strong>：顶点序列的第一项和最后一项是同一个顶点；就是从一个顶点出发转一圈又回到该点</li>\n</ul>\n<blockquote>\n<p><strong>无向图</strong>：假设有AB两个顶点通过一条边连接在一起，可以从A-B也可以从B-A，这条边没有方向，就称为无向图；(如上图)</p>\n</blockquote>\n<blockquote>\n<p><strong>有向图</strong>：假设有AB两个顶点通过一条边连接在一起，只可以从A-&gt;B或B-&gt;A，称为有向图(下图)</p>\n</blockquote>\n<p><img src=\"/img/graph2.png\" alt=\"有向图\"></p>\n<blockquote>\n<p><strong>无权图</strong>：图中的边没有携带权重，称为无权图(上面两个图都是)</p>\n</blockquote>\n<blockquote>\n<p><strong>带权图</strong>：边有一定的权重；这个权重可以表示各种想表示的数据，比如花费时间，顺序，等等</p>\n</blockquote>\n<p><img src=\"/img/graph3.png\" alt=\"带权图\"></p>\n<h1 id=\"用代码表示图\"><a href=\"#用代码表示图\" class=\"headerlink\" title=\"用代码表示图\"></a>用代码表示图</h1><blockquote>\n<p><strong><em>使用邻接矩阵(表示顶点之间相邻关系的矩阵)</em></strong></p>\n</blockquote>\n<ul>\n<li>1.用数字或者字母表示顶点，然后用一维数组存放顶点(和顶点包含的数据)</li>\n<li>2.用一个二维数组表示顶点之间的链接(边);<ul>\n<li>2.1假设a-b相连，即表示1，不相连表示0;</li>\n<li>2.2顶点到自己本身没有边，成为自回路，也用0表示</li>\n<li>2.3如果边带权重，当两点相连时，可以把这个数字按一定规则来表示</li>\n<li>2.4邻接矩阵表示无向图时，一定是对称的</li>\n</ul>\n</li>\n<li>3.邻接矩阵的问题：<ul>\n<li>3.1表示稀疏图(顶点之间的边很少的图)的时候会浪费很多内存空间,因为用0表示了很多不存在的边</li>\n</ul>\n</li>\n<li>4.多用于表示无向图</li>\n</ul>\n<p><img src=\"/img/graph4.png\" alt=\"邻接矩阵\"></p>\n<blockquote>\n<p><strong><em>使用邻接表(本文也是用这种方式)</em></strong></p>\n</blockquote>\n<ul>\n<li>1.邻接表由顶点和相邻顶点的顶点列表组成</li>\n<li>2.数组/链表/字典(哈希表)都可以实现</li>\n<li>3.多用于表示有向图</li>\n<li>4.邻接表的问题<ul>\n<li>4.1计算出度比较简单</li>\n<li>4.2计算入度非常麻烦</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/img/graph5.png\" alt=\"邻接表\"></p>\n<h1 id=\"关于图的遍历\"><a href=\"#关于图的遍历\" class=\"headerlink\" title=\"关于图的遍历\"></a>关于图的遍历</h1><blockquote>\n<p>1.需要注意的时，遍历时不能重复访问某个节点，且需要指定第一个要访问的节点，一般对图的遍历常用的有一下2种算法</p>\n</blockquote>\n<blockquote>\n<p>2.广度优先算法(BFS)</p>\n</blockquote>\n<ul>\n<li>特点：优先遍历当前访问节点的相邻节点 ，属于一层一层遍历</li>\n<li>使用队列实现</li>\n</ul>\n<blockquote>\n<p>3.深度优先算法(DFS)</p>\n</blockquote>\n<ul>\n<li>特点：有点类似树的先序遍历，沿着路径，一条路径的节点全部访问完毕后，再返回有分支路径的节点去访问另一条路径；</li>\n<li>可以使用栈，或者递归(本文使用递归)来实现</li>\n</ul>\n<blockquote>\n<p>4.上述的两种方式遍历结果的区别：如图</p>\n</blockquote>\n<p><img src=\"/img/graph6.png\" alt=\"遍历\"></p>\n<h1 id=\"表示节点的状态\"><a href=\"#表示节点的状态\" class=\"headerlink\" title=\"表示节点的状态\"></a>表示节点的状态</h1><blockquote>\n<p><strong><em>白色</em></strong>：表示顶点还没有被访问<br>*<strong>灰色***：表示该顶点被访问过，但未被探索过(就是和他连接的点还未被访问)<br>*</strong>黑色***：表示该顶点被访问过且被完全探索过(该点和该点相连的顶点都被访问过)</p>\n</blockquote>\n<h1 id=\"遍历算法\"><a href=\"#遍历算法\" class=\"headerlink\" title=\"遍历算法\"></a>遍历算法</h1><blockquote>\n<p>开始前先做一点说明</p>\n</blockquote>\n<ul>\n<li>1.我们用一个数组存储所有的顶点</li>\n<li>2.然后用一个对象存储相连点的关系：key为一个点，value是一个数组，存储和该点相连的点<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Graph</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>   <span class=\"hljs-built_in\">this</span>.vertexes = [];<br>   <span class=\"hljs-built_in\">this</span>.eage = &#123;&#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n\n</li>\n</ul>\n<blockquote>\n<p><strong><em>BFS</em></strong><br>实现思路：</p>\n</blockquote>\n<ul>\n<li>1.每次访问一个节点时，把和它相连的节点插入队列</li>\n<li>2.一个节点访问完毕后，在读取队列中先进队列的节点开始访问，</li>\n<li>3.然后重复执行12，直到队列为空，结束<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 参数：指定第一个访问节点  callback</span><br>Graph.prototype.BFS = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">initV, handler</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.check(initV)) &#123;<br>        <span class=\"hljs-comment\">// 1.初始化颜色</span><br>        <span class=\"hljs-keyword\">let</span> color = <span class=\"hljs-built_in\">this</span>.initColor();<br>        <span class=\"hljs-comment\">// 2.创建队列</span><br>        <span class=\"hljs-keyword\">let</span> que = <span class=\"hljs-keyword\">new</span> Queue();<br>        <span class=\"hljs-comment\">// 3.将第一个顶点插入队列</span><br>        que.enqueue(initV);<br>        <span class=\"hljs-comment\">// 4.循环队列取出元素</span><br>        <span class=\"hljs-keyword\">while</span> (!que.isEmpty()) &#123;<br>            <span class=\"hljs-comment\">// 4.1取出顶点</span><br>            <span class=\"hljs-keyword\">let</span> v = que.dequeue();<br>            <span class=\"hljs-comment\">// 4.2获取顶点的相邻顶点</span><br>            <span class=\"hljs-keyword\">let</span> vList = <span class=\"hljs-built_in\">this</span>.eage[v];<br>            <span class=\"hljs-comment\">// 4.3将v颜色设置成灰色</span><br>            color[v] = <span class=\"hljs-string\">&#x27;gray&#x27;</span>;<br>            <span class=\"hljs-comment\">// 4.4把相邻顶点插入队列 </span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; vList.length; i++) &#123;<br>                <span class=\"hljs-comment\">// 遍历相邻节点</span><br>                <span class=\"hljs-keyword\">let</span> e = vList[i];<br>                <span class=\"hljs-comment\">// 检查该点之前有没有被访问过</span><br>                <span class=\"hljs-keyword\">if</span> (color[e] == <span class=\"hljs-string\">&#x27;white&#x27;</span>) &#123;<br>                    <span class=\"hljs-built_in\">console</span>.log(e);<br>                    color[e] = <span class=\"hljs-string\">&#x27;gray&#x27;</span>;<br>                    que.enqueue(e);<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-comment\">// 4.5.访问v节点</span><br>            handler(v);<br>            <span class=\"hljs-comment\">// 4.6访问完毕</span><br>            color[v] = <span class=\"hljs-string\">&#x27;black&#x27;</span>;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&#x27;检查顶点是否存在&#x27;</span>);<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p><strong><em>DFS</em></strong><br>实现思路：</p>\n</blockquote>\n<ul>\n<li>通过递归函数，访问一个节点的相邻节点</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 参数：指定第一个访问节点  callback</span><br>Graph.prototype.DFS = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">initV, handler</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.check(initV)) &#123;<br>        <span class=\"hljs-comment\">// 1.初始化颜色</span><br>        <span class=\"hljs-keyword\">let</span> color = <span class=\"hljs-built_in\">this</span>.initColor();<br>        <span class=\"hljs-built_in\">this</span>.recurrence(initV, color, handler);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&#x27;检查顶点是否存在&#x27;</span>);<br>    &#125;<br><br>    &#125;;<br>    <span class=\"hljs-comment\">// 递归访问顶点</span><br>    Graph.prototype.recurrence = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v, color, handler</span>) </span>&#123;<br>        <span class=\"hljs-comment\">// 1标记正在访问</span><br>        color[v] = <span class=\"hljs-string\">&#x27;gray&#x27;</span>;<br>        <span class=\"hljs-comment\">// 2处理顶点</span><br>        handler(v);<br>        <span class=\"hljs-comment\">// 3探索该点相邻顶点</span><br>        <span class=\"hljs-keyword\">let</span> vList = <span class=\"hljs-built_in\">this</span>.eage[v];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> vList) &#123;<br>            <span class=\"hljs-keyword\">let</span> e = vList[i];<br>            <span class=\"hljs-keyword\">if</span> (color[e] == <span class=\"hljs-string\">&#x27;white&#x27;</span>) &#123;<br>                color[e] = <span class=\"hljs-string\">&#x27;gray&#x27;</span>;<br>                <span class=\"hljs-comment\">// 递归探索该点</span><br>                <span class=\"hljs-built_in\">this</span>.recurrence(e, color, handler);<br>            &#125;<br>    &#125;;<br>    <span class=\"hljs-comment\">// 4标记探索完成</span><br>    color[v] = <span class=\"hljs-string\">&quot;black&quot;</span>;<br>&#125;;<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":2867,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%9B%BE%E8%AE%BA.html\">这里</a></h1><h1 id=\"什么是图\"><a href=\"#什么是图\" class=\"headerlink\" title=\"什么是图\"></a>什么是图</h1><p>1.图是网络结构的抽象模型<br>2.由一组边连接的顶点(或节点)组成</p>\n<p><img src=\"/img/Graph.jpg\" alt=\"图\"></p>\n<h1 id=\"图和树的区别\"><a href=\"#图和树的区别\" class=\"headerlink\" title=\"图和树的区别\"></a>图和树的区别</h1><p>1.树和链表也是图的一种<br>2.但是和树不同，树的左右两个子树的节点不可以相连，图可以(如上图)</p>","more":"<h1 id=\"图可以干嘛\"><a href=\"#图可以干嘛\" class=\"headerlink\" title=\"图可以干嘛\"></a>图可以干嘛</h1><blockquote>\n<p>用来抽象实际生活中某些关系网的结构，比如</p>\n</blockquote>\n<ul>\n<li>1.人际关系网抽象成图，每个人就是这张图中的点，人与人之间的关系就是点点之间的连线</li>\n<li>2.地铁站点图，每个站就是一个顶点，站与站之间的路线就是一条边</li>\n</ul>\n<h1 id=\"关于图的术语\"><a href=\"#关于图的术语\" class=\"headerlink\" title=\"关于图的术语\"></a>关于图的术语</h1><blockquote>\n<p><strong><em>顶点</em></strong>：图中的一个点；比如在地铁图中的某一站；人际关系网中某个人</p>\n</blockquote>\n<blockquote>\n<p><strong><em>边</em></strong>：顶点之间的距离；比如地铁图中两站之间的距离</p>\n</blockquote>\n<blockquote>\n<p><strong><em>相邻顶点</em></strong>：一条边链接在一起的2个顶点称为相邻顶点</p>\n</blockquote>\n<blockquote>\n<p><strong><em>度</em></strong>：一个顶点的度是相邻顶点的数量</p>\n</blockquote>\n<blockquote>\n<p><strong><em>出度</em></strong>：某个顶点指向别的顶点的数量</p>\n</blockquote>\n<blockquote>\n<p><strong><em>入度</em></strong>：别的顶点指向某个顶点的数量</p>\n</blockquote>\n<blockquote>\n<p><strong><em>路径</em></strong>：两顶点之间经过的所有顶点构成的一个顶点序列称为路径，可以有多个；</p>\n</blockquote>\n<ul>\n<li><strong>简单路径</strong>：顶点序列中不包含重复的顶点</li>\n<li><strong>回路</strong>：顶点序列的第一项和最后一项是同一个顶点；就是从一个顶点出发转一圈又回到该点</li>\n</ul>\n<blockquote>\n<p><strong>无向图</strong>：假设有AB两个顶点通过一条边连接在一起，可以从A-B也可以从B-A，这条边没有方向，就称为无向图；(如上图)</p>\n</blockquote>\n<blockquote>\n<p><strong>有向图</strong>：假设有AB两个顶点通过一条边连接在一起，只可以从A-&gt;B或B-&gt;A，称为有向图(下图)</p>\n</blockquote>\n<p><img src=\"/img/graph2.png\" alt=\"有向图\"></p>\n<blockquote>\n<p><strong>无权图</strong>：图中的边没有携带权重，称为无权图(上面两个图都是)</p>\n</blockquote>\n<blockquote>\n<p><strong>带权图</strong>：边有一定的权重；这个权重可以表示各种想表示的数据，比如花费时间，顺序，等等</p>\n</blockquote>\n<p><img src=\"/img/graph3.png\" alt=\"带权图\"></p>\n<h1 id=\"用代码表示图\"><a href=\"#用代码表示图\" class=\"headerlink\" title=\"用代码表示图\"></a>用代码表示图</h1><blockquote>\n<p><strong><em>使用邻接矩阵(表示顶点之间相邻关系的矩阵)</em></strong></p>\n</blockquote>\n<ul>\n<li>1.用数字或者字母表示顶点，然后用一维数组存放顶点(和顶点包含的数据)</li>\n<li>2.用一个二维数组表示顶点之间的链接(边);<ul>\n<li>2.1假设a-b相连，即表示1，不相连表示0;</li>\n<li>2.2顶点到自己本身没有边，成为自回路，也用0表示</li>\n<li>2.3如果边带权重，当两点相连时，可以把这个数字按一定规则来表示</li>\n<li>2.4邻接矩阵表示无向图时，一定是对称的</li>\n</ul>\n</li>\n<li>3.邻接矩阵的问题：<ul>\n<li>3.1表示稀疏图(顶点之间的边很少的图)的时候会浪费很多内存空间,因为用0表示了很多不存在的边</li>\n</ul>\n</li>\n<li>4.多用于表示无向图</li>\n</ul>\n<p><img src=\"/img/graph4.png\" alt=\"邻接矩阵\"></p>\n<blockquote>\n<p><strong><em>使用邻接表(本文也是用这种方式)</em></strong></p>\n</blockquote>\n<ul>\n<li>1.邻接表由顶点和相邻顶点的顶点列表组成</li>\n<li>2.数组/链表/字典(哈希表)都可以实现</li>\n<li>3.多用于表示有向图</li>\n<li>4.邻接表的问题<ul>\n<li>4.1计算出度比较简单</li>\n<li>4.2计算入度非常麻烦</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/img/graph5.png\" alt=\"邻接表\"></p>\n<h1 id=\"关于图的遍历\"><a href=\"#关于图的遍历\" class=\"headerlink\" title=\"关于图的遍历\"></a>关于图的遍历</h1><blockquote>\n<p>1.需要注意的时，遍历时不能重复访问某个节点，且需要指定第一个要访问的节点，一般对图的遍历常用的有一下2种算法</p>\n</blockquote>\n<blockquote>\n<p>2.广度优先算法(BFS)</p>\n</blockquote>\n<ul>\n<li>特点：优先遍历当前访问节点的相邻节点 ，属于一层一层遍历</li>\n<li>使用队列实现</li>\n</ul>\n<blockquote>\n<p>3.深度优先算法(DFS)</p>\n</blockquote>\n<ul>\n<li>特点：有点类似树的先序遍历，沿着路径，一条路径的节点全部访问完毕后，再返回有分支路径的节点去访问另一条路径；</li>\n<li>可以使用栈，或者递归(本文使用递归)来实现</li>\n</ul>\n<blockquote>\n<p>4.上述的两种方式遍历结果的区别：如图</p>\n</blockquote>\n<p><img src=\"/img/graph6.png\" alt=\"遍历\"></p>\n<h1 id=\"表示节点的状态\"><a href=\"#表示节点的状态\" class=\"headerlink\" title=\"表示节点的状态\"></a>表示节点的状态</h1><blockquote>\n<p><strong><em>白色</em></strong>：表示顶点还没有被访问<br>*<strong>灰色***：表示该顶点被访问过，但未被探索过(就是和他连接的点还未被访问)<br>*</strong>黑色***：表示该顶点被访问过且被完全探索过(该点和该点相连的顶点都被访问过)</p>\n</blockquote>\n<h1 id=\"遍历算法\"><a href=\"#遍历算法\" class=\"headerlink\" title=\"遍历算法\"></a>遍历算法</h1><blockquote>\n<p>开始前先做一点说明</p>\n</blockquote>\n<ul>\n<li>1.我们用一个数组存储所有的顶点</li>\n<li>2.然后用一个对象存储相连点的关系：key为一个点，value是一个数组，存储和该点相连的点<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Graph</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>   <span class=\"hljs-built_in\">this</span>.vertexes = [];<br>   <span class=\"hljs-built_in\">this</span>.eage = &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<blockquote>\n<p><strong><em>BFS</em></strong><br>实现思路：</p>\n</blockquote>\n<ul>\n<li>1.每次访问一个节点时，把和它相连的节点插入队列</li>\n<li>2.一个节点访问完毕后，在读取队列中先进队列的节点开始访问，</li>\n<li>3.然后重复执行12，直到队列为空，结束<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 参数：指定第一个访问节点  callback</span><br>Graph.prototype.BFS = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">initV, handler</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.check(initV)) &#123;<br>        <span class=\"hljs-comment\">// 1.初始化颜色</span><br>        <span class=\"hljs-keyword\">let</span> color = <span class=\"hljs-built_in\">this</span>.initColor();<br>        <span class=\"hljs-comment\">// 2.创建队列</span><br>        <span class=\"hljs-keyword\">let</span> que = <span class=\"hljs-keyword\">new</span> Queue();<br>        <span class=\"hljs-comment\">// 3.将第一个顶点插入队列</span><br>        que.enqueue(initV);<br>        <span class=\"hljs-comment\">// 4.循环队列取出元素</span><br>        <span class=\"hljs-keyword\">while</span> (!que.isEmpty()) &#123;<br>            <span class=\"hljs-comment\">// 4.1取出顶点</span><br>            <span class=\"hljs-keyword\">let</span> v = que.dequeue();<br>            <span class=\"hljs-comment\">// 4.2获取顶点的相邻顶点</span><br>            <span class=\"hljs-keyword\">let</span> vList = <span class=\"hljs-built_in\">this</span>.eage[v];<br>            <span class=\"hljs-comment\">// 4.3将v颜色设置成灰色</span><br>            color[v] = <span class=\"hljs-string\">&#x27;gray&#x27;</span>;<br>            <span class=\"hljs-comment\">// 4.4把相邻顶点插入队列 </span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; vList.length; i++) &#123;<br>                <span class=\"hljs-comment\">// 遍历相邻节点</span><br>                <span class=\"hljs-keyword\">let</span> e = vList[i];<br>                <span class=\"hljs-comment\">// 检查该点之前有没有被访问过</span><br>                <span class=\"hljs-keyword\">if</span> (color[e] == <span class=\"hljs-string\">&#x27;white&#x27;</span>) &#123;<br>                    <span class=\"hljs-built_in\">console</span>.log(e);<br>                    color[e] = <span class=\"hljs-string\">&#x27;gray&#x27;</span>;<br>                    que.enqueue(e);<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-comment\">// 4.5.访问v节点</span><br>            handler(v);<br>            <span class=\"hljs-comment\">// 4.6访问完毕</span><br>            color[v] = <span class=\"hljs-string\">&#x27;black&#x27;</span>;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&#x27;检查顶点是否存在&#x27;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p><strong><em>DFS</em></strong><br>实现思路：</p>\n</blockquote>\n<ul>\n<li>通过递归函数，访问一个节点的相邻节点</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 参数：指定第一个访问节点  callback</span><br>Graph.prototype.DFS = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">initV, handler</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.check(initV)) &#123;<br>        <span class=\"hljs-comment\">// 1.初始化颜色</span><br>        <span class=\"hljs-keyword\">let</span> color = <span class=\"hljs-built_in\">this</span>.initColor();<br>        <span class=\"hljs-built_in\">this</span>.recurrence(initV, color, handler);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&#x27;检查顶点是否存在&#x27;</span>);<br>    &#125;<br><br>    &#125;;<br>    <span class=\"hljs-comment\">// 递归访问顶点</span><br>    Graph.prototype.recurrence = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v, color, handler</span>) </span>&#123;<br>        <span class=\"hljs-comment\">// 1标记正在访问</span><br>        color[v] = <span class=\"hljs-string\">&#x27;gray&#x27;</span>;<br>        <span class=\"hljs-comment\">// 2处理顶点</span><br>        handler(v);<br>        <span class=\"hljs-comment\">// 3探索该点相邻顶点</span><br>        <span class=\"hljs-keyword\">let</span> vList = <span class=\"hljs-built_in\">this</span>.eage[v];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> vList) &#123;<br>            <span class=\"hljs-keyword\">let</span> e = vList[i];<br>            <span class=\"hljs-keyword\">if</span> (color[e] == <span class=\"hljs-string\">&#x27;white&#x27;</span>) &#123;<br>                color[e] = <span class=\"hljs-string\">&#x27;gray&#x27;</span>;<br>                <span class=\"hljs-comment\">// 递归探索该点</span><br>                <span class=\"hljs-built_in\">this</span>.recurrence(e, color, handler);<br>            &#125;<br>    &#125;;<br>    <span class=\"hljs-comment\">// 4标记探索完成</span><br>    color[v] = <span class=\"hljs-string\">&quot;black&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"title":"《学习JavaScript数据结构与算法》笔记---栈","abbrlink":26833,"date":"2019-07-02T03:38:10.000Z","_content":"\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%88.html)\n\n##### 概念\n\n\n<font size=5> \n栈的特点就是后进先出。栈有栈顶和栈底的概念。用数组举例子，数组第一个位置这边就是栈底，最后一个元素的位置就是栈顶，新添加的元素保存在栈顶，在\njs中基本数据类就是存储在栈中。\n数组模拟就是给数组尾部添加元素，移除元素也是从数组尾部移除。\n\n</font>\n\n![示例图](/img/stack.png)\n\n<!-- more -->\n##### 创建一个栈 \n\n\n``` javascript\n function Stack(){\n     /*通过数组来保存栈的元素*/\n     let item=[];\n };\n```\n##### 给栈添加一些方法\n\n1. push 添加一个或几个元素到栈顶\n2. pop移除并返回栈顶的元素\n3. isEmpty 判断栈是不是空的\n4. clear 清空栈内的元素\n5. size返回栈内元素个数\n6. peek返回栈顶的元素\n\n##### 实现\n\n``` javascript\nfunction Stack() {\n    // 通过数组保存栈的元素\n    let item = [];\n    this.push = function (val) {\n        return item.push(val);\n    };\n    this.pop = function (val) {\n        return item.pop(val);\n    };\n    this.isEmpty = function (val) {\n        return item.length == 0;\n    };\n    this.clear = function () {\n        item = [];\n    };\n    this.size = function () {\n        return item.length;\n    };\n    this.peek = function () {\n        return item[item.length - 1];\n    };\n    this.print = function () {\n        for(let i=item.length-1;i>=0;i--){\n            console.log(item[i]);\n        };\n    };\n};\n\n```\n***ES6版本***\n```javascript\nclass Stack {\n    item = [];\n    constructor() {};\n    push(val) {\n        return this.item.push(val);\n    };\n    print() {\n        for (let i = this.item.length - 1; i >= 0; i--) {\n            console.log(this.item[i]);\n        };\n    };\n    pop(val) {\n        return this.item.pop(val);\n    };\n    isEmpty(val) {\n        return this.item.length == 0;\n    };\n    clear() {\n        this.item = [];\n    };\n    size() {\n        return this.item.length;\n    };\n    peek() {\n        return this.item[this.item.length - 1];\n    };\n};\n```\n\n## demo 做一个10进制和其他进制的转换\n\n``` javascript\n/*有两个参数 第一个参数要转换的数字 第二个参数是要转换成的进制*/\nfunction conversion(num, type) {\n    while (num / type) {\n        stack.push(num % type);\n        // 确保每次计算后都是整数\n        num = parseInt(num / type);\n    };\n    stack.print();\n    // 处理完成后对栈进行清除\n    stack.clear();\n};\n```\n","source":"_posts/计算机基础/js数据结构笔记.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---栈\ncategories:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 26833\ndate: 2019-07-02 11:38:10\n---\n\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%88.html)\n\n##### 概念\n\n\n<font size=5> \n栈的特点就是后进先出。栈有栈顶和栈底的概念。用数组举例子，数组第一个位置这边就是栈底，最后一个元素的位置就是栈顶，新添加的元素保存在栈顶，在\njs中基本数据类就是存储在栈中。\n数组模拟就是给数组尾部添加元素，移除元素也是从数组尾部移除。\n\n</font>\n\n![示例图](/img/stack.png)\n\n<!-- more -->\n##### 创建一个栈 \n\n\n``` javascript\n function Stack(){\n     /*通过数组来保存栈的元素*/\n     let item=[];\n };\n```\n##### 给栈添加一些方法\n\n1. push 添加一个或几个元素到栈顶\n2. pop移除并返回栈顶的元素\n3. isEmpty 判断栈是不是空的\n4. clear 清空栈内的元素\n5. size返回栈内元素个数\n6. peek返回栈顶的元素\n\n##### 实现\n\n``` javascript\nfunction Stack() {\n    // 通过数组保存栈的元素\n    let item = [];\n    this.push = function (val) {\n        return item.push(val);\n    };\n    this.pop = function (val) {\n        return item.pop(val);\n    };\n    this.isEmpty = function (val) {\n        return item.length == 0;\n    };\n    this.clear = function () {\n        item = [];\n    };\n    this.size = function () {\n        return item.length;\n    };\n    this.peek = function () {\n        return item[item.length - 1];\n    };\n    this.print = function () {\n        for(let i=item.length-1;i>=0;i--){\n            console.log(item[i]);\n        };\n    };\n};\n\n```\n***ES6版本***\n```javascript\nclass Stack {\n    item = [];\n    constructor() {};\n    push(val) {\n        return this.item.push(val);\n    };\n    print() {\n        for (let i = this.item.length - 1; i >= 0; i--) {\n            console.log(this.item[i]);\n        };\n    };\n    pop(val) {\n        return this.item.pop(val);\n    };\n    isEmpty(val) {\n        return this.item.length == 0;\n    };\n    clear() {\n        this.item = [];\n    };\n    size() {\n        return this.item.length;\n    };\n    peek() {\n        return this.item[this.item.length - 1];\n    };\n};\n```\n\n## demo 做一个10进制和其他进制的转换\n\n``` javascript\n/*有两个参数 第一个参数要转换的数字 第二个参数是要转换成的进制*/\nfunction conversion(num, type) {\n    while (num / type) {\n        stack.push(num % type);\n        // 确保每次计算后都是整数\n        num = parseInt(num / type);\n    };\n    stack.print();\n    // 处理完成后对栈进行清除\n    stack.clear();\n};\n```\n","slug":"计算机基础/js数据结构笔记","published":1,"updated":"2021-12-31T12:01:59.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3v0068j7jfae5d4lds","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%88.html\">这里</a></h1><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><font size=5> \n栈的特点就是后进先出。栈有栈顶和栈底的概念。用数组举例子，数组第一个位置这边就是栈底，最后一个元素的位置就是栈顶，新添加的元素保存在栈顶，在\njs中基本数据类就是存储在栈中。\n数组模拟就是给数组尾部添加元素，移除元素也是从数组尾部移除。\n\n</font>\n\n<p><img src=\"/img/stack.png\" alt=\"示例图\"></p>\n<a id=\"more\"></a>\n<h5 id=\"创建一个栈\"><a href=\"#创建一个栈\" class=\"headerlink\" title=\"创建一个栈\"></a>创建一个栈</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Stack</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">/*通过数组来保存栈的元素*/</span><br>    <span class=\"hljs-keyword\">let</span> item=[];<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<h5 id=\"给栈添加一些方法\"><a href=\"#给栈添加一些方法\" class=\"headerlink\" title=\"给栈添加一些方法\"></a>给栈添加一些方法</h5><ol>\n<li>push 添加一个或几个元素到栈顶</li>\n<li>pop移除并返回栈顶的元素</li>\n<li>isEmpty 判断栈是不是空的</li>\n<li>clear 清空栈内的元素</li>\n<li>size返回栈内元素个数</li>\n<li>peek返回栈顶的元素</li>\n</ol>\n<h5 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Stack</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 通过数组保存栈的元素</span><br>    <span class=\"hljs-keyword\">let</span> item = [];<br>    <span class=\"hljs-built_in\">this</span>.push = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item.push(val);<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.pop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item.pop(val);<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.isEmpty = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item.length == <span class=\"hljs-number\">0</span>;<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.clear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        item = [];<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item.length;<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.peek = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item[item.length - <span class=\"hljs-number\">1</span>];<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.print = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=item.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--)&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(item[i]);<br>        &#125;;<br>    &#125;;<br>&#125;;<br><br></code></pre></div></td></tr></table></figure>\n<p><strong><em>ES6版本</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>&#123;<br>    item = [];<br>    <span class=\"hljs-keyword\">constructor</span>() &#123;&#125;;<br>    push(val) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.push(val);<br>    &#125;;<br>    print() &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-built_in\">this</span>.item.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) &#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.item[i]);<br>        &#125;;<br>    &#125;;<br>    pop(val) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.pop(val);<br>    &#125;;<br>    isEmpty(val) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.length == <span class=\"hljs-number\">0</span>;<br>    &#125;;<br>    clear() &#123;<br>        <span class=\"hljs-built_in\">this</span>.item = [];<br>    &#125;;<br>    size() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.length;<br>    &#125;;<br>    peek() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item[<span class=\"hljs-built_in\">this</span>.item.length - <span class=\"hljs-number\">1</span>];<br>    &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"demo-做一个10进制和其他进制的转换\"><a href=\"#demo-做一个10进制和其他进制的转换\" class=\"headerlink\" title=\"demo 做一个10进制和其他进制的转换\"></a>demo 做一个10进制和其他进制的转换</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*有两个参数 第一个参数要转换的数字 第二个参数是要转换成的进制*/</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">conversion</span>(<span class=\"hljs-params\">num, type</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">while</span> (num / type) &#123;<br>        stack.push(num % type);<br>        <span class=\"hljs-comment\">// 确保每次计算后都是整数</span><br>        num = <span class=\"hljs-built_in\">parseInt</span>(num / type);<br>    &#125;;<br>    stack.print();<br>    <span class=\"hljs-comment\">// 处理完成后对栈进行清除</span><br>    stack.clear();<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1514,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%88.html\">这里</a></h1><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5><font size=5> \n栈的特点就是后进先出。栈有栈顶和栈底的概念。用数组举例子，数组第一个位置这边就是栈底，最后一个元素的位置就是栈顶，新添加的元素保存在栈顶，在\njs中基本数据类就是存储在栈中。\n数组模拟就是给数组尾部添加元素，移除元素也是从数组尾部移除。\n\n</font>\n\n<p><img src=\"/img/stack.png\" alt=\"示例图\"></p>","more":"<h5 id=\"创建一个栈\"><a href=\"#创建一个栈\" class=\"headerlink\" title=\"创建一个栈\"></a>创建一个栈</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Stack</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">/*通过数组来保存栈的元素*/</span><br>    <span class=\"hljs-keyword\">let</span> item=[];<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h5 id=\"给栈添加一些方法\"><a href=\"#给栈添加一些方法\" class=\"headerlink\" title=\"给栈添加一些方法\"></a>给栈添加一些方法</h5><ol>\n<li>push 添加一个或几个元素到栈顶</li>\n<li>pop移除并返回栈顶的元素</li>\n<li>isEmpty 判断栈是不是空的</li>\n<li>clear 清空栈内的元素</li>\n<li>size返回栈内元素个数</li>\n<li>peek返回栈顶的元素</li>\n</ol>\n<h5 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Stack</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 通过数组保存栈的元素</span><br>    <span class=\"hljs-keyword\">let</span> item = [];<br>    <span class=\"hljs-built_in\">this</span>.push = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item.push(val);<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.pop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item.pop(val);<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.isEmpty = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item.length == <span class=\"hljs-number\">0</span>;<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.clear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        item = [];<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item.length;<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.peek = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> item[item.length - <span class=\"hljs-number\">1</span>];<br>    &#125;;<br>    <span class=\"hljs-built_in\">this</span>.print = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=item.length<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--)&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(item[i]);<br>        &#125;;<br>    &#125;;<br>&#125;;<br><br></code></pre></td></tr></table></figure>\n<p><strong><em>ES6版本</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>&#123;<br>    item = [];<br>    <span class=\"hljs-keyword\">constructor</span>() &#123;&#125;;<br>    push(val) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.push(val);<br>    &#125;;<br>    print() &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-built_in\">this</span>.item.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) &#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.item[i]);<br>        &#125;;<br>    &#125;;<br>    pop(val) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.pop(val);<br>    &#125;;<br>    isEmpty(val) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.length == <span class=\"hljs-number\">0</span>;<br>    &#125;;<br>    clear() &#123;<br>        <span class=\"hljs-built_in\">this</span>.item = [];<br>    &#125;;<br>    size() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.length;<br>    &#125;;<br>    peek() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item[<span class=\"hljs-built_in\">this</span>.item.length - <span class=\"hljs-number\">1</span>];<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"demo-做一个10进制和其他进制的转换\"><a href=\"#demo-做一个10进制和其他进制的转换\" class=\"headerlink\" title=\"demo 做一个10进制和其他进制的转换\"></a>demo 做一个10进制和其他进制的转换</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/*有两个参数 第一个参数要转换的数字 第二个参数是要转换成的进制*/</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">conversion</span>(<span class=\"hljs-params\">num, type</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">while</span> (num / type) &#123;<br>        stack.push(num % type);<br>        <span class=\"hljs-comment\">// 确保每次计算后都是整数</span><br>        num = <span class=\"hljs-built_in\">parseInt</span>(num / type);<br>    &#125;;<br>    stack.print();<br>    <span class=\"hljs-comment\">// 处理完成后对栈进行清除</span><br>    stack.clear();<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"title":"《学习JavaScript数据结构与算法》笔记---队列","abbrlink":12013,"date":"2019-07-02T15:04:43.000Z","_content":"\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%98%9F%E5%88%97.html)\n\n## 概念\n\n<font size=5>\n队列是单向操作，而且是先进先出，所以在队尾进行添加元素，队头移除元素。\n用数组来理解就是，从数组尾部添加，数组头部删除这样才能模拟先进先出。  \n</font>  \n\n![示例图](/img/queue.png)\n\n<!-- more -->\n##### 创建一个队列\n\n\n``` javascript\n class Queue(){\n     /*通过数组来保存队列的元素*/\n     item=[];\n };\n```\n\n\n\n##### 给队列添加一些方法\n\n``` javascript\nclass Queue{\n    item=[];\n    // 给队列队尾添加元素\n    enqueue(val){\n        return this.item.push(val);\n    };\n    // 给队列队头删除元素\n    dequeue(val){\n        return this.item.shift(val);\n    };\n    // 返回队列第一个元素\n    front(val){\n        return this.item[0];\n    };\n    // 判断队列中是否含有元素\n    isEmpty(val){\n        return this.item.length;\n    };\n    // 判断队列的元素个数\n    size(){\n        return this.item.length;\n    };\n};\n```","source":"_posts/计算机基础/js数据结构笔记2.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---队列\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 12013\ndate: 2019-07-02 23:04:43\n---\n\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%98%9F%E5%88%97.html)\n\n## 概念\n\n<font size=5>\n队列是单向操作，而且是先进先出，所以在队尾进行添加元素，队头移除元素。\n用数组来理解就是，从数组尾部添加，数组头部删除这样才能模拟先进先出。  \n</font>  \n\n![示例图](/img/queue.png)\n\n<!-- more -->\n##### 创建一个队列\n\n\n``` javascript\n class Queue(){\n     /*通过数组来保存队列的元素*/\n     item=[];\n };\n```\n\n\n\n##### 给队列添加一些方法\n\n``` javascript\nclass Queue{\n    item=[];\n    // 给队列队尾添加元素\n    enqueue(val){\n        return this.item.push(val);\n    };\n    // 给队列队头删除元素\n    dequeue(val){\n        return this.item.shift(val);\n    };\n    // 返回队列第一个元素\n    front(val){\n        return this.item[0];\n    };\n    // 判断队列中是否含有元素\n    isEmpty(val){\n        return this.item.length;\n    };\n    // 判断队列的元素个数\n    size(){\n        return this.item.length;\n    };\n};\n```","slug":"计算机基础/js数据结构笔记2","published":1,"updated":"2021-12-31T12:01:59.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3v006bj7jf0p55ftvs","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%98%9F%E5%88%97.html\">这里</a></h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><font size=5>\n队列是单向操作，而且是先进先出，所以在队尾进行添加元素，队头移除元素。\n用数组来理解就是，从数组尾部添加，数组头部删除这样才能模拟先进先出。  \n</font>  \n\n<p><img src=\"/img/queue.png\" alt=\"示例图\"></p>\n<a id=\"more\"></a>\n<h5 id=\"创建一个队列\"><a href=\"#创建一个队列\" class=\"headerlink\" title=\"创建一个队列\"></a>创建一个队列</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span>()</span>&#123;<br>    <span class=\"hljs-comment\">/*通过数组来保存队列的元素*/</span><br>    item=[];<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n\n\n<h5 id=\"给队列添加一些方法\"><a href=\"#给队列添加一些方法\" class=\"headerlink\" title=\"给队列添加一些方法\"></a>给队列添加一些方法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span></span>&#123;<br>    item=[];<br>    <span class=\"hljs-comment\">// 给队列队尾添加元素</span><br>    enqueue(val)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.push(val);<br>    &#125;;<br>    <span class=\"hljs-comment\">// 给队列队头删除元素</span><br>    dequeue(val)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.shift(val);<br>    &#125;;<br>    <span class=\"hljs-comment\">// 返回队列第一个元素</span><br>    front(val)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item[<span class=\"hljs-number\">0</span>];<br>    &#125;;<br>    <span class=\"hljs-comment\">// 判断队列中是否含有元素</span><br>    isEmpty(val)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.length;<br>    &#125;;<br>    <span class=\"hljs-comment\">// 判断队列的元素个数</span><br>    size()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.length;<br>    &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":505,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%98%9F%E5%88%97.html\">这里</a></h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><font size=5>\n队列是单向操作，而且是先进先出，所以在队尾进行添加元素，队头移除元素。\n用数组来理解就是，从数组尾部添加，数组头部删除这样才能模拟先进先出。  \n</font>  \n\n<p><img src=\"/img/queue.png\" alt=\"示例图\"></p>","more":"<h5 id=\"创建一个队列\"><a href=\"#创建一个队列\" class=\"headerlink\" title=\"创建一个队列\"></a>创建一个队列</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span>()</span>&#123;<br>    <span class=\"hljs-comment\">/*通过数组来保存队列的元素*/</span><br>    item=[];<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"给队列添加一些方法\"><a href=\"#给队列添加一些方法\" class=\"headerlink\" title=\"给队列添加一些方法\"></a>给队列添加一些方法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span></span>&#123;<br>    item=[];<br>    <span class=\"hljs-comment\">// 给队列队尾添加元素</span><br>    enqueue(val)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.push(val);<br>    &#125;;<br>    <span class=\"hljs-comment\">// 给队列队头删除元素</span><br>    dequeue(val)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.shift(val);<br>    &#125;;<br>    <span class=\"hljs-comment\">// 返回队列第一个元素</span><br>    front(val)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item[<span class=\"hljs-number\">0</span>];<br>    &#125;;<br>    <span class=\"hljs-comment\">// 判断队列中是否含有元素</span><br>    isEmpty(val)&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.length;<br>    &#125;;<br>    <span class=\"hljs-comment\">// 判断队列的元素个数</span><br>    size()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.item.length;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"title":"《学习JavaScript数据结构与算法》笔记---队列之优先队列","abbrlink":33854,"date":"2019-09-02T06:51:44.000Z","_content":"# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.html)\n\n## 概念\n> 1.优先队列和队列的主要区别就是，队列中每个元素不仅含有自身的元素，还有一个代表该元素优先级的标识。  \n> 2.在插入新的元素到队列时，根据该元素的优先级来决定它插入的正确位置。\n> 3.优先队列具有最高级先出队列的行为特征\n\n\n<!-- more -->\n### 封装优先级队列\n\n```javascript\n     function PriorityQueue() {\n         // 封装属性 用数组来存储元素\n        this.items = [];\n        // 创建一个包含元素内容和优先级的类\n        function QueueElement(element, priority) {\n            this.element = element;\n            this.priority = priority;\n        };\n        // 实现插入方法\n        PriorityQueue.prototype.enqueue = function (element, priority) {\n            // 创建QueueElement\n            let queueElement = new QueueElement(element, priority);\n            // 判断队列是否为空?直接插入:和已有元素对比优先级后插入\n            if (this.items.length===0) {\n                this.items.push(queueElement);\n            } else {\n                let added=false;\n                for(let i in this.items){\n                    if(queueElement.priority<this.items[i].priority){\n                        this.items.splice(i,0,queueElement);\n                        added=true;\n                        break;\n                    }\n                };\n                if (!added) {\n                    this.items.push(queueElement);\n                };\n            }\n        }\n     }\n```\n\n### 测试代码\n\n```javascript\n    let pq = new PriorityQueue();\n        pq.enqueue('a',1);\n        pq.enqueue('b',20);\n        pq.enqueue('taotao',19);\n        console.log(pq.items);\n        /* 控制台打印内容\n        (3) [QueueElement, QueueElement, QueueElement]\n            0: QueueElement {element: \"a\", priority: 1}\n            1: QueueElement {element: \"taotao\", priority: 19}\n            2: QueueElement {element: \"b\", priority: 20}\n            length: 3\n            __proto__: Array(0)\n            */\n```\n","source":"_posts/计算机基础/js数据结构笔记3.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---队列之优先队列\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 33854\ndate: 2019-09-02 14:51:44\n---\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.html)\n\n## 概念\n> 1.优先队列和队列的主要区别就是，队列中每个元素不仅含有自身的元素，还有一个代表该元素优先级的标识。  \n> 2.在插入新的元素到队列时，根据该元素的优先级来决定它插入的正确位置。\n> 3.优先队列具有最高级先出队列的行为特征\n\n\n<!-- more -->\n### 封装优先级队列\n\n```javascript\n     function PriorityQueue() {\n         // 封装属性 用数组来存储元素\n        this.items = [];\n        // 创建一个包含元素内容和优先级的类\n        function QueueElement(element, priority) {\n            this.element = element;\n            this.priority = priority;\n        };\n        // 实现插入方法\n        PriorityQueue.prototype.enqueue = function (element, priority) {\n            // 创建QueueElement\n            let queueElement = new QueueElement(element, priority);\n            // 判断队列是否为空?直接插入:和已有元素对比优先级后插入\n            if (this.items.length===0) {\n                this.items.push(queueElement);\n            } else {\n                let added=false;\n                for(let i in this.items){\n                    if(queueElement.priority<this.items[i].priority){\n                        this.items.splice(i,0,queueElement);\n                        added=true;\n                        break;\n                    }\n                };\n                if (!added) {\n                    this.items.push(queueElement);\n                };\n            }\n        }\n     }\n```\n\n### 测试代码\n\n```javascript\n    let pq = new PriorityQueue();\n        pq.enqueue('a',1);\n        pq.enqueue('b',20);\n        pq.enqueue('taotao',19);\n        console.log(pq.items);\n        /* 控制台打印内容\n        (3) [QueueElement, QueueElement, QueueElement]\n            0: QueueElement {element: \"a\", priority: 1}\n            1: QueueElement {element: \"taotao\", priority: 19}\n            2: QueueElement {element: \"b\", priority: 20}\n            length: 3\n            __proto__: Array(0)\n            */\n```\n","slug":"计算机基础/js数据结构笔记3","published":1,"updated":"2021-12-31T12:01:59.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3v006ej7jfhqke5rrp","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.html\">这里</a></h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>1.优先队列和队列的主要区别就是，队列中每个元素不仅含有自身的元素，还有一个代表该元素优先级的标识。<br>2.在插入新的元素到队列时，根据该元素的优先级来决定它插入的正确位置。<br>3.优先队列具有最高级先出队列的行为特征</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"封装优先级队列\"><a href=\"#封装优先级队列\" class=\"headerlink\" title=\"封装优先级队列\"></a>封装优先级队列</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">PriorityQueue</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 封装属性 用数组来存储元素</span><br>   <span class=\"hljs-built_in\">this</span>.items = [];<br>   <span class=\"hljs-comment\">// 创建一个包含元素内容和优先级的类</span><br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">QueueElement</span>(<span class=\"hljs-params\">element, priority</span>) </span>&#123;<br>       <span class=\"hljs-built_in\">this</span>.element = element;<br>       <span class=\"hljs-built_in\">this</span>.priority = priority;<br>   &#125;;<br>   <span class=\"hljs-comment\">// 实现插入方法</span><br>   PriorityQueue.prototype.enqueue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, priority</span>) </span>&#123;<br>       <span class=\"hljs-comment\">// 创建QueueElement</span><br>       <span class=\"hljs-keyword\">let</span> queueElement = <span class=\"hljs-keyword\">new</span> QueueElement(element, priority);<br>       <span class=\"hljs-comment\">// 判断队列是否为空?直接插入:和已有元素对比优先级后插入</span><br>       <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.items.length===<span class=\"hljs-number\">0</span>) &#123;<br>           <span class=\"hljs-built_in\">this</span>.items.push(queueElement);<br>       &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>           <span class=\"hljs-keyword\">let</span> added=<span class=\"hljs-literal\">false</span>;<br>           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">this</span>.items)&#123;<br>               <span class=\"hljs-keyword\">if</span>(queueElement.priority&lt;<span class=\"hljs-built_in\">this</span>.items[i].priority)&#123;<br>                   <span class=\"hljs-built_in\">this</span>.items.splice(i,<span class=\"hljs-number\">0</span>,queueElement);<br>                   added=<span class=\"hljs-literal\">true</span>;<br>                   <span class=\"hljs-keyword\">break</span>;<br>               &#125;<br>           &#125;;<br>           <span class=\"hljs-keyword\">if</span> (!added) &#123;<br>               <span class=\"hljs-built_in\">this</span>.items.push(queueElement);<br>           &#125;;<br>       &#125;<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> pq = <span class=\"hljs-keyword\">new</span> PriorityQueue();<br>    pq.enqueue(<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-number\">1</span>);<br>    pq.enqueue(<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-number\">20</span>);<br>    pq.enqueue(<span class=\"hljs-string\">&#x27;taotao&#x27;</span>,<span class=\"hljs-number\">19</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(pq.items);<br>    <span class=\"hljs-comment\">/* 控制台打印内容</span><br><span class=\"hljs-comment\">    (3) [QueueElement, QueueElement, QueueElement]</span><br><span class=\"hljs-comment\">        0: QueueElement &#123;element: &quot;a&quot;, priority: 1&#125;</span><br><span class=\"hljs-comment\">        1: QueueElement &#123;element: &quot;taotao&quot;, priority: 19&#125;</span><br><span class=\"hljs-comment\">        2: QueueElement &#123;element: &quot;b&quot;, priority: 20&#125;</span><br><span class=\"hljs-comment\">        length: 3</span><br><span class=\"hljs-comment\">        __proto__: Array(0)</span><br><span class=\"hljs-comment\">        */</span><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1241,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97.html\">这里</a></h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>1.优先队列和队列的主要区别就是，队列中每个元素不仅含有自身的元素，还有一个代表该元素优先级的标识。<br>2.在插入新的元素到队列时，根据该元素的优先级来决定它插入的正确位置。<br>3.优先队列具有最高级先出队列的行为特征</p>\n</blockquote>","more":"<h3 id=\"封装优先级队列\"><a href=\"#封装优先级队列\" class=\"headerlink\" title=\"封装优先级队列\"></a>封装优先级队列</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">PriorityQueue</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 封装属性 用数组来存储元素</span><br>   <span class=\"hljs-built_in\">this</span>.items = [];<br>   <span class=\"hljs-comment\">// 创建一个包含元素内容和优先级的类</span><br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">QueueElement</span>(<span class=\"hljs-params\">element, priority</span>) </span>&#123;<br>       <span class=\"hljs-built_in\">this</span>.element = element;<br>       <span class=\"hljs-built_in\">this</span>.priority = priority;<br>   &#125;;<br>   <span class=\"hljs-comment\">// 实现插入方法</span><br>   PriorityQueue.prototype.enqueue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, priority</span>) </span>&#123;<br>       <span class=\"hljs-comment\">// 创建QueueElement</span><br>       <span class=\"hljs-keyword\">let</span> queueElement = <span class=\"hljs-keyword\">new</span> QueueElement(element, priority);<br>       <span class=\"hljs-comment\">// 判断队列是否为空?直接插入:和已有元素对比优先级后插入</span><br>       <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.items.length===<span class=\"hljs-number\">0</span>) &#123;<br>           <span class=\"hljs-built_in\">this</span>.items.push(queueElement);<br>       &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>           <span class=\"hljs-keyword\">let</span> added=<span class=\"hljs-literal\">false</span>;<br>           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">this</span>.items)&#123;<br>               <span class=\"hljs-keyword\">if</span>(queueElement.priority&lt;<span class=\"hljs-built_in\">this</span>.items[i].priority)&#123;<br>                   <span class=\"hljs-built_in\">this</span>.items.splice(i,<span class=\"hljs-number\">0</span>,queueElement);<br>                   added=<span class=\"hljs-literal\">true</span>;<br>                   <span class=\"hljs-keyword\">break</span>;<br>               &#125;<br>           &#125;;<br>           <span class=\"hljs-keyword\">if</span> (!added) &#123;<br>               <span class=\"hljs-built_in\">this</span>.items.push(queueElement);<br>           &#125;;<br>       &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> pq = <span class=\"hljs-keyword\">new</span> PriorityQueue();<br>    pq.enqueue(<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-number\">1</span>);<br>    pq.enqueue(<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-number\">20</span>);<br>    pq.enqueue(<span class=\"hljs-string\">&#x27;taotao&#x27;</span>,<span class=\"hljs-number\">19</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(pq.items);<br>    <span class=\"hljs-comment\">/* 控制台打印内容</span><br><span class=\"hljs-comment\">    (3) [QueueElement, QueueElement, QueueElement]</span><br><span class=\"hljs-comment\">        0: QueueElement &#123;element: &quot;a&quot;, priority: 1&#125;</span><br><span class=\"hljs-comment\">        1: QueueElement &#123;element: &quot;taotao&quot;, priority: 19&#125;</span><br><span class=\"hljs-comment\">        2: QueueElement &#123;element: &quot;b&quot;, priority: 20&#125;</span><br><span class=\"hljs-comment\">        length: 3</span><br><span class=\"hljs-comment\">        __proto__: Array(0)</span><br><span class=\"hljs-comment\">        */</span><br></code></pre></td></tr></table></figure>"},{"title":"《学习JavaScript数据结构与算法》笔记---(单向)链表","abbrlink":38517,"date":"2019-09-03T11:04:43.000Z","_content":"\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%93%BE%E8%A1%A8.html)\n\n# 概念\n\n1.类似于数组一样存储多个数据的数据结构\n2.链表中每个元素称为节点，每个节点包含元素内容和指向下一个节点的指针\n![示例图](/img/linked.jpg)\n\n<!-- more -->\n# 和数组对比\n>***链表的优点***\n>1.内存空间不是必须连续的。可以实现灵活的内存管理\n>2.链表不必再创建时就确定大小，并且大小可以无限延伸下去\n>3.链表再插入和删除数据时，时间复杂度低，效率高\n\n>***链表的缺点***\n>1.访问任何一个位置的元素时，都需要从头开始访问(无法跳过第一或任何一个元素)\n>2.无法通过下标直接访问元素\n\n-----------------\n\n>***数组的优点***\n>1.占用内存空间少\n>2.数组内的数据可以随机访问\n>3.数据查找效率较高（内存连续）\n\n>***数组的缺点***\n>1.插入和删除效率低，因为要移动操作元素之后的所有元素(无法跳过第一或任何一个元素)\n>2.数组大小固定，不能动态拓展(大多数语言是这样js的是动态的)\n\n# 封装一个单向链表\n\n```javascript\n    function LinkedList(){\n        // 链表头\n        this.head=null;\n        // 链表长度\n        this.length=0;\n        // 节点类 \n        function Node(data){\n            // 存储节点包含的数据\n            this.data=data;\n            // 存储指向下一个节点的指针(引用)\n            this.next=null;\n        };\n    };\n```\n\n# 封装一些基本方法\n***只列举插入、添加、删除三个方法，其他方法可以查看源代码***\n1.append(data)----给链表尾部追加节点方法，参数:节点数据 不返回结果\n    ```javascript\n        LinkedList.prototype.append = function (data) {\n            // 1.创建新节点\n            let node = new Node(data);\n            // 2.判断是否是第一个节点  也可以根据heae是否为空判断\n            if (this.length === 0) {\n                this.head = node;\n            } else {\n                // 当前第一个节点\n                let current = this.head;\n                // 通过判断每个节点的next是否为空来找到最后一个元素 \n                while (current.next) {\n                    current = current.next;\n                };\n                // 然后给将最后一个元素的next指向我们新添加的元素\n                current.next = node;\n            }\n            // 3.更新长度\n            this.length++;\n        };\n    ```\n![第一种情况](/img/insert0.png)\n![第二种情况](/img/insert1.png)\n\n***不理解的时候画图就好了***\n\n2.toString()----打印每个节点data内容\n3.insert(position,data)----向特定位置插入节点，参数:位置索引,插入数据  成功返回1，失败返回0\n\n```javascript\n            LinkedList.prototype.insert = function (position, data) {\n                // 1.对position做越界判断  即插入位置是否存在\n                if (position >= 0 && position <= this.length) {\n                    let node = new Node(data);\n                    // 2.插入位置是第一个时\n                    if (position === 0) {\n                        // 让要插入的节点的指针指向原来的第一个节点\n                        node.next = this.head;\n                        // 让head指向要插入的节点\n                        this.head = node;\n                    } else {\n                        // 标识每一个节点的位置  previous保存前一个节点 \n                        let index = 0,\n                            current = this.head,\n                            previous;\n                            // 当index=position时跳出循环\n                        while (index++ < position) {\n                            previous = current;\n                            current = current.next;\n                        };\n                        node.next = current;\n                        previous.next = node;\n                    };\n                    this.length++;\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n```\n4.get(position)-----获取指定位置节点的数据 参数:位置索引  返回获取到的数据或-1\n5.indexof(data)-----在链表中查找指定数据 参数:要查找的数据 返回目标数据节点位置 ，没有返回-1\n6.update(position,data)-----修改指定位置的数据 参数:位置索引,要修改的数据  成功返回1，失败返回0\n7.removeAt(position)-----删除指定位置的节点 参数:位置索引 成功返回删除节点data，失败返回-1\n```javascript\n            LinkedList.prototype.removeAt = function (position) {\n                // 越界判断\n                if (position >= 0 && position <= this.length) {\n                    let index = 0,\n                        current = this.head,\n                        previous;\n                    if (position === 0) {\n                        this.head = current.next;\n                    } else {\n                        while (index++ < position) {\n                            previous = current;\n                            current = current.next;\n                        };\n                        previous.next = current.next;\n                    }\n                    // 更新长度\n                    this.length--;\n                    return current.data;\n                } else {\n                    return -1;\n                }\n            };\n```\n8.remove(data)-----根据data移除该data所在节点 参数:要删除的数据 成功返回删除节点data，失败返回-1\n9.size()-----返回链表对的元素个数\n10.isEmpty()------判断链表是否为空","source":"_posts/计算机基础/js数据结构笔记4.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---(单向)链表\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 38517\ndate: 2019-09-03 19:04:43\n---\n\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%93%BE%E8%A1%A8.html)\n\n# 概念\n\n1.类似于数组一样存储多个数据的数据结构\n2.链表中每个元素称为节点，每个节点包含元素内容和指向下一个节点的指针\n![示例图](/img/linked.jpg)\n\n<!-- more -->\n# 和数组对比\n>***链表的优点***\n>1.内存空间不是必须连续的。可以实现灵活的内存管理\n>2.链表不必再创建时就确定大小，并且大小可以无限延伸下去\n>3.链表再插入和删除数据时，时间复杂度低，效率高\n\n>***链表的缺点***\n>1.访问任何一个位置的元素时，都需要从头开始访问(无法跳过第一或任何一个元素)\n>2.无法通过下标直接访问元素\n\n-----------------\n\n>***数组的优点***\n>1.占用内存空间少\n>2.数组内的数据可以随机访问\n>3.数据查找效率较高（内存连续）\n\n>***数组的缺点***\n>1.插入和删除效率低，因为要移动操作元素之后的所有元素(无法跳过第一或任何一个元素)\n>2.数组大小固定，不能动态拓展(大多数语言是这样js的是动态的)\n\n# 封装一个单向链表\n\n```javascript\n    function LinkedList(){\n        // 链表头\n        this.head=null;\n        // 链表长度\n        this.length=0;\n        // 节点类 \n        function Node(data){\n            // 存储节点包含的数据\n            this.data=data;\n            // 存储指向下一个节点的指针(引用)\n            this.next=null;\n        };\n    };\n```\n\n# 封装一些基本方法\n***只列举插入、添加、删除三个方法，其他方法可以查看源代码***\n1.append(data)----给链表尾部追加节点方法，参数:节点数据 不返回结果\n    ```javascript\n        LinkedList.prototype.append = function (data) {\n            // 1.创建新节点\n            let node = new Node(data);\n            // 2.判断是否是第一个节点  也可以根据heae是否为空判断\n            if (this.length === 0) {\n                this.head = node;\n            } else {\n                // 当前第一个节点\n                let current = this.head;\n                // 通过判断每个节点的next是否为空来找到最后一个元素 \n                while (current.next) {\n                    current = current.next;\n                };\n                // 然后给将最后一个元素的next指向我们新添加的元素\n                current.next = node;\n            }\n            // 3.更新长度\n            this.length++;\n        };\n    ```\n![第一种情况](/img/insert0.png)\n![第二种情况](/img/insert1.png)\n\n***不理解的时候画图就好了***\n\n2.toString()----打印每个节点data内容\n3.insert(position,data)----向特定位置插入节点，参数:位置索引,插入数据  成功返回1，失败返回0\n\n```javascript\n            LinkedList.prototype.insert = function (position, data) {\n                // 1.对position做越界判断  即插入位置是否存在\n                if (position >= 0 && position <= this.length) {\n                    let node = new Node(data);\n                    // 2.插入位置是第一个时\n                    if (position === 0) {\n                        // 让要插入的节点的指针指向原来的第一个节点\n                        node.next = this.head;\n                        // 让head指向要插入的节点\n                        this.head = node;\n                    } else {\n                        // 标识每一个节点的位置  previous保存前一个节点 \n                        let index = 0,\n                            current = this.head,\n                            previous;\n                            // 当index=position时跳出循环\n                        while (index++ < position) {\n                            previous = current;\n                            current = current.next;\n                        };\n                        node.next = current;\n                        previous.next = node;\n                    };\n                    this.length++;\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n```\n4.get(position)-----获取指定位置节点的数据 参数:位置索引  返回获取到的数据或-1\n5.indexof(data)-----在链表中查找指定数据 参数:要查找的数据 返回目标数据节点位置 ，没有返回-1\n6.update(position,data)-----修改指定位置的数据 参数:位置索引,要修改的数据  成功返回1，失败返回0\n7.removeAt(position)-----删除指定位置的节点 参数:位置索引 成功返回删除节点data，失败返回-1\n```javascript\n            LinkedList.prototype.removeAt = function (position) {\n                // 越界判断\n                if (position >= 0 && position <= this.length) {\n                    let index = 0,\n                        current = this.head,\n                        previous;\n                    if (position === 0) {\n                        this.head = current.next;\n                    } else {\n                        while (index++ < position) {\n                            previous = current;\n                            current = current.next;\n                        };\n                        previous.next = current.next;\n                    }\n                    // 更新长度\n                    this.length--;\n                    return current.data;\n                } else {\n                    return -1;\n                }\n            };\n```\n8.remove(data)-----根据data移除该data所在节点 参数:要删除的数据 成功返回删除节点data，失败返回-1\n9.size()-----返回链表对的元素个数\n10.isEmpty()------判断链表是否为空","slug":"计算机基础/js数据结构笔记4","published":1,"updated":"2021-12-31T12:01:59.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3w006hj7jf6rsyhlq4","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%93%BE%E8%A1%A8.html\">这里</a></h1><h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>1.类似于数组一样存储多个数据的数据结构<br>2.链表中每个元素称为节点，每个节点包含元素内容和指向下一个节点的指针<br><img src=\"/img/linked.jpg\" alt=\"示例图\"></p>\n<a id=\"more\"></a>\n<h1 id=\"和数组对比\"><a href=\"#和数组对比\" class=\"headerlink\" title=\"和数组对比\"></a>和数组对比</h1><blockquote>\n<p><strong><em>链表的优点</em></strong><br>1.内存空间不是必须连续的。可以实现灵活的内存管理<br>2.链表不必再创建时就确定大小，并且大小可以无限延伸下去<br>3.链表再插入和删除数据时，时间复杂度低，效率高</p>\n</blockquote>\n<blockquote>\n<p><strong><em>链表的缺点</em></strong><br>1.访问任何一个位置的元素时，都需要从头开始访问(无法跳过第一或任何一个元素)<br>2.无法通过下标直接访问元素</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong><em>数组的优点</em></strong><br>1.占用内存空间少<br>2.数组内的数据可以随机访问<br>3.数据查找效率较高（内存连续）</p>\n</blockquote>\n<blockquote>\n<p><strong><em>数组的缺点</em></strong><br>1.插入和删除效率低，因为要移动操作元素之后的所有元素(无法跳过第一或任何一个元素)<br>2.数组大小固定，不能动态拓展(大多数语言是这样js的是动态的)</p>\n</blockquote>\n<h1 id=\"封装一个单向链表\"><a href=\"#封装一个单向链表\" class=\"headerlink\" title=\"封装一个单向链表\"></a>封装一个单向链表</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LinkedList</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 链表头</span><br>    <span class=\"hljs-built_in\">this</span>.head=<span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-comment\">// 链表长度</span><br>    <span class=\"hljs-built_in\">this</span>.length=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 节点类 </span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\">data</span>)</span>&#123;<br>        <span class=\"hljs-comment\">// 存储节点包含的数据</span><br>        <span class=\"hljs-built_in\">this</span>.data=data;<br>        <span class=\"hljs-comment\">// 存储指向下一个节点的指针(引用)</span><br>        <span class=\"hljs-built_in\">this</span>.next=<span class=\"hljs-literal\">null</span>;<br>    &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"封装一些基本方法\"><a href=\"#封装一些基本方法\" class=\"headerlink\" title=\"封装一些基本方法\"></a>封装一些基本方法</h1><p><strong><em>只列举插入、添加、删除三个方法，其他方法可以查看源代码</em></strong><br>1.append(data)—-给链表尾部追加节点方法，参数:节点数据 不返回结果<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">LinkedList.prototype.append = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 1.创建新节点</span><br>    <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-keyword\">new</span> Node(data);<br>    <span class=\"hljs-comment\">// 2.判断是否是第一个节点  也可以根据heae是否为空判断</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.length === <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-built_in\">this</span>.head = node;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 当前第一个节点</span><br>        <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.head;<br>        <span class=\"hljs-comment\">// 通过判断每个节点的next是否为空来找到最后一个元素 </span><br>        <span class=\"hljs-keyword\">while</span> (current.next) &#123;<br>            current = current.next;<br>        &#125;;<br>        <span class=\"hljs-comment\">// 然后给将最后一个元素的next指向我们新添加的元素</span><br>        current.next = node;<br>    &#125;<br>    <span class=\"hljs-comment\">// 3.更新长度</span><br>    <span class=\"hljs-built_in\">this</span>.length++;<br>&#125;;<br></code></pre></div></td></tr></table></figure><br><img src=\"/img/insert0.png\" alt=\"第一种情况\"><br><img src=\"/img/insert1.png\" alt=\"第二种情况\"></p>\n<p><strong><em>不理解的时候画图就好了</em></strong></p>\n<p>2.toString()—-打印每个节点data内容<br>3.insert(position,data)—-向特定位置插入节点，参数:位置索引,插入数据  成功返回1，失败返回0</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">LinkedList.prototype.insert = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">position, data</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 1.对position做越界判断  即插入位置是否存在</span><br>    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt;= <span class=\"hljs-built_in\">this</span>.length) &#123;<br>        <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-keyword\">new</span> Node(data);<br>        <span class=\"hljs-comment\">// 2.插入位置是第一个时</span><br>        <span class=\"hljs-keyword\">if</span> (position === <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 让要插入的节点的指针指向原来的第一个节点</span><br>            node.next = <span class=\"hljs-built_in\">this</span>.head;<br>            <span class=\"hljs-comment\">// 让head指向要插入的节点</span><br>            <span class=\"hljs-built_in\">this</span>.head = node;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 标识每一个节点的位置  previous保存前一个节点 </span><br>            <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>,<br>                current = <span class=\"hljs-built_in\">this</span>.head,<br>                previous;<br>                <span class=\"hljs-comment\">// 当index=position时跳出循环</span><br>            <span class=\"hljs-keyword\">while</span> (index++ &lt; position) &#123;<br>                previous = current;<br>                current = current.next;<br>            &#125;;<br>            node.next = current;<br>            previous.next = node;<br>        &#125;;<br>        <span class=\"hljs-built_in\">this</span>.length++;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<p>4.get(position)—–获取指定位置节点的数据 参数:位置索引  返回获取到的数据或-1<br>5.indexof(data)—–在链表中查找指定数据 参数:要查找的数据 返回目标数据节点位置 ，没有返回-1<br>6.update(position,data)—–修改指定位置的数据 参数:位置索引,要修改的数据  成功返回1，失败返回0<br>7.removeAt(position)—–删除指定位置的节点 参数:位置索引 成功返回删除节点data，失败返回-1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">LinkedList.prototype.removeAt = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">position</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 越界判断</span><br>    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt;= <span class=\"hljs-built_in\">this</span>.length) &#123;<br>        <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>,<br>            current = <span class=\"hljs-built_in\">this</span>.head,<br>            previous;<br>        <span class=\"hljs-keyword\">if</span> (position === <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-built_in\">this</span>.head = current.next;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">while</span> (index++ &lt; position) &#123;<br>                previous = current;<br>                current = current.next;<br>            &#125;;<br>            previous.next = current.next;<br>        &#125;<br>        <span class=\"hljs-comment\">// 更新长度</span><br>        <span class=\"hljs-built_in\">this</span>.length--;<br>        <span class=\"hljs-keyword\">return</span> current.data;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<p>8.remove(data)—–根据data移除该data所在节点 参数:要删除的数据 成功返回删除节点data，失败返回-1<br>9.size()—–返回链表对的元素个数<br>10.isEmpty()——判断链表是否为空</p>\n","site":{"data":{}},"wordcount":2445,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%93%BE%E8%A1%A8.html\">这里</a></h1><h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>1.类似于数组一样存储多个数据的数据结构<br>2.链表中每个元素称为节点，每个节点包含元素内容和指向下一个节点的指针<br><img src=\"/img/linked.jpg\" alt=\"示例图\"></p>","more":"<h1 id=\"和数组对比\"><a href=\"#和数组对比\" class=\"headerlink\" title=\"和数组对比\"></a>和数组对比</h1><blockquote>\n<p><strong><em>链表的优点</em></strong><br>1.内存空间不是必须连续的。可以实现灵活的内存管理<br>2.链表不必再创建时就确定大小，并且大小可以无限延伸下去<br>3.链表再插入和删除数据时，时间复杂度低，效率高</p>\n</blockquote>\n<blockquote>\n<p><strong><em>链表的缺点</em></strong><br>1.访问任何一个位置的元素时，都需要从头开始访问(无法跳过第一或任何一个元素)<br>2.无法通过下标直接访问元素</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong><em>数组的优点</em></strong><br>1.占用内存空间少<br>2.数组内的数据可以随机访问<br>3.数据查找效率较高（内存连续）</p>\n</blockquote>\n<blockquote>\n<p><strong><em>数组的缺点</em></strong><br>1.插入和删除效率低，因为要移动操作元素之后的所有元素(无法跳过第一或任何一个元素)<br>2.数组大小固定，不能动态拓展(大多数语言是这样js的是动态的)</p>\n</blockquote>\n<h1 id=\"封装一个单向链表\"><a href=\"#封装一个单向链表\" class=\"headerlink\" title=\"封装一个单向链表\"></a>封装一个单向链表</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LinkedList</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 链表头</span><br>    <span class=\"hljs-built_in\">this</span>.head=<span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-comment\">// 链表长度</span><br>    <span class=\"hljs-built_in\">this</span>.length=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 节点类 </span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\">data</span>)</span>&#123;<br>        <span class=\"hljs-comment\">// 存储节点包含的数据</span><br>        <span class=\"hljs-built_in\">this</span>.data=data;<br>        <span class=\"hljs-comment\">// 存储指向下一个节点的指针(引用)</span><br>        <span class=\"hljs-built_in\">this</span>.next=<span class=\"hljs-literal\">null</span>;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"封装一些基本方法\"><a href=\"#封装一些基本方法\" class=\"headerlink\" title=\"封装一些基本方法\"></a>封装一些基本方法</h1><p><strong><em>只列举插入、添加、删除三个方法，其他方法可以查看源代码</em></strong><br>1.append(data)—-给链表尾部追加节点方法，参数:节点数据 不返回结果<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">LinkedList.prototype.append = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 1.创建新节点</span><br>    <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-keyword\">new</span> Node(data);<br>    <span class=\"hljs-comment\">// 2.判断是否是第一个节点  也可以根据heae是否为空判断</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.length === <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-built_in\">this</span>.head = node;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-comment\">// 当前第一个节点</span><br>        <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.head;<br>        <span class=\"hljs-comment\">// 通过判断每个节点的next是否为空来找到最后一个元素 </span><br>        <span class=\"hljs-keyword\">while</span> (current.next) &#123;<br>            current = current.next;<br>        &#125;;<br>        <span class=\"hljs-comment\">// 然后给将最后一个元素的next指向我们新添加的元素</span><br>        current.next = node;<br>    &#125;<br>    <span class=\"hljs-comment\">// 3.更新长度</span><br>    <span class=\"hljs-built_in\">this</span>.length++;<br>&#125;;<br></code></pre></td></tr></table></figure><br><img src=\"/img/insert0.png\" alt=\"第一种情况\"><br><img src=\"/img/insert1.png\" alt=\"第二种情况\"></p>\n<p><strong><em>不理解的时候画图就好了</em></strong></p>\n<p>2.toString()—-打印每个节点data内容<br>3.insert(position,data)—-向特定位置插入节点，参数:位置索引,插入数据  成功返回1，失败返回0</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">LinkedList.prototype.insert = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">position, data</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 1.对position做越界判断  即插入位置是否存在</span><br>    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt;= <span class=\"hljs-built_in\">this</span>.length) &#123;<br>        <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-keyword\">new</span> Node(data);<br>        <span class=\"hljs-comment\">// 2.插入位置是第一个时</span><br>        <span class=\"hljs-keyword\">if</span> (position === <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 让要插入的节点的指针指向原来的第一个节点</span><br>            node.next = <span class=\"hljs-built_in\">this</span>.head;<br>            <span class=\"hljs-comment\">// 让head指向要插入的节点</span><br>            <span class=\"hljs-built_in\">this</span>.head = node;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 标识每一个节点的位置  previous保存前一个节点 </span><br>            <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>,<br>                current = <span class=\"hljs-built_in\">this</span>.head,<br>                previous;<br>                <span class=\"hljs-comment\">// 当index=position时跳出循环</span><br>            <span class=\"hljs-keyword\">while</span> (index++ &lt; position) &#123;<br>                previous = current;<br>                current = current.next;<br>            &#125;;<br>            node.next = current;<br>            previous.next = node;<br>        &#125;;<br>        <span class=\"hljs-built_in\">this</span>.length++;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>4.get(position)—–获取指定位置节点的数据 参数:位置索引  返回获取到的数据或-1<br>5.indexof(data)—–在链表中查找指定数据 参数:要查找的数据 返回目标数据节点位置 ，没有返回-1<br>6.update(position,data)—–修改指定位置的数据 参数:位置索引,要修改的数据  成功返回1，失败返回0<br>7.removeAt(position)—–删除指定位置的节点 参数:位置索引 成功返回删除节点data，失败返回-1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">LinkedList.prototype.removeAt = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">position</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 越界判断</span><br>    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt;= <span class=\"hljs-built_in\">this</span>.length) &#123;<br>        <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>,<br>            current = <span class=\"hljs-built_in\">this</span>.head,<br>            previous;<br>        <span class=\"hljs-keyword\">if</span> (position === <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-built_in\">this</span>.head = current.next;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">while</span> (index++ &lt; position) &#123;<br>                previous = current;<br>                current = current.next;<br>            &#125;;<br>            previous.next = current.next;<br>        &#125;<br>        <span class=\"hljs-comment\">// 更新长度</span><br>        <span class=\"hljs-built_in\">this</span>.length--;<br>        <span class=\"hljs-keyword\">return</span> current.data;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<p>8.remove(data)—–根据data移除该data所在节点 参数:要删除的数据 成功返回删除节点data，失败返回-1<br>9.size()—–返回链表对的元素个数<br>10.isEmpty()——判断链表是否为空</p>"},{"title":"《学习JavaScript数据结构与算法》笔记---(双向)链表","abbrlink":3574,"date":"2019-09-03T11:42:46.000Z","_content":"\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.html)\n\n# 和单向链表区别\n1.每个节点有两个指针，一个指向上一个节点，一个指向下一个节点\n2.除过链表头head还多了一链表尾tail属性\n![示例图](/img/doubleLinked.png)\n\n>***双向链表的优点***\n>1.从双向链表中的任意一个结点开始，都可以很方便地访问它的前节点和后节点，单向链表都得从第一个节点开始\n>2.既可以从头遍历，又可以从尾部遍历\n\n---------------\n\n>***双向链表的缺点***\n>1.每次插入删除节点时，需要处理四个引用\n>2.相比较单向链表，存储空间要求更大\n\n<!-- more -->\n# 封装一个双向链表\n\n```javascript\n    function LinkedList(){\n        // 头结点\n        this.head=null;\n        // 链表长度\n        this.length=0;\n        // 尾结点\n        this.tail=null;\n        // 节点类 \n        function Node(data){\n            // 存储指向上一个节点的指针(应用)\n            this.prev=null;\n            // 存储节点包含的数据\n            this.data=data;\n            // 存储指向下一个节点的指针(引用)\n            this.next=null;\n        };\n    };\n```\n\n# 基本方法和单向链表的方法一样\n\n****但需要注意的时，涉及到要操作前后两个节点时，不仅要处理指向下一个节点的指针，还要处理指向上一个节点的指针****\n\n\n# 总结\n1.遍历链表：通过查看节点的next是否为空来遍历\n2.查找指定位置节点：通过设置index，然后在遍历时和目标位置对比来查找","source":"_posts/计算机基础/js数据结构笔记5.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---(双向)链表\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 3574\ndate: 2019-09-03 19:42:46\n---\n\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.html)\n\n# 和单向链表区别\n1.每个节点有两个指针，一个指向上一个节点，一个指向下一个节点\n2.除过链表头head还多了一链表尾tail属性\n![示例图](/img/doubleLinked.png)\n\n>***双向链表的优点***\n>1.从双向链表中的任意一个结点开始，都可以很方便地访问它的前节点和后节点，单向链表都得从第一个节点开始\n>2.既可以从头遍历，又可以从尾部遍历\n\n---------------\n\n>***双向链表的缺点***\n>1.每次插入删除节点时，需要处理四个引用\n>2.相比较单向链表，存储空间要求更大\n\n<!-- more -->\n# 封装一个双向链表\n\n```javascript\n    function LinkedList(){\n        // 头结点\n        this.head=null;\n        // 链表长度\n        this.length=0;\n        // 尾结点\n        this.tail=null;\n        // 节点类 \n        function Node(data){\n            // 存储指向上一个节点的指针(应用)\n            this.prev=null;\n            // 存储节点包含的数据\n            this.data=data;\n            // 存储指向下一个节点的指针(引用)\n            this.next=null;\n        };\n    };\n```\n\n# 基本方法和单向链表的方法一样\n\n****但需要注意的时，涉及到要操作前后两个节点时，不仅要处理指向下一个节点的指针，还要处理指向上一个节点的指针****\n\n\n# 总结\n1.遍历链表：通过查看节点的next是否为空来遍历\n2.查找指定位置节点：通过设置index，然后在遍历时和目标位置对比来查找","slug":"计算机基础/js数据结构笔记5","published":1,"updated":"2021-12-31T12:01:59.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3w006kj7jf2uut8q3e","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.html\">这里</a></h1><h1 id=\"和单向链表区别\"><a href=\"#和单向链表区别\" class=\"headerlink\" title=\"和单向链表区别\"></a>和单向链表区别</h1><p>1.每个节点有两个指针，一个指向上一个节点，一个指向下一个节点<br>2.除过链表头head还多了一链表尾tail属性<br><img src=\"/img/doubleLinked.png\" alt=\"示例图\"></p>\n<blockquote>\n<p><strong><em>双向链表的优点</em></strong><br>1.从双向链表中的任意一个结点开始，都可以很方便地访问它的前节点和后节点，单向链表都得从第一个节点开始<br>2.既可以从头遍历，又可以从尾部遍历</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong><em>双向链表的缺点</em></strong><br>1.每次插入删除节点时，需要处理四个引用<br>2.相比较单向链表，存储空间要求更大</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"封装一个双向链表\"><a href=\"#封装一个双向链表\" class=\"headerlink\" title=\"封装一个双向链表\"></a>封装一个双向链表</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LinkedList</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 头结点</span><br>    <span class=\"hljs-built_in\">this</span>.head=<span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-comment\">// 链表长度</span><br>    <span class=\"hljs-built_in\">this</span>.length=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 尾结点</span><br>    <span class=\"hljs-built_in\">this</span>.tail=<span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-comment\">// 节点类 </span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\">data</span>)</span>&#123;<br>        <span class=\"hljs-comment\">// 存储指向上一个节点的指针(应用)</span><br>        <span class=\"hljs-built_in\">this</span>.prev=<span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-comment\">// 存储节点包含的数据</span><br>        <span class=\"hljs-built_in\">this</span>.data=data;<br>        <span class=\"hljs-comment\">// 存储指向下一个节点的指针(引用)</span><br>        <span class=\"hljs-built_in\">this</span>.next=<span class=\"hljs-literal\">null</span>;<br>    &#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"基本方法和单向链表的方法一样\"><a href=\"#基本方法和单向链表的方法一样\" class=\"headerlink\" title=\"基本方法和单向链表的方法一样\"></a>基本方法和单向链表的方法一样</h1><p><strong><strong>但需要注意的时，涉及到要操作前后两个节点时，不仅要处理指向下一个节点的指针，还要处理指向上一个节点的指针</strong></strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>1.遍历链表：通过查看节点的next是否为空来遍历<br>2.查找指定位置节点：通过设置index，然后在遍历时和目标位置对比来查找</p>\n","site":{"data":{}},"wordcount":573,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.html\">这里</a></h1><h1 id=\"和单向链表区别\"><a href=\"#和单向链表区别\" class=\"headerlink\" title=\"和单向链表区别\"></a>和单向链表区别</h1><p>1.每个节点有两个指针，一个指向上一个节点，一个指向下一个节点<br>2.除过链表头head还多了一链表尾tail属性<br><img src=\"/img/doubleLinked.png\" alt=\"示例图\"></p>\n<blockquote>\n<p><strong><em>双向链表的优点</em></strong><br>1.从双向链表中的任意一个结点开始，都可以很方便地访问它的前节点和后节点，单向链表都得从第一个节点开始<br>2.既可以从头遍历，又可以从尾部遍历</p>\n</blockquote>\n<hr>\n<blockquote>\n<p><strong><em>双向链表的缺点</em></strong><br>1.每次插入删除节点时，需要处理四个引用<br>2.相比较单向链表，存储空间要求更大</p>\n</blockquote>","more":"<h1 id=\"封装一个双向链表\"><a href=\"#封装一个双向链表\" class=\"headerlink\" title=\"封装一个双向链表\"></a>封装一个双向链表</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LinkedList</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 头结点</span><br>    <span class=\"hljs-built_in\">this</span>.head=<span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-comment\">// 链表长度</span><br>    <span class=\"hljs-built_in\">this</span>.length=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 尾结点</span><br>    <span class=\"hljs-built_in\">this</span>.tail=<span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-comment\">// 节点类 </span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\">data</span>)</span>&#123;<br>        <span class=\"hljs-comment\">// 存储指向上一个节点的指针(应用)</span><br>        <span class=\"hljs-built_in\">this</span>.prev=<span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-comment\">// 存储节点包含的数据</span><br>        <span class=\"hljs-built_in\">this</span>.data=data;<br>        <span class=\"hljs-comment\">// 存储指向下一个节点的指针(引用)</span><br>        <span class=\"hljs-built_in\">this</span>.next=<span class=\"hljs-literal\">null</span>;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"基本方法和单向链表的方法一样\"><a href=\"#基本方法和单向链表的方法一样\" class=\"headerlink\" title=\"基本方法和单向链表的方法一样\"></a>基本方法和单向链表的方法一样</h1><p><strong><strong>但需要注意的时，涉及到要操作前后两个节点时，不仅要处理指向下一个节点的指针，还要处理指向上一个节点的指针</strong></strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>1.遍历链表：通过查看节点的next是否为空来遍历<br>2.查找指定位置节点：通过设置index，然后在遍历时和目标位置对比来查找</p>"},{"title":"《学习JavaScript数据结构与算法》笔记---集合","abbrlink":47845,"date":"2019-09-04T10:46:18.000Z","_content":"\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%9B%86%E5%90%88%E7%BB%93%E6%9E%84.html)\n\n# 概念\n\n1. 集合是由一组***无序***且***唯一***的项组成的。\n2. 可以理解成一种特殊的数组\n    1.特殊在里面的元素没有顺序，不能重复\n    2.没有顺序意味着不能通过下标访问，不能重复意味着相同对象在集合中只存一份\n3. 和数学中的集合一样，也有并集、交集、差集、子集的概念。\n\n<!-- more -->\n# ES6的set结构就是一个集合\n\n# 集合常见的实现方式是哈希表\n\n# 封装一个集合类\n\n```javascript\n    function SetCustomer(){\n        // 通过对象来存储我们的元素 也可以用数组 对象方便操作\n        // 属性\n        this.items = {};\n    };\n```\n\n# 动手封装集合的常见操作\n\n>***基本方法***\n>1.add(value)向集合添加一个新的项\n```javascript\n    SetCustomer.prototype.add = function (value) {\n        this.items[value] = value;\n    };\n```\n>2.remove(vlaue)移除集合的一项\n```javascript\n    SetCustomer.prototype.remove = function (value) {\n        if (this.has(value)) {\n            delete this.items[value];\n            return true;\n        } else {\n            return false;\n        }\n    };\n```\n>3.has(value)判断集合有无指定的一项?返回true:返回false\n```javascript\n    SetCustomer.prototype.has = function (value) {\n        if (this.items.hasOwnProperty(value)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n```\n>4.clear()移除集合所有项\n```javascript\n            SetCustomer.prototype.clear = function () {\n                this.items = {};\n            };\n```\n>5.size()返回集合包含项的个数\n```javascript\n    SetCustomer.prototype.size = function () {\n        return Object.keys(this.items).length;\n    };\n```\n>6.values()返回一个包含集合所有值的数组\n```javascript\n    SetCustomer.prototype.values = function () {\n        // 因为存储集合时键值保持一致的 所以取键也行\n        return Object.keys(this.items);\n    };\n```\n\n>***封装两个集合的求集操作***\n>1.并集：对于给定的2个集合，返回一个包含两个集合中 所有的 元素的新集合\n```javascript\n    SetCustomer.prototype.union = function (otherSet) {\n        // 1.创建新集合\n        let unionSet = new SetCustomer();\n        // 2.将A集合元素添加到新集合\n        for (let i = 0; i < this.size(); i++) {\n            unionSet.add(this.values()[i]);\n        };\n        // 3.将B集合添加到新集合\n        for (let i = 0; i < otherSet.size(); i++) {\n            unionSet.add(otherSet.values()[i]);\n        };\n        // 4.返回新集合\n        return unionSet;\n    };\n```\n>2.交集：对于给定的2个集合，返回一个包含两个集合中 共有的 元素的新集合\n```javascript\n SetCustomer.prototype.intersection = function (otherSet) {\n    let insSet = new SetCustomer();\n    for (let i = 0; i < this.size(); i++) {\n        if (otherSet.has(this.values()[i])) {\n            insSet.add(this.values()[i]);\n        }\n    };\n    return insSet;\n};\n```\n>3.差集：对于给定的2个集合，返回一个包含所有存在A但不存在B集合的所有元素的新集合\n```javascript\nSetCustomer.prototype.difference = function (otherSet) {\n    let diffSet = new SetCustomer();\n    for (let i = 0; i < this.size(); i++) {\n        if (!otherSet.has(this.values()[i])) {\n            diffSet.add(this.values()[i]);\n        }\n    };\n    return diffSet;\n};\n```\n>4.子集：验证一个集合是否是另一个集合的子集\n```javascript\nSetCustomer.prototype.subset = function (otherSet) {\n                if (this.size() > otherSet.size) {\n                    return false;\n                } else {\n                    for (let i = 0; i < this.size(); i++) {\n                        if (!otherSet.has(this.values()[i])) {\n                            return false;\n                        }\n                    };\n                    return true;\n                }\n};\n```","source":"_posts/计算机基础/js数据结构笔记6.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---集合\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 47845\ndate: 2019-09-04 18:46:18\n---\n\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%9B%86%E5%90%88%E7%BB%93%E6%9E%84.html)\n\n# 概念\n\n1. 集合是由一组***无序***且***唯一***的项组成的。\n2. 可以理解成一种特殊的数组\n    1.特殊在里面的元素没有顺序，不能重复\n    2.没有顺序意味着不能通过下标访问，不能重复意味着相同对象在集合中只存一份\n3. 和数学中的集合一样，也有并集、交集、差集、子集的概念。\n\n<!-- more -->\n# ES6的set结构就是一个集合\n\n# 集合常见的实现方式是哈希表\n\n# 封装一个集合类\n\n```javascript\n    function SetCustomer(){\n        // 通过对象来存储我们的元素 也可以用数组 对象方便操作\n        // 属性\n        this.items = {};\n    };\n```\n\n# 动手封装集合的常见操作\n\n>***基本方法***\n>1.add(value)向集合添加一个新的项\n```javascript\n    SetCustomer.prototype.add = function (value) {\n        this.items[value] = value;\n    };\n```\n>2.remove(vlaue)移除集合的一项\n```javascript\n    SetCustomer.prototype.remove = function (value) {\n        if (this.has(value)) {\n            delete this.items[value];\n            return true;\n        } else {\n            return false;\n        }\n    };\n```\n>3.has(value)判断集合有无指定的一项?返回true:返回false\n```javascript\n    SetCustomer.prototype.has = function (value) {\n        if (this.items.hasOwnProperty(value)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n```\n>4.clear()移除集合所有项\n```javascript\n            SetCustomer.prototype.clear = function () {\n                this.items = {};\n            };\n```\n>5.size()返回集合包含项的个数\n```javascript\n    SetCustomer.prototype.size = function () {\n        return Object.keys(this.items).length;\n    };\n```\n>6.values()返回一个包含集合所有值的数组\n```javascript\n    SetCustomer.prototype.values = function () {\n        // 因为存储集合时键值保持一致的 所以取键也行\n        return Object.keys(this.items);\n    };\n```\n\n>***封装两个集合的求集操作***\n>1.并集：对于给定的2个集合，返回一个包含两个集合中 所有的 元素的新集合\n```javascript\n    SetCustomer.prototype.union = function (otherSet) {\n        // 1.创建新集合\n        let unionSet = new SetCustomer();\n        // 2.将A集合元素添加到新集合\n        for (let i = 0; i < this.size(); i++) {\n            unionSet.add(this.values()[i]);\n        };\n        // 3.将B集合添加到新集合\n        for (let i = 0; i < otherSet.size(); i++) {\n            unionSet.add(otherSet.values()[i]);\n        };\n        // 4.返回新集合\n        return unionSet;\n    };\n```\n>2.交集：对于给定的2个集合，返回一个包含两个集合中 共有的 元素的新集合\n```javascript\n SetCustomer.prototype.intersection = function (otherSet) {\n    let insSet = new SetCustomer();\n    for (let i = 0; i < this.size(); i++) {\n        if (otherSet.has(this.values()[i])) {\n            insSet.add(this.values()[i]);\n        }\n    };\n    return insSet;\n};\n```\n>3.差集：对于给定的2个集合，返回一个包含所有存在A但不存在B集合的所有元素的新集合\n```javascript\nSetCustomer.prototype.difference = function (otherSet) {\n    let diffSet = new SetCustomer();\n    for (let i = 0; i < this.size(); i++) {\n        if (!otherSet.has(this.values()[i])) {\n            diffSet.add(this.values()[i]);\n        }\n    };\n    return diffSet;\n};\n```\n>4.子集：验证一个集合是否是另一个集合的子集\n```javascript\nSetCustomer.prototype.subset = function (otherSet) {\n                if (this.size() > otherSet.size) {\n                    return false;\n                } else {\n                    for (let i = 0; i < this.size(); i++) {\n                        if (!otherSet.has(this.values()[i])) {\n                            return false;\n                        }\n                    };\n                    return true;\n                }\n};\n```","slug":"计算机基础/js数据结构笔记6","published":1,"updated":"2021-12-31T12:01:59.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3w006nj7jfdvk6e9hg","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%9B%86%E5%90%88%E7%BB%93%E6%9E%84.html\">这里</a></h1><h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ol>\n<li>集合是由一组*<strong>无序**<em>且</em></strong>唯一***的项组成的。</li>\n<li>可以理解成一种特殊的数组<br> 1.特殊在里面的元素没有顺序，不能重复<br> 2.没有顺序意味着不能通过下标访问，不能重复意味着相同对象在集合中只存一份</li>\n<li>和数学中的集合一样，也有并集、交集、差集、子集的概念。</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"ES6的set结构就是一个集合\"><a href=\"#ES6的set结构就是一个集合\" class=\"headerlink\" title=\"ES6的set结构就是一个集合\"></a>ES6的set结构就是一个集合</h1><h1 id=\"集合常见的实现方式是哈希表\"><a href=\"#集合常见的实现方式是哈希表\" class=\"headerlink\" title=\"集合常见的实现方式是哈希表\"></a>集合常见的实现方式是哈希表</h1><h1 id=\"封装一个集合类\"><a href=\"#封装一个集合类\" class=\"headerlink\" title=\"封装一个集合类\"></a>封装一个集合类</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SetCustomer</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 通过对象来存储我们的元素 也可以用数组 对象方便操作</span><br>    <span class=\"hljs-comment\">// 属性</span><br>    <span class=\"hljs-built_in\">this</span>.items = &#123;&#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"动手封装集合的常见操作\"><a href=\"#动手封装集合的常见操作\" class=\"headerlink\" title=\"动手封装集合的常见操作\"></a>动手封装集合的常见操作</h1><blockquote>\n<p><strong><em>基本方法</em></strong><br>1.add(value)向集合添加一个新的项</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.items[value] = value;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>2.remove(vlaue)移除集合的一项</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.has(value)) &#123;<br>        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.items[value];<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>3.has(value)判断集合有无指定的一项?返回true:返回false</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.has = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.items.hasOwnProperty(value)) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>4.clear()移除集合所有项</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.clear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.items = &#123;&#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>5.size()返回集合包含项的个数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.size = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.keys(<span class=\"hljs-built_in\">this</span>.items).length;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>6.values()返回一个包含集合所有值的数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.values = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 因为存储集合时键值保持一致的 所以取键也行</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.keys(<span class=\"hljs-built_in\">this</span>.items);<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p><strong><em>封装两个集合的求集操作</em></strong><br>1.并集：对于给定的2个集合，返回一个包含两个集合中 所有的 元素的新集合</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.union = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">otherSet</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 1.创建新集合</span><br>    <span class=\"hljs-keyword\">let</span> unionSet = <span class=\"hljs-keyword\">new</span> SetCustomer();<br>    <span class=\"hljs-comment\">// 2.将A集合元素添加到新集合</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.size(); i++) &#123;<br>        unionSet.add(<span class=\"hljs-built_in\">this</span>.values()[i]);<br>    &#125;;<br>    <span class=\"hljs-comment\">// 3.将B集合添加到新集合</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; otherSet.size(); i++) &#123;<br>        unionSet.add(otherSet.values()[i]);<br>    &#125;;<br>    <span class=\"hljs-comment\">// 4.返回新集合</span><br>    <span class=\"hljs-keyword\">return</span> unionSet;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>2.交集：对于给定的2个集合，返回一个包含两个集合中 共有的 元素的新集合</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"> SetCustomer.prototype.intersection = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">otherSet</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> insSet = <span class=\"hljs-keyword\">new</span> SetCustomer();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.size(); i++) &#123;<br>        <span class=\"hljs-keyword\">if</span> (otherSet.has(<span class=\"hljs-built_in\">this</span>.values()[i])) &#123;<br>            insSet.add(<span class=\"hljs-built_in\">this</span>.values()[i]);<br>        &#125;<br>    &#125;;<br>    <span class=\"hljs-keyword\">return</span> insSet;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>3.差集：对于给定的2个集合，返回一个包含所有存在A但不存在B集合的所有元素的新集合</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.difference = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">otherSet</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> diffSet = <span class=\"hljs-keyword\">new</span> SetCustomer();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.size(); i++) &#123;<br>        <span class=\"hljs-keyword\">if</span> (!otherSet.has(<span class=\"hljs-built_in\">this</span>.values()[i])) &#123;<br>            diffSet.add(<span class=\"hljs-built_in\">this</span>.values()[i]);<br>        &#125;<br>    &#125;;<br>    <span class=\"hljs-keyword\">return</span> diffSet;<br>&#125;;<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>4.子集：验证一个集合是否是另一个集合的子集</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.subset = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">otherSet</span>) </span>&#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.size() &gt; otherSet.size) &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.size(); i++) &#123;<br>                        <span class=\"hljs-keyword\">if</span> (!otherSet.has(<span class=\"hljs-built_in\">this</span>.values()[i])) &#123;<br>                            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                        &#125;<br>                    &#125;;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>                &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":2282,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E9%9B%86%E5%90%88%E7%BB%93%E6%9E%84.html\">这里</a></h1><h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ol>\n<li>集合是由一组*<strong>无序**<em>且</em></strong>唯一***的项组成的。</li>\n<li>可以理解成一种特殊的数组<br> 1.特殊在里面的元素没有顺序，不能重复<br> 2.没有顺序意味着不能通过下标访问，不能重复意味着相同对象在集合中只存一份</li>\n<li>和数学中的集合一样，也有并集、交集、差集、子集的概念。</li>\n</ol>","more":"<h1 id=\"ES6的set结构就是一个集合\"><a href=\"#ES6的set结构就是一个集合\" class=\"headerlink\" title=\"ES6的set结构就是一个集合\"></a>ES6的set结构就是一个集合</h1><h1 id=\"集合常见的实现方式是哈希表\"><a href=\"#集合常见的实现方式是哈希表\" class=\"headerlink\" title=\"集合常见的实现方式是哈希表\"></a>集合常见的实现方式是哈希表</h1><h1 id=\"封装一个集合类\"><a href=\"#封装一个集合类\" class=\"headerlink\" title=\"封装一个集合类\"></a>封装一个集合类</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SetCustomer</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-comment\">// 通过对象来存储我们的元素 也可以用数组 对象方便操作</span><br>    <span class=\"hljs-comment\">// 属性</span><br>    <span class=\"hljs-built_in\">this</span>.items = &#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"动手封装集合的常见操作\"><a href=\"#动手封装集合的常见操作\" class=\"headerlink\" title=\"动手封装集合的常见操作\"></a>动手封装集合的常见操作</h1><blockquote>\n<p><strong><em>基本方法</em></strong><br>1.add(value)向集合添加一个新的项</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.items[value] = value;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>2.remove(vlaue)移除集合的一项</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.has(value)) &#123;<br>        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.items[value];<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>3.has(value)判断集合有无指定的一项?返回true:返回false</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.has = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.items.hasOwnProperty(value)) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>4.clear()移除集合所有项</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.clear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.items = &#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>5.size()返回集合包含项的个数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.size = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.keys(<span class=\"hljs-built_in\">this</span>.items).length;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>6.values()返回一个包含集合所有值的数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.values = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 因为存储集合时键值保持一致的 所以取键也行</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.keys(<span class=\"hljs-built_in\">this</span>.items);<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong><em>封装两个集合的求集操作</em></strong><br>1.并集：对于给定的2个集合，返回一个包含两个集合中 所有的 元素的新集合</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.union = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">otherSet</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// 1.创建新集合</span><br>    <span class=\"hljs-keyword\">let</span> unionSet = <span class=\"hljs-keyword\">new</span> SetCustomer();<br>    <span class=\"hljs-comment\">// 2.将A集合元素添加到新集合</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.size(); i++) &#123;<br>        unionSet.add(<span class=\"hljs-built_in\">this</span>.values()[i]);<br>    &#125;;<br>    <span class=\"hljs-comment\">// 3.将B集合添加到新集合</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; otherSet.size(); i++) &#123;<br>        unionSet.add(otherSet.values()[i]);<br>    &#125;;<br>    <span class=\"hljs-comment\">// 4.返回新集合</span><br>    <span class=\"hljs-keyword\">return</span> unionSet;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>2.交集：对于给定的2个集合，返回一个包含两个集合中 共有的 元素的新集合</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"> SetCustomer.prototype.intersection = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">otherSet</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> insSet = <span class=\"hljs-keyword\">new</span> SetCustomer();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.size(); i++) &#123;<br>        <span class=\"hljs-keyword\">if</span> (otherSet.has(<span class=\"hljs-built_in\">this</span>.values()[i])) &#123;<br>            insSet.add(<span class=\"hljs-built_in\">this</span>.values()[i]);<br>        &#125;<br>    &#125;;<br>    <span class=\"hljs-keyword\">return</span> insSet;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>3.差集：对于给定的2个集合，返回一个包含所有存在A但不存在B集合的所有元素的新集合</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.difference = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">otherSet</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">let</span> diffSet = <span class=\"hljs-keyword\">new</span> SetCustomer();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.size(); i++) &#123;<br>        <span class=\"hljs-keyword\">if</span> (!otherSet.has(<span class=\"hljs-built_in\">this</span>.values()[i])) &#123;<br>            diffSet.add(<span class=\"hljs-built_in\">this</span>.values()[i]);<br>        &#125;<br>    &#125;;<br>    <span class=\"hljs-keyword\">return</span> diffSet;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>4.子集：验证一个集合是否是另一个集合的子集</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">SetCustomer.prototype.subset = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">otherSet</span>) </span>&#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.size() &gt; otherSet.size) &#123;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.size(); i++) &#123;<br>                        <span class=\"hljs-keyword\">if</span> (!otherSet.has(<span class=\"hljs-built_in\">this</span>.values()[i])) &#123;<br>                            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>                        &#125;<br>                    &#125;;<br>                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>                &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>"},{"title":"《学习JavaScript数据结构与算法》笔记---哈希表","abbrlink":56640,"date":"2019-09-10T13:20:45.000Z","_content":"# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%A1%88%E4%BE%8B.html)\n\n\n# 理论\n\n***特点***\n>1.基于数组创建的一种数据结构\n>2.存储元素时，对每一个元素通过哈希函数，进行哈希化后存储\n>3.存储后的这个数组就叫做哈希表(HashTable，也有叫散列表的)\n\n***和数组对比***\n>**优点**\n>>比数组更快的查找速度(因为删除，修改基于查找所以效率也提高)\n\n>**缺点**\n>>key值不可以重复\n>>哈希表没有顺序，不能以一定的顺序遍历\n\n<!-- more -->\n***哈希函数***\n>1.当在一百万数据的数组中，根据内容查找一个元素和根据那个元素的下标来查找时，时间差距很大\n![对比图](/img/hash.jpg)\n>2.哈希函数做的事就是把一个元素的key值转换成一个数字，然后在数组中以这个数字为下表存入数据\n>3.查找时，也是根据存入时哈希化(使用哈希函数对key进行转换的过程)的key值条件,先对其哈希化然后通过哈希化后的数字去数组中查找\n>4.一个好的哈希函数应该具有2个特点:\n- 1.快速计算(减少乘法，乘法比加法在计算机中更耗费性能)\n- 2.哈希后的数组下标要尽可能平均\n\n***冲突***\n>当哈希化key值后出现的数字发生重复时这种现象叫做冲突\n>冲突的解决方案\n>>1.链地址法(用的更多，下文代码实现也使用这种方式)\n- 存储元素时，用数组或链表进行存储\n\n>>2.开放地址法(寻找还是空的位置来存储)\n- 线性探测：以一定的规则来寻找下一个空位置来存储，这个规则得出的数一般是一个质数，称做步长.\n\n# 代码实现\n\n***封装哈希表***\n>封装方法：\n>>哈希函数---hash(key)\n- 传入要哈希的key，然后将该key值每个字母转换成ASCII码做和在进行一定的处理，以下函数规则参考自《学习JavaScript数据结构与算法》\n\n>>存储元素---put(obj)\n- 传入要存储的元素(下文是存储一个对象)，存储时先通过哈希函数将某个属性(下文是name)哈希化得到要存储的位置，然后在存储时进行判断：1.该位置为空，直接插入；2.不为空，对比查看name值是否相同，不同插入在最后，若相同，覆盖；\n\n>>获取元素---get(str)\n- 传入要查找的的内容(存储时哈希化的属性name)，查找时先通过哈希函数将查找值哈希化得到目标位置，然后直接查找，有返回整个对象；无，返回null\n\n```javascript\n function HashTable() {\n            //  存储元素的数组\n            this.items = [];\n            // 哈希函数\n            HashTable.prototype.hash = function (key) {\n                let hashCode = 5381;\n                for (let i = 0; i < key.length; i++) {\n                    hashCode = 33 * hashCode + key.charCodeAt();\n                };\n                return hashCode % 1013;\n            };\n            // 存和改\n            HashTable.prototype.put = function (obj) {\n                let index = this.hash(obj.name);\n                // 初始化该位置\n                let current = this.items[index];\n                // 判断要存储位置是否为空\n                if (current == null) {\n                    this.items[index] = [];\n                    current = this.items[index];\n                    // 为空 直接插入到第一个位置\n                    current.push(obj);\n                } else {\n                    // 不为空 判断和里面的元素是否相同\n                    for (let i = 0; i < current.length; i++) {\n                        // 相同修改\n                        if (current[i].name == obj.name) {\n                            current[i] = obj;\n                            return;\n                        }\n                    };\n                    // 不同 插入到最后\n                    current.push(obj);\n                }\n            };\n            // 取\n            HashTable.prototype.get = function (str) {\n                let index = this.hash(str);\n                let current = this.items[index];\n                if (current != null) {\n                    for (let i = 0; i < current.length; i++) {\n                        if (current[i].name == str) {\n                            return current[i];\n                        }\n                    };\n                }\n                return null;\n            };\n    };\n    // 测试代码  \n\n        let hs = new HashTable();\n        // 创建一个对象并存如\n        let shuaxin = {\n            name: \"shuaxin\",\n            phone: '158****26**'\n        };\n        hs.put(shuaxin);\n// 测试哈希表和数组查找效率对比\n// 先给数组空的位置插入模拟数据 100w\n        function insert() {\n            for (let i = 0; i < 1000000; i++) {\n                if (hs.items[i] == null) {\n                    hs.items[i] = [{\n                        name: \"demo\",\n                        phone: \"456\"\n                    }];\n                } else {\n                    continue;\n                }\n            };\n        };\n        insert();\n        // 数组普通的对比查找\n        function find(str) {\n            // console.log(str);\n            for (let i in hs.items) {\n                if (str == hs.items[i][0].name) {\n                    return hs.items[i][0];\n                }\n            };\n            return null;\n        };\n\n        // 上文图片的结果\n        console.warn('100w数据中效率对比');\n        // 250+ms\n        console.time('遍历查找');\n        console.log(find('shuaxin'));\n        console.timeEnd('遍历查找');\n        // 1ms左右\n        console.time('哈希查找');\n        console.log(hs.get('shuaxin'));\n        console.timeEnd('哈希查找');\n```","source":"_posts/计算机基础/js数据结构笔记7.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---哈希表\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 56640\ndate: 2019-09-10 21:20:45\n---\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%A1%88%E4%BE%8B.html)\n\n\n# 理论\n\n***特点***\n>1.基于数组创建的一种数据结构\n>2.存储元素时，对每一个元素通过哈希函数，进行哈希化后存储\n>3.存储后的这个数组就叫做哈希表(HashTable，也有叫散列表的)\n\n***和数组对比***\n>**优点**\n>>比数组更快的查找速度(因为删除，修改基于查找所以效率也提高)\n\n>**缺点**\n>>key值不可以重复\n>>哈希表没有顺序，不能以一定的顺序遍历\n\n<!-- more -->\n***哈希函数***\n>1.当在一百万数据的数组中，根据内容查找一个元素和根据那个元素的下标来查找时，时间差距很大\n![对比图](/img/hash.jpg)\n>2.哈希函数做的事就是把一个元素的key值转换成一个数字，然后在数组中以这个数字为下表存入数据\n>3.查找时，也是根据存入时哈希化(使用哈希函数对key进行转换的过程)的key值条件,先对其哈希化然后通过哈希化后的数字去数组中查找\n>4.一个好的哈希函数应该具有2个特点:\n- 1.快速计算(减少乘法，乘法比加法在计算机中更耗费性能)\n- 2.哈希后的数组下标要尽可能平均\n\n***冲突***\n>当哈希化key值后出现的数字发生重复时这种现象叫做冲突\n>冲突的解决方案\n>>1.链地址法(用的更多，下文代码实现也使用这种方式)\n- 存储元素时，用数组或链表进行存储\n\n>>2.开放地址法(寻找还是空的位置来存储)\n- 线性探测：以一定的规则来寻找下一个空位置来存储，这个规则得出的数一般是一个质数，称做步长.\n\n# 代码实现\n\n***封装哈希表***\n>封装方法：\n>>哈希函数---hash(key)\n- 传入要哈希的key，然后将该key值每个字母转换成ASCII码做和在进行一定的处理，以下函数规则参考自《学习JavaScript数据结构与算法》\n\n>>存储元素---put(obj)\n- 传入要存储的元素(下文是存储一个对象)，存储时先通过哈希函数将某个属性(下文是name)哈希化得到要存储的位置，然后在存储时进行判断：1.该位置为空，直接插入；2.不为空，对比查看name值是否相同，不同插入在最后，若相同，覆盖；\n\n>>获取元素---get(str)\n- 传入要查找的的内容(存储时哈希化的属性name)，查找时先通过哈希函数将查找值哈希化得到目标位置，然后直接查找，有返回整个对象；无，返回null\n\n```javascript\n function HashTable() {\n            //  存储元素的数组\n            this.items = [];\n            // 哈希函数\n            HashTable.prototype.hash = function (key) {\n                let hashCode = 5381;\n                for (let i = 0; i < key.length; i++) {\n                    hashCode = 33 * hashCode + key.charCodeAt();\n                };\n                return hashCode % 1013;\n            };\n            // 存和改\n            HashTable.prototype.put = function (obj) {\n                let index = this.hash(obj.name);\n                // 初始化该位置\n                let current = this.items[index];\n                // 判断要存储位置是否为空\n                if (current == null) {\n                    this.items[index] = [];\n                    current = this.items[index];\n                    // 为空 直接插入到第一个位置\n                    current.push(obj);\n                } else {\n                    // 不为空 判断和里面的元素是否相同\n                    for (let i = 0; i < current.length; i++) {\n                        // 相同修改\n                        if (current[i].name == obj.name) {\n                            current[i] = obj;\n                            return;\n                        }\n                    };\n                    // 不同 插入到最后\n                    current.push(obj);\n                }\n            };\n            // 取\n            HashTable.prototype.get = function (str) {\n                let index = this.hash(str);\n                let current = this.items[index];\n                if (current != null) {\n                    for (let i = 0; i < current.length; i++) {\n                        if (current[i].name == str) {\n                            return current[i];\n                        }\n                    };\n                }\n                return null;\n            };\n    };\n    // 测试代码  \n\n        let hs = new HashTable();\n        // 创建一个对象并存如\n        let shuaxin = {\n            name: \"shuaxin\",\n            phone: '158****26**'\n        };\n        hs.put(shuaxin);\n// 测试哈希表和数组查找效率对比\n// 先给数组空的位置插入模拟数据 100w\n        function insert() {\n            for (let i = 0; i < 1000000; i++) {\n                if (hs.items[i] == null) {\n                    hs.items[i] = [{\n                        name: \"demo\",\n                        phone: \"456\"\n                    }];\n                } else {\n                    continue;\n                }\n            };\n        };\n        insert();\n        // 数组普通的对比查找\n        function find(str) {\n            // console.log(str);\n            for (let i in hs.items) {\n                if (str == hs.items[i][0].name) {\n                    return hs.items[i][0];\n                }\n            };\n            return null;\n        };\n\n        // 上文图片的结果\n        console.warn('100w数据中效率对比');\n        // 250+ms\n        console.time('遍历查找');\n        console.log(find('shuaxin'));\n        console.timeEnd('遍历查找');\n        // 1ms左右\n        console.time('哈希查找');\n        console.log(hs.get('shuaxin'));\n        console.timeEnd('哈希查找');\n```","slug":"计算机基础/js数据结构笔记7","published":1,"updated":"2021-12-31T12:01:59.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3w006qj7jf62yt0nx1","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%A1%88%E4%BE%8B.html\">这里</a></h1><h1 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h1><p><strong><em>特点</em></strong></p>\n<blockquote>\n<p>1.基于数组创建的一种数据结构<br>2.存储元素时，对每一个元素通过哈希函数，进行哈希化后存储<br>3.存储后的这个数组就叫做哈希表(HashTable，也有叫散列表的)</p>\n</blockquote>\n<p><strong><em>和数组对比</em></strong></p>\n<blockquote>\n<p><strong>优点</strong></p>\n<blockquote>\n<p>比数组更快的查找速度(因为删除，修改基于查找所以效率也提高)</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>缺点</strong></p>\n<blockquote>\n<p>key值不可以重复<br>哈希表没有顺序，不能以一定的顺序遍历</p>\n</blockquote>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong><em>哈希函数</em></strong></p>\n<blockquote>\n<p>1.当在一百万数据的数组中，根据内容查找一个元素和根据那个元素的下标来查找时，时间差距很大<br><img src=\"/img/hash.jpg\" alt=\"对比图\"><br>2.哈希函数做的事就是把一个元素的key值转换成一个数字，然后在数组中以这个数字为下表存入数据<br>3.查找时，也是根据存入时哈希化(使用哈希函数对key进行转换的过程)的key值条件,先对其哈希化然后通过哈希化后的数字去数组中查找<br>4.一个好的哈希函数应该具有2个特点:</p>\n</blockquote>\n<ul>\n<li>1.快速计算(减少乘法，乘法比加法在计算机中更耗费性能)</li>\n<li>2.哈希后的数组下标要尽可能平均</li>\n</ul>\n<p><strong><em>冲突</em></strong></p>\n<blockquote>\n<p>当哈希化key值后出现的数字发生重复时这种现象叫做冲突<br>冲突的解决方案</p>\n<blockquote>\n<p>1.链地址法(用的更多，下文代码实现也使用这种方式)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>存储元素时，用数组或链表进行存储</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>2.开放地址法(寻找还是空的位置来存储)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>线性探测：以一定的规则来寻找下一个空位置来存储，这个规则得出的数一般是一个质数，称做步长.</li>\n</ul>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><p><strong><em>封装哈希表</em></strong></p>\n<blockquote>\n<p>封装方法：</p>\n<blockquote>\n<p>哈希函数—hash(key)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>传入要哈希的key，然后将该key值每个字母转换成ASCII码做和在进行一定的处理，以下函数规则参考自《学习JavaScript数据结构与算法》</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>存储元素—put(obj)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>传入要存储的元素(下文是存储一个对象)，存储时先通过哈希函数将某个属性(下文是name)哈希化得到要存储的位置，然后在存储时进行判断：1.该位置为空，直接插入；2.不为空，对比查看name值是否相同，不同插入在最后，若相同，覆盖；</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>获取元素—get(str)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>传入要查找的的内容(存储时哈希化的属性name)，查找时先通过哈希函数将查找值哈希化得到目标位置，然后直接查找，有返回整个对象；无，返回null</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">HashTable</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-comment\">//  存储元素的数组</span><br>            <span class=\"hljs-built_in\">this</span>.items = [];<br>            <span class=\"hljs-comment\">// 哈希函数</span><br>            HashTable.prototype.hash = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">key</span>) </span>&#123;<br>                <span class=\"hljs-keyword\">let</span> hashCode = <span class=\"hljs-number\">5381</span>;<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; key.length; i++) &#123;<br>                    hashCode = <span class=\"hljs-number\">33</span> * hashCode + key.charCodeAt();<br>                &#125;;<br>                <span class=\"hljs-keyword\">return</span> hashCode % <span class=\"hljs-number\">1013</span>;<br>            &#125;;<br>            <span class=\"hljs-comment\">// 存和改</span><br>            HashTable.prototype.put = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) </span>&#123;<br>                <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-built_in\">this</span>.hash(obj.name);<br>                <span class=\"hljs-comment\">// 初始化该位置</span><br>                <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.items[index];<br>                <span class=\"hljs-comment\">// 判断要存储位置是否为空</span><br>                <span class=\"hljs-keyword\">if</span> (current == <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-built_in\">this</span>.items[index] = [];<br>                    current = <span class=\"hljs-built_in\">this</span>.items[index];<br>                    <span class=\"hljs-comment\">// 为空 直接插入到第一个位置</span><br>                    current.push(obj);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-comment\">// 不为空 判断和里面的元素是否相同</span><br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; current.length; i++) &#123;<br>                        <span class=\"hljs-comment\">// 相同修改</span><br>                        <span class=\"hljs-keyword\">if</span> (current[i].name == obj.name) &#123;<br>                            current[i] = obj;<br>                            <span class=\"hljs-keyword\">return</span>;<br>                        &#125;<br>                    &#125;;<br>                    <span class=\"hljs-comment\">// 不同 插入到最后</span><br>                    current.push(obj);<br>                &#125;<br>            &#125;;<br>            <span class=\"hljs-comment\">// 取</span><br>            HashTable.prototype.get = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) </span>&#123;<br>                <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-built_in\">this</span>.hash(str);<br>                <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.items[index];<br>                <span class=\"hljs-keyword\">if</span> (current != <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; current.length; i++) &#123;<br>                        <span class=\"hljs-keyword\">if</span> (current[i].name == str) &#123;<br>                            <span class=\"hljs-keyword\">return</span> current[i];<br>                        &#125;<br>                    &#125;;<br>                &#125;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;;<br>    &#125;;<br>    <span class=\"hljs-comment\">// 测试代码  </span><br><br>        <span class=\"hljs-keyword\">let</span> hs = <span class=\"hljs-keyword\">new</span> HashTable();<br>        <span class=\"hljs-comment\">// 创建一个对象并存如</span><br>        <span class=\"hljs-keyword\">let</span> shuaxin = &#123;<br>            name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>            phone: <span class=\"hljs-string\">&#x27;158****26**&#x27;</span><br>        &#125;;<br>        hs.put(shuaxin);<br><span class=\"hljs-comment\">// 测试哈希表和数组查找效率对比</span><br><span class=\"hljs-comment\">// 先给数组空的位置插入模拟数据 100w</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000000</span>; i++) &#123;<br>                <span class=\"hljs-keyword\">if</span> (hs.items[i] == <span class=\"hljs-literal\">null</span>) &#123;<br>                    hs.items[i] = [&#123;<br>                        name: <span class=\"hljs-string\">&quot;demo&quot;</span>,<br>                        phone: <span class=\"hljs-string\">&quot;456&quot;</span><br>                    &#125;];<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-keyword\">continue</span>;<br>                &#125;<br>            &#125;;<br>        &#125;;<br>        insert();<br>        <span class=\"hljs-comment\">// 数组普通的对比查找</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">find</span>(<span class=\"hljs-params\">str</span>) </span>&#123;<br>            <span class=\"hljs-comment\">// console.log(str);</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> hs.items) &#123;<br>                <span class=\"hljs-keyword\">if</span> (str == hs.items[i][<span class=\"hljs-number\">0</span>].name) &#123;<br>                    <span class=\"hljs-keyword\">return</span> hs.items[i][<span class=\"hljs-number\">0</span>];<br>                &#125;<br>            &#125;;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;;<br><br>        <span class=\"hljs-comment\">// 上文图片的结果</span><br>        <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;100w数据中效率对比&#x27;</span>);<br>        <span class=\"hljs-comment\">// 250+ms</span><br>        <span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">&#x27;遍历查找&#x27;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(find(<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span>));<br>        <span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">&#x27;遍历查找&#x27;</span>);<br>        <span class=\"hljs-comment\">// 1ms左右</span><br>        <span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">&#x27;哈希查找&#x27;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(hs.get(<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span>));<br>        <span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">&#x27;哈希查找&#x27;</span>);<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":2723,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%A1%88%E4%BE%8B.html\">这里</a></h1><h1 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h1><p><strong><em>特点</em></strong></p>\n<blockquote>\n<p>1.基于数组创建的一种数据结构<br>2.存储元素时，对每一个元素通过哈希函数，进行哈希化后存储<br>3.存储后的这个数组就叫做哈希表(HashTable，也有叫散列表的)</p>\n</blockquote>\n<p><strong><em>和数组对比</em></strong></p>\n<blockquote>\n<p><strong>优点</strong></p>\n<blockquote>\n<p>比数组更快的查找速度(因为删除，修改基于查找所以效率也提高)</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p><strong>缺点</strong></p>\n<blockquote>\n<p>key值不可以重复<br>哈希表没有顺序，不能以一定的顺序遍历</p>\n</blockquote>\n</blockquote>","more":"<p><strong><em>哈希函数</em></strong></p>\n<blockquote>\n<p>1.当在一百万数据的数组中，根据内容查找一个元素和根据那个元素的下标来查找时，时间差距很大<br><img src=\"/img/hash.jpg\" alt=\"对比图\"><br>2.哈希函数做的事就是把一个元素的key值转换成一个数字，然后在数组中以这个数字为下表存入数据<br>3.查找时，也是根据存入时哈希化(使用哈希函数对key进行转换的过程)的key值条件,先对其哈希化然后通过哈希化后的数字去数组中查找<br>4.一个好的哈希函数应该具有2个特点:</p>\n</blockquote>\n<ul>\n<li>1.快速计算(减少乘法，乘法比加法在计算机中更耗费性能)</li>\n<li>2.哈希后的数组下标要尽可能平均</li>\n</ul>\n<p><strong><em>冲突</em></strong></p>\n<blockquote>\n<p>当哈希化key值后出现的数字发生重复时这种现象叫做冲突<br>冲突的解决方案</p>\n<blockquote>\n<p>1.链地址法(用的更多，下文代码实现也使用这种方式)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>存储元素时，用数组或链表进行存储</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>2.开放地址法(寻找还是空的位置来存储)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>线性探测：以一定的规则来寻找下一个空位置来存储，这个规则得出的数一般是一个质数，称做步长.</li>\n</ul>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><p><strong><em>封装哈希表</em></strong></p>\n<blockquote>\n<p>封装方法：</p>\n<blockquote>\n<p>哈希函数—hash(key)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>传入要哈希的key，然后将该key值每个字母转换成ASCII码做和在进行一定的处理，以下函数规则参考自《学习JavaScript数据结构与算法》</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>存储元素—put(obj)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>传入要存储的元素(下文是存储一个对象)，存储时先通过哈希函数将某个属性(下文是name)哈希化得到要存储的位置，然后在存储时进行判断：1.该位置为空，直接插入；2.不为空，对比查看name值是否相同，不同插入在最后，若相同，覆盖；</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>获取元素—get(str)</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>传入要查找的的内容(存储时哈希化的属性name)，查找时先通过哈希函数将查找值哈希化得到目标位置，然后直接查找，有返回整个对象；无，返回null</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">HashTable</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-comment\">//  存储元素的数组</span><br>            <span class=\"hljs-built_in\">this</span>.items = [];<br>            <span class=\"hljs-comment\">// 哈希函数</span><br>            HashTable.prototype.hash = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">key</span>) </span>&#123;<br>                <span class=\"hljs-keyword\">let</span> hashCode = <span class=\"hljs-number\">5381</span>;<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; key.length; i++) &#123;<br>                    hashCode = <span class=\"hljs-number\">33</span> * hashCode + key.charCodeAt();<br>                &#125;;<br>                <span class=\"hljs-keyword\">return</span> hashCode % <span class=\"hljs-number\">1013</span>;<br>            &#125;;<br>            <span class=\"hljs-comment\">// 存和改</span><br>            HashTable.prototype.put = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) </span>&#123;<br>                <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-built_in\">this</span>.hash(obj.name);<br>                <span class=\"hljs-comment\">// 初始化该位置</span><br>                <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.items[index];<br>                <span class=\"hljs-comment\">// 判断要存储位置是否为空</span><br>                <span class=\"hljs-keyword\">if</span> (current == <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-built_in\">this</span>.items[index] = [];<br>                    current = <span class=\"hljs-built_in\">this</span>.items[index];<br>                    <span class=\"hljs-comment\">// 为空 直接插入到第一个位置</span><br>                    current.push(obj);<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-comment\">// 不为空 判断和里面的元素是否相同</span><br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; current.length; i++) &#123;<br>                        <span class=\"hljs-comment\">// 相同修改</span><br>                        <span class=\"hljs-keyword\">if</span> (current[i].name == obj.name) &#123;<br>                            current[i] = obj;<br>                            <span class=\"hljs-keyword\">return</span>;<br>                        &#125;<br>                    &#125;;<br>                    <span class=\"hljs-comment\">// 不同 插入到最后</span><br>                    current.push(obj);<br>                &#125;<br>            &#125;;<br>            <span class=\"hljs-comment\">// 取</span><br>            HashTable.prototype.get = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) </span>&#123;<br>                <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-built_in\">this</span>.hash(str);<br>                <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.items[index];<br>                <span class=\"hljs-keyword\">if</span> (current != <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; current.length; i++) &#123;<br>                        <span class=\"hljs-keyword\">if</span> (current[i].name == str) &#123;<br>                            <span class=\"hljs-keyword\">return</span> current[i];<br>                        &#125;<br>                    &#125;;<br>                &#125;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>            &#125;;<br>    &#125;;<br>    <span class=\"hljs-comment\">// 测试代码  </span><br><br>        <span class=\"hljs-keyword\">let</span> hs = <span class=\"hljs-keyword\">new</span> HashTable();<br>        <span class=\"hljs-comment\">// 创建一个对象并存如</span><br>        <span class=\"hljs-keyword\">let</span> shuaxin = &#123;<br>            name: <span class=\"hljs-string\">&quot;shuaxin&quot;</span>,<br>            phone: <span class=\"hljs-string\">&#x27;158****26**&#x27;</span><br>        &#125;;<br>        hs.put(shuaxin);<br><span class=\"hljs-comment\">// 测试哈希表和数组查找效率对比</span><br><span class=\"hljs-comment\">// 先给数组空的位置插入模拟数据 100w</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000000</span>; i++) &#123;<br>                <span class=\"hljs-keyword\">if</span> (hs.items[i] == <span class=\"hljs-literal\">null</span>) &#123;<br>                    hs.items[i] = [&#123;<br>                        name: <span class=\"hljs-string\">&quot;demo&quot;</span>,<br>                        phone: <span class=\"hljs-string\">&quot;456&quot;</span><br>                    &#125;];<br>                &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                    <span class=\"hljs-keyword\">continue</span>;<br>                &#125;<br>            &#125;;<br>        &#125;;<br>        insert();<br>        <span class=\"hljs-comment\">// 数组普通的对比查找</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">find</span>(<span class=\"hljs-params\">str</span>) </span>&#123;<br>            <span class=\"hljs-comment\">// console.log(str);</span><br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> hs.items) &#123;<br>                <span class=\"hljs-keyword\">if</span> (str == hs.items[i][<span class=\"hljs-number\">0</span>].name) &#123;<br>                    <span class=\"hljs-keyword\">return</span> hs.items[i][<span class=\"hljs-number\">0</span>];<br>                &#125;<br>            &#125;;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;;<br><br>        <span class=\"hljs-comment\">// 上文图片的结果</span><br>        <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;100w数据中效率对比&#x27;</span>);<br>        <span class=\"hljs-comment\">// 250+ms</span><br>        <span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">&#x27;遍历查找&#x27;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(find(<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span>));<br>        <span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">&#x27;遍历查找&#x27;</span>);<br>        <span class=\"hljs-comment\">// 1ms左右</span><br>        <span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">&#x27;哈希查找&#x27;</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(hs.get(<span class=\"hljs-string\">&#x27;shuaxin&#x27;</span>));<br>        <span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">&#x27;哈希查找&#x27;</span>);<br></code></pre></td></tr></table></figure>"},{"title":"《学习JavaScript数据结构与算法》笔记---树","abbrlink":41488,"date":"2019-09-16T06:39:15.000Z","_content":"# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%91.html)\n\n# 什么是树\n\n>1.一种非线性结构,由n(n>=1)个有限节点组成的有层次关系的集合\n>2.如下图：\n![树](/img/tree.jpg)\n>3.HTML的所有dom节点其实就是一棵dom树，如图\n![dom树](/img/domtree.gif)\n<!-- more -->\n\n# 树的特点\n>***优点***\n- 1.因为基于链表实现，所以集成了链表的优点；但又因为非线性结构的原因查询比链表有效率；\n- 2.虽然查询效率不集哈希表，但比哈希表节省空间；\n- 3.也改善了数组插入和删除时，效率低下的原因；\n- 4.可以表示一对多的关系；\n\n>***缺点***\n- 1.查找删除效率取决该树的深度，深度越大效率越低\n- 2.查找效率没有哈希表更有效率\n\n-------\n****存在即合理，根据自己会继续要选择合适的结构****\n\n----------\n\n# 关于树的一些术语\n\n![树](/img/tree.jpg)\n\n>1.位于顶部的节点叫做根节点；图中的A\n>2.树中的每个元素叫做节点；图中的所有圆点\n>3.内部节点：有子节点的节点；图中的abcde\n>4.外部节点也叫叶节点：没有子节点的节点；图中的#\n>5.父节点：a时bc的父节点；是其他节点的祖先节点；\n>6.子节点：bc是a的子节点；\n>7.子树：由某个子节点和他的子节点组成的树；\n>8.节点的度:节点的子节点个数\n>9.节点的层：根节点是1层(或0层),子节点层数依次加一；\n>10.树的深度：层数最大的节点；是树的深度\n\n# 一些常见树\n\n>***二叉树(Binary Tree)***\n- 1.每个节点的子节点个数最多只有2个；一个左节点，一个右节点\n- 2.二叉树i层的最大节点树为 2的i-1次方,i>=1;\n- 3.深度为k的二叉树的最大节点总数为 2的k次方后再-1；k>=1\n- 4.非空二叉树的叶结点个数n0=n2+1； n2为叶节点个数\n\n>***完美二叉树***\n- 除过根节点其他所有子节点都有2个子节点的二叉树\n\n>***完全二叉树(Complete Binary Tree)***\n- 1.除过根节点其他所有子节点都有2个子节点；\n- 2.且最后一层从左到右叶节点连续存在，只缺右边若干接点的二叉树\n- 3.完美二叉树时特殊的完全二叉树\n- 4.举例子\n![完全二叉树](/img/treedemo.jpg)\n\n>**<font color=\"red\">二叉搜索树(Binary Search Tree)</font>**   ****重点****\n- 非空***左***子树的所有值***小于***其根节点；\n- 非空***右***子树的所有值***大于***其根节点；\n- 每一个子树也都满足二叉搜索树规则；\n![二叉搜索树](/img/bst.jpg);\n\n# 非平衡树\n>1.一颗左右子树节点分布不平衡的树，叫做非平衡树\n>2.一颗非平衡树相当于写了一个链表，体现不出树的优势；\n![非平衡二叉树](/img/notbts.jpg);\n\n# 平衡树\n>1.也是二叉搜索树\n>2.每个节点的左子树节点个数和右子树节点个数相近\n>3.在二叉搜索树的实现上多封装了一些条件来保证不会出现非平衡树那样的情况的树\n>常见平衡树:\n- AVL树:不常用\n- ***红黑树***","source":"_posts/计算机基础/js数据结构笔记8.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---树\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 41488\ndate: 2019-09-16 14:39:15\n---\n# 本文源码 [这里](https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%91.html)\n\n# 什么是树\n\n>1.一种非线性结构,由n(n>=1)个有限节点组成的有层次关系的集合\n>2.如下图：\n![树](/img/tree.jpg)\n>3.HTML的所有dom节点其实就是一棵dom树，如图\n![dom树](/img/domtree.gif)\n<!-- more -->\n\n# 树的特点\n>***优点***\n- 1.因为基于链表实现，所以集成了链表的优点；但又因为非线性结构的原因查询比链表有效率；\n- 2.虽然查询效率不集哈希表，但比哈希表节省空间；\n- 3.也改善了数组插入和删除时，效率低下的原因；\n- 4.可以表示一对多的关系；\n\n>***缺点***\n- 1.查找删除效率取决该树的深度，深度越大效率越低\n- 2.查找效率没有哈希表更有效率\n\n-------\n****存在即合理，根据自己会继续要选择合适的结构****\n\n----------\n\n# 关于树的一些术语\n\n![树](/img/tree.jpg)\n\n>1.位于顶部的节点叫做根节点；图中的A\n>2.树中的每个元素叫做节点；图中的所有圆点\n>3.内部节点：有子节点的节点；图中的abcde\n>4.外部节点也叫叶节点：没有子节点的节点；图中的#\n>5.父节点：a时bc的父节点；是其他节点的祖先节点；\n>6.子节点：bc是a的子节点；\n>7.子树：由某个子节点和他的子节点组成的树；\n>8.节点的度:节点的子节点个数\n>9.节点的层：根节点是1层(或0层),子节点层数依次加一；\n>10.树的深度：层数最大的节点；是树的深度\n\n# 一些常见树\n\n>***二叉树(Binary Tree)***\n- 1.每个节点的子节点个数最多只有2个；一个左节点，一个右节点\n- 2.二叉树i层的最大节点树为 2的i-1次方,i>=1;\n- 3.深度为k的二叉树的最大节点总数为 2的k次方后再-1；k>=1\n- 4.非空二叉树的叶结点个数n0=n2+1； n2为叶节点个数\n\n>***完美二叉树***\n- 除过根节点其他所有子节点都有2个子节点的二叉树\n\n>***完全二叉树(Complete Binary Tree)***\n- 1.除过根节点其他所有子节点都有2个子节点；\n- 2.且最后一层从左到右叶节点连续存在，只缺右边若干接点的二叉树\n- 3.完美二叉树时特殊的完全二叉树\n- 4.举例子\n![完全二叉树](/img/treedemo.jpg)\n\n>**<font color=\"red\">二叉搜索树(Binary Search Tree)</font>**   ****重点****\n- 非空***左***子树的所有值***小于***其根节点；\n- 非空***右***子树的所有值***大于***其根节点；\n- 每一个子树也都满足二叉搜索树规则；\n![二叉搜索树](/img/bst.jpg);\n\n# 非平衡树\n>1.一颗左右子树节点分布不平衡的树，叫做非平衡树\n>2.一颗非平衡树相当于写了一个链表，体现不出树的优势；\n![非平衡二叉树](/img/notbts.jpg);\n\n# 平衡树\n>1.也是二叉搜索树\n>2.每个节点的左子树节点个数和右子树节点个数相近\n>3.在二叉搜索树的实现上多封装了一些条件来保证不会出现非平衡树那样的情况的树\n>常见平衡树:\n- AVL树:不常用\n- ***红黑树***","slug":"计算机基础/js数据结构笔记8","published":1,"updated":"2021-12-31T12:01:59.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3x006tj7jffk7s9fxs","content":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%91.html\">这里</a></h1><h1 id=\"什么是树\"><a href=\"#什么是树\" class=\"headerlink\" title=\"什么是树\"></a>什么是树</h1><blockquote>\n<p>1.一种非线性结构,由n(n&gt;=1)个有限节点组成的有层次关系的集合<br>2.如下图：<br><img src=\"/img/tree.jpg\" alt=\"树\"><br>3.HTML的所有dom节点其实就是一棵dom树，如图<br><img src=\"/img/domtree.gif\" alt=\"dom树\"></p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"树的特点\"><a href=\"#树的特点\" class=\"headerlink\" title=\"树的特点\"></a>树的特点</h1><blockquote>\n<p><strong><em>优点</em></strong></p>\n</blockquote>\n<ul>\n<li>1.因为基于链表实现，所以集成了链表的优点；但又因为非线性结构的原因查询比链表有效率；</li>\n<li>2.虽然查询效率不集哈希表，但比哈希表节省空间；</li>\n<li>3.也改善了数组插入和删除时，效率低下的原因；</li>\n<li>4.可以表示一对多的关系；</li>\n</ul>\n<blockquote>\n<p><strong><em>缺点</em></strong></p>\n</blockquote>\n<ul>\n<li>1.查找删除效率取决该树的深度，深度越大效率越低</li>\n<li>2.查找效率没有哈希表更有效率</li>\n</ul>\n<hr>\n<p><strong><strong>存在即合理，根据自己会继续要选择合适的结构</strong></strong></p>\n<hr>\n<h1 id=\"关于树的一些术语\"><a href=\"#关于树的一些术语\" class=\"headerlink\" title=\"关于树的一些术语\"></a>关于树的一些术语</h1><p><img src=\"/img/tree.jpg\" alt=\"树\"></p>\n<blockquote>\n<p>1.位于顶部的节点叫做根节点；图中的A<br>2.树中的每个元素叫做节点；图中的所有圆点<br>3.内部节点：有子节点的节点；图中的abcde<br>4.外部节点也叫叶节点：没有子节点的节点；图中的#<br>5.父节点：a时bc的父节点；是其他节点的祖先节点；<br>6.子节点：bc是a的子节点；<br>7.子树：由某个子节点和他的子节点组成的树；<br>8.节点的度:节点的子节点个数<br>9.节点的层：根节点是1层(或0层),子节点层数依次加一；<br>10.树的深度：层数最大的节点；是树的深度</p>\n</blockquote>\n<h1 id=\"一些常见树\"><a href=\"#一些常见树\" class=\"headerlink\" title=\"一些常见树\"></a>一些常见树</h1><blockquote>\n<p><strong><em>二叉树(Binary Tree)</em></strong></p>\n</blockquote>\n<ul>\n<li>1.每个节点的子节点个数最多只有2个；一个左节点，一个右节点</li>\n<li>2.二叉树i层的最大节点树为 2的i-1次方,i&gt;=1;</li>\n<li>3.深度为k的二叉树的最大节点总数为 2的k次方后再-1；k&gt;=1</li>\n<li>4.非空二叉树的叶结点个数n0=n2+1； n2为叶节点个数</li>\n</ul>\n<blockquote>\n<p><strong><em>完美二叉树</em></strong></p>\n</blockquote>\n<ul>\n<li>除过根节点其他所有子节点都有2个子节点的二叉树</li>\n</ul>\n<blockquote>\n<p><strong><em>完全二叉树(Complete Binary Tree)</em></strong></p>\n</blockquote>\n<ul>\n<li>1.除过根节点其他所有子节点都有2个子节点；</li>\n<li>2.且最后一层从左到右叶节点连续存在，只缺右边若干接点的二叉树</li>\n<li>3.完美二叉树时特殊的完全二叉树</li>\n<li>4.举例子<br><img src=\"/img/treedemo.jpg\" alt=\"完全二叉树\"></li>\n</ul>\n<blockquote>\n<p><strong><font color=\"red\">二叉搜索树(Binary Search Tree)</font></strong>   <strong><strong>重点</strong></strong></p>\n</blockquote>\n<ul>\n<li>非空*<strong>左**<em>子树的所有值</em></strong>小于***其根节点；</li>\n<li>非空*<strong>右**<em>子树的所有值</em></strong>大于***其根节点；</li>\n<li>每一个子树也都满足二叉搜索树规则；<br><img src=\"/img/bst.jpg\" alt=\"二叉搜索树\">;</li>\n</ul>\n<h1 id=\"非平衡树\"><a href=\"#非平衡树\" class=\"headerlink\" title=\"非平衡树\"></a>非平衡树</h1><blockquote>\n<p>1.一颗左右子树节点分布不平衡的树，叫做非平衡树<br>2.一颗非平衡树相当于写了一个链表，体现不出树的优势；<br><img src=\"/img/notbts.jpg\" alt=\"非平衡二叉树\">;</p>\n</blockquote>\n<h1 id=\"平衡树\"><a href=\"#平衡树\" class=\"headerlink\" title=\"平衡树\"></a>平衡树</h1><blockquote>\n<p>1.也是二叉搜索树<br>2.每个节点的左子树节点个数和右子树节点个数相近<br>3.在二叉搜索树的实现上多封装了一些条件来保证不会出现非平衡树那样的情况的树<br>常见平衡树:</p>\n</blockquote>\n<ul>\n<li>AVL树:不常用</li>\n<li><strong><em>红黑树</em></strong></li>\n</ul>\n","site":{"data":{}},"wordcount":980,"excerpt":"<h1 id=\"本文源码-这里\"><a href=\"#本文源码-这里\" class=\"headerlink\" title=\"本文源码 这里\"></a>本文源码 <a href=\"https://github.com/SHUAXINDIARY/demo/blob/master/js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%85%B3%E4%BA%8E%E6%A0%91.html\">这里</a></h1><h1 id=\"什么是树\"><a href=\"#什么是树\" class=\"headerlink\" title=\"什么是树\"></a>什么是树</h1><blockquote>\n<p>1.一种非线性结构,由n(n&gt;=1)个有限节点组成的有层次关系的集合<br>2.如下图：<br><img src=\"/img/tree.jpg\" alt=\"树\"><br>3.HTML的所有dom节点其实就是一棵dom树，如图<br><img src=\"/img/domtree.gif\" alt=\"dom树\"></p>\n</blockquote>","more":"<h1 id=\"树的特点\"><a href=\"#树的特点\" class=\"headerlink\" title=\"树的特点\"></a>树的特点</h1><blockquote>\n<p><strong><em>优点</em></strong></p>\n</blockquote>\n<ul>\n<li>1.因为基于链表实现，所以集成了链表的优点；但又因为非线性结构的原因查询比链表有效率；</li>\n<li>2.虽然查询效率不集哈希表，但比哈希表节省空间；</li>\n<li>3.也改善了数组插入和删除时，效率低下的原因；</li>\n<li>4.可以表示一对多的关系；</li>\n</ul>\n<blockquote>\n<p><strong><em>缺点</em></strong></p>\n</blockquote>\n<ul>\n<li>1.查找删除效率取决该树的深度，深度越大效率越低</li>\n<li>2.查找效率没有哈希表更有效率</li>\n</ul>\n<hr>\n<p><strong><strong>存在即合理，根据自己会继续要选择合适的结构</strong></strong></p>\n<hr>\n<h1 id=\"关于树的一些术语\"><a href=\"#关于树的一些术语\" class=\"headerlink\" title=\"关于树的一些术语\"></a>关于树的一些术语</h1><p><img src=\"/img/tree.jpg\" alt=\"树\"></p>\n<blockquote>\n<p>1.位于顶部的节点叫做根节点；图中的A<br>2.树中的每个元素叫做节点；图中的所有圆点<br>3.内部节点：有子节点的节点；图中的abcde<br>4.外部节点也叫叶节点：没有子节点的节点；图中的#<br>5.父节点：a时bc的父节点；是其他节点的祖先节点；<br>6.子节点：bc是a的子节点；<br>7.子树：由某个子节点和他的子节点组成的树；<br>8.节点的度:节点的子节点个数<br>9.节点的层：根节点是1层(或0层),子节点层数依次加一；<br>10.树的深度：层数最大的节点；是树的深度</p>\n</blockquote>\n<h1 id=\"一些常见树\"><a href=\"#一些常见树\" class=\"headerlink\" title=\"一些常见树\"></a>一些常见树</h1><blockquote>\n<p><strong><em>二叉树(Binary Tree)</em></strong></p>\n</blockquote>\n<ul>\n<li>1.每个节点的子节点个数最多只有2个；一个左节点，一个右节点</li>\n<li>2.二叉树i层的最大节点树为 2的i-1次方,i&gt;=1;</li>\n<li>3.深度为k的二叉树的最大节点总数为 2的k次方后再-1；k&gt;=1</li>\n<li>4.非空二叉树的叶结点个数n0=n2+1； n2为叶节点个数</li>\n</ul>\n<blockquote>\n<p><strong><em>完美二叉树</em></strong></p>\n</blockquote>\n<ul>\n<li>除过根节点其他所有子节点都有2个子节点的二叉树</li>\n</ul>\n<blockquote>\n<p><strong><em>完全二叉树(Complete Binary Tree)</em></strong></p>\n</blockquote>\n<ul>\n<li>1.除过根节点其他所有子节点都有2个子节点；</li>\n<li>2.且最后一层从左到右叶节点连续存在，只缺右边若干接点的二叉树</li>\n<li>3.完美二叉树时特殊的完全二叉树</li>\n<li>4.举例子<br><img src=\"/img/treedemo.jpg\" alt=\"完全二叉树\"></li>\n</ul>\n<blockquote>\n<p><strong><font color=\"red\">二叉搜索树(Binary Search Tree)</font></strong>   <strong><strong>重点</strong></strong></p>\n</blockquote>\n<ul>\n<li>非空*<strong>左**<em>子树的所有值</em></strong>小于***其根节点；</li>\n<li>非空*<strong>右**<em>子树的所有值</em></strong>大于***其根节点；</li>\n<li>每一个子树也都满足二叉搜索树规则；<br><img src=\"/img/bst.jpg\" alt=\"二叉搜索树\">;</li>\n</ul>\n<h1 id=\"非平衡树\"><a href=\"#非平衡树\" class=\"headerlink\" title=\"非平衡树\"></a>非平衡树</h1><blockquote>\n<p>1.一颗左右子树节点分布不平衡的树，叫做非平衡树<br>2.一颗非平衡树相当于写了一个链表，体现不出树的优势；<br><img src=\"/img/notbts.jpg\" alt=\"非平衡二叉树\">;</p>\n</blockquote>\n<h1 id=\"平衡树\"><a href=\"#平衡树\" class=\"headerlink\" title=\"平衡树\"></a>平衡树</h1><blockquote>\n<p>1.也是二叉搜索树<br>2.每个节点的左子树节点个数和右子树节点个数相近<br>3.在二叉搜索树的实现上多封装了一些条件来保证不会出现非平衡树那样的情况的树<br>常见平衡树:</p>\n</blockquote>\n<ul>\n<li>AVL树:不常用</li>\n<li><strong><em>红黑树</em></strong></li>\n</ul>"},{"title":"《学习JavaScript数据结构与算法》笔记---红黑树","abbrlink":60658,"date":"2019-09-22T00:51:25.000Z","_content":"\n\n\n\n# 什么是红黑树\n>1.为了解决二叉搜索树出现非平衡树的情况而出现的优化方案；\n>2.当插入一个节点使树不平衡时，通过一些规则和一些处理方式来让树保持平衡；这个平衡后的树叫做红黑树\n\n\n# 为什么需要红黑树？\n1.假如现在要向一颗BST插入10 9 8 7 6 5 4 3 2 1这样一组数，最后的结果就是每个数依次出现在上一个节点的左子树的情况，这样就相当于一个链表，体现不出我们使用树结构的优势，所以需要一些措施让每次插入的节点尽量出现在左右两端，避免出现这样的极端的情况。\n2.红黑树是这种处理方式的一种常用结构。\n<!-- more -->\n\n# 红黑树的特点\n>1.满足二叉搜索树的所有特征\n>2.节点是红色或者黑色\n>3.根节点是黑色\n>4.每个叶子节点都是黑色的null节点\n- <font color=\"black\">注:可以理解成当一个节点没有子节点时我们用null节点给他补齐</font>\n\n>5.每个红色的节点的两个子节点都是黑色\n- <font color=\"black\">注:从每个叶子节点到根节点的路径上不能有两个连续的红色节点</font>\n\n>6.从任意节点开始到其每个叶子节点的所有路径都包含相同数目的黑色节点\n\n# 红黑树的相对平衡\n>1.从根节点到叶子节点的最长可能路径，不会超过最短可能路径的两倍长\n-    特点5决定了不可能有2个相连的红色节点\n-    最短路径可能全部都是黑色节点(根节点没有子节点的情况，补全两个null节点)\n-    最长的可能路径只可能是红黑交替\n-    特点6表明了所有路径都有相同数目的黑色节点\n-    这就表明了没有路径能多余任何其他路径的2倍长\n-    注：首先每次插入新节点的颜色都是红色\n>2.结果就是这个数基本是平衡的\n>3.虽然不可能完全平衡，但是可以保证在极端的情况下，效率依旧相对比链表高\n\n# 插入节点时变化规则\n>1.变色\n- 为了重新符合红黑树的规则，尝试把节点在黑红两色之间变换\n>2.左旋转\n-   逆时针旋转红黑树的2个节点，使得父节点被自己的右子节点取代，自己成为自己的左子节点\n>3.右旋转\n-  顺时针旋转红黑树的2个节点，使得父节点被自己的左子节点取代，自己成为自己的右子节点\n\n![红黑树变化](/img/rbt.jpg)\n\n# 节点插入时根据以下几点情况做对应的处理：\n\n<font color=\"red\">***说明：插入节点为N；父节点为p；祖父节点为G；其父亲兄弟节点为U***</font>\n\n\n>情况1:新节点N位于树的根上时，没有父节点；直接将红色节点变成黑色节点即可\n\n>情况2:新节点父节点为黑色；性质4没有失效，性质5也没问题；新节点不变，还是红色\n\n>情况3:当p和u都是红色节点的时候；将pu变成黑色，g变成红色\n\n>情况4:N的父节点是红色，叔叔节点是黑，祖父节点是黑色，然后N是左子节点时： 先把父节点变黑，在把祖父节点变红，再以插入节点的g节点为root节点右旋转；\n\n>情况5:N的父亲节点是红色，叔叔节点是黑色，然后N是右子节点时： 先以p节点为根节点进行左旋转，然后将p节点作为新插入节点来考虑(这时情况就是情况4)\n\n# 通过案例理解红黑树的变化规则和插入操作的情况：\n\n<font color=\"red\">***假设现在要依次插入10 9 8 7 6 5 4 3 2 1到一个BST***</font>\n\n>1.插入10\n- 1.因为是第一个节点，所以作为root节点\n- 2.因为红黑树插入节点时都是红色节点，但root'节点必须要是黑色\n- 3.所以对该节点变色\n- 4.插入完成\n\n>2.插入9\n- 1.因为比10小，所以插入到左子节点\n- 2.满足红黑节点相连等特点，所以不进行处理，直接插入\n- 3.插入完成\n\n>3.插入8\n- 1.比9小，插入到9的左子节点\n- 2.但因为和9节点都是红色节点，违背红节点的2个子节点必须是黑色，所以要进行处理\n- 3.这时满足情况4的条件，先进行情况4的变色规则，然后进行右旋转\n- 4.插入完成\n\n# 剩下的画了图\n\n![案例](/img/anli.png)\n\n![案例](/img/anli2.png)\n\n![案例](/img/anli3.png)\n\n![案例](/img/anli4.png)","source":"_posts/计算机基础/js数据结构笔记9.md","raw":"---\ntitle: 《学习JavaScript数据结构与算法》笔记---红黑树\ncategory:\n  - 技术笔记\ntag:\n  - JavaScript\n  - 数据结构\nabbrlink: 60658\ndate: 2019-09-22 08:51:25\n---\n\n\n\n\n# 什么是红黑树\n>1.为了解决二叉搜索树出现非平衡树的情况而出现的优化方案；\n>2.当插入一个节点使树不平衡时，通过一些规则和一些处理方式来让树保持平衡；这个平衡后的树叫做红黑树\n\n\n# 为什么需要红黑树？\n1.假如现在要向一颗BST插入10 9 8 7 6 5 4 3 2 1这样一组数，最后的结果就是每个数依次出现在上一个节点的左子树的情况，这样就相当于一个链表，体现不出我们使用树结构的优势，所以需要一些措施让每次插入的节点尽量出现在左右两端，避免出现这样的极端的情况。\n2.红黑树是这种处理方式的一种常用结构。\n<!-- more -->\n\n# 红黑树的特点\n>1.满足二叉搜索树的所有特征\n>2.节点是红色或者黑色\n>3.根节点是黑色\n>4.每个叶子节点都是黑色的null节点\n- <font color=\"black\">注:可以理解成当一个节点没有子节点时我们用null节点给他补齐</font>\n\n>5.每个红色的节点的两个子节点都是黑色\n- <font color=\"black\">注:从每个叶子节点到根节点的路径上不能有两个连续的红色节点</font>\n\n>6.从任意节点开始到其每个叶子节点的所有路径都包含相同数目的黑色节点\n\n# 红黑树的相对平衡\n>1.从根节点到叶子节点的最长可能路径，不会超过最短可能路径的两倍长\n-    特点5决定了不可能有2个相连的红色节点\n-    最短路径可能全部都是黑色节点(根节点没有子节点的情况，补全两个null节点)\n-    最长的可能路径只可能是红黑交替\n-    特点6表明了所有路径都有相同数目的黑色节点\n-    这就表明了没有路径能多余任何其他路径的2倍长\n-    注：首先每次插入新节点的颜色都是红色\n>2.结果就是这个数基本是平衡的\n>3.虽然不可能完全平衡，但是可以保证在极端的情况下，效率依旧相对比链表高\n\n# 插入节点时变化规则\n>1.变色\n- 为了重新符合红黑树的规则，尝试把节点在黑红两色之间变换\n>2.左旋转\n-   逆时针旋转红黑树的2个节点，使得父节点被自己的右子节点取代，自己成为自己的左子节点\n>3.右旋转\n-  顺时针旋转红黑树的2个节点，使得父节点被自己的左子节点取代，自己成为自己的右子节点\n\n![红黑树变化](/img/rbt.jpg)\n\n# 节点插入时根据以下几点情况做对应的处理：\n\n<font color=\"red\">***说明：插入节点为N；父节点为p；祖父节点为G；其父亲兄弟节点为U***</font>\n\n\n>情况1:新节点N位于树的根上时，没有父节点；直接将红色节点变成黑色节点即可\n\n>情况2:新节点父节点为黑色；性质4没有失效，性质5也没问题；新节点不变，还是红色\n\n>情况3:当p和u都是红色节点的时候；将pu变成黑色，g变成红色\n\n>情况4:N的父节点是红色，叔叔节点是黑，祖父节点是黑色，然后N是左子节点时： 先把父节点变黑，在把祖父节点变红，再以插入节点的g节点为root节点右旋转；\n\n>情况5:N的父亲节点是红色，叔叔节点是黑色，然后N是右子节点时： 先以p节点为根节点进行左旋转，然后将p节点作为新插入节点来考虑(这时情况就是情况4)\n\n# 通过案例理解红黑树的变化规则和插入操作的情况：\n\n<font color=\"red\">***假设现在要依次插入10 9 8 7 6 5 4 3 2 1到一个BST***</font>\n\n>1.插入10\n- 1.因为是第一个节点，所以作为root节点\n- 2.因为红黑树插入节点时都是红色节点，但root'节点必须要是黑色\n- 3.所以对该节点变色\n- 4.插入完成\n\n>2.插入9\n- 1.因为比10小，所以插入到左子节点\n- 2.满足红黑节点相连等特点，所以不进行处理，直接插入\n- 3.插入完成\n\n>3.插入8\n- 1.比9小，插入到9的左子节点\n- 2.但因为和9节点都是红色节点，违背红节点的2个子节点必须是黑色，所以要进行处理\n- 3.这时满足情况4的条件，先进行情况4的变色规则，然后进行右旋转\n- 4.插入完成\n\n# 剩下的画了图\n\n![案例](/img/anli.png)\n\n![案例](/img/anli2.png)\n\n![案例](/img/anli3.png)\n\n![案例](/img/anli4.png)","slug":"计算机基础/js数据结构笔记9","published":1,"updated":"2021-12-31T12:01:59.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv3x006wj7jf5o3mdxjz","content":"<h1 id=\"什么是红黑树\"><a href=\"#什么是红黑树\" class=\"headerlink\" title=\"什么是红黑树\"></a>什么是红黑树</h1><blockquote>\n<p>1.为了解决二叉搜索树出现非平衡树的情况而出现的优化方案；<br>2.当插入一个节点使树不平衡时，通过一些规则和一些处理方式来让树保持平衡；这个平衡后的树叫做红黑树</p>\n</blockquote>\n<h1 id=\"为什么需要红黑树？\"><a href=\"#为什么需要红黑树？\" class=\"headerlink\" title=\"为什么需要红黑树？\"></a>为什么需要红黑树？</h1><p>1.假如现在要向一颗BST插入10 9 8 7 6 5 4 3 2 1这样一组数，最后的结果就是每个数依次出现在上一个节点的左子树的情况，这样就相当于一个链表，体现不出我们使用树结构的优势，所以需要一些措施让每次插入的节点尽量出现在左右两端，避免出现这样的极端的情况。<br>2.红黑树是这种处理方式的一种常用结构。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"红黑树的特点\"><a href=\"#红黑树的特点\" class=\"headerlink\" title=\"红黑树的特点\"></a>红黑树的特点</h1><blockquote>\n<p>1.满足二叉搜索树的所有特征<br>2.节点是红色或者黑色<br>3.根节点是黑色<br>4.每个叶子节点都是黑色的null节点</p>\n</blockquote>\n<ul>\n<li><font color=\"black\">注:可以理解成当一个节点没有子节点时我们用null节点给他补齐</font></li>\n</ul>\n<blockquote>\n<p>5.每个红色的节点的两个子节点都是黑色</p>\n</blockquote>\n<ul>\n<li><font color=\"black\">注:从每个叶子节点到根节点的路径上不能有两个连续的红色节点</font></li>\n</ul>\n<blockquote>\n<p>6.从任意节点开始到其每个叶子节点的所有路径都包含相同数目的黑色节点</p>\n</blockquote>\n<h1 id=\"红黑树的相对平衡\"><a href=\"#红黑树的相对平衡\" class=\"headerlink\" title=\"红黑树的相对平衡\"></a>红黑树的相对平衡</h1><blockquote>\n<p>1.从根节点到叶子节点的最长可能路径，不会超过最短可能路径的两倍长</p>\n</blockquote>\n<ul>\n<li>特点5决定了不可能有2个相连的红色节点</li>\n<li>最短路径可能全部都是黑色节点(根节点没有子节点的情况，补全两个null节点)</li>\n<li>最长的可能路径只可能是红黑交替</li>\n<li>特点6表明了所有路径都有相同数目的黑色节点</li>\n<li>这就表明了没有路径能多余任何其他路径的2倍长</li>\n<li>注：首先每次插入新节点的颜色都是红色<blockquote>\n<p>2.结果就是这个数基本是平衡的<br>3.虽然不可能完全平衡，但是可以保证在极端的情况下，效率依旧相对比链表高</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"插入节点时变化规则\"><a href=\"#插入节点时变化规则\" class=\"headerlink\" title=\"插入节点时变化规则\"></a>插入节点时变化规则</h1><blockquote>\n<p>1.变色</p>\n</blockquote>\n<ul>\n<li>为了重新符合红黑树的规则，尝试把节点在黑红两色之间变换<blockquote>\n<p>2.左旋转</p>\n</blockquote>\n</li>\n<li>逆时针旋转红黑树的2个节点，使得父节点被自己的右子节点取代，自己成为自己的左子节点<blockquote>\n<p>3.右旋转</p>\n</blockquote>\n</li>\n<li>顺时针旋转红黑树的2个节点，使得父节点被自己的左子节点取代，自己成为自己的右子节点</li>\n</ul>\n<p><img src=\"/img/rbt.jpg\" alt=\"红黑树变化\"></p>\n<h1 id=\"节点插入时根据以下几点情况做对应的处理：\"><a href=\"#节点插入时根据以下几点情况做对应的处理：\" class=\"headerlink\" title=\"节点插入时根据以下几点情况做对应的处理：\"></a>节点插入时根据以下几点情况做对应的处理：</h1><p><font color=\"red\"><strong><em>说明：插入节点为N；父节点为p；祖父节点为G；其父亲兄弟节点为U</em></strong></font></p>\n<blockquote>\n<p>情况1:新节点N位于树的根上时，没有父节点；直接将红色节点变成黑色节点即可</p>\n</blockquote>\n<blockquote>\n<p>情况2:新节点父节点为黑色；性质4没有失效，性质5也没问题；新节点不变，还是红色</p>\n</blockquote>\n<blockquote>\n<p>情况3:当p和u都是红色节点的时候；将pu变成黑色，g变成红色</p>\n</blockquote>\n<blockquote>\n<p>情况4:N的父节点是红色，叔叔节点是黑，祖父节点是黑色，然后N是左子节点时： 先把父节点变黑，在把祖父节点变红，再以插入节点的g节点为root节点右旋转；</p>\n</blockquote>\n<blockquote>\n<p>情况5:N的父亲节点是红色，叔叔节点是黑色，然后N是右子节点时： 先以p节点为根节点进行左旋转，然后将p节点作为新插入节点来考虑(这时情况就是情况4)</p>\n</blockquote>\n<h1 id=\"通过案例理解红黑树的变化规则和插入操作的情况：\"><a href=\"#通过案例理解红黑树的变化规则和插入操作的情况：\" class=\"headerlink\" title=\"通过案例理解红黑树的变化规则和插入操作的情况：\"></a>通过案例理解红黑树的变化规则和插入操作的情况：</h1><p><font color=\"red\"><strong><em>假设现在要依次插入10 9 8 7 6 5 4 3 2 1到一个BST</em></strong></font></p>\n<blockquote>\n<p>1.插入10</p>\n</blockquote>\n<ul>\n<li>1.因为是第一个节点，所以作为root节点</li>\n<li>2.因为红黑树插入节点时都是红色节点，但root’节点必须要是黑色</li>\n<li>3.所以对该节点变色</li>\n<li>4.插入完成</li>\n</ul>\n<blockquote>\n<p>2.插入9</p>\n</blockquote>\n<ul>\n<li>1.因为比10小，所以插入到左子节点</li>\n<li>2.满足红黑节点相连等特点，所以不进行处理，直接插入</li>\n<li>3.插入完成</li>\n</ul>\n<blockquote>\n<p>3.插入8</p>\n</blockquote>\n<ul>\n<li>1.比9小，插入到9的左子节点</li>\n<li>2.但因为和9节点都是红色节点，违背红节点的2个子节点必须是黑色，所以要进行处理</li>\n<li>3.这时满足情况4的条件，先进行情况4的变色规则，然后进行右旋转</li>\n<li>4.插入完成</li>\n</ul>\n<h1 id=\"剩下的画了图\"><a href=\"#剩下的画了图\" class=\"headerlink\" title=\"剩下的画了图\"></a>剩下的画了图</h1><p><img src=\"/img/anli.png\" alt=\"案例\"></p>\n<p><img src=\"/img/anli2.png\" alt=\"案例\"></p>\n<p><img src=\"/img/anli3.png\" alt=\"案例\"></p>\n<p><img src=\"/img/anli4.png\" alt=\"案例\"></p>\n","site":{"data":{}},"wordcount":1360,"excerpt":"<h1 id=\"什么是红黑树\"><a href=\"#什么是红黑树\" class=\"headerlink\" title=\"什么是红黑树\"></a>什么是红黑树</h1><blockquote>\n<p>1.为了解决二叉搜索树出现非平衡树的情况而出现的优化方案；<br>2.当插入一个节点使树不平衡时，通过一些规则和一些处理方式来让树保持平衡；这个平衡后的树叫做红黑树</p>\n</blockquote>\n<h1 id=\"为什么需要红黑树？\"><a href=\"#为什么需要红黑树？\" class=\"headerlink\" title=\"为什么需要红黑树？\"></a>为什么需要红黑树？</h1><p>1.假如现在要向一颗BST插入10 9 8 7 6 5 4 3 2 1这样一组数，最后的结果就是每个数依次出现在上一个节点的左子树的情况，这样就相当于一个链表，体现不出我们使用树结构的优势，所以需要一些措施让每次插入的节点尽量出现在左右两端，避免出现这样的极端的情况。<br>2.红黑树是这种处理方式的一种常用结构。</p>","more":"<h1 id=\"红黑树的特点\"><a href=\"#红黑树的特点\" class=\"headerlink\" title=\"红黑树的特点\"></a>红黑树的特点</h1><blockquote>\n<p>1.满足二叉搜索树的所有特征<br>2.节点是红色或者黑色<br>3.根节点是黑色<br>4.每个叶子节点都是黑色的null节点</p>\n</blockquote>\n<ul>\n<li><font color=\"black\">注:可以理解成当一个节点没有子节点时我们用null节点给他补齐</font></li>\n</ul>\n<blockquote>\n<p>5.每个红色的节点的两个子节点都是黑色</p>\n</blockquote>\n<ul>\n<li><font color=\"black\">注:从每个叶子节点到根节点的路径上不能有两个连续的红色节点</font></li>\n</ul>\n<blockquote>\n<p>6.从任意节点开始到其每个叶子节点的所有路径都包含相同数目的黑色节点</p>\n</blockquote>\n<h1 id=\"红黑树的相对平衡\"><a href=\"#红黑树的相对平衡\" class=\"headerlink\" title=\"红黑树的相对平衡\"></a>红黑树的相对平衡</h1><blockquote>\n<p>1.从根节点到叶子节点的最长可能路径，不会超过最短可能路径的两倍长</p>\n</blockquote>\n<ul>\n<li>特点5决定了不可能有2个相连的红色节点</li>\n<li>最短路径可能全部都是黑色节点(根节点没有子节点的情况，补全两个null节点)</li>\n<li>最长的可能路径只可能是红黑交替</li>\n<li>特点6表明了所有路径都有相同数目的黑色节点</li>\n<li>这就表明了没有路径能多余任何其他路径的2倍长</li>\n<li>注：首先每次插入新节点的颜色都是红色<blockquote>\n<p>2.结果就是这个数基本是平衡的<br>3.虽然不可能完全平衡，但是可以保证在极端的情况下，效率依旧相对比链表高</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"插入节点时变化规则\"><a href=\"#插入节点时变化规则\" class=\"headerlink\" title=\"插入节点时变化规则\"></a>插入节点时变化规则</h1><blockquote>\n<p>1.变色</p>\n</blockquote>\n<ul>\n<li>为了重新符合红黑树的规则，尝试把节点在黑红两色之间变换<blockquote>\n<p>2.左旋转</p>\n</blockquote>\n</li>\n<li>逆时针旋转红黑树的2个节点，使得父节点被自己的右子节点取代，自己成为自己的左子节点<blockquote>\n<p>3.右旋转</p>\n</blockquote>\n</li>\n<li>顺时针旋转红黑树的2个节点，使得父节点被自己的左子节点取代，自己成为自己的右子节点</li>\n</ul>\n<p><img src=\"/img/rbt.jpg\" alt=\"红黑树变化\"></p>\n<h1 id=\"节点插入时根据以下几点情况做对应的处理：\"><a href=\"#节点插入时根据以下几点情况做对应的处理：\" class=\"headerlink\" title=\"节点插入时根据以下几点情况做对应的处理：\"></a>节点插入时根据以下几点情况做对应的处理：</h1><p><font color=\"red\"><strong><em>说明：插入节点为N；父节点为p；祖父节点为G；其父亲兄弟节点为U</em></strong></font></p>\n<blockquote>\n<p>情况1:新节点N位于树的根上时，没有父节点；直接将红色节点变成黑色节点即可</p>\n</blockquote>\n<blockquote>\n<p>情况2:新节点父节点为黑色；性质4没有失效，性质5也没问题；新节点不变，还是红色</p>\n</blockquote>\n<blockquote>\n<p>情况3:当p和u都是红色节点的时候；将pu变成黑色，g变成红色</p>\n</blockquote>\n<blockquote>\n<p>情况4:N的父节点是红色，叔叔节点是黑，祖父节点是黑色，然后N是左子节点时： 先把父节点变黑，在把祖父节点变红，再以插入节点的g节点为root节点右旋转；</p>\n</blockquote>\n<blockquote>\n<p>情况5:N的父亲节点是红色，叔叔节点是黑色，然后N是右子节点时： 先以p节点为根节点进行左旋转，然后将p节点作为新插入节点来考虑(这时情况就是情况4)</p>\n</blockquote>\n<h1 id=\"通过案例理解红黑树的变化规则和插入操作的情况：\"><a href=\"#通过案例理解红黑树的变化规则和插入操作的情况：\" class=\"headerlink\" title=\"通过案例理解红黑树的变化规则和插入操作的情况：\"></a>通过案例理解红黑树的变化规则和插入操作的情况：</h1><p><font color=\"red\"><strong><em>假设现在要依次插入10 9 8 7 6 5 4 3 2 1到一个BST</em></strong></font></p>\n<blockquote>\n<p>1.插入10</p>\n</blockquote>\n<ul>\n<li>1.因为是第一个节点，所以作为root节点</li>\n<li>2.因为红黑树插入节点时都是红色节点，但root’节点必须要是黑色</li>\n<li>3.所以对该节点变色</li>\n<li>4.插入完成</li>\n</ul>\n<blockquote>\n<p>2.插入9</p>\n</blockquote>\n<ul>\n<li>1.因为比10小，所以插入到左子节点</li>\n<li>2.满足红黑节点相连等特点，所以不进行处理，直接插入</li>\n<li>3.插入完成</li>\n</ul>\n<blockquote>\n<p>3.插入8</p>\n</blockquote>\n<ul>\n<li>1.比9小，插入到9的左子节点</li>\n<li>2.但因为和9节点都是红色节点，违背红节点的2个子节点必须是黑色，所以要进行处理</li>\n<li>3.这时满足情况4的条件，先进行情况4的变色规则，然后进行右旋转</li>\n<li>4.插入完成</li>\n</ul>\n<h1 id=\"剩下的画了图\"><a href=\"#剩下的画了图\" class=\"headerlink\" title=\"剩下的画了图\"></a>剩下的画了图</h1><p><img src=\"/img/anli.png\" alt=\"案例\"></p>\n<p><img src=\"/img/anli2.png\" alt=\"案例\"></p>\n<p><img src=\"/img/anli3.png\" alt=\"案例\"></p>\n<p><img src=\"/img/anli4.png\" alt=\"案例\"></p>"},{"title":"ios-date构造函数","date":"2021-02-11T01:33:37.000Z","index_img":null,"banner_img":null,"_content":"\n在apple的js环境中，Date函数的一个坑\n\n> **V8**\n> - 以下两种格式都可以\n```js\nlet one=new Date('2020-1-1')\nconsole.log(one) // Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)\nlet two=new Date('2020/1/1')\nconsole.log(d) // Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)\n```\n\n> **Apple**\n> - 只能使用 xxxx/xx/xx这样的格式传递\n```js\nlet one=new Date('2020-1-1')\nconsole.log(d) // Invalid value\nlet two=new Date('2020/1/1')\nconsole.log(d) // Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)\n```\n\n\n","source":"_posts/日常/ios-date构造函数.md","raw":"---\ntitle: ios-date构造函数\ncategory:\n  - 日常\ndate: 2021-02-11 09:33:37\ntag:\n  - JavaScript\nindex_img:\nbanner_img:\n---\n\n在apple的js环境中，Date函数的一个坑\n\n> **V8**\n> - 以下两种格式都可以\n```js\nlet one=new Date('2020-1-1')\nconsole.log(one) // Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)\nlet two=new Date('2020/1/1')\nconsole.log(d) // Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)\n```\n\n> **Apple**\n> - 只能使用 xxxx/xx/xx这样的格式传递\n```js\nlet one=new Date('2020-1-1')\nconsole.log(d) // Invalid value\nlet two=new Date('2020/1/1')\nconsole.log(d) // Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)\n```\n\n\n","slug":"日常/ios-date构造函数","published":1,"updated":"2021-12-31T12:01:59.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv40007fj7jf4m4he45a","content":"<p>在apple的js环境中，Date函数的一个坑</p>\n<blockquote>\n<p><strong>V8</strong></p>\n<ul>\n<li>以下两种格式都可以</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2020-1-1&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(one) <span class=\"hljs-comment\">// Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)</span><br><span class=\"hljs-keyword\">let</span> two=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2020/1/1&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(d) <span class=\"hljs-comment\">// Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)</span><br></code></pre></div></td></tr></table></figure>\n\n<blockquote>\n<p><strong>Apple</strong></p>\n<ul>\n<li>只能使用 xxxx/xx/xx这样的格式传递</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2020-1-1&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(d) <span class=\"hljs-comment\">// Invalid value</span><br><span class=\"hljs-keyword\">let</span> two=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2020/1/1&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(d) <span class=\"hljs-comment\">// Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)</span><br></code></pre></div></td></tr></table></figure>\n\n\n","site":{"data":{}},"wordcount":398,"excerpt":"","more":"<p>在apple的js环境中，Date函数的一个坑</p>\n<blockquote>\n<p><strong>V8</strong></p>\n<ul>\n<li>以下两种格式都可以</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2020-1-1&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(one) <span class=\"hljs-comment\">// Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)</span><br><span class=\"hljs-keyword\">let</span> two=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2020/1/1&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(d) <span class=\"hljs-comment\">// Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>Apple</strong></p>\n<ul>\n<li>只能使用 xxxx/xx/xx这样的格式传递</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> one=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2020-1-1&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(d) <span class=\"hljs-comment\">// Invalid value</span><br><span class=\"hljs-keyword\">let</span> two=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;2020/1/1&#x27;</span>)<br><span class=\"hljs-built_in\">console</span>.log(d) <span class=\"hljs-comment\">// Wed Jan 01 2020 00:00:00 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"在react中获取Dom","date":"2020-11-11T12:31:20.000Z","_content":"\n在react中获取Dom节点\n=============\n用到的api：\n- ref\n- createRef\n\n代码\n=====\n```js\n// demo组件\nimport {createRef} from 'react'\nconst Demo=()=>{\n    const Dom_P=createRef(null)\n    const getDom=()=>{\n        console.log(Dom_P)//{current:p}\n        console.log(Dom_P.current)// <p>This is P</p>\n    }\n    return (\n        <div>\n            <p ref={Dom_P}>This is P</p>\n            <button onClick={getDom}>Get P</button>\n        </div>\n    )\n}\nexport default Demo\n```","source":"_posts/日常/在react中获取Dom.md","raw":"---\ntitle: 在react中获取Dom\ndate: 2020-11-11 20:31:20\ncategory:\n  - 日常\ntag:\n  - React\n  - 踩坑\n---\n\n在react中获取Dom节点\n=============\n用到的api：\n- ref\n- createRef\n\n代码\n=====\n```js\n// demo组件\nimport {createRef} from 'react'\nconst Demo=()=>{\n    const Dom_P=createRef(null)\n    const getDom=()=>{\n        console.log(Dom_P)//{current:p}\n        console.log(Dom_P.current)// <p>This is P</p>\n    }\n    return (\n        <div>\n            <p ref={Dom_P}>This is P</p>\n            <button onClick={getDom}>Get P</button>\n        </div>\n    )\n}\nexport default Demo\n```","slug":"日常/在react中获取Dom","published":1,"updated":"2021-12-31T12:01:59.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuciv42007jj7jfeisc0b61","content":"<h1 id=\"在react中获取Dom节点\"><a href=\"#在react中获取Dom节点\" class=\"headerlink\" title=\"在react中获取Dom节点\"></a>在react中获取Dom节点</h1><p>用到的api：</p>\n<ul>\n<li>ref</li>\n<li>createRef</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// demo组件</span><br><span class=\"hljs-keyword\">import</span> &#123;createRef&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><span class=\"hljs-keyword\">const</span> Demo=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> Dom_P=createRef(<span class=\"hljs-literal\">null</span>)<br>    <span class=\"hljs-keyword\">const</span> getDom=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(Dom_P)<span class=\"hljs-comment\">//&#123;current:p&#125;</span><br>        <span class=\"hljs-built_in\">console</span>.log(Dom_P.current)<span class=\"hljs-comment\">// &lt;p&gt;This is P&lt;/p&gt;</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;div&gt;<br>            &lt;p ref=&#123;Dom_P&#125;&gt;This is P&lt;/p&gt;<br>            &lt;button onClick=&#123;getDom&#125;&gt;Get P&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Demo<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":449,"excerpt":"","more":"<h1 id=\"在react中获取Dom节点\"><a href=\"#在react中获取Dom节点\" class=\"headerlink\" title=\"在react中获取Dom节点\"></a>在react中获取Dom节点</h1><p>用到的api：</p>\n<ul>\n<li>ref</li>\n<li>createRef</li>\n</ul>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// demo组件</span><br><span class=\"hljs-keyword\">import</span> &#123;createRef&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span><br><span class=\"hljs-keyword\">const</span> Demo=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> Dom_P=createRef(<span class=\"hljs-literal\">null</span>)<br>    <span class=\"hljs-keyword\">const</span> getDom=<span class=\"hljs-function\">()=&gt;</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(Dom_P)<span class=\"hljs-comment\">//&#123;current:p&#125;</span><br>        <span class=\"hljs-built_in\">console</span>.log(Dom_P.current)<span class=\"hljs-comment\">// &lt;p&gt;This is P&lt;/p&gt;</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> (<br>        &lt;div&gt;<br>            &lt;p ref=&#123;Dom_P&#125;&gt;This is P&lt;/p&gt;<br>            &lt;button onClick=&#123;getDom&#125;&gt;Get P&lt;/button&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Demo<br></code></pre></td></tr></table></figure>"},{"title":"搭建图床服务器","abbrlink":55742,"date":"2020-06-14T14:06:04.000Z","_content":"# 关于图床\n- 引用百度的介绍，就是专门用来存放图片，同时允许你把图片对外连接的网上空间。\n- 搭建的原因就是这些第三方提供图床服务的厂商，一般都可以做图片加速等，而且还提供一定存储空间，可以减轻自己服务的存储空间等，还有个目的，相当做个备份。\n- 特此记录一下，顺便测试一下搭建后的效果。\n\n<!-- more -->\n\n# 关于图床的选择\n- [盘点国内免费好用的图床](https://zhuanlan.zhihu.com/p/35270383)\n- 选择了七牛\n\n# 搭建流程\n- 注册七牛账号，登陆，进入主界面后点击对象存储，创建空间\n- 点击创建的空间设置，进入域名管理界面，绑定自己的已经备案的域名（这里创建后会给一个测试域名，只能测试用，30天后会自动收回），下图为设置界面，输入自己域名，然后根据需要做对应设置![](http://img.shuaxindiary.cn/imgserver.png)\n- 设置完成后，去自己域名的对应注册商，添加CNAME记录 [官方介绍](https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name)，官方说的很清楚\n- 至此搭建完成\n\n# 本地上传\n- 使用[PicGo](https://github.com/Molunerfinn/PicGo)\n- 下载完毕后，进入对应的图床服务器设置界面，进行配置，![](https://img.shuaxindiary.cn/imgserver2.png)\n- 配置概述：前两个在秘钥管理中查看，存储空间名为对应图床的空间名，访问网址为上文添加的域名，存储区域这里我的不是文字选项，需要自己输入编号，这里七牛对应的几个地区编号为[{z0:华东},{z1:华北},{z2:华南},{z3:北美}]，后面2个可有可无\n- 至此配置完成，然后就可以在上传去上传测试了，如下图 ![](https://img.shuaxindiary.cn/imgserver3.png)\n- 上传完成后，会以下面链接格式的选项的格式自动复制链接\n","source":"_posts/技术笔记/搭建图床服务器.md","raw":"---\ntitle: 搭建图床服务器\ncategory:\n  - 技术笔记\ntag:\n  - 踩坑\nabbrlink: 55742\ndate: 2020-06-14 22:06:04\n---\n# 关于图床\n- 引用百度的介绍，就是专门用来存放图片，同时允许你把图片对外连接的网上空间。\n- 搭建的原因就是这些第三方提供图床服务的厂商，一般都可以做图片加速等，而且还提供一定存储空间，可以减轻自己服务的存储空间等，还有个目的，相当做个备份。\n- 特此记录一下，顺便测试一下搭建后的效果。\n\n<!-- more -->\n\n# 关于图床的选择\n- [盘点国内免费好用的图床](https://zhuanlan.zhihu.com/p/35270383)\n- 选择了七牛\n\n# 搭建流程\n- 注册七牛账号，登陆，进入主界面后点击对象存储，创建空间\n- 点击创建的空间设置，进入域名管理界面，绑定自己的已经备案的域名（这里创建后会给一个测试域名，只能测试用，30天后会自动收回），下图为设置界面，输入自己域名，然后根据需要做对应设置![](http://img.shuaxindiary.cn/imgserver.png)\n- 设置完成后，去自己域名的对应注册商，添加CNAME记录 [官方介绍](https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name)，官方说的很清楚\n- 至此搭建完成\n\n# 本地上传\n- 使用[PicGo](https://github.com/Molunerfinn/PicGo)\n- 下载完毕后，进入对应的图床服务器设置界面，进行配置，![](https://img.shuaxindiary.cn/imgserver2.png)\n- 配置概述：前两个在秘钥管理中查看，存储空间名为对应图床的空间名，访问网址为上文添加的域名，存储区域这里我的不是文字选项，需要自己输入编号，这里七牛对应的几个地区编号为[{z0:华东},{z1:华北},{z2:华南},{z3:北美}]，后面2个可有可无\n- 至此配置完成，然后就可以在上传去上传测试了，如下图 ![](https://img.shuaxindiary.cn/imgserver3.png)\n- 上传完成后，会以下面链接格式的选项的格式自动复制链接\n","slug":"技术笔记/搭建图床服务器","published":1,"updated":"2021-12-31T12:01:59.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuckd1m0000nyjfeudz5wxw","content":"<h1 id=\"关于图床\"><a href=\"#关于图床\" class=\"headerlink\" title=\"关于图床\"></a>关于图床</h1><ul>\n<li>引用百度的介绍，就是专门用来存放图片，同时允许你把图片对外连接的网上空间。</li>\n<li>搭建的原因就是这些第三方提供图床服务的厂商，一般都可以做图片加速等，而且还提供一定存储空间，可以减轻自己服务的存储空间等，还有个目的，相当做个备份。</li>\n<li>特此记录一下，顺便测试一下搭建后的效果。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"关于图床的选择\"><a href=\"#关于图床的选择\" class=\"headerlink\" title=\"关于图床的选择\"></a>关于图床的选择</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/35270383\">盘点国内免费好用的图床</a></li>\n<li>选择了七牛</li>\n</ul>\n<h1 id=\"搭建流程\"><a href=\"#搭建流程\" class=\"headerlink\" title=\"搭建流程\"></a>搭建流程</h1><ul>\n<li>注册七牛账号，登陆，进入主界面后点击对象存储，创建空间</li>\n<li>点击创建的空间设置，进入域名管理界面，绑定自己的已经备案的域名（这里创建后会给一个测试域名，只能测试用，30天后会自动收回），下图为设置界面，输入自己域名，然后根据需要做对应设置<img src=\"http://img.shuaxindiary.cn/imgserver.png\"></li>\n<li>设置完成后，去自己域名的对应注册商，添加CNAME记录 <a href=\"https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name\">官方介绍</a>，官方说的很清楚</li>\n<li>至此搭建完成</li>\n</ul>\n<h1 id=\"本地上传\"><a href=\"#本地上传\" class=\"headerlink\" title=\"本地上传\"></a>本地上传</h1><ul>\n<li>使用<a href=\"https://github.com/Molunerfinn/PicGo\">PicGo</a></li>\n<li>下载完毕后，进入对应的图床服务器设置界面，进行配置，<img src=\"https://img.shuaxindiary.cn/imgserver2.png\"></li>\n<li>配置概述：前两个在秘钥管理中查看，存储空间名为对应图床的空间名，访问网址为上文添加的域名，存储区域这里我的不是文字选项，需要自己输入编号，这里七牛对应的几个地区编号为[{z0:华东},{z1:华北},{z2:华南},{z3:北美}]，后面2个可有可无</li>\n<li>至此配置完成，然后就可以在上传去上传测试了，如下图 <img src=\"https://img.shuaxindiary.cn/imgserver3.png\"></li>\n<li>上传完成后，会以下面链接格式的选项的格式自动复制链接</li>\n</ul>\n","site":{"data":{}},"wordcount":536,"excerpt":"<h1 id=\"关于图床\"><a href=\"#关于图床\" class=\"headerlink\" title=\"关于图床\"></a>关于图床</h1><ul>\n<li>引用百度的介绍，就是专门用来存放图片，同时允许你把图片对外连接的网上空间。</li>\n<li>搭建的原因就是这些第三方提供图床服务的厂商，一般都可以做图片加速等，而且还提供一定存储空间，可以减轻自己服务的存储空间等，还有个目的，相当做个备份。</li>\n<li>特此记录一下，顺便测试一下搭建后的效果。</li>\n</ul>","more":"<h1 id=\"关于图床的选择\"><a href=\"#关于图床的选择\" class=\"headerlink\" title=\"关于图床的选择\"></a>关于图床的选择</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/35270383\">盘点国内免费好用的图床</a></li>\n<li>选择了七牛</li>\n</ul>\n<h1 id=\"搭建流程\"><a href=\"#搭建流程\" class=\"headerlink\" title=\"搭建流程\"></a>搭建流程</h1><ul>\n<li>注册七牛账号，登陆，进入主界面后点击对象存储，创建空间</li>\n<li>点击创建的空间设置，进入域名管理界面，绑定自己的已经备案的域名（这里创建后会给一个测试域名，只能测试用，30天后会自动收回），下图为设置界面，输入自己域名，然后根据需要做对应设置<img src=\"http://img.shuaxindiary.cn/imgserver.png\"></li>\n<li>设置完成后，去自己域名的对应注册商，添加CNAME记录 <a href=\"https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name\">官方介绍</a>，官方说的很清楚</li>\n<li>至此搭建完成</li>\n</ul>\n<h1 id=\"本地上传\"><a href=\"#本地上传\" class=\"headerlink\" title=\"本地上传\"></a>本地上传</h1><ul>\n<li>使用<a href=\"https://github.com/Molunerfinn/PicGo\">PicGo</a></li>\n<li>下载完毕后，进入对应的图床服务器设置界面，进行配置，<img src=\"https://img.shuaxindiary.cn/imgserver2.png\"></li>\n<li>配置概述：前两个在秘钥管理中查看，存储空间名为对应图床的空间名，访问网址为上文添加的域名，存储区域这里我的不是文字选项，需要自己输入编号，这里七牛对应的几个地区编号为[{z0:华东},{z1:华北},{z2:华南},{z3:北美}]，后面2个可有可无</li>\n<li>至此配置完成，然后就可以在上传去上传测试了，如下图 <img src=\"https://img.shuaxindiary.cn/imgserver3.png\"></li>\n<li>上传完成后，会以下面链接格式的选项的格式自动复制链接</li>\n</ul>"},{"title":"熟悉小程序开发目录","abbrlink":19427,"date":"2019-07-19T14:25:10.000Z","_content":"\n<link rel=\"stylesheet\" href=\"/css/prism.css\"/>>\n<script src=\"../source/js/prism.js\"></script>\n\n# 新项目默认目录\n\n    /pages--------存放小程序所有界面\n        -/index---首页\n            /*\n                每一个界面都是由以下四个文件组成\n                1.index.js-----页面交互(web的js文件)\n                2.index.json---页面配置文件\n                3.index.wxml---页面结构(web的html文件)\n                4.index.wxss---页面样式(web的css文件)\n            */*\n        -/logs----log信息页\n    /untils\n        -/until.js---官方默认有格式化时间的代码\n        /*全局就是对整个程序所有页面作用*/\n    app.js-----------小程序全局js文件\n    app.json---------小程序全局配置文件\n    app.wxss---------小程序全局css文件\n    project.config.json--项目相关信息文件\n    sitemap.json-----小程序内搜索配置相关文件\n<!-- more -->\n\n# 和传统web开发的区别\n\n\n1.json文件不再是模拟数据时使用,而是作为配置小程序使用\n    \n    ```JavaScript\n        {\n           <!-- 配置该程序有几个页面 -->\n            \"pages\": [\n                \"pages/index/index\",\n                \"pages/logs/logs\"\n            ],\n            <!-- 配置程序页面样式等 -->\n            \"window\": {\n                \"backgroundTextStyle\": \"light\",\n                \"navigationBarBackgroundColor\": \"#fff\",\n                \"navigationBarTitleText\": \"WeChat\",\n                \"navigationBarTextStyle\": \"black\"\n            },\n            \"sitemapLocation\": \"sitemap.json\"\n        }\n    ```\n# 语法上和vue的一些使用区别\n\n1.更改data属性时\n\n    ```javascript\n        //vue里更改data属性\n        data:{\n            name:'test'\n        },\n        methods:{\n            update(){\n                this.data='tes2';\n            }\n        }\n        //微信里更改data属性\n       data:{\n            name:'test'\n        },\n        // 微信里方法和data并列，不用像vue那样全写在methods对象里\n        update(){\n           this.setData({\n               name:'test3'\n           })\n        }\n    ```\n2.点击事件传值\n\n    ```javascript\n        //vue 绑定一个事件是 v-on:(js原生事件名)click='方法名'\n        // 传递参数向普通js一样传递即可\n        <div @click='hint(\"hi\")'> </div>\n\n        methods:{\n            hint(str){\n                console.log(str);//hi\n            }\n        }\n\n        // 微信通过bindTap绑定点击事件 其他事件查看文档 \n        <view data-hintstr='hi' bindTap='hint'></view>\n        hint(e){\n            console.log(e.currentTarget.dataset.hintstr);//hi\n        }\n    ```\n\n3.微信里的页面标签\n    view==div\n    text==p\n    block用wx:for时使用\n    wxss和js都是和传统web一致\n\n4.小程序官方封装好了ajax的请求，类似axios那样的\n\n5。。。继续摸索中。。。\n\n","source":"_posts/技术笔记/熟悉小程序开发目录.md","raw":"---\ntitle: 熟悉小程序开发目录\ncategory:\n  - 技术笔记\ntag:\n  - 小程序\n  - 踩坑\nabbrlink: 19427\ndate: 2019-07-19 22:25:10\n---\n\n<link rel=\"stylesheet\" href=\"/css/prism.css\"/>>\n<script src=\"../source/js/prism.js\"></script>\n\n# 新项目默认目录\n\n    /pages--------存放小程序所有界面\n        -/index---首页\n            /*\n                每一个界面都是由以下四个文件组成\n                1.index.js-----页面交互(web的js文件)\n                2.index.json---页面配置文件\n                3.index.wxml---页面结构(web的html文件)\n                4.index.wxss---页面样式(web的css文件)\n            */*\n        -/logs----log信息页\n    /untils\n        -/until.js---官方默认有格式化时间的代码\n        /*全局就是对整个程序所有页面作用*/\n    app.js-----------小程序全局js文件\n    app.json---------小程序全局配置文件\n    app.wxss---------小程序全局css文件\n    project.config.json--项目相关信息文件\n    sitemap.json-----小程序内搜索配置相关文件\n<!-- more -->\n\n# 和传统web开发的区别\n\n\n1.json文件不再是模拟数据时使用,而是作为配置小程序使用\n    \n    ```JavaScript\n        {\n           <!-- 配置该程序有几个页面 -->\n            \"pages\": [\n                \"pages/index/index\",\n                \"pages/logs/logs\"\n            ],\n            <!-- 配置程序页面样式等 -->\n            \"window\": {\n                \"backgroundTextStyle\": \"light\",\n                \"navigationBarBackgroundColor\": \"#fff\",\n                \"navigationBarTitleText\": \"WeChat\",\n                \"navigationBarTextStyle\": \"black\"\n            },\n            \"sitemapLocation\": \"sitemap.json\"\n        }\n    ```\n# 语法上和vue的一些使用区别\n\n1.更改data属性时\n\n    ```javascript\n        //vue里更改data属性\n        data:{\n            name:'test'\n        },\n        methods:{\n            update(){\n                this.data='tes2';\n            }\n        }\n        //微信里更改data属性\n       data:{\n            name:'test'\n        },\n        // 微信里方法和data并列，不用像vue那样全写在methods对象里\n        update(){\n           this.setData({\n               name:'test3'\n           })\n        }\n    ```\n2.点击事件传值\n\n    ```javascript\n        //vue 绑定一个事件是 v-on:(js原生事件名)click='方法名'\n        // 传递参数向普通js一样传递即可\n        <div @click='hint(\"hi\")'> </div>\n\n        methods:{\n            hint(str){\n                console.log(str);//hi\n            }\n        }\n\n        // 微信通过bindTap绑定点击事件 其他事件查看文档 \n        <view data-hintstr='hi' bindTap='hint'></view>\n        hint(e){\n            console.log(e.currentTarget.dataset.hintstr);//hi\n        }\n    ```\n\n3.微信里的页面标签\n    view==div\n    text==p\n    block用wx:for时使用\n    wxss和js都是和传统web一致\n\n4.小程序官方封装好了ajax的请求，类似axios那样的\n\n5。。。继续摸索中。。。\n\n","slug":"技术笔记/熟悉小程序开发目录","published":1,"updated":"2021-12-31T12:01:59.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuckd1n0001nyjf16vbar54","content":"<link rel=\"stylesheet\" href=\"/css/prism.css\"/>>\n<script src=\"../source/js/prism.js\"></script>\n\n<h1 id=\"新项目默认目录\"><a href=\"#新项目默认目录\" class=\"headerlink\" title=\"新项目默认目录\"></a>新项目默认目录</h1><div class=\"hljs code-wrapper\"><pre><code>/pages--------存放小程序所有界面\n    -/index---首页\n        /*\n            每一个界面都是由以下四个文件组成\n            1.index.js-----页面交互(web的js文件)\n            2.index.json---页面配置文件\n            3.index.wxml---页面结构(web的html文件)\n            4.index.wxss---页面样式(web的css文件)\n        */*\n    -/logs----log信息页\n/untils\n    -/until.js---官方默认有格式化时间的代码\n    /*全局就是对整个程序所有页面作用*/\napp.js-----------小程序全局js文件\napp.json---------小程序全局配置文件\napp.wxss---------小程序全局css文件\nproject.config.json--项目相关信息文件\nsitemap.json-----小程序内搜索配置相关文件</code></pre></div>\n<a id=\"more\"></a>\n\n<h1 id=\"和传统web开发的区别\"><a href=\"#和传统web开发的区别\" class=\"headerlink\" title=\"和传统web开发的区别\"></a>和传统web开发的区别</h1><p>1.json文件不再是模拟数据时使用,而是作为配置小程序使用</p>\n<div class=\"hljs code-wrapper\"><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs JavaScript\">&#123;<br>   &lt;!-- 配置该程序有几个页面 --&gt;<br>    <span class=\"hljs-string\">&quot;pages&quot;</span>: [<br>        <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;pages/logs/logs&quot;</span><br>    ],<br>    &lt;!-- 配置程序页面样式等 --&gt;<br>    <span class=\"hljs-string\">&quot;window&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;backgroundTextStyle&quot;</span>: <span class=\"hljs-string\">&quot;light&quot;</span>,<br>        <span class=\"hljs-string\">&quot;navigationBarBackgroundColor&quot;</span>: <span class=\"hljs-string\">&quot;#fff&quot;</span>,<br>        <span class=\"hljs-string\">&quot;navigationBarTitleText&quot;</span>: <span class=\"hljs-string\">&quot;WeChat&quot;</span>,<br>        <span class=\"hljs-string\">&quot;navigationBarTextStyle&quot;</span>: <span class=\"hljs-string\">&quot;black&quot;</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;sitemapLocation&quot;</span>: <span class=\"hljs-string\">&quot;sitemap.json&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure></code></pre>\n<h1 id=\"语法上和vue的一些使用区别\"><a href=\"#语法上和vue的一些使用区别\" class=\"headerlink\" title=\"语法上和vue的一些使用区别\"></a>语法上和vue的一些使用区别</h1><p>1.更改data属性时</p>\n<div class=\"hljs code-wrapper\"><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"> <span class=\"hljs-comment\">//vue里更改data属性</span><br> data:&#123;<br>     name:<span class=\"hljs-string\">&#x27;test&#x27;</span><br> &#125;,<br> methods:&#123;<br>     update()&#123;<br>         <span class=\"hljs-built_in\">this</span>.data=<span class=\"hljs-string\">&#x27;tes2&#x27;</span>;<br>     &#125;<br> &#125;<br> <span class=\"hljs-comment\">//微信里更改data属性</span><br>data:&#123;<br>     name:<span class=\"hljs-string\">&#x27;test&#x27;</span><br> &#125;,<br> <span class=\"hljs-comment\">// 微信里方法和data并列，不用像vue那样全写在methods对象里</span><br> update()&#123;<br>    <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>        name:<span class=\"hljs-string\">&#x27;test3&#x27;</span><br>    &#125;)<br> &#125;<br></code></pre></div></td></tr></table></figure></code></pre>\n<p>2.点击事件传值</p>\n<div class=\"hljs code-wrapper\"><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter hljs\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//vue 绑定一个事件是 v-on:(js原生事件名)click=&#x27;方法名&#x27;</span><br><span class=\"hljs-comment\">// 传递参数向普通js一样传递即可</span><br>&lt;div @click=<span class=\"hljs-string\">&#x27;hint(&quot;hi&quot;)&#x27;</span>&gt; &lt;/div&gt;<br><br>methods:&#123;<br>    hint(str)&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(str);<span class=\"hljs-comment\">//hi</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 微信通过bindTap绑定点击事件 其他事件查看文档 </span><br>&lt;view data-hintstr=<span class=\"hljs-string\">&#x27;hi&#x27;</span> bindTap=<span class=\"hljs-string\">&#x27;hint&#x27;</span>&gt;&lt;/view&gt;<br>hint(e)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(e.currentTarget.dataset.hintstr);<span class=\"hljs-comment\">//hi</span><br>&#125;<br></code></pre></div></td></tr></table></figure></code></pre>\n<p>3.微信里的页面标签<br>    view==div<br>    text==p<br>    block用wx:for时使用<br>    wxss和js都是和传统web一致</p>\n<p>4.小程序官方封装好了ajax的请求，类似axios那样的</p>\n<p>5。。。继续摸索中。。。</p>\n","site":{"data":{}},"wordcount":1692,"excerpt":"<link rel=\"stylesheet\" href=\"/css/prism.css\"/>>\n<script src=\"../source/js/prism.js\"></script>\n\n<h1 id=\"新项目默认目录\"><a href=\"#新项目默认目录\" class=\"headerlink\" title=\"新项目默认目录\"></a>新项目默认目录</h1><pre><code>/pages--------存放小程序所有界面\n    -/index---首页\n        /*\n            每一个界面都是由以下四个文件组成\n            1.index.js-----页面交互(web的js文件)\n            2.index.json---页面配置文件\n            3.index.wxml---页面结构(web的html文件)\n            4.index.wxss---页面样式(web的css文件)\n        */*\n    -/logs----log信息页\n/untils\n    -/until.js---官方默认有格式化时间的代码\n    /*全局就是对整个程序所有页面作用*/\napp.js-----------小程序全局js文件\napp.json---------小程序全局配置文件\napp.wxss---------小程序全局css文件\nproject.config.json--项目相关信息文件\nsitemap.json-----小程序内搜索配置相关文件</code></pre>","more":"<h1 id=\"和传统web开发的区别\"><a href=\"#和传统web开发的区别\" class=\"headerlink\" title=\"和传统web开发的区别\"></a>和传统web开发的区别</h1><p>1.json文件不再是模拟数据时使用,而是作为配置小程序使用</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JavaScript\">&#123;<br>   &lt;!-- 配置该程序有几个页面 --&gt;<br>    <span class=\"hljs-string\">&quot;pages&quot;</span>: [<br>        <span class=\"hljs-string\">&quot;pages/index/index&quot;</span>,<br>        <span class=\"hljs-string\">&quot;pages/logs/logs&quot;</span><br>    ],<br>    &lt;!-- 配置程序页面样式等 --&gt;<br>    <span class=\"hljs-string\">&quot;window&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;backgroundTextStyle&quot;</span>: <span class=\"hljs-string\">&quot;light&quot;</span>,<br>        <span class=\"hljs-string\">&quot;navigationBarBackgroundColor&quot;</span>: <span class=\"hljs-string\">&quot;#fff&quot;</span>,<br>        <span class=\"hljs-string\">&quot;navigationBarTitleText&quot;</span>: <span class=\"hljs-string\">&quot;WeChat&quot;</span>,<br>        <span class=\"hljs-string\">&quot;navigationBarTextStyle&quot;</span>: <span class=\"hljs-string\">&quot;black&quot;</span><br>    &#125;,<br>    <span class=\"hljs-string\">&quot;sitemapLocation&quot;</span>: <span class=\"hljs-string\">&quot;sitemap.json&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></code></pre>\n<h1 id=\"语法上和vue的一些使用区别\"><a href=\"#语法上和vue的一些使用区别\" class=\"headerlink\" title=\"语法上和vue的一些使用区别\"></a>语法上和vue的一些使用区别</h1><p>1.更改data属性时</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"> <span class=\"hljs-comment\">//vue里更改data属性</span><br> data:&#123;<br>     name:<span class=\"hljs-string\">&#x27;test&#x27;</span><br> &#125;,<br> methods:&#123;<br>     update()&#123;<br>         <span class=\"hljs-built_in\">this</span>.data=<span class=\"hljs-string\">&#x27;tes2&#x27;</span>;<br>     &#125;<br> &#125;<br> <span class=\"hljs-comment\">//微信里更改data属性</span><br>data:&#123;<br>     name:<span class=\"hljs-string\">&#x27;test&#x27;</span><br> &#125;,<br> <span class=\"hljs-comment\">// 微信里方法和data并列，不用像vue那样全写在methods对象里</span><br> update()&#123;<br>    <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>        name:<span class=\"hljs-string\">&#x27;test3&#x27;</span><br>    &#125;)<br> &#125;<br></code></pre></td></tr></table></figure></code></pre>\n<p>2.点击事件传值</p>\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//vue 绑定一个事件是 v-on:(js原生事件名)click=&#x27;方法名&#x27;</span><br><span class=\"hljs-comment\">// 传递参数向普通js一样传递即可</span><br>&lt;div @click=<span class=\"hljs-string\">&#x27;hint(&quot;hi&quot;)&#x27;</span>&gt; &lt;/div&gt;<br><br>methods:&#123;<br>    hint(str)&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(str);<span class=\"hljs-comment\">//hi</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 微信通过bindTap绑定点击事件 其他事件查看文档 </span><br>&lt;view data-hintstr=<span class=\"hljs-string\">&#x27;hi&#x27;</span> bindTap=<span class=\"hljs-string\">&#x27;hint&#x27;</span>&gt;&lt;/view&gt;<br>hint(e)&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(e.currentTarget.dataset.hintstr);<span class=\"hljs-comment\">//hi</span><br>&#125;<br></code></pre></td></tr></table></figure></code></pre>\n<p>3.微信里的页面标签<br>    view==div<br>    text==p<br>    block用wx:for时使用<br>    wxss和js都是和传统web一致</p>\n<p>4.小程序官方封装好了ajax的请求，类似axios那样的</p>\n<p>5。。。继续摸索中。。。</p>"},{"title":"正则表达式","abbrlink":46563,"date":"2019-10-08T09:06:13.000Z","_content":"# 正则表达式\n>检查一段字符串是否符合自定义的一个规则\n\n<!-- more -->\n## 特殊符\n>^\n- 匹配输入开始\n- /^a/----字符串开始位置必须是a\n\n>$\n- 匹配输入结束\n- /a$/----字符串结尾必须是a\n\n>\\\n- 转义字符\n\n>+\n- 执行一个规则多次\n- /a+/----匹配candy中的a和caaaaaay中的所有a\n\n>x|y\n- 匹配x或者y\n\n>[]\n- 匹配括号内的任意字符\n- //[a]//----匹配a\n- //[a-z]//----匹配a-z任意一个\n\n>?\n- 匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。\n- 例如，/e?le?/ 匹配 \"angel\" 中的 'el'、\"angle\" 中的 'le' 以及 \"oslo' 中的 'l'。\n\n>{}\n- 匹配规则出现的次数(括号里的数组)\n- /a{2}/---不会匹配apple 会匹配 aapple 和 aaaaapple\n\n>更多参考\n- [MDN正则表达式教程](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n\n\n## 使用正则表达式\n>exec\n-\t一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。\n>test\t\n- 一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。\n>match\t\n- 一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。\n>matchAll\t\n- 一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。\n>search\n- 一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回- 1。\n>replace\t\n- 一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。\n>split\t\n- 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。\n\n## 常见规则\n>/^[1][0-9]{10}/\n- 1开头的11位手机号码\n\n>/^\\s*|\\s*$/g\n- 字符串是否为空\n\n>/^\\w+@[a-zA-Z0-9]{2,10}(?:\\.[a-z]{2,4}){1,3}$/\n- 邮箱\n\n>/^\\d+\\.\\d+$/\n- 是否有小数\n","source":"_posts/技术笔记/正则表达式.md","raw":"---\ntitle: 正则表达式\ncategory:\n  - 技术笔记\ntag:\n  - 正则表达式\nabbrlink: 46563\ndate: 2019-10-08 17:06:13\n---\n# 正则表达式\n>检查一段字符串是否符合自定义的一个规则\n\n<!-- more -->\n## 特殊符\n>^\n- 匹配输入开始\n- /^a/----字符串开始位置必须是a\n\n>$\n- 匹配输入结束\n- /a$/----字符串结尾必须是a\n\n>\\\n- 转义字符\n\n>+\n- 执行一个规则多次\n- /a+/----匹配candy中的a和caaaaaay中的所有a\n\n>x|y\n- 匹配x或者y\n\n>[]\n- 匹配括号内的任意字符\n- //[a]//----匹配a\n- //[a-z]//----匹配a-z任意一个\n\n>?\n- 匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。\n- 例如，/e?le?/ 匹配 \"angel\" 中的 'el'、\"angle\" 中的 'le' 以及 \"oslo' 中的 'l'。\n\n>{}\n- 匹配规则出现的次数(括号里的数组)\n- /a{2}/---不会匹配apple 会匹配 aapple 和 aaaaapple\n\n>更多参考\n- [MDN正则表达式教程](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n\n\n## 使用正则表达式\n>exec\n-\t一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。\n>test\t\n- 一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。\n>match\t\n- 一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。\n>matchAll\t\n- 一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。\n>search\n- 一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回- 1。\n>replace\t\n- 一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。\n>split\t\n- 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。\n\n## 常见规则\n>/^[1][0-9]{10}/\n- 1开头的11位手机号码\n\n>/^\\s*|\\s*$/g\n- 字符串是否为空\n\n>/^\\w+@[a-zA-Z0-9]{2,10}(?:\\.[a-z]{2,4}){1,3}$/\n- 邮箱\n\n>/^\\d+\\.\\d+$/\n- 是否有小数\n","slug":"技术笔记/正则表达式","published":1,"updated":"2021-12-31T12:01:59.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuckd1o0003nyjfhwnc6rs9","content":"<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><blockquote>\n<p>检查一段字符串是否符合自定义的一个规则</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"特殊符\"><a href=\"#特殊符\" class=\"headerlink\" title=\"特殊符\"></a>特殊符</h2><blockquote>\n<p>^</p>\n</blockquote>\n<ul>\n<li>匹配输入开始</li>\n<li>/^a/—-字符串开始位置必须是a</li>\n</ul>\n<blockquote>\n<p>$</p>\n</blockquote>\n<ul>\n<li>匹配输入结束</li>\n<li>/a$/—-字符串结尾必须是a</li>\n</ul>\n<blockquote>\n<p>\\</p>\n</blockquote>\n<ul>\n<li>转义字符</li>\n</ul>\n<blockquote>\n<p>+</p>\n</blockquote>\n<ul>\n<li>执行一个规则多次</li>\n<li>/a+/—-匹配candy中的a和caaaaaay中的所有a</li>\n</ul>\n<blockquote>\n<p>x|y</p>\n</blockquote>\n<ul>\n<li>匹配x或者y</li>\n</ul>\n<blockquote>\n<p>[]</p>\n</blockquote>\n<ul>\n<li>匹配括号内的任意字符</li>\n<li>//[a]//—-匹配a</li>\n<li>//[a-z]//—-匹配a-z任意一个</li>\n</ul>\n<blockquote>\n<p>?</p>\n</blockquote>\n<ul>\n<li>匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。</li>\n<li>例如，/e?le?/ 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。</li>\n</ul>\n<blockquote>\n<p>{}</p>\n</blockquote>\n<ul>\n<li>匹配规则出现的次数(括号里的数组)</li>\n<li>/a{2}/—不会匹配apple 会匹配 aapple 和 aaaaapple</li>\n</ul>\n<blockquote>\n<p>更多参考</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">MDN正则表达式教程</a></li>\n</ul>\n<h2 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h2><blockquote>\n<p>exec</p>\n</blockquote>\n<ul>\n<li>一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。<blockquote>\n<p>test    </p>\n</blockquote>\n</li>\n<li>一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。<blockquote>\n<p>match    </p>\n</blockquote>\n</li>\n<li>一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。<blockquote>\n<p>matchAll    </p>\n</blockquote>\n</li>\n<li>一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。<blockquote>\n<p>search</p>\n</blockquote>\n</li>\n<li>一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回- 1。<blockquote>\n<p>replace    </p>\n</blockquote>\n</li>\n<li>一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。<blockquote>\n<p>split    </p>\n</blockquote>\n</li>\n<li>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</li>\n</ul>\n<h2 id=\"常见规则\"><a href=\"#常见规则\" class=\"headerlink\" title=\"常见规则\"></a>常见规则</h2><blockquote>\n<p>/^[1][0-9]{10}/</p>\n</blockquote>\n<ul>\n<li>1开头的11位手机号码</li>\n</ul>\n<blockquote>\n<p>/^\\s*|\\s*$/g</p>\n</blockquote>\n<ul>\n<li>字符串是否为空</li>\n</ul>\n<blockquote>\n<p>/^\\w+@[a-zA-Z0-9]{2,10}(?:.[a-z]{2,4}){1,3}$/</p>\n</blockquote>\n<ul>\n<li>邮箱</li>\n</ul>\n<blockquote>\n<p>/^\\d+.\\d+$/</p>\n</blockquote>\n<ul>\n<li>是否有小数</li>\n</ul>\n","site":{"data":{}},"wordcount":785,"excerpt":"<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><blockquote>\n<p>检查一段字符串是否符合自定义的一个规则</p>\n</blockquote>","more":"<h2 id=\"特殊符\"><a href=\"#特殊符\" class=\"headerlink\" title=\"特殊符\"></a>特殊符</h2><blockquote>\n<p>^</p>\n</blockquote>\n<ul>\n<li>匹配输入开始</li>\n<li>/^a/—-字符串开始位置必须是a</li>\n</ul>\n<blockquote>\n<p>$</p>\n</blockquote>\n<ul>\n<li>匹配输入结束</li>\n<li>/a$/—-字符串结尾必须是a</li>\n</ul>\n<blockquote>\n<p>\\</p>\n</blockquote>\n<ul>\n<li>转义字符</li>\n</ul>\n<blockquote>\n<p>+</p>\n</blockquote>\n<ul>\n<li>执行一个规则多次</li>\n<li>/a+/—-匹配candy中的a和caaaaaay中的所有a</li>\n</ul>\n<blockquote>\n<p>x|y</p>\n</blockquote>\n<ul>\n<li>匹配x或者y</li>\n</ul>\n<blockquote>\n<p>[]</p>\n</blockquote>\n<ul>\n<li>匹配括号内的任意字符</li>\n<li>//[a]//—-匹配a</li>\n<li>//[a-z]//—-匹配a-z任意一个</li>\n</ul>\n<blockquote>\n<p>?</p>\n</blockquote>\n<ul>\n<li>匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。</li>\n<li>例如，/e?le?/ 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。</li>\n</ul>\n<blockquote>\n<p>{}</p>\n</blockquote>\n<ul>\n<li>匹配规则出现的次数(括号里的数组)</li>\n<li>/a{2}/—不会匹配apple 会匹配 aapple 和 aaaaapple</li>\n</ul>\n<blockquote>\n<p>更多参考</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">MDN正则表达式教程</a></li>\n</ul>\n<h2 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h2><blockquote>\n<p>exec</p>\n</blockquote>\n<ul>\n<li>一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。<blockquote>\n<p>test    </p>\n</blockquote>\n</li>\n<li>一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。<blockquote>\n<p>match    </p>\n</blockquote>\n</li>\n<li>一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。<blockquote>\n<p>matchAll    </p>\n</blockquote>\n</li>\n<li>一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。<blockquote>\n<p>search</p>\n</blockquote>\n</li>\n<li>一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回- 1。<blockquote>\n<p>replace    </p>\n</blockquote>\n</li>\n<li>一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。<blockquote>\n<p>split    </p>\n</blockquote>\n</li>\n<li>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</li>\n</ul>\n<h2 id=\"常见规则\"><a href=\"#常见规则\" class=\"headerlink\" title=\"常见规则\"></a>常见规则</h2><blockquote>\n<p>/^[1][0-9]{10}/</p>\n</blockquote>\n<ul>\n<li>1开头的11位手机号码</li>\n</ul>\n<blockquote>\n<p>/^\\s*|\\s*$/g</p>\n</blockquote>\n<ul>\n<li>字符串是否为空</li>\n</ul>\n<blockquote>\n<p>/^\\w+@[a-zA-Z0-9]{2,10}(?:.[a-z]{2,4}){1,3}$/</p>\n</blockquote>\n<ul>\n<li>邮箱</li>\n</ul>\n<blockquote>\n<p>/^\\d+.\\d+$/</p>\n</blockquote>\n<ul>\n<li>是否有小数</li>\n</ul>"},{"title":"记一次跨平台开发","date":"2021-02-10T01:55:50.000Z","index_img":"https://img.shuaxindiary.cn/jingzi.jpg","banner_img":"https://img.shuaxindiary.cn/jingzi.jpg","_content":"> 封面图作者：[镜子222333](https://weibo.com/u/5522543961)\n\n\n很早就听过`electron`和`reactnaive`，可以让前端的同学来使用他们熟悉的web前端技术栈来分别开发pc客户端和移动客户端；再后来小程序火了起来后，也有不少团队开始做起了多端共用一套代码这样的理想化框架，比如滴滴的`chameleon`和京东的`Taro`，但是对于这些新'玩具'一直是停留在知道层面，并没有接触，趁着大四最后的一个假期， 想着接触一下；然后发现了一款叫`scriptable`的ios/macos上的的app；可以用js来实现对该应用在ios桌面组件的自定义；有点类似小程序那样，微信封装一些底层设备的操作暴露给上层，然后由我们来利用这些api来做二次开发，所以最近以这个为头，尝试了第一次的'跨端'开发，并记录一下第一次尝试。\n\n# 写在前面\n- 首先需要一台升级到`ios14`的`ios||macos||ipados`的设备\n- 在设备上下载`scriptable`\n- 打开软件即可开始书写自己的脚本啦\n\n# 关于[scriptable](https://scriptable.app/)\n- [文档](https://docs.scriptable.app/)\n\n> **软件说明**\n> - 这个软件做的事就是封装了ios的底层一些api\n> - 然后我们用软件提供的api来定制该软件创建的组件所显示的内容\n> - 需要注意的是使用的是apple自己的js引擎，但支持ES6\n> - 其次因为只是内嵌了js引擎，所有没有浏览器的那些api\n\n> **开发**\n> - 打开app，点击右上角加号创建一个新脚本\n> - 在创建的脚本文件中，直接开始书写即可\n\n> **查看效果**\n> - 在桌面添加该软件的小组件\n> - 编辑该小组件，在script中选择我们的脚本\n> - 回到桌面就可以查看效果了\n\n# 代码演示\n- 写一个Hello World\n```js\n// 创建一个小组件\nlet w=new ListWidget()\n// 设置组件背景颜色\nw.backgroundColor=new Color(\"#fff\")\n// 添加组件内显示的文本\nlet textNode=w.addText(\"Hello World\")\n// 在组件内部居中显示文本\ntextNode.centerAlignText()\n// 设置文本的颜色\ntextNode.textColor=new Color(\"#000\")\n// 渲染组件\nScript.setWidget(w)\n// 通知系统脚本执行完成\nScript.complete()\n```\n- ![](https://img.shuaxindiary.cn/QQ图片20210210104734.jpg)\n\n# 关于pc开发小组件\n- 软件本身的编辑环境和调试其实蛮方便，但是因为手机和pad的打字输入体验不行，所以如果没有mac的话，想在电脑开发就需要借助一些其他手段\n- 安利一个社区的方案：[im3x-dev](https://github.com/im3x/Scriptables)\n- 因为文档内部代码封装的api写的不是非常友好，写一点开发中的食用指南\n\n\n## **食用指南**\n- 开发文件：`「源码」小组件示例.js`内部是一个Widget类，只需要在他提供的class内部编写对应的逻辑函数即可\n- 文件默认本身会包含几个函数，以及提供一些函数，可以做一些操作\n- - constructor：初始化组件的一些基本信息，以及注册脚本在软件和用户交互的一些设置\n- - render：判断组件大小渲染不同的组件\n- - renderSmall：小尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据\n- - renderMedium：中尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据\n- - renderLarge：大尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据\n- - getData：请求数据的函数\n- 定一些自己的函数：写在class里面，然后在其他地方通过`this.xxx`调用即可\n- 注册一些让用户点击的然后进行一些交互的事件：`this.registerAction('显示文本',对应操作的函数)`\n\n# 最后\n- 开发过程中有遇到一个小坑：\n- - 在apple的js环境中，`new Date()`时，如果要传入日期，其格式必须为`xxxx/xx/xx`，而不是V8那样的`xxxx-xx-xx`\n- 附上一个自己写的计算天数的脚本\n```js\n// Variables used by Scriptable.\n// These must be at the very top of the file. Do not edit.\n// icon-color: orange; icon-glyph: comments;\n//\n// iOS 桌面组件脚本 @「小件件」\n// 开发说明：请从 Widget 类开始编写，注释请勿修改\n// https://x.im3x.cn\n//\n\n// 添加require，是为了vscode中可以正确引入包，以获得自动补全等功能\nif (typeof require === 'undefined') require = importModule\n\n\nconst { Base } = require(\"./「小件件」开发环境\")\n// const { DmYY: Base } = require(\"./DmYY.js\")\n\n\n\n// @组件代码开始\nclass Widget extends Base {\n  /**\n   * 传递给组件的参数，可以是桌面 Parameter 数据，也可以是外部如 URLScheme 等传递的数据\n   * @param {string} arg 自定义参数\n   */\n  constructor(arg) {\n    super(arg)\n    this.name = '示例小组件'\n    this.desc = '「小件件」—— 原创精美实用小组件'\n    // 注册操作菜单\n    if (config.runsInApp) {\n      this.registerAction(\"设置文本\", this.actionSetText)\n      this.registerAction(\"设置时间\", this.actionSetDate)\n    }\n  }\n  // 设置文本\n  async actionSetText() {\n    let getText = new Alert()\n    getText.title = \"设置组件显示文本\"\n    getText.message = \"请输入组件要显示的文本内容\"\n    getText.addTextField(\"输入显示文本\", this.settings['text'])\n    // 增加按钮\n    getText.addAction(\"确定\")\n    getText.addCancelAction(\"取消\")\n    await getText.presentAlert()\n    let inputText = await getText.textFieldValue(0)\n    this.settings['text'] = inputText\n    // 保存设置\n    this.saveSettings()\n  }\n  // 设置时间\n  async actionSetDate() {\n    console.log(\"设置时间\")\n    try {\n      let dp = await new DatePicker()\n      let selectDate = await dp.pickDate()\n      // ios只能解析 xxxx/xx/xx格式的日期\n      let day = `${selectDate.getFullYear()}/${selectDate.getMonth() + 1}/${selectDate.getDate()}`\n      this.settings['day'] = day\n      this.saveSettings()\n    } catch (error) {\n      console.log(\"请选择时间\")\n    }\n  }\n  /**\n   * 渲染函数，函数名固定\n   * 可以根据 this.widgetFamily 来判断小组件尺寸，以返回不同大小的内容\n   */\n  async render() {\n    // 请求接口\n    const data = await this.getData()\n    switch (this.widgetFamily) {\n      case 'large':\n        return await this.renderLarge(data)\n      case 'medium':\n        return await this.renderMedium(data)\n      default:\n        return await this.renderSmall(data)\n    }\n  }\n  // 渲染背景颜色\n  renderBackColor(w) {\n    const gradient = new LinearGradient();\n    gradient.locations = [0, 1];\n    gradient.colors = [new Color(\"#eec3ee\", 1), new Color(\"#b2c0ed\", 1)];\n    w.backgroundGradient = gradient;\n  }\n  // 渲染字体\n  renderFontStyle(t, fontSize, fontColor, position) {\n    switch (position) {\n      case 'center':\n        t.centerAlignText()\n        break;\n      case 'right':\n        t.rightAlignText()\n        break;\n      case 'left':\n        t.leftAlignText()\n        break;\n      default:\n        break;\n    }\n    t.font = Font.lightSystemFont(fontSize)\n    t.textColor = new Color(fontColor, 1)\n  }\n  genTime() {\n    var date = new Date(); //1. js获取当前时间\n    var min = date.getMinutes(); //2. 获取当前分钟\n    date.setMinutes(min + 1); //3. 设置当前时间+10分钟：把当前分钟数+10后的值重新设置为date对象的分钟数\n    var y = date.getFullYear();\n    var m = (date.getMonth() + 1) < 10 ? (\"0\" + (date.getMonth() + 1)) : (date.getMonth() + 1);\n    var d = date.getDate() < 10 ? (\"0\" + date.getDate()) : date.getDate();\n    var h = date.getHours() < 10 ? ('0' + date.getHours()) : date.getHours()\n    var f = date.getMinutes() < 10 ? ('0' + date.getMinutes()) : date.getMinutes()\n    var s = date.getSeconds() < 10 ? ('0' + date.getseconds()) : date.getSeconds()\n    var formatdate = y + '/' + m + '/' + d + \" \" + h + \":\" + f + \":\" + s;\n    console.log(formatdate) // 获取10分钟后的时间，格式为yyyy-mm-dd h:f:s\n    console.log(new Date(formatdate))\n    return formatdate\n  }\n  /**\n   * 渲染小尺寸组件\n   */\n  async renderSmall(data) {\n    console.log(\"刷新\")\n    let w = new ListWidget()\n    w.refreshAfterDate = new Date(this.genTime())\n    let headerT = w.addText(this.settings['text'] ? this.settings['text'] : \"默认文本\")\n    this.renderFontStyle(headerT, 15, \"#fff\", 'center')\n    let start = await this.settings['day']\n    let day = start ? Math.ceil((new Date() - new Date(start)) / (1000 * 60 * 60 * 24)) : 1\n    const t = w.addText(day.toString())\n    t.centerAlignText()\n    this.renderFontStyle(t, 60, '#fff', 'center')\n    let today = w.addDate(new Date())\n    this.renderFontStyle(today, 15, '#fff', 'center')\n    this.renderBackColor(w)\n    return w\n  }\n  /**\n   * 渲染中尺寸组件\n   */\n  async renderMedium(data, num = 3) {\n    let w = new ListWidget()\n    let text = w.addText(this.settings['text'] ? this.settings['text'] : \"默认文本\")\n    this.renderFontStyle(text, 36, \"#fff\", 'center')\n    let day = Math.ceil(parseInt(new Date() - new Date(this.settings['day'])) / (1000 * 60 * 60 * 24))\n    // 创建中部布局\n    let footerT = w.addText(`${String(day) === 'NaN' || day <= 0 ? \"请设置今天之前的时间\" : day}`)\n    footerT.centerAlignText()\n    if (String(day) === 'NaN' || day <= 0) {\n      this.renderFontStyle(footerT, 27, \"#fff\", 'center')\n    } else {\n      this.renderFontStyle(footerT, 40, \"#fff\", 'center')\n    }\n    let today = w.addDate(new Date())\n    this.renderFontStyle(today, 15, '#fff', 'center')\n    this.renderBackColor(w)\n    // w.addSpacer(2)\n    return w\n  }\n  /**\n   * 渲染大尺寸组件\n   */\n  async renderLarge(data) {\n    return await this.renderMedium(data, 10)\n  }\n\n  /**\n   * 获取数据函数，函数名可不固定\n   */\n  async getData() {\n    const api = 'https://x.im3x.cn/v1/test-api.json'\n    return await this.httpGet(api, true, false)\n  }\n\n  /**\n   * 自定义注册点击事件，用 actionUrl 生成一个触发链接，点击后会执行下方对应的 action\n   * @param {string} url 打开的链接\n   */\n  async actionOpenUrl(url) {\n    Safari.openInApp(url, false)\n  }\n\n}\n// @组件代码结束\n\nconst { Testing } = require(\"./「小件件」开发环境\")\nawait Testing(Widget)\n```\n","source":"_posts/技术笔记/记一次跨平台开发.md","raw":"---\ntitle: 记一次跨平台开发\ndate: 2021-02-10 09:55:50\nindex_img: https://img.shuaxindiary.cn/jingzi.jpg\nbanner_img: https://img.shuaxindiary.cn/jingzi.jpg\ncategory:\n    - 技术笔记\ntag:\n    - JavaScript\n    - 前端\n    - 跨平台\n    - scriptable\n---\n> 封面图作者：[镜子222333](https://weibo.com/u/5522543961)\n\n\n很早就听过`electron`和`reactnaive`，可以让前端的同学来使用他们熟悉的web前端技术栈来分别开发pc客户端和移动客户端；再后来小程序火了起来后，也有不少团队开始做起了多端共用一套代码这样的理想化框架，比如滴滴的`chameleon`和京东的`Taro`，但是对于这些新'玩具'一直是停留在知道层面，并没有接触，趁着大四最后的一个假期， 想着接触一下；然后发现了一款叫`scriptable`的ios/macos上的的app；可以用js来实现对该应用在ios桌面组件的自定义；有点类似小程序那样，微信封装一些底层设备的操作暴露给上层，然后由我们来利用这些api来做二次开发，所以最近以这个为头，尝试了第一次的'跨端'开发，并记录一下第一次尝试。\n\n# 写在前面\n- 首先需要一台升级到`ios14`的`ios||macos||ipados`的设备\n- 在设备上下载`scriptable`\n- 打开软件即可开始书写自己的脚本啦\n\n# 关于[scriptable](https://scriptable.app/)\n- [文档](https://docs.scriptable.app/)\n\n> **软件说明**\n> - 这个软件做的事就是封装了ios的底层一些api\n> - 然后我们用软件提供的api来定制该软件创建的组件所显示的内容\n> - 需要注意的是使用的是apple自己的js引擎，但支持ES6\n> - 其次因为只是内嵌了js引擎，所有没有浏览器的那些api\n\n> **开发**\n> - 打开app，点击右上角加号创建一个新脚本\n> - 在创建的脚本文件中，直接开始书写即可\n\n> **查看效果**\n> - 在桌面添加该软件的小组件\n> - 编辑该小组件，在script中选择我们的脚本\n> - 回到桌面就可以查看效果了\n\n# 代码演示\n- 写一个Hello World\n```js\n// 创建一个小组件\nlet w=new ListWidget()\n// 设置组件背景颜色\nw.backgroundColor=new Color(\"#fff\")\n// 添加组件内显示的文本\nlet textNode=w.addText(\"Hello World\")\n// 在组件内部居中显示文本\ntextNode.centerAlignText()\n// 设置文本的颜色\ntextNode.textColor=new Color(\"#000\")\n// 渲染组件\nScript.setWidget(w)\n// 通知系统脚本执行完成\nScript.complete()\n```\n- ![](https://img.shuaxindiary.cn/QQ图片20210210104734.jpg)\n\n# 关于pc开发小组件\n- 软件本身的编辑环境和调试其实蛮方便，但是因为手机和pad的打字输入体验不行，所以如果没有mac的话，想在电脑开发就需要借助一些其他手段\n- 安利一个社区的方案：[im3x-dev](https://github.com/im3x/Scriptables)\n- 因为文档内部代码封装的api写的不是非常友好，写一点开发中的食用指南\n\n\n## **食用指南**\n- 开发文件：`「源码」小组件示例.js`内部是一个Widget类，只需要在他提供的class内部编写对应的逻辑函数即可\n- 文件默认本身会包含几个函数，以及提供一些函数，可以做一些操作\n- - constructor：初始化组件的一些基本信息，以及注册脚本在软件和用户交互的一些设置\n- - render：判断组件大小渲染不同的组件\n- - renderSmall：小尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据\n- - renderMedium：中尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据\n- - renderLarge：大尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据\n- - getData：请求数据的函数\n- 定一些自己的函数：写在class里面，然后在其他地方通过`this.xxx`调用即可\n- 注册一些让用户点击的然后进行一些交互的事件：`this.registerAction('显示文本',对应操作的函数)`\n\n# 最后\n- 开发过程中有遇到一个小坑：\n- - 在apple的js环境中，`new Date()`时，如果要传入日期，其格式必须为`xxxx/xx/xx`，而不是V8那样的`xxxx-xx-xx`\n- 附上一个自己写的计算天数的脚本\n```js\n// Variables used by Scriptable.\n// These must be at the very top of the file. Do not edit.\n// icon-color: orange; icon-glyph: comments;\n//\n// iOS 桌面组件脚本 @「小件件」\n// 开发说明：请从 Widget 类开始编写，注释请勿修改\n// https://x.im3x.cn\n//\n\n// 添加require，是为了vscode中可以正确引入包，以获得自动补全等功能\nif (typeof require === 'undefined') require = importModule\n\n\nconst { Base } = require(\"./「小件件」开发环境\")\n// const { DmYY: Base } = require(\"./DmYY.js\")\n\n\n\n// @组件代码开始\nclass Widget extends Base {\n  /**\n   * 传递给组件的参数，可以是桌面 Parameter 数据，也可以是外部如 URLScheme 等传递的数据\n   * @param {string} arg 自定义参数\n   */\n  constructor(arg) {\n    super(arg)\n    this.name = '示例小组件'\n    this.desc = '「小件件」—— 原创精美实用小组件'\n    // 注册操作菜单\n    if (config.runsInApp) {\n      this.registerAction(\"设置文本\", this.actionSetText)\n      this.registerAction(\"设置时间\", this.actionSetDate)\n    }\n  }\n  // 设置文本\n  async actionSetText() {\n    let getText = new Alert()\n    getText.title = \"设置组件显示文本\"\n    getText.message = \"请输入组件要显示的文本内容\"\n    getText.addTextField(\"输入显示文本\", this.settings['text'])\n    // 增加按钮\n    getText.addAction(\"确定\")\n    getText.addCancelAction(\"取消\")\n    await getText.presentAlert()\n    let inputText = await getText.textFieldValue(0)\n    this.settings['text'] = inputText\n    // 保存设置\n    this.saveSettings()\n  }\n  // 设置时间\n  async actionSetDate() {\n    console.log(\"设置时间\")\n    try {\n      let dp = await new DatePicker()\n      let selectDate = await dp.pickDate()\n      // ios只能解析 xxxx/xx/xx格式的日期\n      let day = `${selectDate.getFullYear()}/${selectDate.getMonth() + 1}/${selectDate.getDate()}`\n      this.settings['day'] = day\n      this.saveSettings()\n    } catch (error) {\n      console.log(\"请选择时间\")\n    }\n  }\n  /**\n   * 渲染函数，函数名固定\n   * 可以根据 this.widgetFamily 来判断小组件尺寸，以返回不同大小的内容\n   */\n  async render() {\n    // 请求接口\n    const data = await this.getData()\n    switch (this.widgetFamily) {\n      case 'large':\n        return await this.renderLarge(data)\n      case 'medium':\n        return await this.renderMedium(data)\n      default:\n        return await this.renderSmall(data)\n    }\n  }\n  // 渲染背景颜色\n  renderBackColor(w) {\n    const gradient = new LinearGradient();\n    gradient.locations = [0, 1];\n    gradient.colors = [new Color(\"#eec3ee\", 1), new Color(\"#b2c0ed\", 1)];\n    w.backgroundGradient = gradient;\n  }\n  // 渲染字体\n  renderFontStyle(t, fontSize, fontColor, position) {\n    switch (position) {\n      case 'center':\n        t.centerAlignText()\n        break;\n      case 'right':\n        t.rightAlignText()\n        break;\n      case 'left':\n        t.leftAlignText()\n        break;\n      default:\n        break;\n    }\n    t.font = Font.lightSystemFont(fontSize)\n    t.textColor = new Color(fontColor, 1)\n  }\n  genTime() {\n    var date = new Date(); //1. js获取当前时间\n    var min = date.getMinutes(); //2. 获取当前分钟\n    date.setMinutes(min + 1); //3. 设置当前时间+10分钟：把当前分钟数+10后的值重新设置为date对象的分钟数\n    var y = date.getFullYear();\n    var m = (date.getMonth() + 1) < 10 ? (\"0\" + (date.getMonth() + 1)) : (date.getMonth() + 1);\n    var d = date.getDate() < 10 ? (\"0\" + date.getDate()) : date.getDate();\n    var h = date.getHours() < 10 ? ('0' + date.getHours()) : date.getHours()\n    var f = date.getMinutes() < 10 ? ('0' + date.getMinutes()) : date.getMinutes()\n    var s = date.getSeconds() < 10 ? ('0' + date.getseconds()) : date.getSeconds()\n    var formatdate = y + '/' + m + '/' + d + \" \" + h + \":\" + f + \":\" + s;\n    console.log(formatdate) // 获取10分钟后的时间，格式为yyyy-mm-dd h:f:s\n    console.log(new Date(formatdate))\n    return formatdate\n  }\n  /**\n   * 渲染小尺寸组件\n   */\n  async renderSmall(data) {\n    console.log(\"刷新\")\n    let w = new ListWidget()\n    w.refreshAfterDate = new Date(this.genTime())\n    let headerT = w.addText(this.settings['text'] ? this.settings['text'] : \"默认文本\")\n    this.renderFontStyle(headerT, 15, \"#fff\", 'center')\n    let start = await this.settings['day']\n    let day = start ? Math.ceil((new Date() - new Date(start)) / (1000 * 60 * 60 * 24)) : 1\n    const t = w.addText(day.toString())\n    t.centerAlignText()\n    this.renderFontStyle(t, 60, '#fff', 'center')\n    let today = w.addDate(new Date())\n    this.renderFontStyle(today, 15, '#fff', 'center')\n    this.renderBackColor(w)\n    return w\n  }\n  /**\n   * 渲染中尺寸组件\n   */\n  async renderMedium(data, num = 3) {\n    let w = new ListWidget()\n    let text = w.addText(this.settings['text'] ? this.settings['text'] : \"默认文本\")\n    this.renderFontStyle(text, 36, \"#fff\", 'center')\n    let day = Math.ceil(parseInt(new Date() - new Date(this.settings['day'])) / (1000 * 60 * 60 * 24))\n    // 创建中部布局\n    let footerT = w.addText(`${String(day) === 'NaN' || day <= 0 ? \"请设置今天之前的时间\" : day}`)\n    footerT.centerAlignText()\n    if (String(day) === 'NaN' || day <= 0) {\n      this.renderFontStyle(footerT, 27, \"#fff\", 'center')\n    } else {\n      this.renderFontStyle(footerT, 40, \"#fff\", 'center')\n    }\n    let today = w.addDate(new Date())\n    this.renderFontStyle(today, 15, '#fff', 'center')\n    this.renderBackColor(w)\n    // w.addSpacer(2)\n    return w\n  }\n  /**\n   * 渲染大尺寸组件\n   */\n  async renderLarge(data) {\n    return await this.renderMedium(data, 10)\n  }\n\n  /**\n   * 获取数据函数，函数名可不固定\n   */\n  async getData() {\n    const api = 'https://x.im3x.cn/v1/test-api.json'\n    return await this.httpGet(api, true, false)\n  }\n\n  /**\n   * 自定义注册点击事件，用 actionUrl 生成一个触发链接，点击后会执行下方对应的 action\n   * @param {string} url 打开的链接\n   */\n  async actionOpenUrl(url) {\n    Safari.openInApp(url, false)\n  }\n\n}\n// @组件代码结束\n\nconst { Testing } = require(\"./「小件件」开发环境\")\nawait Testing(Widget)\n```\n","slug":"技术笔记/记一次跨平台开发","published":1,"updated":"2021-12-31T12:01:59.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuckd1p0005nyjf45ztduxh","content":"<blockquote>\n<p>封面图作者：<a href=\"https://weibo.com/u/5522543961\">镜子222333</a></p>\n</blockquote>\n<p>很早就听过<code>electron</code>和<code>reactnaive</code>，可以让前端的同学来使用他们熟悉的web前端技术栈来分别开发pc客户端和移动客户端；再后来小程序火了起来后，也有不少团队开始做起了多端共用一套代码这样的理想化框架，比如滴滴的<code>chameleon</code>和京东的<code>Taro</code>，但是对于这些新’玩具’一直是停留在知道层面，并没有接触，趁着大四最后的一个假期， 想着接触一下；然后发现了一款叫<code>scriptable</code>的ios/macos上的的app；可以用js来实现对该应用在ios桌面组件的自定义；有点类似小程序那样，微信封装一些底层设备的操作暴露给上层，然后由我们来利用这些api来做二次开发，所以最近以这个为头，尝试了第一次的’跨端’开发，并记录一下第一次尝试。</p>\n<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><ul>\n<li>首先需要一台升级到<code>ios14</code>的<code>ios||macos||ipados</code>的设备</li>\n<li>在设备上下载<code>scriptable</code></li>\n<li>打开软件即可开始书写自己的脚本啦</li>\n</ul>\n<h1 id=\"关于scriptable\"><a href=\"#关于scriptable\" class=\"headerlink\" title=\"关于scriptable\"></a>关于<a href=\"https://scriptable.app/\">scriptable</a></h1><ul>\n<li><a href=\"https://docs.scriptable.app/\">文档</a></li>\n</ul>\n<blockquote>\n<p><strong>软件说明</strong></p>\n<ul>\n<li>这个软件做的事就是封装了ios的底层一些api</li>\n<li>然后我们用软件提供的api来定制该软件创建的组件所显示的内容</li>\n<li>需要注意的是使用的是apple自己的js引擎，但支持ES6</li>\n<li>其次因为只是内嵌了js引擎，所有没有浏览器的那些api</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>开发</strong></p>\n<ul>\n<li>打开app，点击右上角加号创建一个新脚本</li>\n<li>在创建的脚本文件中，直接开始书写即可</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>查看效果</strong></p>\n<ul>\n<li>在桌面添加该软件的小组件</li>\n<li>编辑该小组件，在script中选择我们的脚本</li>\n<li>回到桌面就可以查看效果了</li>\n</ul>\n</blockquote>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><ul>\n<li>写一个Hello World<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建一个小组件</span><br><span class=\"hljs-keyword\">let</span> w=<span class=\"hljs-keyword\">new</span> ListWidget()<br><span class=\"hljs-comment\">// 设置组件背景颜色</span><br>w.backgroundColor=<span class=\"hljs-keyword\">new</span> Color(<span class=\"hljs-string\">&quot;#fff&quot;</span>)<br><span class=\"hljs-comment\">// 添加组件内显示的文本</span><br><span class=\"hljs-keyword\">let</span> textNode=w.addText(<span class=\"hljs-string\">&quot;Hello World&quot;</span>)<br><span class=\"hljs-comment\">// 在组件内部居中显示文本</span><br>textNode.centerAlignText()<br><span class=\"hljs-comment\">// 设置文本的颜色</span><br>textNode.textColor=<span class=\"hljs-keyword\">new</span> Color(<span class=\"hljs-string\">&quot;#000&quot;</span>)<br><span class=\"hljs-comment\">// 渲染组件</span><br>Script.setWidget(w)<br><span class=\"hljs-comment\">// 通知系统脚本执行完成</span><br>Script.complete()<br></code></pre></div></td></tr></table></figure></li>\n<li><img src=\"https://img.shuaxindiary.cn/QQ%E5%9B%BE%E7%89%8720210210104734.jpg\"></li>\n</ul>\n<h1 id=\"关于pc开发小组件\"><a href=\"#关于pc开发小组件\" class=\"headerlink\" title=\"关于pc开发小组件\"></a>关于pc开发小组件</h1><ul>\n<li>软件本身的编辑环境和调试其实蛮方便，但是因为手机和pad的打字输入体验不行，所以如果没有mac的话，想在电脑开发就需要借助一些其他手段</li>\n<li>安利一个社区的方案：<a href=\"https://github.com/im3x/Scriptables\">im3x-dev</a></li>\n<li>因为文档内部代码封装的api写的不是非常友好，写一点开发中的食用指南</li>\n</ul>\n<h2 id=\"食用指南\"><a href=\"#食用指南\" class=\"headerlink\" title=\"食用指南\"></a><strong>食用指南</strong></h2><ul>\n<li>开发文件：<code>「源码」小组件示例.js</code>内部是一个Widget类，只需要在他提供的class内部编写对应的逻辑函数即可</li>\n<li>文件默认本身会包含几个函数，以及提供一些函数，可以做一些操作</li>\n<li><ul>\n<li>constructor：初始化组件的一些基本信息，以及注册脚本在软件和用户交互的一些设置</li>\n</ul>\n</li>\n<li><ul>\n<li>render：判断组件大小渲染不同的组件</li>\n</ul>\n</li>\n<li><ul>\n<li>renderSmall：小尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据</li>\n</ul>\n</li>\n<li><ul>\n<li>renderMedium：中尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据</li>\n</ul>\n</li>\n<li><ul>\n<li>renderLarge：大尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据</li>\n</ul>\n</li>\n<li><ul>\n<li>getData：请求数据的函数</li>\n</ul>\n</li>\n<li>定一些自己的函数：写在class里面，然后在其他地方通过<code>this.xxx</code>调用即可</li>\n<li>注册一些让用户点击的然后进行一些交互的事件：<code>this.registerAction(&#39;显示文本&#39;,对应操作的函数)</code></li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><ul>\n<li>开发过程中有遇到一个小坑：</li>\n<li><ul>\n<li>在apple的js环境中，<code>new Date()</code>时，如果要传入日期，其格式必须为<code>xxxx/xx/xx</code>，而不是V8那样的<code>xxxx-xx-xx</code></li>\n</ul>\n</li>\n<li>附上一个自己写的计算天数的脚本<figure class=\"highlight js\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Variables used by Scriptable.</span><br><span class=\"hljs-comment\">// These must be at the very top of the file. Do not edit.</span><br><span class=\"hljs-comment\">// icon-color: orange; icon-glyph: comments;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// iOS 桌面组件脚本 @「小件件」</span><br><span class=\"hljs-comment\">// 开发说明：请从 Widget 类开始编写，注释请勿修改</span><br><span class=\"hljs-comment\">// https://x.im3x.cn</span><br><span class=\"hljs-comment\">//</span><br><br><span class=\"hljs-comment\">// 添加require，是为了vscode中可以正确引入包，以获得自动补全等功能</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">require</span> === <span class=\"hljs-string\">&#x27;undefined&#x27;</span>) <span class=\"hljs-built_in\">require</span> = importModule<br><br><br><span class=\"hljs-keyword\">const</span> &#123; Base &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./「小件件」开发环境&quot;</span>)<br><span class=\"hljs-comment\">// const &#123; DmYY: Base &#125; = require(&quot;./DmYY.js&quot;)</span><br><br><br><br><span class=\"hljs-comment\">// @组件代码开始</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Widget</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Base</span> </span>&#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 传递给组件的参数，可以是桌面 Parameter 数据，也可以是外部如 URLScheme 等传递的数据</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;string&#125;</span> </span>arg 自定义参数</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">constructor</span>(arg) &#123;<br>    <span class=\"hljs-built_in\">super</span>(arg)<br>    <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;示例小组件&#x27;</span><br>    <span class=\"hljs-built_in\">this</span>.desc = <span class=\"hljs-string\">&#x27;「小件件」—— 原创精美实用小组件&#x27;</span><br>    <span class=\"hljs-comment\">// 注册操作菜单</span><br>    <span class=\"hljs-keyword\">if</span> (config.runsInApp) &#123;<br>      <span class=\"hljs-built_in\">this</span>.registerAction(<span class=\"hljs-string\">&quot;设置文本&quot;</span>, <span class=\"hljs-built_in\">this</span>.actionSetText)<br>      <span class=\"hljs-built_in\">this</span>.registerAction(<span class=\"hljs-string\">&quot;设置时间&quot;</span>, <span class=\"hljs-built_in\">this</span>.actionSetDate)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 设置文本</span><br>  <span class=\"hljs-keyword\">async</span> actionSetText() &#123;<br>    <span class=\"hljs-keyword\">let</span> getText = <span class=\"hljs-keyword\">new</span> Alert()<br>    getText.title = <span class=\"hljs-string\">&quot;设置组件显示文本&quot;</span><br>    getText.message = <span class=\"hljs-string\">&quot;请输入组件要显示的文本内容&quot;</span><br>    getText.addTextField(<span class=\"hljs-string\">&quot;输入显示文本&quot;</span>, <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>])<br>    <span class=\"hljs-comment\">// 增加按钮</span><br>    getText.addAction(<span class=\"hljs-string\">&quot;确定&quot;</span>)<br>    getText.addCancelAction(<span class=\"hljs-string\">&quot;取消&quot;</span>)<br>    <span class=\"hljs-keyword\">await</span> getText.presentAlert()<br>    <span class=\"hljs-keyword\">let</span> inputText = <span class=\"hljs-keyword\">await</span> getText.textFieldValue(<span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] = inputText<br>    <span class=\"hljs-comment\">// 保存设置</span><br>    <span class=\"hljs-built_in\">this</span>.saveSettings()<br>  &#125;<br>  <span class=\"hljs-comment\">// 设置时间</span><br>  <span class=\"hljs-keyword\">async</span> actionSetDate() &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;设置时间&quot;</span>)<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      <span class=\"hljs-keyword\">let</span> dp = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> DatePicker()<br>      <span class=\"hljs-keyword\">let</span> selectDate = <span class=\"hljs-keyword\">await</span> dp.pickDate()<br>      <span class=\"hljs-comment\">// ios只能解析 xxxx/xx/xx格式的日期</span><br>      <span class=\"hljs-keyword\">let</span> day = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;selectDate.getFullYear()&#125;</span>/<span class=\"hljs-subst\">$&#123;selectDate.getMonth() + <span class=\"hljs-number\">1</span>&#125;</span>/<span class=\"hljs-subst\">$&#123;selectDate.getDate()&#125;</span>`</span><br>      <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;day&#x27;</span>] = day<br>      <span class=\"hljs-built_in\">this</span>.saveSettings()<br>    &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;请选择时间&quot;</span>)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 渲染函数，函数名固定</span><br><span class=\"hljs-comment\">   * 可以根据 this.widgetFamily 来判断小组件尺寸，以返回不同大小的内容</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> render() &#123;<br>    <span class=\"hljs-comment\">// 请求接口</span><br>    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.getData()<br>    <span class=\"hljs-keyword\">switch</span> (<span class=\"hljs-built_in\">this</span>.widgetFamily) &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;large&#x27;</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.renderLarge(data)<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;medium&#x27;</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.renderMedium(data)<br>      <span class=\"hljs-keyword\">default</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.renderSmall(data)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 渲染背景颜色</span><br>  renderBackColor(w) &#123;<br>    <span class=\"hljs-keyword\">const</span> gradient = <span class=\"hljs-keyword\">new</span> LinearGradient();<br>    gradient.locations = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>];<br>    gradient.colors = [<span class=\"hljs-keyword\">new</span> Color(<span class=\"hljs-string\">&quot;#eec3ee&quot;</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> Color(<span class=\"hljs-string\">&quot;#b2c0ed&quot;</span>, <span class=\"hljs-number\">1</span>)];<br>    w.backgroundGradient = gradient;<br>  &#125;<br>  <span class=\"hljs-comment\">// 渲染字体</span><br>  renderFontStyle(t, fontSize, fontColor, position) &#123;<br>    <span class=\"hljs-keyword\">switch</span> (position) &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;center&#x27;</span>:<br>        t.centerAlignText()<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;right&#x27;</span>:<br>        t.rightAlignText()<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;left&#x27;</span>:<br>        t.leftAlignText()<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">default</span>:<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    t.font = Font.lightSystemFont(fontSize)<br>    t.textColor = <span class=\"hljs-keyword\">new</span> Color(fontColor, <span class=\"hljs-number\">1</span>)<br>  &#125;<br>  genTime() &#123;<br>    <span class=\"hljs-keyword\">var</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(); <span class=\"hljs-comment\">//1. js获取当前时间</span><br>    <span class=\"hljs-keyword\">var</span> min = date.getMinutes(); <span class=\"hljs-comment\">//2. 获取当前分钟</span><br>    date.setMinutes(min + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//3. 设置当前时间+10分钟：把当前分钟数+10后的值重新设置为date对象的分钟数</span><br>    <span class=\"hljs-keyword\">var</span> y = date.getFullYear();<br>    <span class=\"hljs-keyword\">var</span> m = (date.getMonth() + <span class=\"hljs-number\">1</span>) &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&quot;0&quot;</span> + (date.getMonth() + <span class=\"hljs-number\">1</span>)) : (date.getMonth() + <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> d = date.getDate() &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&quot;0&quot;</span> + date.getDate()) : date.getDate();<br>    <span class=\"hljs-keyword\">var</span> h = date.getHours() &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&#x27;0&#x27;</span> + date.getHours()) : date.getHours()<br>    <span class=\"hljs-keyword\">var</span> f = date.getMinutes() &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&#x27;0&#x27;</span> + date.getMinutes()) : date.getMinutes()<br>    <span class=\"hljs-keyword\">var</span> s = date.getSeconds() &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&#x27;0&#x27;</span> + date.getseconds()) : date.getSeconds()<br>    <span class=\"hljs-keyword\">var</span> formatdate = y + <span class=\"hljs-string\">&#x27;/&#x27;</span> + m + <span class=\"hljs-string\">&#x27;/&#x27;</span> + d + <span class=\"hljs-string\">&quot; &quot;</span> + h + <span class=\"hljs-string\">&quot;:&quot;</span> + f + <span class=\"hljs-string\">&quot;:&quot;</span> + s;<br>    <span class=\"hljs-built_in\">console</span>.log(formatdate) <span class=\"hljs-comment\">// 获取10分钟后的时间，格式为yyyy-mm-dd h:f:s</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(formatdate))<br>    <span class=\"hljs-keyword\">return</span> formatdate<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 渲染小尺寸组件</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> renderSmall(data) &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;刷新&quot;</span>)<br>    <span class=\"hljs-keyword\">let</span> w = <span class=\"hljs-keyword\">new</span> ListWidget()<br>    w.refreshAfterDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">this</span>.genTime())<br>    <span class=\"hljs-keyword\">let</span> headerT = w.addText(<span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] ? <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] : <span class=\"hljs-string\">&quot;默认文本&quot;</span>)<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(headerT, <span class=\"hljs-number\">15</span>, <span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-keyword\">let</span> start = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;day&#x27;</span>]<br>    <span class=\"hljs-keyword\">let</span> day = start ? <span class=\"hljs-built_in\">Math</span>.ceil((<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() - <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(start)) / (<span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">24</span>)) : <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">const</span> t = w.addText(day.toString())<br>    t.centerAlignText()<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(t, <span class=\"hljs-number\">60</span>, <span class=\"hljs-string\">&#x27;#fff&#x27;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-keyword\">let</span> today = w.addDate(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>())<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(today, <span class=\"hljs-number\">15</span>, <span class=\"hljs-string\">&#x27;#fff&#x27;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-built_in\">this</span>.renderBackColor(w)<br>    <span class=\"hljs-keyword\">return</span> w<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 渲染中尺寸组件</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> renderMedium(data, num = <span class=\"hljs-number\">3</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> w = <span class=\"hljs-keyword\">new</span> ListWidget()<br>    <span class=\"hljs-keyword\">let</span> text = w.addText(<span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] ? <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] : <span class=\"hljs-string\">&quot;默认文本&quot;</span>)<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(text, <span class=\"hljs-number\">36</span>, <span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-keyword\">let</span> day = <span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() - <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;day&#x27;</span>])) / (<span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">24</span>))<br>    <span class=\"hljs-comment\">// 创建中部布局</span><br>    <span class=\"hljs-keyword\">let</span> footerT = w.addText(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">String</span>(day) === <span class=\"hljs-string\">&#x27;NaN&#x27;</span> || day &lt;= <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">&quot;请设置今天之前的时间&quot;</span> : day&#125;</span>`</span>)<br>    footerT.centerAlignText()<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">String</span>(day) === <span class=\"hljs-string\">&#x27;NaN&#x27;</span> || day &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-built_in\">this</span>.renderFontStyle(footerT, <span class=\"hljs-number\">27</span>, <span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-built_in\">this</span>.renderFontStyle(footerT, <span class=\"hljs-number\">40</span>, <span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">let</span> today = w.addDate(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>())<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(today, <span class=\"hljs-number\">15</span>, <span class=\"hljs-string\">&#x27;#fff&#x27;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-built_in\">this</span>.renderBackColor(w)<br>    <span class=\"hljs-comment\">// w.addSpacer(2)</span><br>    <span class=\"hljs-keyword\">return</span> w<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 渲染大尺寸组件</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> renderLarge(data) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.renderMedium(data, <span class=\"hljs-number\">10</span>)<br>  &#125;<br><br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 获取数据函数，函数名可不固定</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> getData() &#123;<br>    <span class=\"hljs-keyword\">const</span> api = <span class=\"hljs-string\">&#x27;https://x.im3x.cn/v1/test-api.json&#x27;</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.httpGet(api, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>)<br>  &#125;<br><br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 自定义注册点击事件，用 actionUrl 生成一个触发链接，点击后会执行下方对应的 action</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;string&#125;</span> </span>url 打开的链接</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> actionOpenUrl(url) &#123;<br>    Safari.openInApp(url, <span class=\"hljs-literal\">false</span>)<br>  &#125;<br><br>&#125;<br><span class=\"hljs-comment\">// @组件代码结束</span><br><br><span class=\"hljs-keyword\">const</span> &#123; Testing &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./「小件件」开发环境&quot;</span>)<br><span class=\"hljs-keyword\">await</span> Testing(Widget)<br></code></pre></div></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":7156,"excerpt":"","more":"<blockquote>\n<p>封面图作者：<a href=\"https://weibo.com/u/5522543961\">镜子222333</a></p>\n</blockquote>\n<p>很早就听过<code>electron</code>和<code>reactnaive</code>，可以让前端的同学来使用他们熟悉的web前端技术栈来分别开发pc客户端和移动客户端；再后来小程序火了起来后，也有不少团队开始做起了多端共用一套代码这样的理想化框架，比如滴滴的<code>chameleon</code>和京东的<code>Taro</code>，但是对于这些新’玩具’一直是停留在知道层面，并没有接触，趁着大四最后的一个假期， 想着接触一下；然后发现了一款叫<code>scriptable</code>的ios/macos上的的app；可以用js来实现对该应用在ios桌面组件的自定义；有点类似小程序那样，微信封装一些底层设备的操作暴露给上层，然后由我们来利用这些api来做二次开发，所以最近以这个为头，尝试了第一次的’跨端’开发，并记录一下第一次尝试。</p>\n<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><ul>\n<li>首先需要一台升级到<code>ios14</code>的<code>ios||macos||ipados</code>的设备</li>\n<li>在设备上下载<code>scriptable</code></li>\n<li>打开软件即可开始书写自己的脚本啦</li>\n</ul>\n<h1 id=\"关于scriptable\"><a href=\"#关于scriptable\" class=\"headerlink\" title=\"关于scriptable\"></a>关于<a href=\"https://scriptable.app/\">scriptable</a></h1><ul>\n<li><a href=\"https://docs.scriptable.app/\">文档</a></li>\n</ul>\n<blockquote>\n<p><strong>软件说明</strong></p>\n<ul>\n<li>这个软件做的事就是封装了ios的底层一些api</li>\n<li>然后我们用软件提供的api来定制该软件创建的组件所显示的内容</li>\n<li>需要注意的是使用的是apple自己的js引擎，但支持ES6</li>\n<li>其次因为只是内嵌了js引擎，所有没有浏览器的那些api</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>开发</strong></p>\n<ul>\n<li>打开app，点击右上角加号创建一个新脚本</li>\n<li>在创建的脚本文件中，直接开始书写即可</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>查看效果</strong></p>\n<ul>\n<li>在桌面添加该软件的小组件</li>\n<li>编辑该小组件，在script中选择我们的脚本</li>\n<li>回到桌面就可以查看效果了</li>\n</ul>\n</blockquote>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><ul>\n<li>写一个Hello World<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 创建一个小组件</span><br><span class=\"hljs-keyword\">let</span> w=<span class=\"hljs-keyword\">new</span> ListWidget()<br><span class=\"hljs-comment\">// 设置组件背景颜色</span><br>w.backgroundColor=<span class=\"hljs-keyword\">new</span> Color(<span class=\"hljs-string\">&quot;#fff&quot;</span>)<br><span class=\"hljs-comment\">// 添加组件内显示的文本</span><br><span class=\"hljs-keyword\">let</span> textNode=w.addText(<span class=\"hljs-string\">&quot;Hello World&quot;</span>)<br><span class=\"hljs-comment\">// 在组件内部居中显示文本</span><br>textNode.centerAlignText()<br><span class=\"hljs-comment\">// 设置文本的颜色</span><br>textNode.textColor=<span class=\"hljs-keyword\">new</span> Color(<span class=\"hljs-string\">&quot;#000&quot;</span>)<br><span class=\"hljs-comment\">// 渲染组件</span><br>Script.setWidget(w)<br><span class=\"hljs-comment\">// 通知系统脚本执行完成</span><br>Script.complete()<br></code></pre></td></tr></table></figure></li>\n<li><img src=\"https://img.shuaxindiary.cn/QQ%E5%9B%BE%E7%89%8720210210104734.jpg\"></li>\n</ul>\n<h1 id=\"关于pc开发小组件\"><a href=\"#关于pc开发小组件\" class=\"headerlink\" title=\"关于pc开发小组件\"></a>关于pc开发小组件</h1><ul>\n<li>软件本身的编辑环境和调试其实蛮方便，但是因为手机和pad的打字输入体验不行，所以如果没有mac的话，想在电脑开发就需要借助一些其他手段</li>\n<li>安利一个社区的方案：<a href=\"https://github.com/im3x/Scriptables\">im3x-dev</a></li>\n<li>因为文档内部代码封装的api写的不是非常友好，写一点开发中的食用指南</li>\n</ul>\n<h2 id=\"食用指南\"><a href=\"#食用指南\" class=\"headerlink\" title=\"食用指南\"></a><strong>食用指南</strong></h2><ul>\n<li>开发文件：<code>「源码」小组件示例.js</code>内部是一个Widget类，只需要在他提供的class内部编写对应的逻辑函数即可</li>\n<li>文件默认本身会包含几个函数，以及提供一些函数，可以做一些操作</li>\n<li><ul>\n<li>constructor：初始化组件的一些基本信息，以及注册脚本在软件和用户交互的一些设置</li>\n</ul>\n</li>\n<li><ul>\n<li>render：判断组件大小渲染不同的组件</li>\n</ul>\n</li>\n<li><ul>\n<li>renderSmall：小尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据</li>\n</ul>\n</li>\n<li><ul>\n<li>renderMedium：中尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据</li>\n</ul>\n</li>\n<li><ul>\n<li>renderLarge：大尺寸组件显示逻辑，参数的data是render函数中请求后拿到的数据</li>\n</ul>\n</li>\n<li><ul>\n<li>getData：请求数据的函数</li>\n</ul>\n</li>\n<li>定一些自己的函数：写在class里面，然后在其他地方通过<code>this.xxx</code>调用即可</li>\n<li>注册一些让用户点击的然后进行一些交互的事件：<code>this.registerAction(&#39;显示文本&#39;,对应操作的函数)</code></li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><ul>\n<li>开发过程中有遇到一个小坑：</li>\n<li><ul>\n<li>在apple的js环境中，<code>new Date()</code>时，如果要传入日期，其格式必须为<code>xxxx/xx/xx</code>，而不是V8那样的<code>xxxx-xx-xx</code></li>\n</ul>\n</li>\n<li>附上一个自己写的计算天数的脚本<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Variables used by Scriptable.</span><br><span class=\"hljs-comment\">// These must be at the very top of the file. Do not edit.</span><br><span class=\"hljs-comment\">// icon-color: orange; icon-glyph: comments;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">// iOS 桌面组件脚本 @「小件件」</span><br><span class=\"hljs-comment\">// 开发说明：请从 Widget 类开始编写，注释请勿修改</span><br><span class=\"hljs-comment\">// https://x.im3x.cn</span><br><span class=\"hljs-comment\">//</span><br><br><span class=\"hljs-comment\">// 添加require，是为了vscode中可以正确引入包，以获得自动补全等功能</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">require</span> === <span class=\"hljs-string\">&#x27;undefined&#x27;</span>) <span class=\"hljs-built_in\">require</span> = importModule<br><br><br><span class=\"hljs-keyword\">const</span> &#123; Base &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./「小件件」开发环境&quot;</span>)<br><span class=\"hljs-comment\">// const &#123; DmYY: Base &#125; = require(&quot;./DmYY.js&quot;)</span><br><br><br><br><span class=\"hljs-comment\">// @组件代码开始</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Widget</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Base</span> </span>&#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 传递给组件的参数，可以是桌面 Parameter 数据，也可以是外部如 URLScheme 等传递的数据</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;string&#125;</span> </span>arg 自定义参数</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">constructor</span>(arg) &#123;<br>    <span class=\"hljs-built_in\">super</span>(arg)<br>    <span class=\"hljs-built_in\">this</span>.name = <span class=\"hljs-string\">&#x27;示例小组件&#x27;</span><br>    <span class=\"hljs-built_in\">this</span>.desc = <span class=\"hljs-string\">&#x27;「小件件」—— 原创精美实用小组件&#x27;</span><br>    <span class=\"hljs-comment\">// 注册操作菜单</span><br>    <span class=\"hljs-keyword\">if</span> (config.runsInApp) &#123;<br>      <span class=\"hljs-built_in\">this</span>.registerAction(<span class=\"hljs-string\">&quot;设置文本&quot;</span>, <span class=\"hljs-built_in\">this</span>.actionSetText)<br>      <span class=\"hljs-built_in\">this</span>.registerAction(<span class=\"hljs-string\">&quot;设置时间&quot;</span>, <span class=\"hljs-built_in\">this</span>.actionSetDate)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 设置文本</span><br>  <span class=\"hljs-keyword\">async</span> actionSetText() &#123;<br>    <span class=\"hljs-keyword\">let</span> getText = <span class=\"hljs-keyword\">new</span> Alert()<br>    getText.title = <span class=\"hljs-string\">&quot;设置组件显示文本&quot;</span><br>    getText.message = <span class=\"hljs-string\">&quot;请输入组件要显示的文本内容&quot;</span><br>    getText.addTextField(<span class=\"hljs-string\">&quot;输入显示文本&quot;</span>, <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>])<br>    <span class=\"hljs-comment\">// 增加按钮</span><br>    getText.addAction(<span class=\"hljs-string\">&quot;确定&quot;</span>)<br>    getText.addCancelAction(<span class=\"hljs-string\">&quot;取消&quot;</span>)<br>    <span class=\"hljs-keyword\">await</span> getText.presentAlert()<br>    <span class=\"hljs-keyword\">let</span> inputText = <span class=\"hljs-keyword\">await</span> getText.textFieldValue(<span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] = inputText<br>    <span class=\"hljs-comment\">// 保存设置</span><br>    <span class=\"hljs-built_in\">this</span>.saveSettings()<br>  &#125;<br>  <span class=\"hljs-comment\">// 设置时间</span><br>  <span class=\"hljs-keyword\">async</span> actionSetDate() &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;设置时间&quot;</span>)<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      <span class=\"hljs-keyword\">let</span> dp = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> DatePicker()<br>      <span class=\"hljs-keyword\">let</span> selectDate = <span class=\"hljs-keyword\">await</span> dp.pickDate()<br>      <span class=\"hljs-comment\">// ios只能解析 xxxx/xx/xx格式的日期</span><br>      <span class=\"hljs-keyword\">let</span> day = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;selectDate.getFullYear()&#125;</span>/<span class=\"hljs-subst\">$&#123;selectDate.getMonth() + <span class=\"hljs-number\">1</span>&#125;</span>/<span class=\"hljs-subst\">$&#123;selectDate.getDate()&#125;</span>`</span><br>      <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;day&#x27;</span>] = day<br>      <span class=\"hljs-built_in\">this</span>.saveSettings()<br>    &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;请选择时间&quot;</span>)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 渲染函数，函数名固定</span><br><span class=\"hljs-comment\">   * 可以根据 this.widgetFamily 来判断小组件尺寸，以返回不同大小的内容</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> render() &#123;<br>    <span class=\"hljs-comment\">// 请求接口</span><br>    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.getData()<br>    <span class=\"hljs-keyword\">switch</span> (<span class=\"hljs-built_in\">this</span>.widgetFamily) &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;large&#x27;</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.renderLarge(data)<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;medium&#x27;</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.renderMedium(data)<br>      <span class=\"hljs-keyword\">default</span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.renderSmall(data)<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 渲染背景颜色</span><br>  renderBackColor(w) &#123;<br>    <span class=\"hljs-keyword\">const</span> gradient = <span class=\"hljs-keyword\">new</span> LinearGradient();<br>    gradient.locations = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>];<br>    gradient.colors = [<span class=\"hljs-keyword\">new</span> Color(<span class=\"hljs-string\">&quot;#eec3ee&quot;</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> Color(<span class=\"hljs-string\">&quot;#b2c0ed&quot;</span>, <span class=\"hljs-number\">1</span>)];<br>    w.backgroundGradient = gradient;<br>  &#125;<br>  <span class=\"hljs-comment\">// 渲染字体</span><br>  renderFontStyle(t, fontSize, fontColor, position) &#123;<br>    <span class=\"hljs-keyword\">switch</span> (position) &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;center&#x27;</span>:<br>        t.centerAlignText()<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;right&#x27;</span>:<br>        t.rightAlignText()<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;left&#x27;</span>:<br>        t.leftAlignText()<br>        <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">default</span>:<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    t.font = Font.lightSystemFont(fontSize)<br>    t.textColor = <span class=\"hljs-keyword\">new</span> Color(fontColor, <span class=\"hljs-number\">1</span>)<br>  &#125;<br>  genTime() &#123;<br>    <span class=\"hljs-keyword\">var</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(); <span class=\"hljs-comment\">//1. js获取当前时间</span><br>    <span class=\"hljs-keyword\">var</span> min = date.getMinutes(); <span class=\"hljs-comment\">//2. 获取当前分钟</span><br>    date.setMinutes(min + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//3. 设置当前时间+10分钟：把当前分钟数+10后的值重新设置为date对象的分钟数</span><br>    <span class=\"hljs-keyword\">var</span> y = date.getFullYear();<br>    <span class=\"hljs-keyword\">var</span> m = (date.getMonth() + <span class=\"hljs-number\">1</span>) &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&quot;0&quot;</span> + (date.getMonth() + <span class=\"hljs-number\">1</span>)) : (date.getMonth() + <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">var</span> d = date.getDate() &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&quot;0&quot;</span> + date.getDate()) : date.getDate();<br>    <span class=\"hljs-keyword\">var</span> h = date.getHours() &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&#x27;0&#x27;</span> + date.getHours()) : date.getHours()<br>    <span class=\"hljs-keyword\">var</span> f = date.getMinutes() &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&#x27;0&#x27;</span> + date.getMinutes()) : date.getMinutes()<br>    <span class=\"hljs-keyword\">var</span> s = date.getSeconds() &lt; <span class=\"hljs-number\">10</span> ? (<span class=\"hljs-string\">&#x27;0&#x27;</span> + date.getseconds()) : date.getSeconds()<br>    <span class=\"hljs-keyword\">var</span> formatdate = y + <span class=\"hljs-string\">&#x27;/&#x27;</span> + m + <span class=\"hljs-string\">&#x27;/&#x27;</span> + d + <span class=\"hljs-string\">&quot; &quot;</span> + h + <span class=\"hljs-string\">&quot;:&quot;</span> + f + <span class=\"hljs-string\">&quot;:&quot;</span> + s;<br>    <span class=\"hljs-built_in\">console</span>.log(formatdate) <span class=\"hljs-comment\">// 获取10分钟后的时间，格式为yyyy-mm-dd h:f:s</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(formatdate))<br>    <span class=\"hljs-keyword\">return</span> formatdate<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 渲染小尺寸组件</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> renderSmall(data) &#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;刷新&quot;</span>)<br>    <span class=\"hljs-keyword\">let</span> w = <span class=\"hljs-keyword\">new</span> ListWidget()<br>    w.refreshAfterDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">this</span>.genTime())<br>    <span class=\"hljs-keyword\">let</span> headerT = w.addText(<span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] ? <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] : <span class=\"hljs-string\">&quot;默认文本&quot;</span>)<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(headerT, <span class=\"hljs-number\">15</span>, <span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-keyword\">let</span> start = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;day&#x27;</span>]<br>    <span class=\"hljs-keyword\">let</span> day = start ? <span class=\"hljs-built_in\">Math</span>.ceil((<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() - <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(start)) / (<span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">24</span>)) : <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">const</span> t = w.addText(day.toString())<br>    t.centerAlignText()<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(t, <span class=\"hljs-number\">60</span>, <span class=\"hljs-string\">&#x27;#fff&#x27;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-keyword\">let</span> today = w.addDate(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>())<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(today, <span class=\"hljs-number\">15</span>, <span class=\"hljs-string\">&#x27;#fff&#x27;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-built_in\">this</span>.renderBackColor(w)<br>    <span class=\"hljs-keyword\">return</span> w<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 渲染中尺寸组件</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> renderMedium(data, num = <span class=\"hljs-number\">3</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> w = <span class=\"hljs-keyword\">new</span> ListWidget()<br>    <span class=\"hljs-keyword\">let</span> text = w.addText(<span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] ? <span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;text&#x27;</span>] : <span class=\"hljs-string\">&quot;默认文本&quot;</span>)<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(text, <span class=\"hljs-number\">36</span>, <span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-keyword\">let</span> day = <span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() - <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-built_in\">this</span>.settings[<span class=\"hljs-string\">&#x27;day&#x27;</span>])) / (<span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">24</span>))<br>    <span class=\"hljs-comment\">// 创建中部布局</span><br>    <span class=\"hljs-keyword\">let</span> footerT = w.addText(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">String</span>(day) === <span class=\"hljs-string\">&#x27;NaN&#x27;</span> || day &lt;= <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">&quot;请设置今天之前的时间&quot;</span> : day&#125;</span>`</span>)<br>    footerT.centerAlignText()<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">String</span>(day) === <span class=\"hljs-string\">&#x27;NaN&#x27;</span> || day &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-built_in\">this</span>.renderFontStyle(footerT, <span class=\"hljs-number\">27</span>, <span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-built_in\">this</span>.renderFontStyle(footerT, <span class=\"hljs-number\">40</span>, <span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">let</span> today = w.addDate(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>())<br>    <span class=\"hljs-built_in\">this</span>.renderFontStyle(today, <span class=\"hljs-number\">15</span>, <span class=\"hljs-string\">&#x27;#fff&#x27;</span>, <span class=\"hljs-string\">&#x27;center&#x27;</span>)<br>    <span class=\"hljs-built_in\">this</span>.renderBackColor(w)<br>    <span class=\"hljs-comment\">// w.addSpacer(2)</span><br>    <span class=\"hljs-keyword\">return</span> w<br>  &#125;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 渲染大尺寸组件</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> renderLarge(data) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.renderMedium(data, <span class=\"hljs-number\">10</span>)<br>  &#125;<br><br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 获取数据函数，函数名可不固定</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> getData() &#123;<br>    <span class=\"hljs-keyword\">const</span> api = <span class=\"hljs-string\">&#x27;https://x.im3x.cn/v1/test-api.json&#x27;</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.httpGet(api, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>)<br>  &#125;<br><br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 自定义注册点击事件，用 actionUrl 生成一个触发链接，点击后会执行下方对应的 action</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;string&#125;</span> </span>url 打开的链接</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">async</span> actionOpenUrl(url) &#123;<br>    Safari.openInApp(url, <span class=\"hljs-literal\">false</span>)<br>  &#125;<br><br>&#125;<br><span class=\"hljs-comment\">// @组件代码结束</span><br><br><span class=\"hljs-keyword\">const</span> &#123; Testing &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./「小件件」开发环境&quot;</span>)<br><span class=\"hljs-keyword\">await</span> Testing(Widget)<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"高效利用GITHUB","abbrlink":9851,"date":"2019-11-15T02:40:03.000Z","_content":"\n\n# 高效的利用GITHUB\n整理自己平时使用github来学习的一些心得和小技巧\n<!-- more -->\n## 通过github记录自己的学习过程\n>使用github来管理自己平时练习技术的项目\n- 将自己的项目通过git存储到github，不仅可以备份自己的项目，还可以更好的管理项目的开发进度，以及记录自己每天学习的进度。\n![统计](/img/github1.png)\n\n>通过分支系统来保证不影响项目其他功能的基础上进行新功能的开发\n- 通过一个分支(主分支)来保存项目最稳定的版本，然后另外创建一个分支，来进行新功能的开发，开发完成并测试没有问题后，在合并到主分支即可。\n![分支](/img/github2.png)\n\n>利用README来总结自己的项目\n- 结合github的项目目录展示和通过reademe文件来整理自己的项目总结，比如目录结构说明，技术栈使用，项目阐述，和自己开发过程中遇见的一些坑，还有对这些坑的解决过程的描述等等。\n![目录](/img/github4.png)\n![总结](/img/github3.png)\n\n## 通过github部署静态项目\ngithub提供了GithubPage，来托管静态项目。可以利用这个功能来部署自己博客，或者一些静态练习的demo。\n>简单描述如何部署\n- 把你的项目提交到一个github的仓库\n- 在该仓库下创建一个叫gh-pages的分支\n- 把你想要托管的首页起名为inex.html，然后整个项目相关的资源都提交到该分支。\n![目录](/img/github6.png)\n- 进入该项目的仓库页面，点开设置，找到如下图的区域，设置source下面的下拉框，并选中gh-pages branch即可\n![设置](/img/github5.png)\n\n###  分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。\n\n## 利用github来寻找开源项目练手\ngithub是一个全球范围内的程序开源社区，各种语言各种类型的项目，应有尽有，所以我们想要找一些项目练手是，可以通过它来寻找，接下来分享几个在寻找项目时的小技巧。\n### 高级搜索:通过在搜索时，加一些搜索条件来进行筛选(以下条件可以自由组合)\n>in:name\n- 在仓库名中搜索\n\n>in:description\n- 在项目描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)\n\n>in:readme\n- 在readme描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)\n### 条件设置\n>***stars***\n- stars:>一个数字/即搜索项目star数大于这个数的项目\n- 举例：搜素一个star超过1000的名字中带有koa的项目\n![例子1](/img/github7.png)\n\n>***language***\n- language:目标语言/设置你要搜索的项目语言\n- 举例：搜素一个微服务，语言是java的项目，star超过1000的项目\n![例子1](/img/github8.png)\n\n>***fork***\n- forks:>一个数字/即搜索项目fork数大于这个数的项目\n- 和star一样","source":"_posts/技术笔记/高效利用GITHUB.md","raw":"---\ntitle: 高效利用GITHUB\ncategory:\n  - 技术笔记\ntag:\n  - GIHUTB\nabbrlink: 9851\ndate: 2019-11-15 10:40:03\n---\n\n\n# 高效的利用GITHUB\n整理自己平时使用github来学习的一些心得和小技巧\n<!-- more -->\n## 通过github记录自己的学习过程\n>使用github来管理自己平时练习技术的项目\n- 将自己的项目通过git存储到github，不仅可以备份自己的项目，还可以更好的管理项目的开发进度，以及记录自己每天学习的进度。\n![统计](/img/github1.png)\n\n>通过分支系统来保证不影响项目其他功能的基础上进行新功能的开发\n- 通过一个分支(主分支)来保存项目最稳定的版本，然后另外创建一个分支，来进行新功能的开发，开发完成并测试没有问题后，在合并到主分支即可。\n![分支](/img/github2.png)\n\n>利用README来总结自己的项目\n- 结合github的项目目录展示和通过reademe文件来整理自己的项目总结，比如目录结构说明，技术栈使用，项目阐述，和自己开发过程中遇见的一些坑，还有对这些坑的解决过程的描述等等。\n![目录](/img/github4.png)\n![总结](/img/github3.png)\n\n## 通过github部署静态项目\ngithub提供了GithubPage，来托管静态项目。可以利用这个功能来部署自己博客，或者一些静态练习的demo。\n>简单描述如何部署\n- 把你的项目提交到一个github的仓库\n- 在该仓库下创建一个叫gh-pages的分支\n- 把你想要托管的首页起名为inex.html，然后整个项目相关的资源都提交到该分支。\n![目录](/img/github6.png)\n- 进入该项目的仓库页面，点开设置，找到如下图的区域，设置source下面的下拉框，并选中gh-pages branch即可\n![设置](/img/github5.png)\n\n###  分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。\n\n## 利用github来寻找开源项目练手\ngithub是一个全球范围内的程序开源社区，各种语言各种类型的项目，应有尽有，所以我们想要找一些项目练手是，可以通过它来寻找，接下来分享几个在寻找项目时的小技巧。\n### 高级搜索:通过在搜索时，加一些搜索条件来进行筛选(以下条件可以自由组合)\n>in:name\n- 在仓库名中搜索\n\n>in:description\n- 在项目描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)\n\n>in:readme\n- 在readme描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)\n### 条件设置\n>***stars***\n- stars:>一个数字/即搜索项目star数大于这个数的项目\n- 举例：搜素一个star超过1000的名字中带有koa的项目\n![例子1](/img/github7.png)\n\n>***language***\n- language:目标语言/设置你要搜索的项目语言\n- 举例：搜素一个微服务，语言是java的项目，star超过1000的项目\n![例子1](/img/github8.png)\n\n>***fork***\n- forks:>一个数字/即搜索项目fork数大于这个数的项目\n- 和star一样","slug":"技术笔记/高效利用GITHUB","published":1,"updated":"2021-12-31T12:01:59.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuckd1q0008nyjf67mccw94","content":"<h1 id=\"高效的利用GITHUB\"><a href=\"#高效的利用GITHUB\" class=\"headerlink\" title=\"高效的利用GITHUB\"></a>高效的利用GITHUB</h1><p>整理自己平时使用github来学习的一些心得和小技巧</p>\n<a id=\"more\"></a>\n<h2 id=\"通过github记录自己的学习过程\"><a href=\"#通过github记录自己的学习过程\" class=\"headerlink\" title=\"通过github记录自己的学习过程\"></a>通过github记录自己的学习过程</h2><blockquote>\n<p>使用github来管理自己平时练习技术的项目</p>\n</blockquote>\n<ul>\n<li>将自己的项目通过git存储到github，不仅可以备份自己的项目，还可以更好的管理项目的开发进度，以及记录自己每天学习的进度。<br><img src=\"/img/github1.png\" alt=\"统计\"></li>\n</ul>\n<blockquote>\n<p>通过分支系统来保证不影响项目其他功能的基础上进行新功能的开发</p>\n</blockquote>\n<ul>\n<li>通过一个分支(主分支)来保存项目最稳定的版本，然后另外创建一个分支，来进行新功能的开发，开发完成并测试没有问题后，在合并到主分支即可。<br><img src=\"/img/github2.png\" alt=\"分支\"></li>\n</ul>\n<blockquote>\n<p>利用README来总结自己的项目</p>\n</blockquote>\n<ul>\n<li>结合github的项目目录展示和通过reademe文件来整理自己的项目总结，比如目录结构说明，技术栈使用，项目阐述，和自己开发过程中遇见的一些坑，还有对这些坑的解决过程的描述等等。<br><img src=\"/img/github4.png\" alt=\"目录\"><br><img src=\"/img/github3.png\" alt=\"总结\"></li>\n</ul>\n<h2 id=\"通过github部署静态项目\"><a href=\"#通过github部署静态项目\" class=\"headerlink\" title=\"通过github部署静态项目\"></a>通过github部署静态项目</h2><p>github提供了GithubPage，来托管静态项目。可以利用这个功能来部署自己博客，或者一些静态练习的demo。</p>\n<blockquote>\n<p>简单描述如何部署</p>\n</blockquote>\n<ul>\n<li>把你的项目提交到一个github的仓库</li>\n<li>在该仓库下创建一个叫gh-pages的分支</li>\n<li>把你想要托管的首页起名为inex.html，然后整个项目相关的资源都提交到该分支。<br><img src=\"/img/github6.png\" alt=\"目录\"></li>\n<li>进入该项目的仓库页面，点开设置，找到如下图的区域，设置source下面的下拉框，并选中gh-pages branch即可<br><img src=\"/img/github5.png\" alt=\"设置\"></li>\n</ul>\n<h3 id=\"分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。\"><a href=\"#分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。\" class=\"headerlink\" title=\"分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。\"></a>分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。</h3><h2 id=\"利用github来寻找开源项目练手\"><a href=\"#利用github来寻找开源项目练手\" class=\"headerlink\" title=\"利用github来寻找开源项目练手\"></a>利用github来寻找开源项目练手</h2><p>github是一个全球范围内的程序开源社区，各种语言各种类型的项目，应有尽有，所以我们想要找一些项目练手是，可以通过它来寻找，接下来分享几个在寻找项目时的小技巧。</p>\n<h3 id=\"高级搜索-通过在搜索时，加一些搜索条件来进行筛选-以下条件可以自由组合\"><a href=\"#高级搜索-通过在搜索时，加一些搜索条件来进行筛选-以下条件可以自由组合\" class=\"headerlink\" title=\"高级搜索:通过在搜索时，加一些搜索条件来进行筛选(以下条件可以自由组合)\"></a>高级搜索:通过在搜索时，加一些搜索条件来进行筛选(以下条件可以自由组合)</h3><blockquote>\n<p>in:name</p>\n</blockquote>\n<ul>\n<li>在仓库名中搜索</li>\n</ul>\n<blockquote>\n<p>in:description</p>\n</blockquote>\n<ul>\n<li>在项目描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)</li>\n</ul>\n<blockquote>\n<p>in:readme</p>\n</blockquote>\n<ul>\n<li>在readme描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)<h3 id=\"条件设置\"><a href=\"#条件设置\" class=\"headerlink\" title=\"条件设置\"></a>条件设置</h3><blockquote>\n<p><strong><em>stars</em></strong></p>\n</blockquote>\n</li>\n<li>stars:&gt;一个数字/即搜索项目star数大于这个数的项目</li>\n<li>举例：搜素一个star超过1000的名字中带有koa的项目<br><img src=\"/img/github7.png\" alt=\"例子1\"></li>\n</ul>\n<blockquote>\n<p><strong><em>language</em></strong></p>\n</blockquote>\n<ul>\n<li>language:目标语言/设置你要搜索的项目语言</li>\n<li>举例：搜素一个微服务，语言是java的项目，star超过1000的项目<br><img src=\"/img/github8.png\" alt=\"例子1\"></li>\n</ul>\n<blockquote>\n<p><strong><em>fork</em></strong></p>\n</blockquote>\n<ul>\n<li>forks:&gt;一个数字/即搜索项目fork数大于这个数的项目</li>\n<li>和star一样</li>\n</ul>\n","site":{"data":{}},"wordcount":1076,"excerpt":"<h1 id=\"高效的利用GITHUB\"><a href=\"#高效的利用GITHUB\" class=\"headerlink\" title=\"高效的利用GITHUB\"></a>高效的利用GITHUB</h1><p>整理自己平时使用github来学习的一些心得和小技巧</p>","more":"<h2 id=\"通过github记录自己的学习过程\"><a href=\"#通过github记录自己的学习过程\" class=\"headerlink\" title=\"通过github记录自己的学习过程\"></a>通过github记录自己的学习过程</h2><blockquote>\n<p>使用github来管理自己平时练习技术的项目</p>\n</blockquote>\n<ul>\n<li>将自己的项目通过git存储到github，不仅可以备份自己的项目，还可以更好的管理项目的开发进度，以及记录自己每天学习的进度。<br><img src=\"/img/github1.png\" alt=\"统计\"></li>\n</ul>\n<blockquote>\n<p>通过分支系统来保证不影响项目其他功能的基础上进行新功能的开发</p>\n</blockquote>\n<ul>\n<li>通过一个分支(主分支)来保存项目最稳定的版本，然后另外创建一个分支，来进行新功能的开发，开发完成并测试没有问题后，在合并到主分支即可。<br><img src=\"/img/github2.png\" alt=\"分支\"></li>\n</ul>\n<blockquote>\n<p>利用README来总结自己的项目</p>\n</blockquote>\n<ul>\n<li>结合github的项目目录展示和通过reademe文件来整理自己的项目总结，比如目录结构说明，技术栈使用，项目阐述，和自己开发过程中遇见的一些坑，还有对这些坑的解决过程的描述等等。<br><img src=\"/img/github4.png\" alt=\"目录\"><br><img src=\"/img/github3.png\" alt=\"总结\"></li>\n</ul>\n<h2 id=\"通过github部署静态项目\"><a href=\"#通过github部署静态项目\" class=\"headerlink\" title=\"通过github部署静态项目\"></a>通过github部署静态项目</h2><p>github提供了GithubPage，来托管静态项目。可以利用这个功能来部署自己博客，或者一些静态练习的demo。</p>\n<blockquote>\n<p>简单描述如何部署</p>\n</blockquote>\n<ul>\n<li>把你的项目提交到一个github的仓库</li>\n<li>在该仓库下创建一个叫gh-pages的分支</li>\n<li>把你想要托管的首页起名为inex.html，然后整个项目相关的资源都提交到该分支。<br><img src=\"/img/github6.png\" alt=\"目录\"></li>\n<li>进入该项目的仓库页面，点开设置，找到如下图的区域，设置source下面的下拉框，并选中gh-pages branch即可<br><img src=\"/img/github5.png\" alt=\"设置\"></li>\n</ul>\n<h3 id=\"分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。\"><a href=\"#分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。\" class=\"headerlink\" title=\"分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。\"></a>分界线，上面所有的功能也可以通过码云来做，对英文不习惯的同学，可以选择这个。</h3><h2 id=\"利用github来寻找开源项目练手\"><a href=\"#利用github来寻找开源项目练手\" class=\"headerlink\" title=\"利用github来寻找开源项目练手\"></a>利用github来寻找开源项目练手</h2><p>github是一个全球范围内的程序开源社区，各种语言各种类型的项目，应有尽有，所以我们想要找一些项目练手是，可以通过它来寻找，接下来分享几个在寻找项目时的小技巧。</p>\n<h3 id=\"高级搜索-通过在搜索时，加一些搜索条件来进行筛选-以下条件可以自由组合\"><a href=\"#高级搜索-通过在搜索时，加一些搜索条件来进行筛选-以下条件可以自由组合\" class=\"headerlink\" title=\"高级搜索:通过在搜索时，加一些搜索条件来进行筛选(以下条件可以自由组合)\"></a>高级搜索:通过在搜索时，加一些搜索条件来进行筛选(以下条件可以自由组合)</h3><blockquote>\n<p>in:name</p>\n</blockquote>\n<ul>\n<li>在仓库名中搜索</li>\n</ul>\n<blockquote>\n<p>in:description</p>\n</blockquote>\n<ul>\n<li>在项目描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)</li>\n</ul>\n<blockquote>\n<p>in:readme</p>\n</blockquote>\n<ul>\n<li>在readme描述中搜索(有了这个条件后，就可以通过中文来搜索一些中文项目，因为github仓库命名不能取中文，但这一项可以)<h3 id=\"条件设置\"><a href=\"#条件设置\" class=\"headerlink\" title=\"条件设置\"></a>条件设置</h3><blockquote>\n<p><strong><em>stars</em></strong></p>\n</blockquote>\n</li>\n<li>stars:&gt;一个数字/即搜索项目star数大于这个数的项目</li>\n<li>举例：搜素一个star超过1000的名字中带有koa的项目<br><img src=\"/img/github7.png\" alt=\"例子1\"></li>\n</ul>\n<blockquote>\n<p><strong><em>language</em></strong></p>\n</blockquote>\n<ul>\n<li>language:目标语言/设置你要搜索的项目语言</li>\n<li>举例：搜素一个微服务，语言是java的项目，star超过1000的项目<br><img src=\"/img/github8.png\" alt=\"例子1\"></li>\n</ul>\n<blockquote>\n<p><strong><em>fork</em></strong></p>\n</blockquote>\n<ul>\n<li>forks:&gt;一个数字/即搜索项目fork数大于这个数的项目</li>\n<li>和star一样</li>\n</ul>"},{"title":"Hexo接评论系统记录","date":"2020-12-27T14:02:54.000Z","_content":"\n之前因为建站是为了当笔记本，就没有搞些花里胡哨的社交属性的功能；后来无意间看到过一个老哥在挂载该博客的仓库留言过，后来一想，还是加一个吧，方便实时看到一些可能不太会有的留言。。\n<!-- more -->\n# 选择\n- [gitalk](https://github.com/gitalk/gitalk)\n- [Valine](https://github.com/xCss/Valine)\n- [waline](https://github.com/lizheming/waline)\n- [来必力](https://livere.com/)\n-----------\n- 以上都是觉得很不错的选择的评论系统，因为是静态博客，都需要借助其他平台来存数据；gitalk是使用仓库的issue来存储，Valine是通过[Leancloud](https://www.leancloud.cn/)，[Waline](https://waline.js.org/)支持的就更多了；[来必力](https://livere.com/)用的应该是自己的服务器存储；\n- 最后选了gitalk，主要考虑到留言的数量不会很多，其次博客也是挂载github，不想在接入一个平台来搞相关的(目前)，用issue，因为github是每天都会上去的，会很直观的可以看到，所以还是方便\n\n# 接入\n> 具体使用很简单，文档都有描述，这里记录一下Hexo中Next主题里如何使用\n> - 找到Next下负责渲染文章的模板文件：themes->layout->_macro->post.swig\n\n> - 中间嵌入放评论的容器代码就好\n\n\n# 关于初始化评论失败\n原因是gitalk是借助github的接口来存取仓库issues的数据的，然后每个文章对应仓库的一个issues，但是这个长度不能超过50个字符，不然就会导致初始化失败并返回，422错误，这是github的限制；官方是使用location.pathname来作为id的\n\n> - **解决**\n\n> - 思路就是把id缩短，通过md5转义下就好\n> - 直接在模板引擎引入对应md5的cdn就好\n\n# 遗留问题\n因为是通过github的接口在配置的仓库创建对应的issue来保存每篇文章的评论，这就涉及到谁创建的问题，gitalk也提供了对应的配置选项，这就带来了，每篇文章需要该仓库权限拥有者去初始化该文章对应的issue这一操作，这就很繁琐，计划写个小服务来解决一下这个问题\n\n> *目前思路*\n> - 使用node，在github ci部署后，在跑一下node服务\n> - 服务主要就是去自动请求一下github的接口，自动初始化一下新文章的评论区\n> - 写好在抛出来...","source":"_posts/技术笔记/评论系统.md","raw":"---\ntitle: Hexo接评论系统记录\ndate: 2020-12-27 22:02:54\ncategory:\n  - 技术笔记\ntag:\n  - 前端\n  - 踩坑\n  - Hexo\n---\n\n之前因为建站是为了当笔记本，就没有搞些花里胡哨的社交属性的功能；后来无意间看到过一个老哥在挂载该博客的仓库留言过，后来一想，还是加一个吧，方便实时看到一些可能不太会有的留言。。\n<!-- more -->\n# 选择\n- [gitalk](https://github.com/gitalk/gitalk)\n- [Valine](https://github.com/xCss/Valine)\n- [waline](https://github.com/lizheming/waline)\n- [来必力](https://livere.com/)\n-----------\n- 以上都是觉得很不错的选择的评论系统，因为是静态博客，都需要借助其他平台来存数据；gitalk是使用仓库的issue来存储，Valine是通过[Leancloud](https://www.leancloud.cn/)，[Waline](https://waline.js.org/)支持的就更多了；[来必力](https://livere.com/)用的应该是自己的服务器存储；\n- 最后选了gitalk，主要考虑到留言的数量不会很多，其次博客也是挂载github，不想在接入一个平台来搞相关的(目前)，用issue，因为github是每天都会上去的，会很直观的可以看到，所以还是方便\n\n# 接入\n> 具体使用很简单，文档都有描述，这里记录一下Hexo中Next主题里如何使用\n> - 找到Next下负责渲染文章的模板文件：themes->layout->_macro->post.swig\n\n> - 中间嵌入放评论的容器代码就好\n\n\n# 关于初始化评论失败\n原因是gitalk是借助github的接口来存取仓库issues的数据的，然后每个文章对应仓库的一个issues，但是这个长度不能超过50个字符，不然就会导致初始化失败并返回，422错误，这是github的限制；官方是使用location.pathname来作为id的\n\n> - **解决**\n\n> - 思路就是把id缩短，通过md5转义下就好\n> - 直接在模板引擎引入对应md5的cdn就好\n\n# 遗留问题\n因为是通过github的接口在配置的仓库创建对应的issue来保存每篇文章的评论，这就涉及到谁创建的问题，gitalk也提供了对应的配置选项，这就带来了，每篇文章需要该仓库权限拥有者去初始化该文章对应的issue这一操作，这就很繁琐，计划写个小服务来解决一下这个问题\n\n> *目前思路*\n> - 使用node，在github ci部署后，在跑一下node服务\n> - 服务主要就是去自动请求一下github的接口，自动初始化一下新文章的评论区\n> - 写好在抛出来...","slug":"技术笔记/评论系统","published":1,"updated":"2021-12-31T12:01:59.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuckd1r000jnyjfb28z5vsk","content":"<p>之前因为建站是为了当笔记本，就没有搞些花里胡哨的社交属性的功能；后来无意间看到过一个老哥在挂载该博客的仓库留言过，后来一想，还是加一个吧，方便实时看到一些可能不太会有的留言。。</p>\n<a id=\"more\"></a>\n<h1 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h1><ul>\n<li><a href=\"https://github.com/gitalk/gitalk\">gitalk</a></li>\n<li><a href=\"https://github.com/xCss/Valine\">Valine</a></li>\n<li><a href=\"https://github.com/lizheming/waline\">waline</a></li>\n<li><a href=\"https://livere.com/\">来必力</a></li>\n</ul>\n<hr>\n<ul>\n<li>以上都是觉得很不错的选择的评论系统，因为是静态博客，都需要借助其他平台来存数据；gitalk是使用仓库的issue来存储，Valine是通过<a href=\"https://www.leancloud.cn/\">Leancloud</a>，<a href=\"https://waline.js.org/\">Waline</a>支持的就更多了；<a href=\"https://livere.com/\">来必力</a>用的应该是自己的服务器存储；</li>\n<li>最后选了gitalk，主要考虑到留言的数量不会很多，其次博客也是挂载github，不想在接入一个平台来搞相关的(目前)，用issue，因为github是每天都会上去的，会很直观的可以看到，所以还是方便</li>\n</ul>\n<h1 id=\"接入\"><a href=\"#接入\" class=\"headerlink\" title=\"接入\"></a>接入</h1><blockquote>\n<p>具体使用很简单，文档都有描述，这里记录一下Hexo中Next主题里如何使用</p>\n<ul>\n<li>找到Next下负责渲染文章的模板文件：themes-&gt;layout-&gt;_macro-&gt;post.swig</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>中间嵌入放评论的容器代码就好</li>\n</ul>\n</blockquote>\n<h1 id=\"关于初始化评论失败\"><a href=\"#关于初始化评论失败\" class=\"headerlink\" title=\"关于初始化评论失败\"></a>关于初始化评论失败</h1><p>原因是gitalk是借助github的接口来存取仓库issues的数据的，然后每个文章对应仓库的一个issues，但是这个长度不能超过50个字符，不然就会导致初始化失败并返回，422错误，这是github的限制；官方是使用location.pathname来作为id的</p>\n<blockquote>\n<ul>\n<li><strong>解决</strong></li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>思路就是把id缩短，通过md5转义下就好</li>\n<li>直接在模板引擎引入对应md5的cdn就好</li>\n</ul>\n</blockquote>\n<h1 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h1><p>因为是通过github的接口在配置的仓库创建对应的issue来保存每篇文章的评论，这就涉及到谁创建的问题，gitalk也提供了对应的配置选项，这就带来了，每篇文章需要该仓库权限拥有者去初始化该文章对应的issue这一操作，这就很繁琐，计划写个小服务来解决一下这个问题</p>\n<blockquote>\n<p><em>目前思路</em></p>\n<ul>\n<li>使用node，在github ci部署后，在跑一下node服务</li>\n<li>服务主要就是去自动请求一下github的接口，自动初始化一下新文章的评论区</li>\n<li>写好在抛出来…</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"wordcount":836,"excerpt":"<p>之前因为建站是为了当笔记本，就没有搞些花里胡哨的社交属性的功能；后来无意间看到过一个老哥在挂载该博客的仓库留言过，后来一想，还是加一个吧，方便实时看到一些可能不太会有的留言。。</p>","more":"<h1 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h1><ul>\n<li><a href=\"https://github.com/gitalk/gitalk\">gitalk</a></li>\n<li><a href=\"https://github.com/xCss/Valine\">Valine</a></li>\n<li><a href=\"https://github.com/lizheming/waline\">waline</a></li>\n<li><a href=\"https://livere.com/\">来必力</a></li>\n</ul>\n<hr>\n<ul>\n<li>以上都是觉得很不错的选择的评论系统，因为是静态博客，都需要借助其他平台来存数据；gitalk是使用仓库的issue来存储，Valine是通过<a href=\"https://www.leancloud.cn/\">Leancloud</a>，<a href=\"https://waline.js.org/\">Waline</a>支持的就更多了；<a href=\"https://livere.com/\">来必力</a>用的应该是自己的服务器存储；</li>\n<li>最后选了gitalk，主要考虑到留言的数量不会很多，其次博客也是挂载github，不想在接入一个平台来搞相关的(目前)，用issue，因为github是每天都会上去的，会很直观的可以看到，所以还是方便</li>\n</ul>\n<h1 id=\"接入\"><a href=\"#接入\" class=\"headerlink\" title=\"接入\"></a>接入</h1><blockquote>\n<p>具体使用很简单，文档都有描述，这里记录一下Hexo中Next主题里如何使用</p>\n<ul>\n<li>找到Next下负责渲染文章的模板文件：themes-&gt;layout-&gt;_macro-&gt;post.swig</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>中间嵌入放评论的容器代码就好</li>\n</ul>\n</blockquote>\n<h1 id=\"关于初始化评论失败\"><a href=\"#关于初始化评论失败\" class=\"headerlink\" title=\"关于初始化评论失败\"></a>关于初始化评论失败</h1><p>原因是gitalk是借助github的接口来存取仓库issues的数据的，然后每个文章对应仓库的一个issues，但是这个长度不能超过50个字符，不然就会导致初始化失败并返回，422错误，这是github的限制；官方是使用location.pathname来作为id的</p>\n<blockquote>\n<ul>\n<li><strong>解决</strong></li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>思路就是把id缩短，通过md5转义下就好</li>\n<li>直接在模板引擎引入对应md5的cdn就好</li>\n</ul>\n</blockquote>\n<h1 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h1><p>因为是通过github的接口在配置的仓库创建对应的issue来保存每篇文章的评论，这就涉及到谁创建的问题，gitalk也提供了对应的配置选项，这就带来了，每篇文章需要该仓库权限拥有者去初始化该文章对应的issue这一操作，这就很繁琐，计划写个小服务来解决一下这个问题</p>\n<blockquote>\n<p><em>目前思路</em></p>\n<ul>\n<li>使用node，在github ci部署后，在跑一下node服务</li>\n<li>服务主要就是去自动请求一下github的接口，自动初始化一下新文章的评论区</li>\n<li>写好在抛出来…</li>\n</ul>\n</blockquote>"},{"title":"时间分片","abbrlink":15069,"date":"2020-09-19T07:15:13.000Z","_content":"\n# 写在前面\n昨天（2020-9-19）看2019vueconf的时候，尤大在分享vue3的特点的时候，提到了vue和react在底层针对模板编译和jsx优化的一些不同的时候提到了一个词，时间分片；然后就做了一点功课，写个笔记。\n\n<!-- more -->\n\n## 正文\n> **解决了什么？**\n>- js会阻塞ui的渲染，所以当一个操作耗时非常长时，就会造成页面内容显示滞后，带来很不好的用户体验\n>- 通过将操作划分为一个个小的阶段，来执行\n\n> **怎么做的？**\n>- 利用异步的一些api\n>- settimeout\n>- [requestIdleCallback](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback)\n>- [requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n\n# 实例\n实例描述：通过js插入10000个li到ul中\n### 使用最普通的循环插入\n```html\n    <ul class=\"list\"></ul>\n    <script>\n        'use strict'\n        let list = document.querySelector('.list')\n        let total = 100000\n        for (let i = 0; i < total; ++i) {\n            let item = document.createElement('li')\n            item.innerText = `我是${i}`\n            list.appendChild(item)\n        }\n    </script>\n```\n![](http://img.shuaxindiary.cn/shijianfenpian-3.png)\n\n\n### 使用定时器\n```html\n    <ul class=\"list\"></ul>\n    <script>\n        'use strict'\n        let list = document.querySelector('.list')\n        let total = 100000\n        const render = (start, end) => {\n            if (end < total) {\n                setTimeout(() => {\n                    let frag = document.createDocumentFragment()\n                    for (let i = start; i < end; ++i) {\n                        let item = document.createElement('li')\n                        item.innerText = `我是${i}`\n                        frag.appendChild(item)\n                    }\n                    list.appendChild(frag)\n                    render(end + 1, end + 20)\n                }, 10)\n            }\n        }\n        render(0, 20)\n    </script>\n```\n![](http://img.shuaxindiary.cn/shijianfenpian-1.png)\n\n## 使用requestAnimationFrame\n```html\n    <ul class=\"list\"></ul>\n    <script>\n        'use strict'\n        let list = document.querySelector('.list')\n        let total = 100000\n        let size = 20\n        let index = 0\n        const render = (total, index) => {\n            if (total <= 0) {\n                return\n            }\n            let curPage = Math.min(total, size)\n            window.requestAnimationFrame(() => {\n                let fragment = document.createDocumentFragment()\n                for (let i = 0; i < curPage; ++i) {\n                    let item = document.createElement('li')\n                    item.innerText = `我是${index + i}`\n                    fragment.appendChild(item)\n                }\n                list.appendChild(fragment)\n                render(total - curPage, index + curPage)\n            })\n        }\n        render(total, index)\n    </script>\n```\n![](http://img.shuaxindiary.cn/shijianfenpian-2.png)\n\n\n# 总结\n- 时间分片就是讲耗时的长任务，划分为一个个耗时很短的小任务；将处理结果一点点返回给用户\n- 主要的手段就是利用js的event loop机制，通过异步的一些操作来处理切分任务\n\n# 其他\n> **关于requestAnimationFrame和setInterval处理动画的区别**\n>- 帧率和循环的事件交由浏览器控制，可以更好的控制的帧率\n>- 性能流畅度更优秀\n>- 新api，兼容性会有些问题\n\n","source":"_posts/技术笔记/时间分片.md","raw":"---\ntitle: 时间分片\ncategory:\n  - 技术笔记\ntags:\n  - 前端\nabbrlink: 15069\ndate: 2020-09-19 15:15:13\n---\n\n# 写在前面\n昨天（2020-9-19）看2019vueconf的时候，尤大在分享vue3的特点的时候，提到了vue和react在底层针对模板编译和jsx优化的一些不同的时候提到了一个词，时间分片；然后就做了一点功课，写个笔记。\n\n<!-- more -->\n\n## 正文\n> **解决了什么？**\n>- js会阻塞ui的渲染，所以当一个操作耗时非常长时，就会造成页面内容显示滞后，带来很不好的用户体验\n>- 通过将操作划分为一个个小的阶段，来执行\n\n> **怎么做的？**\n>- 利用异步的一些api\n>- settimeout\n>- [requestIdleCallback](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback)\n>- [requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n\n# 实例\n实例描述：通过js插入10000个li到ul中\n### 使用最普通的循环插入\n```html\n    <ul class=\"list\"></ul>\n    <script>\n        'use strict'\n        let list = document.querySelector('.list')\n        let total = 100000\n        for (let i = 0; i < total; ++i) {\n            let item = document.createElement('li')\n            item.innerText = `我是${i}`\n            list.appendChild(item)\n        }\n    </script>\n```\n![](http://img.shuaxindiary.cn/shijianfenpian-3.png)\n\n\n### 使用定时器\n```html\n    <ul class=\"list\"></ul>\n    <script>\n        'use strict'\n        let list = document.querySelector('.list')\n        let total = 100000\n        const render = (start, end) => {\n            if (end < total) {\n                setTimeout(() => {\n                    let frag = document.createDocumentFragment()\n                    for (let i = start; i < end; ++i) {\n                        let item = document.createElement('li')\n                        item.innerText = `我是${i}`\n                        frag.appendChild(item)\n                    }\n                    list.appendChild(frag)\n                    render(end + 1, end + 20)\n                }, 10)\n            }\n        }\n        render(0, 20)\n    </script>\n```\n![](http://img.shuaxindiary.cn/shijianfenpian-1.png)\n\n## 使用requestAnimationFrame\n```html\n    <ul class=\"list\"></ul>\n    <script>\n        'use strict'\n        let list = document.querySelector('.list')\n        let total = 100000\n        let size = 20\n        let index = 0\n        const render = (total, index) => {\n            if (total <= 0) {\n                return\n            }\n            let curPage = Math.min(total, size)\n            window.requestAnimationFrame(() => {\n                let fragment = document.createDocumentFragment()\n                for (let i = 0; i < curPage; ++i) {\n                    let item = document.createElement('li')\n                    item.innerText = `我是${index + i}`\n                    fragment.appendChild(item)\n                }\n                list.appendChild(fragment)\n                render(total - curPage, index + curPage)\n            })\n        }\n        render(total, index)\n    </script>\n```\n![](http://img.shuaxindiary.cn/shijianfenpian-2.png)\n\n\n# 总结\n- 时间分片就是讲耗时的长任务，划分为一个个耗时很短的小任务；将处理结果一点点返回给用户\n- 主要的手段就是利用js的event loop机制，通过异步的一些操作来处理切分任务\n\n# 其他\n> **关于requestAnimationFrame和setInterval处理动画的区别**\n>- 帧率和循环的事件交由浏览器控制，可以更好的控制的帧率\n>- 性能流畅度更优秀\n>- 新api，兼容性会有些问题\n\n","slug":"技术笔记/时间分片","published":1,"updated":"2021-12-31T12:01:59.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxuckd1r000knyjfbuv6ebye","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>昨天（2020-9-19）看2019vueconf的时候，尤大在分享vue3的特点的时候，提到了vue和react在底层针对模板编译和jsx优化的一些不同的时候提到了一个词，时间分片；然后就做了一点功课，写个笔记。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p><strong>解决了什么？</strong></p>\n<ul>\n<li>js会阻塞ui的渲染，所以当一个操作耗时非常长时，就会造成页面内容显示滞后，带来很不好的用户体验</li>\n<li>通过将操作划分为一个个小的阶段，来执行</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>怎么做的？</strong></p>\n<ul>\n<li>利用异步的一些api</li>\n<li>settimeout</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback\">requestIdleCallback</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a></li>\n</ul>\n</blockquote>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>实例描述：通过js插入10000个li到ul中</p>\n<h3 id=\"使用最普通的循环插入\"><a href=\"#使用最普通的循环插入\" class=\"headerlink\" title=\"使用最普通的循环插入\"></a>使用最普通的循环插入</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;list&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-meta\">    &#x27;use strict&#x27;</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.list&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">100000</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; total; ++i) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;li&#x27;</span>)</span><br><span class=\"javascript\">        item.innerText = <span class=\"hljs-string\">`我是<span class=\"hljs-subst\">$&#123;i&#125;</span>`</span></span><br>        list.appendChild(item)<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p><img src=\"http://img.shuaxindiary.cn/shijianfenpian-3.png\"></p>\n<h3 id=\"使用定时器\"><a href=\"#使用定时器\" class=\"headerlink\" title=\"使用定时器\"></a>使用定时器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;list&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-meta\">    &#x27;use strict&#x27;</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.list&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">100000</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> render = <span class=\"hljs-function\">(<span class=\"hljs-params\">start, end</span>) =&gt;</span> &#123;</span><br>        if (end &lt; total) &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">let</span> frag = <span class=\"hljs-built_in\">document</span>.createDocumentFragment()</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-keyword\">let</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;li&#x27;</span>)</span><br><span class=\"javascript\">                    item.innerText = <span class=\"hljs-string\">`我是<span class=\"hljs-subst\">$&#123;i&#125;</span>`</span></span><br>                    frag.appendChild(item)<br>                &#125;<br>                list.appendChild(frag)<br>                render(end + 1, end + 20)<br>            &#125;, 10)<br>        &#125;<br>    &#125;<br>    render(0, 20)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p><img src=\"http://img.shuaxindiary.cn/shijianfenpian-1.png\"></p>\n<h2 id=\"使用requestAnimationFrame\"><a href=\"#使用requestAnimationFrame\" class=\"headerlink\" title=\"使用requestAnimationFrame\"></a>使用requestAnimationFrame</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;list&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-meta\">    &#x27;use strict&#x27;</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.list&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">100000</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> size = <span class=\"hljs-number\">20</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> render = <span class=\"hljs-function\">(<span class=\"hljs-params\">total, index</span>) =&gt;</span> &#123;</span><br>        if (total &lt;= 0) &#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span></span><br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> curPage = <span class=\"hljs-built_in\">Math</span>.min(total, size)</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">window</span>.requestAnimationFrame(<span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> fragment = <span class=\"hljs-built_in\">document</span>.createDocumentFragment()</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; curPage; ++i) &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">let</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;li&#x27;</span>)</span><br><span class=\"javascript\">                item.innerText = <span class=\"hljs-string\">`我是<span class=\"hljs-subst\">$&#123;index + i&#125;</span>`</span></span><br>                fragment.appendChild(item)<br>            &#125;<br>            list.appendChild(fragment)<br>            render(total - curPage, index + curPage)<br>        &#125;)<br>    &#125;<br>    render(total, index)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>\n<p><img src=\"http://img.shuaxindiary.cn/shijianfenpian-2.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>时间分片就是讲耗时的长任务，划分为一个个耗时很短的小任务；将处理结果一点点返回给用户</li>\n<li>主要的手段就是利用js的event loop机制，通过异步的一些操作来处理切分任务</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><blockquote>\n<p><strong>关于requestAnimationFrame和setInterval处理动画的区别</strong></p>\n<ul>\n<li>帧率和循环的事件交由浏览器控制，可以更好的控制的帧率</li>\n<li>性能流畅度更优秀</li>\n<li>新api，兼容性会有些问题</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"wordcount":1975,"excerpt":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>昨天（2020-9-19）看2019vueconf的时候，尤大在分享vue3的特点的时候，提到了vue和react在底层针对模板编译和jsx优化的一些不同的时候提到了一个词，时间分片；然后就做了一点功课，写个笔记。</p>","more":"<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p><strong>解决了什么？</strong></p>\n<ul>\n<li>js会阻塞ui的渲染，所以当一个操作耗时非常长时，就会造成页面内容显示滞后，带来很不好的用户体验</li>\n<li>通过将操作划分为一个个小的阶段，来执行</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>怎么做的？</strong></p>\n<ul>\n<li>利用异步的一些api</li>\n<li>settimeout</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback\">requestIdleCallback</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">requestAnimationFrame</a></li>\n</ul>\n</blockquote>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><p>实例描述：通过js插入10000个li到ul中</p>\n<h3 id=\"使用最普通的循环插入\"><a href=\"#使用最普通的循环插入\" class=\"headerlink\" title=\"使用最普通的循环插入\"></a>使用最普通的循环插入</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;list&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-meta\">    &#x27;use strict&#x27;</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.list&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">100000</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; total; ++i) &#123;</span><br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;li&#x27;</span>)</span><br><span class=\"javascript\">        item.innerText = <span class=\"hljs-string\">`我是<span class=\"hljs-subst\">$&#123;i&#125;</span>`</span></span><br>        list.appendChild(item)<br>    &#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"http://img.shuaxindiary.cn/shijianfenpian-3.png\"></p>\n<h3 id=\"使用定时器\"><a href=\"#使用定时器\" class=\"headerlink\" title=\"使用定时器\"></a>使用定时器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;list&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-meta\">    &#x27;use strict&#x27;</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.list&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">100000</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> render = <span class=\"hljs-function\">(<span class=\"hljs-params\">start, end</span>) =&gt;</span> &#123;</span><br>        if (end &lt; total) &#123;<br><span class=\"javascript\">            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">let</span> frag = <span class=\"hljs-built_in\">document</span>.createDocumentFragment()</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"javascript\">                    <span class=\"hljs-keyword\">let</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;li&#x27;</span>)</span><br><span class=\"javascript\">                    item.innerText = <span class=\"hljs-string\">`我是<span class=\"hljs-subst\">$&#123;i&#125;</span>`</span></span><br>                    frag.appendChild(item)<br>                &#125;<br>                list.appendChild(frag)<br>                render(end + 1, end + 20)<br>            &#125;, 10)<br>        &#125;<br>    &#125;<br>    render(0, 20)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"http://img.shuaxindiary.cn/shijianfenpian-1.png\"></p>\n<h2 id=\"使用requestAnimationFrame\"><a href=\"#使用requestAnimationFrame\" class=\"headerlink\" title=\"使用requestAnimationFrame\"></a>使用requestAnimationFrame</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;list&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"javascript\"><span class=\"hljs-meta\">    &#x27;use strict&#x27;</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;.list&#x27;</span>)</span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">100000</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> size = <span class=\"hljs-number\">20</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span></span><br><span class=\"javascript\">    <span class=\"hljs-keyword\">const</span> render = <span class=\"hljs-function\">(<span class=\"hljs-params\">total, index</span>) =&gt;</span> &#123;</span><br>        if (total &lt;= 0) &#123;<br><span class=\"javascript\">            <span class=\"hljs-keyword\">return</span></span><br>        &#125;<br><span class=\"javascript\">        <span class=\"hljs-keyword\">let</span> curPage = <span class=\"hljs-built_in\">Math</span>.min(total, size)</span><br><span class=\"javascript\">        <span class=\"hljs-built_in\">window</span>.requestAnimationFrame(<span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">let</span> fragment = <span class=\"hljs-built_in\">document</span>.createDocumentFragment()</span><br><span class=\"javascript\">            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; curPage; ++i) &#123;</span><br><span class=\"javascript\">                <span class=\"hljs-keyword\">let</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;li&#x27;</span>)</span><br><span class=\"javascript\">                item.innerText = <span class=\"hljs-string\">`我是<span class=\"hljs-subst\">$&#123;index + i&#125;</span>`</span></span><br>                fragment.appendChild(item)<br>            &#125;<br>            list.appendChild(fragment)<br>            render(total - curPage, index + curPage)<br>        &#125;)<br>    &#125;<br>    render(total, index)<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"http://img.shuaxindiary.cn/shijianfenpian-2.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>时间分片就是讲耗时的长任务，划分为一个个耗时很短的小任务；将处理结果一点点返回给用户</li>\n<li>主要的手段就是利用js的event loop机制，通过异步的一些操作来处理切分任务</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><blockquote>\n<p><strong>关于requestAnimationFrame和setInterval处理动画的区别</strong></p>\n<ul>\n<li>帧率和循环的事件交由浏览器控制，可以更好的控制的帧率</li>\n<li>性能流畅度更优秀</li>\n<li>新api，兼容性会有些问题</li>\n</ul>\n</blockquote>"},{"title":"2021总结","date":"2021-12-31T15:00:02.000Z","tag":null,"index_img":"https://img.shuaxindiary.cn/keyboard.jpg","banner_img":"https://img.shuaxindiary.cn/keyboard.jpg","_content":"\n# 前文\n\n又是疫情里的一年，这一年也经历了不少，找工作 实习 换工作 毕业 成为打工人 一周内（和妹子） 体重飙升 回坑（当然是模玩啦），还是发生了不少有意思的事，趁着离2022还有一个小时，赶紧记录下来\n\n# 工作\n\n从本以为要留下的公司离职，去了另一家公司，入职的时候接到现在公司的offer，考虑再三还是来了现东家，加上提前实习到现在的工作时间已经半年多之久，从入职开始接手一个迭代了很久较为复杂的系统开始，到现在开始owner2个项目（当然也没有很难，curd+页面仔，手动狗头）；但是这一路过来确实经历了很多之前不曾有过的东西，开始知道怎么去快速排查问题、怎么抽离更通用的代码、怎么去和多方沟通等等；当然也还有很多的不足，前端怎么为业务赋能、怎么结合技术和当前业务并有收益、怎么去主动驱动一些事怎么做、怎么写好文档、怎么做好分享等等，希望明年总结的时候可以解决上面提到的几个。\n\n# 技术\n\n在校的时候，有很多时间去学习和折腾很多的东西，所以也不介意是否浪费了时间、做的东西是否有意义，只要是自己想做的都会去尝试；工作后绝大部分的时间都交给了业务，和不同的人沟通，处理历史遗留问题，写业务感觉很多的激情都在这之中被消耗了，然后就更加珍惜自己的非工作时间，怎么去玩怎么去放松，甚至怎么去学习都变得小心翼翼，所以后半年除过看看github的动向外，基本很少去折腾新东西了，只是在年末的时候搬运了一个其他平台的主题到vuepress，叫vuepress；还有一个开发到一半的github简历的玩具（希望可以尽早填坑。。\n\n除过这些，对新的一年的期待就是可以走出前端，去接触更多工程向的只是，例如后端、架构、运维等\n\n# 生活\n\n毕业后体重直线上升还是很苦恼，突然来的经济独立和没人监管的生活，彻底让自己撒了欢，开始了疯狂吃吃喝喝，然后。。。下一年要开始节制一点，控制饮食，先把体重降下来\n\n","source":"_posts/随笔/2021总结.md","raw":"---\ntitle: 2021总结\ncategory:\n  - 随笔\ndate: 2021-12-31 23:00:02\ntag:\nindex_img: https://img.shuaxindiary.cn/keyboard.jpg\nbanner_img: https://img.shuaxindiary.cn/keyboard.jpg\n---\n\n# 前文\n\n又是疫情里的一年，这一年也经历了不少，找工作 实习 换工作 毕业 成为打工人 一周内（和妹子） 体重飙升 回坑（当然是模玩啦），还是发生了不少有意思的事，趁着离2022还有一个小时，赶紧记录下来\n\n# 工作\n\n从本以为要留下的公司离职，去了另一家公司，入职的时候接到现在公司的offer，考虑再三还是来了现东家，加上提前实习到现在的工作时间已经半年多之久，从入职开始接手一个迭代了很久较为复杂的系统开始，到现在开始owner2个项目（当然也没有很难，curd+页面仔，手动狗头）；但是这一路过来确实经历了很多之前不曾有过的东西，开始知道怎么去快速排查问题、怎么抽离更通用的代码、怎么去和多方沟通等等；当然也还有很多的不足，前端怎么为业务赋能、怎么结合技术和当前业务并有收益、怎么去主动驱动一些事怎么做、怎么写好文档、怎么做好分享等等，希望明年总结的时候可以解决上面提到的几个。\n\n# 技术\n\n在校的时候，有很多时间去学习和折腾很多的东西，所以也不介意是否浪费了时间、做的东西是否有意义，只要是自己想做的都会去尝试；工作后绝大部分的时间都交给了业务，和不同的人沟通，处理历史遗留问题，写业务感觉很多的激情都在这之中被消耗了，然后就更加珍惜自己的非工作时间，怎么去玩怎么去放松，甚至怎么去学习都变得小心翼翼，所以后半年除过看看github的动向外，基本很少去折腾新东西了，只是在年末的时候搬运了一个其他平台的主题到vuepress，叫vuepress；还有一个开发到一半的github简历的玩具（希望可以尽早填坑。。\n\n除过这些，对新的一年的期待就是可以走出前端，去接触更多工程向的只是，例如后端、架构、运维等\n\n# 生活\n\n毕业后体重直线上升还是很苦恼，突然来的经济独立和没人监管的生活，彻底让自己撒了欢，开始了疯狂吃吃喝喝，然后。。。下一年要开始节制一点，控制饮食，先把体重降下来\n\n","slug":"随笔/2021总结","published":1,"updated":"2021-12-31T15:21:00.068Z","_id":"ckxuipivv0000g7jf3xm77vum","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前文\"><a href=\"#前文\" class=\"headerlink\" title=\"前文\"></a>前文</h1><p>又是疫情里的一年，这一年也经历了不少，找工作 实习 换工作 毕业 成为打工人 一周内（和妹子） 体重飙升 回坑（当然是模玩啦），还是发生了不少有意思的事，趁着离2022还有一个小时，赶紧记录下来</p>\n<h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><p>从本以为要留下的公司离职，去了另一家公司，入职的时候接到现在公司的offer，考虑再三还是来了现东家，加上提前实习到现在的工作时间已经半年多之久，从入职开始接手一个迭代了很久较为复杂的系统开始，到现在开始owner2个项目（当然也没有很难，curd+页面仔，手动狗头）；但是这一路过来确实经历了很多之前不曾有过的东西，开始知道怎么去快速排查问题、怎么抽离更通用的代码、怎么去和多方沟通等等；当然也还有很多的不足，前端怎么为业务赋能、怎么结合技术和当前业务并有收益、怎么去主动驱动一些事怎么做、怎么写好文档、怎么做好分享等等，希望明年总结的时候可以解决上面提到的几个。</p>\n<h1 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h1><p>在校的时候，有很多时间去学习和折腾很多的东西，所以也不介意是否浪费了时间、做的东西是否有意义，只要是自己想做的都会去尝试；工作后绝大部分的时间都交给了业务，和不同的人沟通，处理历史遗留问题，写业务感觉很多的激情都在这之中被消耗了，然后就更加珍惜自己的非工作时间，怎么去玩怎么去放松，甚至怎么去学习都变得小心翼翼，所以后半年除过看看github的动向外，基本很少去折腾新东西了，只是在年末的时候搬运了一个其他平台的主题到vuepress，叫vuepress；还有一个开发到一半的github简历的玩具（希望可以尽早填坑。。</p>\n<p>除过这些，对新的一年的期待就是可以走出前端，去接触更多工程向的只是，例如后端、架构、运维等</p>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><p>毕业后体重直线上升还是很苦恼，突然来的经济独立和没人监管的生活，彻底让自己撒了欢，开始了疯狂吃吃喝喝，然后。。。下一年要开始节制一点，控制饮食，先把体重降下来</p>\n","site":{"data":{}},"wordcount":765,"excerpt":"","more":"<h1 id=\"前文\"><a href=\"#前文\" class=\"headerlink\" title=\"前文\"></a>前文</h1><p>又是疫情里的一年，这一年也经历了不少，找工作 实习 换工作 毕业 成为打工人 一周内（和妹子） 体重飙升 回坑（当然是模玩啦），还是发生了不少有意思的事，趁着离2022还有一个小时，赶紧记录下来</p>\n<h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><p>从本以为要留下的公司离职，去了另一家公司，入职的时候接到现在公司的offer，考虑再三还是来了现东家，加上提前实习到现在的工作时间已经半年多之久，从入职开始接手一个迭代了很久较为复杂的系统开始，到现在开始owner2个项目（当然也没有很难，curd+页面仔，手动狗头）；但是这一路过来确实经历了很多之前不曾有过的东西，开始知道怎么去快速排查问题、怎么抽离更通用的代码、怎么去和多方沟通等等；当然也还有很多的不足，前端怎么为业务赋能、怎么结合技术和当前业务并有收益、怎么去主动驱动一些事怎么做、怎么写好文档、怎么做好分享等等，希望明年总结的时候可以解决上面提到的几个。</p>\n<h1 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h1><p>在校的时候，有很多时间去学习和折腾很多的东西，所以也不介意是否浪费了时间、做的东西是否有意义，只要是自己想做的都会去尝试；工作后绝大部分的时间都交给了业务，和不同的人沟通，处理历史遗留问题，写业务感觉很多的激情都在这之中被消耗了，然后就更加珍惜自己的非工作时间，怎么去玩怎么去放松，甚至怎么去学习都变得小心翼翼，所以后半年除过看看github的动向外，基本很少去折腾新东西了，只是在年末的时候搬运了一个其他平台的主题到vuepress，叫vuepress；还有一个开发到一半的github简历的玩具（希望可以尽早填坑。。</p>\n<p>除过这些，对新的一年的期待就是可以走出前端，去接触更多工程向的只是，例如后端、架构、运维等</p>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><p>毕业后体重直线上升还是很苦恼，突然来的经济独立和没人监管的生活，彻底让自己撒了欢，开始了疯狂吃吃喝喝，然后。。。下一年要开始节制一点，控制饮食，先把体重降下来</p>\n"},{"title":"新成员","date":"2022-01-03T08:23:51.000Z","tag":null,"index_img":"https://img.shuaxindiary.cn/IMG_9745.jpeg","banner_img":"https://img.shuaxindiary.cn/IMG_9745.jpeg","_content":"\n# 2022 新年 新成员\n\n**新年快乐**\n\n“寸土寸金” 的家里迎来了一位新成员---（名字暂定）一只小仓鼠（银毛的熊）!\n\n养宠物的想法从小就有，因为独苗外加爹妈经常不在身边，所以怪孤独的，从小就想有只狗子陪自己，但无奈家里人不同意，这个想法就一直埋在心里，想着等自己经济独立条件允许的时候一定要养一只狗子！\n\n结果狗子没等来，反而提前迎来了一只更小的小家伙！这个想法也不是突如其来，现在想想还是有点缘分的\n\n高中的时候无意间看到b站别人家的小仓鼠，觉得怪可爱的就去做了一些功课，发现养起来成本也不高（主要看怎么养，垫料、零食、主粮总的来说还是有一定成本的，只是和猫猫狗狗比起来低很多，对父母不同意想自己靠零花钱承担的学生党来说，还是有负担的，所以要想清楚），也想着养一只，后来因为学习原因和一些其他事情导致自己觉得不太能从始而终的照顾好它，所以这个想法也就搁置了\n\n后来再听到仓鼠的消息是和妹子聊天，得知她以前养过一只仓鼠，还养的不错（最后年迈体弱，自然归西）；于是想着要不要养一只帮她排解考研复习的压力，但是这个想法被她拒绝了，原因是没精力之后在看，于是再一次作罢\n\n直到后来，妹子考研结束，我觉得她天天在家很无聊，这时候又一次在b站看到首页推送了一个和仓鼠有关的视频，于是养仓鼠的这个想法就死灰复燃了！立马在工作之余又开始了解起仓鼠的基本饲养知识：品种、吃什么、笼子怎么选等等\n\n再后来就有了这篇文章啦，哈哈哈\n\n鼠子是在北京紫竹桥附近的一个花鸟市场提的，问了问年龄和看了看没什么伤和明显的不对就直接提了\n\n但是回家后，发现它走起来不平衡，会往一侧倒，于是开始心虚：不会是病鼠吧、不会是失序症吧…\n\n随后加了好几个仓鼠群，询问有经验的鼠友，后来大家的结论是暂时可以判断不是失序症和湿尾（类似狗子的犬瘟，一种很严重的病），应该是之前摔着了，让我观察看看，然后还是有其他问题的话就去医院！\n\n今天是到家的第三天，这三天能吃能喝能拉能尿，还给自己搞了窝，甚至晚上把食盆里的最后吃的都搬去了自己搭的窝存了起来（心寒，买了两个窝都不进去睡，非要自己做）不过暂时放心啦，希望之后也健健康康好好的长大！\n\n关于名字，一个月的时候再起\n\n![](https://img.shuaxindiary.cn/IMG_9712.jpeg)\n\n![](https://img.shuaxindiary.cn/IMG_9754.jpeg)\n\n![](https://img.shuaxindiary.cn/IMG_9729.jpeg)\n\n![](https://img.shuaxindiary.cn/IMG_9744.jpeg)\n\n![](https://img.shuaxindiary.cn/IMG_9745.jpeg)","source":"_posts/随笔/新成员.md","raw":"---\ntitle: 新成员\ncategory:\n  - 随笔\ndate: 2022-01-03 16:23:51\ntag:\nindex_img: https://img.shuaxindiary.cn/IMG_9745.jpeg\nbanner_img: https://img.shuaxindiary.cn/IMG_9745.jpeg\n---\n\n# 2022 新年 新成员\n\n**新年快乐**\n\n“寸土寸金” 的家里迎来了一位新成员---（名字暂定）一只小仓鼠（银毛的熊）!\n\n养宠物的想法从小就有，因为独苗外加爹妈经常不在身边，所以怪孤独的，从小就想有只狗子陪自己，但无奈家里人不同意，这个想法就一直埋在心里，想着等自己经济独立条件允许的时候一定要养一只狗子！\n\n结果狗子没等来，反而提前迎来了一只更小的小家伙！这个想法也不是突如其来，现在想想还是有点缘分的\n\n高中的时候无意间看到b站别人家的小仓鼠，觉得怪可爱的就去做了一些功课，发现养起来成本也不高（主要看怎么养，垫料、零食、主粮总的来说还是有一定成本的，只是和猫猫狗狗比起来低很多，对父母不同意想自己靠零花钱承担的学生党来说，还是有负担的，所以要想清楚），也想着养一只，后来因为学习原因和一些其他事情导致自己觉得不太能从始而终的照顾好它，所以这个想法也就搁置了\n\n后来再听到仓鼠的消息是和妹子聊天，得知她以前养过一只仓鼠，还养的不错（最后年迈体弱，自然归西）；于是想着要不要养一只帮她排解考研复习的压力，但是这个想法被她拒绝了，原因是没精力之后在看，于是再一次作罢\n\n直到后来，妹子考研结束，我觉得她天天在家很无聊，这时候又一次在b站看到首页推送了一个和仓鼠有关的视频，于是养仓鼠的这个想法就死灰复燃了！立马在工作之余又开始了解起仓鼠的基本饲养知识：品种、吃什么、笼子怎么选等等\n\n再后来就有了这篇文章啦，哈哈哈\n\n鼠子是在北京紫竹桥附近的一个花鸟市场提的，问了问年龄和看了看没什么伤和明显的不对就直接提了\n\n但是回家后，发现它走起来不平衡，会往一侧倒，于是开始心虚：不会是病鼠吧、不会是失序症吧…\n\n随后加了好几个仓鼠群，询问有经验的鼠友，后来大家的结论是暂时可以判断不是失序症和湿尾（类似狗子的犬瘟，一种很严重的病），应该是之前摔着了，让我观察看看，然后还是有其他问题的话就去医院！\n\n今天是到家的第三天，这三天能吃能喝能拉能尿，还给自己搞了窝，甚至晚上把食盆里的最后吃的都搬去了自己搭的窝存了起来（心寒，买了两个窝都不进去睡，非要自己做）不过暂时放心啦，希望之后也健健康康好好的长大！\n\n关于名字，一个月的时候再起\n\n![](https://img.shuaxindiary.cn/IMG_9712.jpeg)\n\n![](https://img.shuaxindiary.cn/IMG_9754.jpeg)\n\n![](https://img.shuaxindiary.cn/IMG_9729.jpeg)\n\n![](https://img.shuaxindiary.cn/IMG_9744.jpeg)\n\n![](https://img.shuaxindiary.cn/IMG_9745.jpeg)","slug":"随笔/新成员","published":1,"updated":"2022-01-03T09:06:31.879Z","_id":"ckxyf9yq80000ppjfgejsc8b2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2022-新年-新成员\"><a href=\"#2022-新年-新成员\" class=\"headerlink\" title=\"2022 新年 新成员\"></a>2022 新年 新成员</h1><p><strong>新年快乐</strong></p>\n<p>“寸土寸金” 的家里迎来了一位新成员—（名字暂定）一只小仓鼠（银毛的熊）!</p>\n<p>养宠物的想法从小就有，因为独苗外加爹妈经常不在身边，所以怪孤独的，从小就想有只狗子陪自己，但无奈家里人不同意，这个想法就一直埋在心里，想着等自己经济独立条件允许的时候一定要养一只狗子！</p>\n<p>结果狗子没等来，反而提前迎来了一只更小的小家伙！这个想法也不是突如其来，现在想想还是有点缘分的</p>\n<p>高中的时候无意间看到b站别人家的小仓鼠，觉得怪可爱的就去做了一些功课，发现养起来成本也不高（主要看怎么养，垫料、零食、主粮总的来说还是有一定成本的，只是和猫猫狗狗比起来低很多，对父母不同意想自己靠零花钱承担的学生党来说，还是有负担的，所以要想清楚），也想着养一只，后来因为学习原因和一些其他事情导致自己觉得不太能从始而终的照顾好它，所以这个想法也就搁置了</p>\n<p>后来再听到仓鼠的消息是和妹子聊天，得知她以前养过一只仓鼠，还养的不错（最后年迈体弱，自然归西）；于是想着要不要养一只帮她排解考研复习的压力，但是这个想法被她拒绝了，原因是没精力之后在看，于是再一次作罢</p>\n<p>直到后来，妹子考研结束，我觉得她天天在家很无聊，这时候又一次在b站看到首页推送了一个和仓鼠有关的视频，于是养仓鼠的这个想法就死灰复燃了！立马在工作之余又开始了解起仓鼠的基本饲养知识：品种、吃什么、笼子怎么选等等</p>\n<p>再后来就有了这篇文章啦，哈哈哈</p>\n<p>鼠子是在北京紫竹桥附近的一个花鸟市场提的，问了问年龄和看了看没什么伤和明显的不对就直接提了</p>\n<p>但是回家后，发现它走起来不平衡，会往一侧倒，于是开始心虚：不会是病鼠吧、不会是失序症吧…</p>\n<p>随后加了好几个仓鼠群，询问有经验的鼠友，后来大家的结论是暂时可以判断不是失序症和湿尾（类似狗子的犬瘟，一种很严重的病），应该是之前摔着了，让我观察看看，然后还是有其他问题的话就去医院！</p>\n<p>今天是到家的第三天，这三天能吃能喝能拉能尿，还给自己搞了窝，甚至晚上把食盆里的最后吃的都搬去了自己搭的窝存了起来（心寒，买了两个窝都不进去睡，非要自己做）不过暂时放心啦，希望之后也健健康康好好的长大！</p>\n<p>关于名字，一个月的时候再起</p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9712.jpeg\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9754.jpeg\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9729.jpeg\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9744.jpeg\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9745.jpeg\"></p>\n","site":{"data":{}},"wordcount":879,"excerpt":"","more":"<h1 id=\"2022-新年-新成员\"><a href=\"#2022-新年-新成员\" class=\"headerlink\" title=\"2022 新年 新成员\"></a>2022 新年 新成员</h1><p><strong>新年快乐</strong></p>\n<p>“寸土寸金” 的家里迎来了一位新成员—（名字暂定）一只小仓鼠（银毛的熊）!</p>\n<p>养宠物的想法从小就有，因为独苗外加爹妈经常不在身边，所以怪孤独的，从小就想有只狗子陪自己，但无奈家里人不同意，这个想法就一直埋在心里，想着等自己经济独立条件允许的时候一定要养一只狗子！</p>\n<p>结果狗子没等来，反而提前迎来了一只更小的小家伙！这个想法也不是突如其来，现在想想还是有点缘分的</p>\n<p>高中的时候无意间看到b站别人家的小仓鼠，觉得怪可爱的就去做了一些功课，发现养起来成本也不高（主要看怎么养，垫料、零食、主粮总的来说还是有一定成本的，只是和猫猫狗狗比起来低很多，对父母不同意想自己靠零花钱承担的学生党来说，还是有负担的，所以要想清楚），也想着养一只，后来因为学习原因和一些其他事情导致自己觉得不太能从始而终的照顾好它，所以这个想法也就搁置了</p>\n<p>后来再听到仓鼠的消息是和妹子聊天，得知她以前养过一只仓鼠，还养的不错（最后年迈体弱，自然归西）；于是想着要不要养一只帮她排解考研复习的压力，但是这个想法被她拒绝了，原因是没精力之后在看，于是再一次作罢</p>\n<p>直到后来，妹子考研结束，我觉得她天天在家很无聊，这时候又一次在b站看到首页推送了一个和仓鼠有关的视频，于是养仓鼠的这个想法就死灰复燃了！立马在工作之余又开始了解起仓鼠的基本饲养知识：品种、吃什么、笼子怎么选等等</p>\n<p>再后来就有了这篇文章啦，哈哈哈</p>\n<p>鼠子是在北京紫竹桥附近的一个花鸟市场提的，问了问年龄和看了看没什么伤和明显的不对就直接提了</p>\n<p>但是回家后，发现它走起来不平衡，会往一侧倒，于是开始心虚：不会是病鼠吧、不会是失序症吧…</p>\n<p>随后加了好几个仓鼠群，询问有经验的鼠友，后来大家的结论是暂时可以判断不是失序症和湿尾（类似狗子的犬瘟，一种很严重的病），应该是之前摔着了，让我观察看看，然后还是有其他问题的话就去医院！</p>\n<p>今天是到家的第三天，这三天能吃能喝能拉能尿，还给自己搞了窝，甚至晚上把食盆里的最后吃的都搬去了自己搭的窝存了起来（心寒，买了两个窝都不进去睡，非要自己做）不过暂时放心啦，希望之后也健健康康好好的长大！</p>\n<p>关于名字，一个月的时候再起</p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9712.jpeg\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9754.jpeg\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9729.jpeg\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9744.jpeg\"></p>\n<p><img src=\"https://img.shuaxindiary.cn/IMG_9745.jpeg\"></p>\n"},{"title":"博客改造","date":"2022-01-29T03:38:34.000Z","index_img":"https://img.shuaxindiary.cn/IMG_0082.jpeg","banner_img":"https://img.shuaxindiary.cn/IMG_0082.jpeg","_content":"\n# 关于博客部署的改造记录\n\n交代下当前站点背景：\n- 驱动：[Hexo](https://hexo.io/zh-cn/)\n- 主题：[Fluid-自己fork版](https://github.com/SHUAXINDIARY/hexo-theme-fluid) - 加了些自己想要的东西（详见仓库）\n- 部署：[Vercel](https://github.com/vercel/vercel)\n\n# 第一阶段\n\n最开始是直接本地打包，推产物到 *github* ，用 *gpage* 部署；但是有个问题，整个博客的源代码包括写的内容文件也都是在本机，电脑有问题就完了，迁移也不好搞，于是就开了新分支，单独存一份源码。\n\n这样持续了一段时间，觉得来回切分支太麻烦，无意间看到了 *github actions* ，可以做一些 *ci cd* （自动编译打包、部署）相关的操作，于是进行了第一次改造，整个项目维持一个分支，每次推master到仓库后，运行action，自动编译然后触发部署\n\n# 第二阶段\n\n![Travis](https://img.shuaxindiary.cn/1643432438272.png)\n\n第一阶段也维持了很久，但是 *gpage* 访问速度太感人了，当时刚好学校在做课程设计，以及想搞一个自己域名，就买了服务器+域名，然后就顺带的把博客搞到了自己的服务器上，整个流程改造也很简单，使用 *[Travis](https://www.travis-ci.org/)* 替代第一阶段的 *github action* 来进行登录服务器以及编译部署整个流程。\n\n这段时间持续到服务器过期，也觉得暂时不想碰服务器相关的东西，就没有续费，结束。。\n\n# 第三阶段\n\n![Vercel](https://img.shuaxindiary.cn/1643432403907.png)\n\n第二阶段结束后，一开始也没有进行很多的改动，因为第二阶段和第一阶段是共存的，当时也在实习，就没怎么管理过博客相关的，直到发现我当时的leader也有维护自己博客，然后无意间的交流中了解到了 *Vercel*，然后就开始了本阶段的改造。\n迁移到 *vercel* 基本 0 成本，登录后，授权要部署的仓库后，*vercel* 提供了很多前端技术方案的部署模板，选择对应模板后，基本点点点就完事了，同样支持配置自定义域名以及一些其他很丰富的功能，还是很棒的。 *vercel* 在国内访问速度还是很快的。\n\n# 现阶段\n\n目前整个部署还是基于 *Vercel*，只是在代码层面有一些改动，因为原版的 *fluid* 没有我想要的一个统计功能，自己fork维护了一份，又不想单独发包，也不想大范围的目录结构的调整，还是想2个仓库各是各的维护，但是部署就是一个问题，本地可以软链，但是部署的时候，本身是没这个目录的，于是开始想怎么解决，最后有2个方案。（最后选了2）\n\n1. 自己去控制编译和部署的流程，大概就是编写action任务，去构建产物，然后去部署到 *vercel* （有对应的action，详见市场\n2. **git submodule**\n\n1可以更灵活控制整个流程，自由度极高，但是就是需要自己写action文件，然后配置些环境变量乱七八糟的，有点繁琐，暂时也不需要那么花里胡哨的（pass）；2就简单了，把对应的包以 *github* 地址的形式链接到目录，可以解决现状。\n\n## 关于 [git-submodule](https://git-scm.com/docs/gitsubmodules)\n\n![submodule-command-list](https://img.shuaxindiary.cn/1643432338941.png)\n\n可以理解成一个 *git* 版的包管理器，主要作用呢，可以把一个仓库的项目以url的形式内嵌到另一个项目里，两个之间也互不干扰。添加后，查看 *.git/config* 文件会发现多了几行代码（如下图）\n\n![.git/config](https://img.shuaxindiary.cn/1643433168209.png)\n\n常见操作：\n\n```shell\n\n# 添加一个子模块\n\ngit submodule add [url] [dirname]\n\n# 删除\n\ngit rm -rf [dirname]\n\n# 更新\n\ngit submodule update [url]\n\n```\n\n# 总结\n\n都是很简答的折腾，途中还换了无数次主题、评论、巴拉巴拉其他一大堆（见[about](https://blog.shuaxindiary.cn/about/))，但是博客没写几篇有用的，跑偏了。。。然后就很长时间没怎么管理了，毕业后工作了小半年，觉得写文档和技术博客的能力还是要培养训练下，一份清晰明了的文档太重要了，不管是维护、交接工作还是去分享或者（~晋升证明产出~)自己复习（记性太差了，几天不看不写就忘了）都帮助极大，但是写的一坨屎就算了，写的时候都能感觉的出来是屎，别说去看了...\n\n所以临近过年，就当新年新目标，好好总结以及落实到博客中去！（向苏大学习=。=）\n\n\n","source":"_posts/博客改造.md","raw":"---\ntitle: 博客改造\ncategory:\n  - 日常\ndate: 2022-01-29 11:38:34\ntag:\n  - Hexo\n  - Git\nindex_img: https://img.shuaxindiary.cn/IMG_0082.jpeg\nbanner_img: https://img.shuaxindiary.cn/IMG_0082.jpeg\n---\n\n# 关于博客部署的改造记录\n\n交代下当前站点背景：\n- 驱动：[Hexo](https://hexo.io/zh-cn/)\n- 主题：[Fluid-自己fork版](https://github.com/SHUAXINDIARY/hexo-theme-fluid) - 加了些自己想要的东西（详见仓库）\n- 部署：[Vercel](https://github.com/vercel/vercel)\n\n# 第一阶段\n\n最开始是直接本地打包，推产物到 *github* ，用 *gpage* 部署；但是有个问题，整个博客的源代码包括写的内容文件也都是在本机，电脑有问题就完了，迁移也不好搞，于是就开了新分支，单独存一份源码。\n\n这样持续了一段时间，觉得来回切分支太麻烦，无意间看到了 *github actions* ，可以做一些 *ci cd* （自动编译打包、部署）相关的操作，于是进行了第一次改造，整个项目维持一个分支，每次推master到仓库后，运行action，自动编译然后触发部署\n\n# 第二阶段\n\n![Travis](https://img.shuaxindiary.cn/1643432438272.png)\n\n第一阶段也维持了很久，但是 *gpage* 访问速度太感人了，当时刚好学校在做课程设计，以及想搞一个自己域名，就买了服务器+域名，然后就顺带的把博客搞到了自己的服务器上，整个流程改造也很简单，使用 *[Travis](https://www.travis-ci.org/)* 替代第一阶段的 *github action* 来进行登录服务器以及编译部署整个流程。\n\n这段时间持续到服务器过期，也觉得暂时不想碰服务器相关的东西，就没有续费，结束。。\n\n# 第三阶段\n\n![Vercel](https://img.shuaxindiary.cn/1643432403907.png)\n\n第二阶段结束后，一开始也没有进行很多的改动，因为第二阶段和第一阶段是共存的，当时也在实习，就没怎么管理过博客相关的，直到发现我当时的leader也有维护自己博客，然后无意间的交流中了解到了 *Vercel*，然后就开始了本阶段的改造。\n迁移到 *vercel* 基本 0 成本，登录后，授权要部署的仓库后，*vercel* 提供了很多前端技术方案的部署模板，选择对应模板后，基本点点点就完事了，同样支持配置自定义域名以及一些其他很丰富的功能，还是很棒的。 *vercel* 在国内访问速度还是很快的。\n\n# 现阶段\n\n目前整个部署还是基于 *Vercel*，只是在代码层面有一些改动，因为原版的 *fluid* 没有我想要的一个统计功能，自己fork维护了一份，又不想单独发包，也不想大范围的目录结构的调整，还是想2个仓库各是各的维护，但是部署就是一个问题，本地可以软链，但是部署的时候，本身是没这个目录的，于是开始想怎么解决，最后有2个方案。（最后选了2）\n\n1. 自己去控制编译和部署的流程，大概就是编写action任务，去构建产物，然后去部署到 *vercel* （有对应的action，详见市场\n2. **git submodule**\n\n1可以更灵活控制整个流程，自由度极高，但是就是需要自己写action文件，然后配置些环境变量乱七八糟的，有点繁琐，暂时也不需要那么花里胡哨的（pass）；2就简单了，把对应的包以 *github* 地址的形式链接到目录，可以解决现状。\n\n## 关于 [git-submodule](https://git-scm.com/docs/gitsubmodules)\n\n![submodule-command-list](https://img.shuaxindiary.cn/1643432338941.png)\n\n可以理解成一个 *git* 版的包管理器，主要作用呢，可以把一个仓库的项目以url的形式内嵌到另一个项目里，两个之间也互不干扰。添加后，查看 *.git/config* 文件会发现多了几行代码（如下图）\n\n![.git/config](https://img.shuaxindiary.cn/1643433168209.png)\n\n常见操作：\n\n```shell\n\n# 添加一个子模块\n\ngit submodule add [url] [dirname]\n\n# 删除\n\ngit rm -rf [dirname]\n\n# 更新\n\ngit submodule update [url]\n\n```\n\n# 总结\n\n都是很简答的折腾，途中还换了无数次主题、评论、巴拉巴拉其他一大堆（见[about](https://blog.shuaxindiary.cn/about/))，但是博客没写几篇有用的，跑偏了。。。然后就很长时间没怎么管理了，毕业后工作了小半年，觉得写文档和技术博客的能力还是要培养训练下，一份清晰明了的文档太重要了，不管是维护、交接工作还是去分享或者（~晋升证明产出~)自己复习（记性太差了，几天不看不写就忘了）都帮助极大，但是写的一坨屎就算了，写的时候都能感觉的出来是屎，别说去看了...\n\n所以临近过年，就当新年新目标，好好总结以及落实到博客中去！（向苏大学习=。=）\n\n\n","slug":"博客改造","published":1,"updated":"2022-01-29T05:33:36.407Z","_id":"ckyzab6b30002kcjf695i8yjq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"关于博客部署的改造记录\"><a href=\"#关于博客部署的改造记录\" class=\"headerlink\" title=\"关于博客部署的改造记录\"></a>关于博客部署的改造记录</h1><p>交代下当前站点背景：</p>\n<ul>\n<li>驱动：<a href=\"https://hexo.io/zh-cn/\">Hexo</a></li>\n<li>主题：<a href=\"https://github.com/SHUAXINDIARY/hexo-theme-fluid\">Fluid-自己fork版</a> - 加了些自己想要的东西（详见仓库）</li>\n<li>部署：<a href=\"https://github.com/vercel/vercel\">Vercel</a></li>\n</ul>\n<h1 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a>第一阶段</h1><p>最开始是直接本地打包，推产物到 <em>github</em> ，用 <em>gpage</em> 部署；但是有个问题，整个博客的源代码包括写的内容文件也都是在本机，电脑有问题就完了，迁移也不好搞，于是就开了新分支，单独存一份源码。</p>\n<p>这样持续了一段时间，觉得来回切分支太麻烦，无意间看到了 <em>github actions</em> ，可以做一些 <em>ci cd</em> （自动编译打包、部署）相关的操作，于是进行了第一次改造，整个项目维持一个分支，每次推master到仓库后，运行action，自动编译然后触发部署</p>\n<h1 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a>第二阶段</h1><p><img src=\"https://img.shuaxindiary.cn/1643432438272.png\" alt=\"Travis\"></p>\n<p>第一阶段也维持了很久，但是 <em>gpage</em> 访问速度太感人了，当时刚好学校在做课程设计，以及想搞一个自己域名，就买了服务器+域名，然后就顺带的把博客搞到了自己的服务器上，整个流程改造也很简单，使用 <em><a href=\"https://www.travis-ci.org/\">Travis</a></em> 替代第一阶段的 <em>github action</em> 来进行登录服务器以及编译部署整个流程。</p>\n<p>这段时间持续到服务器过期，也觉得暂时不想碰服务器相关的东西，就没有续费，结束。。</p>\n<h1 id=\"第三阶段\"><a href=\"#第三阶段\" class=\"headerlink\" title=\"第三阶段\"></a>第三阶段</h1><p><img src=\"https://img.shuaxindiary.cn/1643432403907.png\" alt=\"Vercel\"></p>\n<p>第二阶段结束后，一开始也没有进行很多的改动，因为第二阶段和第一阶段是共存的，当时也在实习，就没怎么管理过博客相关的，直到发现我当时的leader也有维护自己博客，然后无意间的交流中了解到了 <em>Vercel</em>，然后就开始了本阶段的改造。<br>迁移到 <em>vercel</em> 基本 0 成本，登录后，授权要部署的仓库后，<em>vercel</em> 提供了很多前端技术方案的部署模板，选择对应模板后，基本点点点就完事了，同样支持配置自定义域名以及一些其他很丰富的功能，还是很棒的。 <em>vercel</em> 在国内访问速度还是很快的。</p>\n<h1 id=\"现阶段\"><a href=\"#现阶段\" class=\"headerlink\" title=\"现阶段\"></a>现阶段</h1><p>目前整个部署还是基于 <em>Vercel</em>，只是在代码层面有一些改动，因为原版的 <em>fluid</em> 没有我想要的一个统计功能，自己fork维护了一份，又不想单独发包，也不想大范围的目录结构的调整，还是想2个仓库各是各的维护，但是部署就是一个问题，本地可以软链，但是部署的时候，本身是没这个目录的，于是开始想怎么解决，最后有2个方案。（最后选了2）</p>\n<ol>\n<li>自己去控制编译和部署的流程，大概就是编写action任务，去构建产物，然后去部署到 <em>vercel</em> （有对应的action，详见市场</li>\n<li><strong>git submodule</strong></li>\n</ol>\n<p>1可以更灵活控制整个流程，自由度极高，但是就是需要自己写action文件，然后配置些环境变量乱七八糟的，有点繁琐，暂时也不需要那么花里胡哨的（pass）；2就简单了，把对应的包以 <em>github</em> 地址的形式链接到目录，可以解决现状。</p>\n<h2 id=\"关于-git-submodule\"><a href=\"#关于-git-submodule\" class=\"headerlink\" title=\"关于 git-submodule\"></a>关于 <a href=\"https://git-scm.com/docs/gitsubmodules\">git-submodule</a></h2><p><img src=\"https://img.shuaxindiary.cn/1643432338941.png\" alt=\"submodule-command-list\"></p>\n<p>可以理解成一个 <em>git</em> 版的包管理器，主要作用呢，可以把一个仓库的项目以url的形式内嵌到另一个项目里，两个之间也互不干扰。添加后，查看 <em>.git/config</em> 文件会发现多了几行代码（如下图）</p>\n<p><img src=\"https://img.shuaxindiary.cn/1643433168209.png\" alt=\".git/config\"></p>\n<p>常见操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加一个子模块</span><br><br>git submodule add [url] [dirname]<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除</span><br><br>git rm -rf [dirname]<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 更新</span><br><br>git submodule update [url]<br><br></code></pre></div></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>都是很简答的折腾，途中还换了无数次主题、评论、巴拉巴拉其他一大堆（见<a href=\"https://blog.shuaxindiary.cn/about/\">about</a>)，但是博客没写几篇有用的，跑偏了。。。然后就很长时间没怎么管理了，毕业后工作了小半年，觉得写文档和技术博客的能力还是要培养训练下，一份清晰明了的文档太重要了，不管是维护、交接工作还是去分享或者（<del>晋升证明产出</del>)自己复习（记性太差了，几天不看不写就忘了）都帮助极大，但是写的一坨屎就算了，写的时候都能感觉的出来是屎，别说去看了…</p>\n<p>所以临近过年，就当新年新目标，好好总结以及落实到博客中去！（向苏大学习=。=）</p>\n","site":{"data":{}},"wordcount":1519,"excerpt":"","more":"<h1 id=\"关于博客部署的改造记录\"><a href=\"#关于博客部署的改造记录\" class=\"headerlink\" title=\"关于博客部署的改造记录\"></a>关于博客部署的改造记录</h1><p>交代下当前站点背景：</p>\n<ul>\n<li>驱动：<a href=\"https://hexo.io/zh-cn/\">Hexo</a></li>\n<li>主题：<a href=\"https://github.com/SHUAXINDIARY/hexo-theme-fluid\">Fluid-自己fork版</a> - 加了些自己想要的东西（详见仓库）</li>\n<li>部署：<a href=\"https://github.com/vercel/vercel\">Vercel</a></li>\n</ul>\n<h1 id=\"第一阶段\"><a href=\"#第一阶段\" class=\"headerlink\" title=\"第一阶段\"></a>第一阶段</h1><p>最开始是直接本地打包，推产物到 <em>github</em> ，用 <em>gpage</em> 部署；但是有个问题，整个博客的源代码包括写的内容文件也都是在本机，电脑有问题就完了，迁移也不好搞，于是就开了新分支，单独存一份源码。</p>\n<p>这样持续了一段时间，觉得来回切分支太麻烦，无意间看到了 <em>github actions</em> ，可以做一些 <em>ci cd</em> （自动编译打包、部署）相关的操作，于是进行了第一次改造，整个项目维持一个分支，每次推master到仓库后，运行action，自动编译然后触发部署</p>\n<h1 id=\"第二阶段\"><a href=\"#第二阶段\" class=\"headerlink\" title=\"第二阶段\"></a>第二阶段</h1><p><img src=\"https://img.shuaxindiary.cn/1643432438272.png\" alt=\"Travis\"></p>\n<p>第一阶段也维持了很久，但是 <em>gpage</em> 访问速度太感人了，当时刚好学校在做课程设计，以及想搞一个自己域名，就买了服务器+域名，然后就顺带的把博客搞到了自己的服务器上，整个流程改造也很简单，使用 <em><a href=\"https://www.travis-ci.org/\">Travis</a></em> 替代第一阶段的 <em>github action</em> 来进行登录服务器以及编译部署整个流程。</p>\n<p>这段时间持续到服务器过期，也觉得暂时不想碰服务器相关的东西，就没有续费，结束。。</p>\n<h1 id=\"第三阶段\"><a href=\"#第三阶段\" class=\"headerlink\" title=\"第三阶段\"></a>第三阶段</h1><p><img src=\"https://img.shuaxindiary.cn/1643432403907.png\" alt=\"Vercel\"></p>\n<p>第二阶段结束后，一开始也没有进行很多的改动，因为第二阶段和第一阶段是共存的，当时也在实习，就没怎么管理过博客相关的，直到发现我当时的leader也有维护自己博客，然后无意间的交流中了解到了 <em>Vercel</em>，然后就开始了本阶段的改造。<br>迁移到 <em>vercel</em> 基本 0 成本，登录后，授权要部署的仓库后，<em>vercel</em> 提供了很多前端技术方案的部署模板，选择对应模板后，基本点点点就完事了，同样支持配置自定义域名以及一些其他很丰富的功能，还是很棒的。 <em>vercel</em> 在国内访问速度还是很快的。</p>\n<h1 id=\"现阶段\"><a href=\"#现阶段\" class=\"headerlink\" title=\"现阶段\"></a>现阶段</h1><p>目前整个部署还是基于 <em>Vercel</em>，只是在代码层面有一些改动，因为原版的 <em>fluid</em> 没有我想要的一个统计功能，自己fork维护了一份，又不想单独发包，也不想大范围的目录结构的调整，还是想2个仓库各是各的维护，但是部署就是一个问题，本地可以软链，但是部署的时候，本身是没这个目录的，于是开始想怎么解决，最后有2个方案。（最后选了2）</p>\n<ol>\n<li>自己去控制编译和部署的流程，大概就是编写action任务，去构建产物，然后去部署到 <em>vercel</em> （有对应的action，详见市场</li>\n<li><strong>git submodule</strong></li>\n</ol>\n<p>1可以更灵活控制整个流程，自由度极高，但是就是需要自己写action文件，然后配置些环境变量乱七八糟的，有点繁琐，暂时也不需要那么花里胡哨的（pass）；2就简单了，把对应的包以 <em>github</em> 地址的形式链接到目录，可以解决现状。</p>\n<h2 id=\"关于-git-submodule\"><a href=\"#关于-git-submodule\" class=\"headerlink\" title=\"关于 git-submodule\"></a>关于 <a href=\"https://git-scm.com/docs/gitsubmodules\">git-submodule</a></h2><p><img src=\"https://img.shuaxindiary.cn/1643432338941.png\" alt=\"submodule-command-list\"></p>\n<p>可以理解成一个 <em>git</em> 版的包管理器，主要作用呢，可以把一个仓库的项目以url的形式内嵌到另一个项目里，两个之间也互不干扰。添加后，查看 <em>.git/config</em> 文件会发现多了几行代码（如下图）</p>\n<p><img src=\"https://img.shuaxindiary.cn/1643433168209.png\" alt=\".git/config\"></p>\n<p>常见操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 添加一个子模块</span><br><br>git submodule add [url] [dirname]<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 删除</span><br><br>git rm -rf [dirname]<br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">#</span><span class=\"bash\"> 更新</span><br><br>git submodule update [url]<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>都是很简答的折腾，途中还换了无数次主题、评论、巴拉巴拉其他一大堆（见<a href=\"https://blog.shuaxindiary.cn/about/\">about</a>)，但是博客没写几篇有用的，跑偏了。。。然后就很长时间没怎么管理了，毕业后工作了小半年，觉得写文档和技术博客的能力还是要培养训练下，一份清晰明了的文档太重要了，不管是维护、交接工作还是去分享或者（<del>晋升证明产出</del>)自己复习（记性太差了，几天不看不写就忘了）都帮助极大，但是写的一坨屎就算了，写的时候都能感觉的出来是屎，别说去看了…</p>\n<p>所以临近过年，就当新年新目标，好好总结以及落实到博客中去！（向苏大学习=。=）</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxuc6k2r0000j7jf167sfayg","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuc6k2t0001j7jf8qcm5pve"},{"post_id":"ckxuciv110002j7jfalxy3t8d","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv120008j7jfbj0998i0"},{"post_id":"ckxuciv110003j7jf7ee74ab0","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv13000bj7jfcva4cjiq"},{"post_id":"ckxuciv120005j7jfhj2339sl","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv14000ej7jfcoph128k"},{"post_id":"ckxuciv120007j7jf4twbaknd","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv15000hj7jf5ti8ap94"},{"post_id":"ckxuciv13000aj7jfe9tvf7cw","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv15000kj7jff6gi7dt9"},{"post_id":"ckxuciv14000dj7jf0eo815jz","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv16000nj7jf28nzfnv7"},{"post_id":"ckxuciv14000gj7jf45s78l3a","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv16000qj7jfda0sf40y"},{"post_id":"ckxuciv15000jj7jfgx84gosi","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv16000tj7jf5zhp07b6"},{"post_id":"ckxuciv15000mj7jf47wafyoa","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv16000wj7jf9987esnf"},{"post_id":"ckxuciv16000pj7jf9k974aob","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv17000zj7jfecjw2ljz"},{"post_id":"ckxuciv16000sj7jf3qhb8r6h","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv170012j7jfhqmn15j0"},{"post_id":"ckxuciv16000vj7jfbdl9hhcr","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv180015j7jffwuw4p2q"},{"post_id":"ckxuciv17000yj7jfhmes0ciu","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv180018j7jf4alger0w"},{"post_id":"ckxuciv170011j7jf4snoa3l6","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv19001bj7jfadqu0xne"},{"post_id":"ckxuciv170014j7jf1qogewst","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv19001ej7jfdt312yq8"},{"post_id":"ckxuciv180017j7jf17qp8rph","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1a001hj7jffcb33om3"},{"post_id":"ckxuciv19001aj7jfb2f90tz8","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1a001kj7jf2tjshp60"},{"post_id":"ckxuciv19001dj7jffrm101wg","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1a001nj7jfdrl88z9z"},{"post_id":"ckxuciv19001gj7jf1b6zg9qv","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1a001qj7jf2zpda2o7"},{"post_id":"ckxuciv1a001jj7jf87tfbwu3","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1b001tj7jfhtq9hgfn"},{"post_id":"ckxuciv1a001mj7jfcvnh63cw","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1b001wj7jf8ift99w5"},{"post_id":"ckxuciv1a001pj7jf2cow6xgj","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1b001zj7jf6pa4dwv8"},{"post_id":"ckxuciv1a001sj7jf3fet02mm","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1c0022j7jf5p5hfmht"},{"post_id":"ckxuciv1b001vj7jf6gm59u4f","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1c0025j7jfh6j76kz9"},{"post_id":"ckxuciv1b001yj7jf38gh2azk","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1d0028j7jfb7ydcgve"},{"post_id":"ckxuciv1b0021j7jf3x946a70","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1d002bj7jf8lt754cm"},{"post_id":"ckxuciv1c0024j7jfap5masuy","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1d002ej7jf98mz5moq"},{"post_id":"ckxuciv1d0027j7jf64ejcq3z","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1e002hj7jf5bypa7d2"},{"post_id":"ckxuciv1d002aj7jfaskia740","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1e002kj7jfczp5hfhd"},{"post_id":"ckxuciv1d002dj7jfbjf31xoe","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1f002nj7jfcs1v2hye"},{"post_id":"ckxuciv1e002gj7jf2o75f1xg","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1f002qj7jfcpqah6ue"},{"post_id":"ckxuciv1e002jj7jf5pqn8l5w","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1f002tj7jf0dha4awc"},{"post_id":"ckxuciv1e002mj7jfhn3r3ok7","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1g002wj7jfbi53cc7v"},{"post_id":"ckxuciv1f002pj7jfb87tdc54","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1g002zj7jf8du9eu78"},{"post_id":"ckxuciv1f002sj7jfgf060g0m","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1g0032j7jfgqy2ciu7"},{"post_id":"ckxuciv1f002vj7jf8ypgcdmp","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1h0035j7jf2u0e0nth"},{"post_id":"ckxuciv1g002yj7jfagcbfdlf","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1h0038j7jff3stdysg"},{"post_id":"ckxuciv1g0031j7jfe0qb0lmp","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1h003bj7jfecioftd9"},{"post_id":"ckxuciv1h0037j7jfd8952z5x","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1i003gj7jf6qza6wbw"},{"post_id":"ckxuciv1h003aj7jfe56j3e5b","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1i003ij7jf1a51afcy"},{"post_id":"ckxuciv1h003dj7jfbrl055ac","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1i003kj7jf0iq5hjr7"},{"post_id":"ckxuciv1h003fj7jfbyo70l4q","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1i003mj7jfgba34rgs"},{"post_id":"ckxuciv1k004uj7jf64chh2sx","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1n0050j7jfe135bwbr"},{"post_id":"ckxuciv1n004vj7jfhjlj3ml6","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1o0052j7jf96xd24om"},{"post_id":"ckxuciv1n004xj7jfclu71too","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1o0054j7jfditjf175"},{"post_id":"ckxuciv1n004zj7jfaysph5j1","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv1o0056j7jf02yhhfv1"},{"post_id":"ckxuciv39005bj7jf4lux5jsu","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuciv3a005gj7jf155adlte"},{"post_id":"ckxuciv3a005cj7jf0vg8alff","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuciv3a005ij7jf1d0m3fdn"},{"post_id":"ckxuciv3a005ej7jf804470mh","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuciv3a005jj7jf8zu97wf8"},{"post_id":"ckxuciv3a005kj7jf50ey7d1l","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuciv3b005qj7jfgfpm0sif"},{"post_id":"ckxuciv3b005lj7jf4drtegpk","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuciv3b005tj7jf2ut9ecsr"},{"post_id":"ckxuciv3b005nj7jf3hdbch0c","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuciv3b005vj7jf3moy41xj"},{"post_id":"ckxuciv3b005pj7jfh3r9g495","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuciv3b005xj7jfdmne1nu6"},{"post_id":"ckxuciv3b005sj7jfdryv1kzy","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuciv3b005zj7jfcgdxb11h"},{"post_id":"ckxuciv3t0061j7jf7341c2n4","category_id":"ckx1ty4rc005i7jjf63xo7p8r","_id":"ckxuciv3v0069j7jf7yq38r69"},{"post_id":"ckxuciv3t0063j7jf3slx0zah","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3v006cj7jfeptd57u7"},{"post_id":"ckxuciv3u0066j7jf14d5gn58","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3v006fj7jffdjg959n"},{"post_id":"ckxuciv3v0068j7jfae5d4lds","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3w006ij7jf37f8axkp"},{"post_id":"ckxuciv3v006bj7jf0p55ftvs","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3w006lj7jf3hgla94y"},{"post_id":"ckxuciv3v006ej7jfhqke5rrp","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3w006oj7jf9pqdcj3q"},{"post_id":"ckxuciv3w006hj7jf6rsyhlq4","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3x006rj7jf3trf72ad"},{"post_id":"ckxuciv3w006kj7jf2uut8q3e","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3x006uj7jf257pdczq"},{"post_id":"ckxuciv3w006nj7jfdvk6e9hg","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3x006xj7jf0mff41tt"},{"post_id":"ckxuciv3w006qj7jf62yt0nx1","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3x006zj7jfd4w49if0"},{"post_id":"ckxuciv3x006tj7jffk7s9fxs","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3y0071j7jfgn1xchaw"},{"post_id":"ckxuciv3x006wj7jf5o3mdxjz","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuciv3y0073j7jf8vm81bla"},{"post_id":"ckxuciv40007fj7jf4m4he45a","category_id":"ckx1ty4qy00227jjf23fhdf50","_id":"ckxuciv41007ij7jffvez5a30"},{"post_id":"ckxuciv42007jj7jfeisc0b61","category_id":"ckx1ty4qy00227jjf23fhdf50","_id":"ckxuciv42007mj7jf60gt5u5x"},{"post_id":"ckxuckd1m0000nyjfeudz5wxw","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuckd1q0006nyjf4j5u3grf"},{"post_id":"ckxuckd1n0001nyjf16vbar54","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuckd1q0009nyjfcqcjhwdc"},{"post_id":"ckxuckd1o0003nyjfhwnc6rs9","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuckd1q000bnyjf1oraemu9"},{"post_id":"ckxuckd1p0005nyjf45ztduxh","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuckd1r000dnyjf5kjk607z"},{"post_id":"ckxuckd1q0008nyjf67mccw94","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuckd1r000fnyjfcyb49ms3"},{"post_id":"ckxuckd1r000jnyjfb28z5vsk","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuckd1s000nnyjfczj07svl"},{"post_id":"ckxuckd1r000knyjfbuv6ebye","category_id":"ckx1ty4qo00047jjf7ea8emog","_id":"ckxuckd1s000pnyjfddvu8zev"},{"post_id":"ckxuipivv0000g7jf3xm77vum","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxuipqod0001g7jfdqji7osa"},{"post_id":"ckxyf9yq80000ppjfgejsc8b2","category_id":"ckx1ty4rg006f7jjf8an8g2mh","_id":"ckxyf9yqa0001ppjf3fus70g6"},{"post_id":"ckyzab6b30002kcjf695i8yjq","category_id":"ckx1ty4qy00227jjf23fhdf50","_id":"ckyzaby5v0007kcjfafuq086b"}],"PostTag":[{"post_id":"ckxuciv110002j7jfalxy3t8d","tag_id":"ckx1ty4qz00297jjff6baeb8t","_id":"ckxuciv120004j7jfg7b276fo"},{"post_id":"ckxuciv110002j7jfalxy3t8d","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv120006j7jfgfa327a4"},{"post_id":"ckxuciv110003j7jf7ee74ab0","tag_id":"ckx1ty4qz00297jjff6baeb8t","_id":"ckxuciv130009j7jf6lyha8zd"},{"post_id":"ckxuciv110003j7jf7ee74ab0","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv14000cj7jf4vlu7xqt"},{"post_id":"ckxuciv120005j7jfhj2339sl","tag_id":"ckx1ty4qz00297jjff6baeb8t","_id":"ckxuciv14000fj7jfggd937zj"},{"post_id":"ckxuciv120005j7jfhj2339sl","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv15000ij7jfekj355nh"},{"post_id":"ckxuciv120007j7jf4twbaknd","tag_id":"ckx1ty4qz00297jjff6baeb8t","_id":"ckxuciv15000lj7jffnekdzyi"},{"post_id":"ckxuciv120007j7jf4twbaknd","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv16000oj7jfb5pnan3f"},{"post_id":"ckxuciv13000aj7jfe9tvf7cw","tag_id":"ckx1ty4qz00297jjff6baeb8t","_id":"ckxuciv16000rj7jfb9l64aar"},{"post_id":"ckxuciv13000aj7jfe9tvf7cw","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv16000uj7jf0c1u5xnc"},{"post_id":"ckxuciv14000dj7jf0eo815jz","tag_id":"ckx1ty4qz00297jjff6baeb8t","_id":"ckxuciv17000xj7jfclbxb3u0"},{"post_id":"ckxuciv14000dj7jf0eo815jz","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv170010j7jfep6z37e4"},{"post_id":"ckxuciv14000gj7jf45s78l3a","tag_id":"ckx1ty4qw001g7jjfemph873l","_id":"ckxuciv170013j7jfhnauesx7"},{"post_id":"ckxuciv14000gj7jf45s78l3a","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv180016j7jfgqirf78s"},{"post_id":"ckxuciv15000jj7jfgx84gosi","tag_id":"ckx1ty4qw001g7jjfemph873l","_id":"ckxuciv190019j7jf8hbngfjk"},{"post_id":"ckxuciv15000jj7jfgx84gosi","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv19001cj7jffphk0zi9"},{"post_id":"ckxuciv15000mj7jf47wafyoa","tag_id":"ckx1ty4qw001g7jjfemph873l","_id":"ckxuciv19001fj7jf85s19f89"},{"post_id":"ckxuciv15000mj7jf47wafyoa","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1a001ij7jfdm4gc39e"},{"post_id":"ckxuciv16000pj7jf9k974aob","tag_id":"ckx1ty4qw001g7jjfemph873l","_id":"ckxuciv1a001lj7jfbhwd4s8e"},{"post_id":"ckxuciv16000pj7jf9k974aob","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1a001oj7jf28fwb36m"},{"post_id":"ckxuciv16000sj7jf3qhb8r6h","tag_id":"ckx1ty4qw001g7jjfemph873l","_id":"ckxuciv1a001rj7jf7fbhetf1"},{"post_id":"ckxuciv16000vj7jfbdl9hhcr","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1b001uj7jf9xjkgt5m"},{"post_id":"ckxuciv16000vj7jfbdl9hhcr","tag_id":"ckx1ty4r9004w7jjfe65g2m4a","_id":"ckxuciv1b001xj7jf3atyhfky"},{"post_id":"ckxuciv17000yj7jfhmes0ciu","tag_id":"ckx1ty4r7004b7jjfaowmhszm","_id":"ckxuciv1b0020j7jfeigoeylx"},{"post_id":"ckxuciv17000yj7jfhmes0ciu","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1c0023j7jf9limdgoc"},{"post_id":"ckxuciv170011j7jf4snoa3l6","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1d0026j7jf6uxt7p6n"},{"post_id":"ckxuciv170011j7jf4snoa3l6","tag_id":"ckx1ty4re005w7jjf2dujh4u5","_id":"ckxuciv1d0029j7jfdv7h0uqb"},{"post_id":"ckxuciv170014j7jf1qogewst","tag_id":"ckx1ty4qz00297jjff6baeb8t","_id":"ckxuciv1d002cj7jffmdjdfhw"},{"post_id":"ckxuciv170014j7jf1qogewst","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1e002fj7jfdvqx4px6"},{"post_id":"ckxuciv180017j7jf17qp8rph","tag_id":"ckx1ty4r7004b7jjfaowmhszm","_id":"ckxuciv1e002ij7jf5y1h3kmt"},{"post_id":"ckxuciv180017j7jf17qp8rph","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1e002lj7jf6e3taz6z"},{"post_id":"ckxuciv19001aj7jfb2f90tz8","tag_id":"ckx1ty4re00637jjfepvs3704","_id":"ckxuciv1f002oj7jf81qr6x69"},{"post_id":"ckxuciv19001aj7jfb2f90tz8","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1f002rj7jf72ocgk2o"},{"post_id":"ckxuciv19001dj7jffrm101wg","tag_id":"ckx1ty4re00637jjfepvs3704","_id":"ckxuciv1f002uj7jfer0ia9o0"},{"post_id":"ckxuciv19001dj7jffrm101wg","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1g002xj7jfd7706l6t"},{"post_id":"ckxuciv19001gj7jf1b6zg9qv","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1g0030j7jffzzb0zo3"},{"post_id":"ckxuciv19001gj7jf1b6zg9qv","tag_id":"ckx1ty4r9004w7jjfe65g2m4a","_id":"ckxuciv1g0033j7jf5oyf25eu"},{"post_id":"ckxuciv1a001jj7jf87tfbwu3","tag_id":"ckx1ty4rk007o7jjffpgah60k","_id":"ckxuciv1h0036j7jf91gae1a5"},{"post_id":"ckxuciv1a001mj7jfcvnh63cw","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1h0039j7jf6dw2dgu0"},{"post_id":"ckxuciv1a001mj7jfcvnh63cw","tag_id":"ckx1ty4rj007l7jjf6eblftuc","_id":"ckxuciv1h003cj7jf52bg6qap"},{"post_id":"ckxuciv1a001pj7jf2cow6xgj","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1h003ej7jf4j5ab6dz"},{"post_id":"ckxuciv1a001pj7jf2cow6xgj","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i003hj7jfaelc1pnj"},{"post_id":"ckxuciv1a001sj7jf3fet02mm","tag_id":"ckx1ty4rj00767jjf9yvq8ew1","_id":"ckxuciv1i003jj7jfh0j7180b"},{"post_id":"ckxuciv1a001sj7jf3fet02mm","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i003lj7jf68rvg6vx"},{"post_id":"ckxuciv1b001vj7jf6gm59u4f","tag_id":"ckx1ty4qz00297jjff6baeb8t","_id":"ckxuciv1i003nj7jf7swr3fku"},{"post_id":"ckxuciv1b001yj7jf38gh2azk","tag_id":"ckx1ty4r7004b7jjfaowmhszm","_id":"ckxuciv1i003oj7jfahna2gge"},{"post_id":"ckxuciv1b001yj7jf38gh2azk","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i003pj7jffse04hvs"},{"post_id":"ckxuciv1b0021j7jf3x946a70","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1i003qj7jfdnns6win"},{"post_id":"ckxuciv1b0021j7jf3x946a70","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1i003rj7jf4eyf0f31"},{"post_id":"ckxuciv1b0021j7jf3x946a70","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i003sj7jf8dhh72ok"},{"post_id":"ckxuciv1c0024j7jfap5masuy","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i003tj7jf4fflfyec"},{"post_id":"ckxuciv1c0024j7jfap5masuy","tag_id":"ckx1ty4r9004w7jjfe65g2m4a","_id":"ckxuciv1i003uj7jf1vmkgcve"},{"post_id":"ckxuciv1d0027j7jf64ejcq3z","tag_id":"ckx1ty4r7004b7jjfaowmhszm","_id":"ckxuciv1i003vj7jf0ffeb1q2"},{"post_id":"ckxuciv1d0027j7jf64ejcq3z","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i003wj7jfcomb44t7"},{"post_id":"ckxuciv1d002aj7jfaskia740","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i003xj7jfdrze08tc"},{"post_id":"ckxuciv1d002aj7jfaskia740","tag_id":"ckx1ty4rj007f7jjfg3po76kb","_id":"ckxuciv1i003yj7jffkku8ujp"},{"post_id":"ckxuciv1d002dj7jfbjf31xoe","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1i003zj7jf48xxgq86"},{"post_id":"ckxuciv1e002gj7jf2o75f1xg","tag_id":"ckx1ty4rk007t7jjf6z7chf8c","_id":"ckxuciv1i0040j7jf4pqp4oyv"},{"post_id":"ckxuciv1e002gj7jf2o75f1xg","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1i0041j7jf9cbp514x"},{"post_id":"ckxuciv1e002jj7jf5pqn8l5w","tag_id":"ckx1ty4rj00767jjf9yvq8ew1","_id":"ckxuciv1i0042j7jf70sxgizl"},{"post_id":"ckxuciv1e002jj7jf5pqn8l5w","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i0043j7jfceha54jt"},{"post_id":"ckxuciv1e002mj7jfhn3r3ok7","tag_id":"ckx1ty4rk007o7jjffpgah60k","_id":"ckxuciv1i0044j7jf2mwv50yh"},{"post_id":"ckxuciv1e002mj7jfhn3r3ok7","tag_id":"ckx1ty4rk00897jjf6qie8zzu","_id":"ckxuciv1i0045j7jf91vgbqoh"},{"post_id":"ckxuciv1e002mj7jfhn3r3ok7","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i0046j7jf0g722oj3"},{"post_id":"ckxuciv1f002pj7jfb87tdc54","tag_id":"ckx1ty4rj00767jjf9yvq8ew1","_id":"ckxuciv1i0047j7jf1dxh76oh"},{"post_id":"ckxuciv1f002pj7jfb87tdc54","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i0048j7jf5057fikd"},{"post_id":"ckxuciv1f002sj7jfgf060g0m","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i0049j7jfadak9mgg"},{"post_id":"ckxuciv1f002sj7jfgf060g0m","tag_id":"ckx1ty4rk00867jjfffq22b1j","_id":"ckxuciv1i004aj7jf4bw0aofq"},{"post_id":"ckxuciv1f002sj7jfgf060g0m","tag_id":"ckx1ty4rk00897jjf6qie8zzu","_id":"ckxuciv1i004bj7jf66yz2aj9"},{"post_id":"ckxuciv1f002sj7jfgf060g0m","tag_id":"ckx1ty4rk008b7jjf2why7cid","_id":"ckxuciv1i004cj7jf8xombu9r"},{"post_id":"ckxuciv1f002vj7jf8ypgcdmp","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1i004dj7jf8ep04yma"},{"post_id":"ckxuciv1f002vj7jf8ypgcdmp","tag_id":"ckx1ty4rk007w7jjf3v6g7j8l","_id":"ckxuciv1i004ej7jf16jaffwn"},{"post_id":"ckxuciv1g002yj7jfagcbfdlf","tag_id":"ckx1ty4rl008i7jjf1hn7a2ck","_id":"ckxuciv1i004fj7jfcbqn2srx"},{"post_id":"ckxuciv1g002yj7jfagcbfdlf","tag_id":"ckx1ty4rl008l7jjfdp75ee93","_id":"ckxuciv1i004gj7jf4tdaaigf"},{"post_id":"ckxuciv1g002yj7jfagcbfdlf","tag_id":"ckx1ty4rl008n7jjf441xfj21","_id":"ckxuciv1i004hj7jf7tv9badp"},{"post_id":"ckxuciv1g0031j7jfe0qb0lmp","tag_id":"ckx1ty4rj00767jjf9yvq8ew1","_id":"ckxuciv1i004ij7jfc2dz63z7"},{"post_id":"ckxuciv1g0031j7jfe0qb0lmp","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv1i004jj7jf98nnaoxg"},{"post_id":"ckxuciv1g0031j7jfe0qb0lmp","tag_id":"ckx1ty4r9004w7jjfe65g2m4a","_id":"ckxuciv1i004kj7jf0ehv2ffr"},{"post_id":"ckxuciv1g0034j7jfdyg48lex","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1i004lj7jfc9grchpo"},{"post_id":"ckxuciv1h0037j7jfd8952z5x","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1i004mj7jf4821626t"},{"post_id":"ckxuciv1h0037j7jfd8952z5x","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1i004nj7jfbbygczi1"},{"post_id":"ckxuciv1h003aj7jfe56j3e5b","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1i004oj7jf3azd4d8x"},{"post_id":"ckxuciv1h003aj7jfe56j3e5b","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1i004pj7jffpq0fkad"},{"post_id":"ckxuciv1h003dj7jfbrl055ac","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1j004qj7jfgiqp7qjy"},{"post_id":"ckxuciv1h003dj7jfbrl055ac","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1j004rj7jfgvdy9jwg"},{"post_id":"ckxuciv1h003fj7jfbyo70l4q","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1j004sj7jfbtb47vra"},{"post_id":"ckxuciv1h003fj7jfbyo70l4q","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1j004tj7jf2w3mg1ts"},{"post_id":"ckxuciv1k004uj7jf64chh2sx","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1n004wj7jfbnvr1rqa"},{"post_id":"ckxuciv1k004uj7jf64chh2sx","tag_id":"ckx1ty4qw001g7jjfemph873l","_id":"ckxuciv1n004yj7jf76ljan3i"},{"post_id":"ckxuciv1k004uj7jf64chh2sx","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1o0051j7jfd8i9gmj3"},{"post_id":"ckxuciv1n004vj7jfhjlj3ml6","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1o0053j7jfa5uy3od1"},{"post_id":"ckxuciv1n004vj7jfhjlj3ml6","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1o0055j7jf7yvg0yfk"},{"post_id":"ckxuciv1n004xj7jfclu71too","tag_id":"ckx1ty4rh006x7jjf5y061mjr","_id":"ckxuciv1o0057j7jfhyw0gmvb"},{"post_id":"ckxuciv1n004xj7jfclu71too","tag_id":"ckx1ty4rh00737jjf0ifzb4i2","_id":"ckxuciv1o0058j7jfe1ni5g8d"},{"post_id":"ckxuciv1n004zj7jfaysph5j1","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv1o0059j7jf3hy700sq"},{"post_id":"ckxuciv1n004zj7jfaysph5j1","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuciv1o005aj7jfekvabtwc"},{"post_id":"ckxuciv39005bj7jf4lux5jsu","tag_id":"ckx1ty4rn00a37jjf6ucu8fry","_id":"ckxuciv3a005dj7jfbcy9as0z"},{"post_id":"ckxuciv3a005cj7jf0vg8alff","tag_id":"ckx1ty4rn00a67jjfc3y7ggsn","_id":"ckxuciv3a005fj7jfa7qfbhd1"},{"post_id":"ckxuciv3a005ej7jf804470mh","tag_id":"ckx1ty4rn00a67jjfc3y7ggsn","_id":"ckxuciv3a005hj7jfgfl3gb65"},{"post_id":"ckxuciv3a005kj7jf50ey7d1l","tag_id":"ckx1ty4ro00am7jjf2dj9huw5","_id":"ckxuciv3b005mj7jf8iwx81is"},{"post_id":"ckxuciv3b005lj7jf4drtegpk","tag_id":"ckx1ty4rn00a67jjfc3y7ggsn","_id":"ckxuciv3b005oj7jf5fl1ccnx"},{"post_id":"ckxuciv3b005lj7jf4drtegpk","tag_id":"ckx1ty4ro00ai7jjfcwqw3fsn","_id":"ckxuciv3b005rj7jf5tez3tn5"},{"post_id":"ckxuciv3b005nj7jf3hdbch0c","tag_id":"ckx1ty4rn00a67jjfc3y7ggsn","_id":"ckxuciv3b005uj7jf00shgh2v"},{"post_id":"ckxuciv3b005pj7jfh3r9g495","tag_id":"ckx1ty4rn00a37jjf6ucu8fry","_id":"ckxuciv3b005wj7jf2dz902ub"},{"post_id":"ckxuciv3b005sj7jfdryv1kzy","tag_id":"ckx1ty4rn00a37jjf6ucu8fry","_id":"ckxuciv3b005yj7jf5ytbbd4s"},{"post_id":"ckxuciv3t0061j7jf7341c2n4","tag_id":"ckx1ty4rm00977jjf4ymmeqd9","_id":"ckxuciv3u0064j7jf555ghxh2"},{"post_id":"ckxuciv3t0061j7jf7341c2n4","tag_id":"ckx1ty4rm009a7jjfesqua2kq","_id":"ckxuciv3v0067j7jf03be4rq8"},{"post_id":"ckxuciv3t0063j7jf3slx0zah","tag_id":"ckx1ty4rj00767jjf9yvq8ew1","_id":"ckxuciv3v006aj7jf48owdf33"},{"post_id":"ckxuciv3u0066j7jf14d5gn58","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3v006dj7jfdk3n0nb5"},{"post_id":"ckxuciv3u0066j7jf14d5gn58","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3w006gj7jf9i8c3361"},{"post_id":"ckxuciv3v0068j7jfae5d4lds","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3w006jj7jf539ofkyu"},{"post_id":"ckxuciv3v0068j7jfae5d4lds","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3w006mj7jffflg51z1"},{"post_id":"ckxuciv3v006bj7jf0p55ftvs","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3w006pj7jf5w8rhmjm"},{"post_id":"ckxuciv3v006bj7jf0p55ftvs","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3x006sj7jf1wxrazcy"},{"post_id":"ckxuciv3v006ej7jfhqke5rrp","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3x006vj7jf2za4eytv"},{"post_id":"ckxuciv3v006ej7jfhqke5rrp","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3x006yj7jf87zh50y2"},{"post_id":"ckxuciv3w006hj7jf6rsyhlq4","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3y0070j7jfhs3v2uct"},{"post_id":"ckxuciv3w006hj7jf6rsyhlq4","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3y0072j7jf56595j3b"},{"post_id":"ckxuciv3w006kj7jf2uut8q3e","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3y0074j7jfhkcv02sx"},{"post_id":"ckxuciv3w006kj7jf2uut8q3e","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3y0075j7jfduluc8i9"},{"post_id":"ckxuciv3w006nj7jfdvk6e9hg","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3y0076j7jf43ib3ht6"},{"post_id":"ckxuciv3w006nj7jfdvk6e9hg","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3y0077j7jf2z86hsfc"},{"post_id":"ckxuciv3w006qj7jf62yt0nx1","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3y0078j7jfe49z6nhs"},{"post_id":"ckxuciv3w006qj7jf62yt0nx1","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3y0079j7jfa22c2vze"},{"post_id":"ckxuciv3x006tj7jffk7s9fxs","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3y007aj7jf4xyh07st"},{"post_id":"ckxuciv3x006tj7jffk7s9fxs","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3y007bj7jf337d90sk"},{"post_id":"ckxuciv3x006wj7jf5o3mdxjz","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv3y007cj7jf90exgqyr"},{"post_id":"ckxuciv3x006wj7jf5o3mdxjz","tag_id":"ckx1ty4rm009g7jjf5fc20haj","_id":"ckxuciv3y007dj7jfhz3q05wf"},{"post_id":"ckxuciv40007fj7jf4m4he45a","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuciv41007hj7jf4ewt81rk"},{"post_id":"ckxuciv42007jj7jfeisc0b61","tag_id":"ckx1ty4r7004b7jjfaowmhszm","_id":"ckxuciv42007kj7jfa5ss0t79"},{"post_id":"ckxuciv42007jj7jfeisc0b61","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuciv42007lj7jfcac28wer"},{"post_id":"ckxuckd1m0000nyjfeudz5wxw","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuckd1o0002nyjf4q8acy45"},{"post_id":"ckxuckd1n0001nyjf16vbar54","tag_id":"ckx1ty4rl008u7jjfghr5bzow","_id":"ckxuckd1p0004nyjf1zqi5bus"},{"post_id":"ckxuckd1n0001nyjf16vbar54","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuckd1q0007nyjf909q46cj"},{"post_id":"ckxuckd1o0003nyjfhwnc6rs9","tag_id":"ckx1ty4rl008r7jjf49lf7hpy","_id":"ckxuckd1q000anyjf69bcb3wc"},{"post_id":"ckxuckd1p0005nyjf45ztduxh","tag_id":"ckx1ty4qo00057jjf94snc9fr","_id":"ckxuckd1r000cnyjfcmw3e7ps"},{"post_id":"ckxuckd1p0005nyjf45ztduxh","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuckd1r000enyjf65didcyn"},{"post_id":"ckxuckd1p0005nyjf45ztduxh","tag_id":"ckx1ty4rl008x7jjfg8qfhj0w","_id":"ckxuckd1r000gnyjf6fk18o4a"},{"post_id":"ckxuckd1p0005nyjf45ztduxh","tag_id":"ckx1ty4rl00907jjf8ki3go7i","_id":"ckxuckd1r000hnyjf365t8sj2"},{"post_id":"ckxuckd1q0008nyjf67mccw94","tag_id":"ckx1ty4rl00947jjfc1yx08t0","_id":"ckxuckd1r000inyjfbmok89c7"},{"post_id":"ckxuckd1r000jnyjfb28z5vsk","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuckd1s000lnyjffu8258qu"},{"post_id":"ckxuckd1r000jnyjfb28z5vsk","tag_id":"ckx1ty4r0002i7jjf3p5y0vfc","_id":"ckxuckd1s000mnyjfc42g9fy6"},{"post_id":"ckxuckd1r000jnyjfb28z5vsk","tag_id":"ckx1ty4rj007f7jjfg3po76kb","_id":"ckxuckd1s000onyjf5kj5dsty"},{"post_id":"ckxuckd1r000knyjfbuv6ebye","tag_id":"ckx1ty4qq000d7jjf9hpb6t2m","_id":"ckxuckd1s000qnyjf6awz7rke"},{"post_id":"ckyzab6b30002kcjf695i8yjq","tag_id":"ckx1ty4rj007f7jjfg3po76kb","_id":"ckyzac2kn0008kcjfb0r1hr5r"},{"post_id":"ckyzab6b30002kcjf695i8yjq","tag_id":"ckx1ty4re00637jjfepvs3704","_id":"ckyzac2ko0009kcjfbjp2deec"}],"Tag":[{"name":"JavaScript","_id":"ckx1ty4qo00057jjf94snc9fr"},{"name":"前端","_id":"ckx1ty4qq000d7jjf9hpb6t2m"},{"name":"CSS&HTML","_id":"ckx1ty4qw001g7jjfemph873l"},{"name":"Vue","_id":"ckx1ty4qz00297jjff6baeb8t"},{"name":"踩坑","_id":"ckx1ty4r0002i7jjf3p5y0vfc"},{"name":"React","_id":"ckx1ty4r7004b7jjfaowmhszm"},{"name":"NodeJS","_id":"ckx1ty4r9004w7jjfe65g2m4a"},{"name":"GULP","_id":"ckx1ty4re005w7jjf2dujh4u5"},{"name":"Git","_id":"ckx1ty4re00637jjfepvs3704"},{"name":"工具","_id":"ckx1ty4rh006x7jjf5y061mjr"},{"name":"zsh","_id":"ckx1ty4rh00737jjf0ifzb4i2"},{"name":"网络","_id":"ckx1ty4rj00767jjf9yvq8ew1"},{"name":"Hexo","_id":"ckx1ty4rj007f7jjfg3po76kb"},{"name":"hexo","_id":"ckx1ty4rj007l7jjf6eblftuc"},{"name":"Nginx","_id":"ckx1ty4rk007o7jjffpgah60k"},{"name":"前端下载","_id":"ckx1ty4rk007t7jjf6z7chf8c"},{"name":"浏览器存储","_id":"ckx1ty4rk007w7jjf3v6g7j8l"},{"name":"Travis","_id":"ckx1ty4rk00867jjfffq22b1j"},{"name":"Linux","_id":"ckx1ty4rk00897jjf6qie8zzu"},{"name":"CICD","_id":"ckx1ty4rk008b7jjf2why7cid"},{"name":"Echarts","_id":"ckx1ty4rl008i7jjf1hn7a2ck"},{"name":"V-Charts","_id":"ckx1ty4rl008l7jjfdp75ee93"},{"name":"Highcharts","_id":"ckx1ty4rl008n7jjf441xfj21"},{"name":"正则表达式","_id":"ckx1ty4rl008r7jjf49lf7hpy"},{"name":"小程序","_id":"ckx1ty4rl008u7jjfghr5bzow"},{"name":"跨平台","_id":"ckx1ty4rl008x7jjfg8qfhj0w"},{"name":"scriptable","_id":"ckx1ty4rl00907jjf8ki3go7i"},{"name":"GIHUTB","_id":"ckx1ty4rl00947jjfc1yx08t0"},{"name":"读书笔记","_id":"ckx1ty4rm00977jjf4ymmeqd9"},{"name":"日本文学","_id":"ckx1ty4rm009a7jjfesqua2kq"},{"name":"数据结构","_id":"ckx1ty4rm009g7jjf5fc20haj"},{"name":"总结","_id":"ckx1ty4rn00a37jjf6ucu8fry"},{"name":"随笔","_id":"ckx1ty4rn00a67jjfc3y7ggsn"},{"name":"switch","_id":"ckx1ty4ro00ai7jjfcwqw3fsn"},{"name":"旅游","_id":"ckx1ty4ro00am7jjf2dj9huw5"},{"name":"postcss","_id":"ckxu393ol0001nmjf7zbvg38p"},{"name":"css","_id":"ckxu393oq0003nmjf9b9mb3iv"},{"name":"tailwindcss","_id":"ckxu393or0004nmjf01jhfopm"},{"name":"技术笔记","_id":"ckyzabnu10004kcjf36963aev"}]}}